// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.task_initjobmonitoring_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.RFMUtils;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.JobGlobals;
import routines.DataUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Task_InitJobMonitoring Purpose: Initializes job monitoring information<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Task_InitJobMonitoring implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
		}

public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Task_InitJobMonitoring";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_p_7PsOO8EeaWkuX0ROpk9A", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Task_InitJobMonitoring.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Task_InitJobMonitoring.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class get_job_idStruct implements routines.system.IPersistableRow<get_job_idStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long job_id;

				public Long getJob_id () {
					return this.job_id;
				}
				
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String hostname;

				public String getHostname () {
					return this.hostname;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date run_date;

				public java.util.Date getRun_date () {
					return this.run_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.job_id == null) ? 0 : this.job_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final get_job_idStruct other = (get_job_idStruct) obj;
		
						if (this.job_id == null) {
							if (other.job_id != null)
								return false;
						
						} else if (!this.job_id.equals(other.job_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(get_job_idStruct other) {

		other.job_id = this.job_id;
	            other.moment = this.moment;
	            other.root_pid = this.root_pid;
	            other.system_pid = this.system_pid;
	            other.hostname = this.hostname;
	            other.username = this.username;
	            other.run_date = this.run_date;
	            
	}

	public void copyKeysDataTo(get_job_idStruct other) {

		other.job_id = this.job_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.job_id = null;
           				} else {
           			    	this.job_id = dis.readLong();
           				}
					
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.hostname = readString(dis);
					
					this.username = readString(dis);
					
					this.run_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.job_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.job_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.hostname,dos);
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.run_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_id="+String.valueOf(job_id));
		sb.append(",moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",hostname="+hostname);
		sb.append(",username="+username);
		sb.append(",run_date="+String.valueOf(run_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(get_job_idStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.job_id, other.job_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class inserted_recordStruct implements routines.system.IPersistableRow<inserted_recordStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long job_id;

				public Long getJob_id () {
					return this.job_id;
				}
				
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String hostname;

				public String getHostname () {
					return this.hostname;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date run_date;

				public java.util.Date getRun_date () {
					return this.run_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.job_id == null) ? 0 : this.job_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final inserted_recordStruct other = (inserted_recordStruct) obj;
		
						if (this.job_id == null) {
							if (other.job_id != null)
								return false;
						
						} else if (!this.job_id.equals(other.job_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(inserted_recordStruct other) {

		other.job_id = this.job_id;
	            other.moment = this.moment;
	            other.root_pid = this.root_pid;
	            other.system_pid = this.system_pid;
	            other.hostname = this.hostname;
	            other.username = this.username;
	            other.run_date = this.run_date;
	            
	}

	public void copyKeysDataTo(inserted_recordStruct other) {

		other.job_id = this.job_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.job_id = null;
           				} else {
           			    	this.job_id = dis.readLong();
           				}
					
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.hostname = readString(dis);
					
					this.username = readString(dis);
					
					this.run_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.job_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.job_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.hostname,dos);
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.run_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_id="+String.valueOf(job_id));
		sb.append(",moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",hostname="+hostname);
		sb.append(",username="+username);
		sb.append(",run_date="+String.valueOf(run_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(inserted_recordStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.job_id, other.job_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class new_job_recordStruct implements routines.system.IPersistableRow<new_job_recordStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Long job_id;

				public Long getJob_id () {
					return this.job_id;
				}
				
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String hostname;

				public String getHostname () {
					return this.hostname;
				}
				
			    public String username;

				public String getUsername () {
					return this.username;
				}
				
			    public java.util.Date run_date;

				public java.util.Date getRun_date () {
					return this.run_date;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.job_id == null) ? 0 : this.job_id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final new_job_recordStruct other = (new_job_recordStruct) obj;
		
						if (this.job_id == null) {
							if (other.job_id != null)
								return false;
						
						} else if (!this.job_id.equals(other.job_id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(new_job_recordStruct other) {

		other.job_id = this.job_id;
	            other.moment = this.moment;
	            other.root_pid = this.root_pid;
	            other.system_pid = this.system_pid;
	            other.hostname = this.hostname;
	            other.username = this.username;
	            other.run_date = this.run_date;
	            
	}

	public void copyKeysDataTo(new_job_recordStruct other) {

		other.job_id = this.job_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.job_id = null;
           				} else {
           			    	this.job_id = dis.readLong();
           				}
					
					this.moment = readDate(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.hostname = readString(dis);
					
					this.username = readString(dis);
					
					this.run_date = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.job_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.job_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.hostname,dos);
					
					// String
				
						writeString(this.username,dos);
					
					// java.util.Date
				
						writeDate(this.run_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_id="+String.valueOf(job_id));
		sb.append(",moment="+String.valueOf(moment));
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",hostname="+hostname);
		sb.append(",username="+username);
		sb.append(",run_date="+String.valueOf(run_date));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(new_job_recordStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.job_id, other.job_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		new_job_recordStruct new_job_record = new new_job_recordStruct();
inserted_recordStruct inserted_record = new inserted_recordStruct();
get_job_idStruct get_job_id = new get_job_idStruct();





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tRedshiftInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("inserted_record" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFlowToIterate_1 = 0;
		
    	class BytesLimit65535_tFlowToIterate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("new_job_record" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_info";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 1;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 = conn_tRedshiftOutput_1.prepareStatement("INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"root_pid\",\"system_pid\",\"hostname\",\"username\",\"run_date\") VALUES (?,?,?,?,?,?)");

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		new_job_record.job_id = null;        	            	
    	            	        	            	
    	            		new_job_record.moment = TalendDate.getCurrentDate();
    	            	        	            	
    	            		new_job_record.root_pid = rootPid;
    	            	        	            	
    	            		new_job_record.system_pid = StatCatcherUtils.getPid();
    	            	        	            	
    	            		new_job_record.hostname = java.net.InetAddress.getLocalHost().getHostName();
    	            	        	            	
    	            		new_job_record.username = System.getProperty("user.name", "na");
    	            	        	            	
    	            		new_job_record.run_date = DateUtils.runDate(context.RunDate);
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//new_job_record
			//new_job_record


			
				if(execStat){
					runStat.updateStatOnConnection("new_job_record"+iterateId,1, 1);
				} 
			

		



            inserted_record = null;
        whetherReject_tRedshiftOutput_1 = false;
						if(new_job_record.moment != null) {
pstmt_tRedshiftOutput_1.setTimestamp(1, new java.sql.Timestamp(new_job_record.moment.getTime()));
} else {
pstmt_tRedshiftOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
}

						if(new_job_record.root_pid == null) {
pstmt_tRedshiftOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tRedshiftOutput_1.setString(2, new_job_record.root_pid);
}

						if(new_job_record.system_pid == null) {
pstmt_tRedshiftOutput_1.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tRedshiftOutput_1.setLong(3, new_job_record.system_pid);
}

						if(new_job_record.hostname == null) {
pstmt_tRedshiftOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tRedshiftOutput_1.setString(4, new_job_record.hostname);
}

						if(new_job_record.username == null) {
pstmt_tRedshiftOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tRedshiftOutput_1.setString(5, new_job_record.username);
}

						if(new_job_record.run_date != null) {
pstmt_tRedshiftOutput_1.setTimestamp(6, new java.sql.Timestamp(new_job_record.run_date.getTime()));
} else {
pstmt_tRedshiftOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}


                                    try {
                                        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
                                        nb_line_tRedshiftOutput_1++;
                                    } catch(java.lang.Exception e) {
                                        whetherReject_tRedshiftOutput_1 = true;
                                                System.err.print(e.getMessage());
                                    }
            if(!whetherReject_tRedshiftOutput_1) {
                            inserted_record = new inserted_recordStruct();
                                inserted_record.job_id = new_job_record.job_id;
                                inserted_record.moment = new_job_record.moment;
                                inserted_record.root_pid = new_job_record.root_pid;
                                inserted_record.system_pid = new_job_record.system_pid;
                                inserted_record.hostname = new_job_record.hostname;
                                inserted_record.username = new_job_record.username;
                                inserted_record.run_date = new_job_record.run_date;
            }
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */
// Start of branch "inserted_record"
if(inserted_record != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

			//inserted_record
			//inserted_record


			
				if(execStat){
					runStat.updateStatOnConnection("inserted_record"+iterateId,1, 1);
				} 
			

		


    	            
            globalMap.put("inserted_record.job_id", inserted_record.job_id);
    	            
            globalMap.put("inserted_record.moment", inserted_record.moment);
    	            
            globalMap.put("inserted_record.root_pid", inserted_record.root_pid);
    	            
            globalMap.put("inserted_record.system_pid", inserted_record.system_pid);
    	            
            globalMap.put("inserted_record.hostname", inserted_record.hostname);
    	            
            globalMap.put("inserted_record.username", inserted_record.username);
    	            
            globalMap.put("inserted_record.run_date", inserted_record.run_date);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	NB_ITERATE_tRedshiftInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("get_job_id", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tRedshiftInput_1);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("get_job_id" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
				String driverClass_tRedshiftInput_1 = "com.amazon.redshift.jdbc41.Driver";
			    java.lang.Class.forName(driverClass_tRedshiftInput_1);
			   	String dbUser_tRedshiftInput_1 = context.Redshift_Monitoring_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tRedshiftInput_1 = context.Redshift_Monitoring_Password; 
			   	
		        String dbPwd_tRedshiftInput_1 = decryptedPassword_tRedshiftInput_1;
		        
				
			if (0 > 0) {
				java.io.Writer output_tRedshiftInput_1 = new java.io.FileWriter("D:/Apps/Telend-V6.3.0/workspace/redshift-jdbc.log", true);
				java.sql.DriverManager.setLogWriter(new java.io.PrintWriter(output_tRedshiftInput_1,true));
			}
			
			StringBuilder sbuilder_tRedshiftInput_1 = new StringBuilder();
			sbuilder_tRedshiftInput_1.append("jdbc:redshift://").append(context.Redshift_Monitoring_Server).append(":").append(context.Redshift_Monitoring_Port).append("/").append(context.Redshift_Monitoring_Database).append("?loglevel=").append(0);
			
        		sbuilder_tRedshiftInput_1.append("&").append(context.Redshift_Monitoring_AdditionalParams);
        	
            String url_tRedshiftInput_1 = sbuilder_tRedshiftInput_1.toString();
				
				conn_tRedshiftInput_1 = java.sql.DriverManager.getConnection(url_tRedshiftInput_1,dbUser_tRedshiftInput_1,dbPwd_tRedshiftInput_1);
		        
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();

		    String dbquery_tRedshiftInput_1 = "SELECT \n       job_id\nFROM	\""+context.Redshift_Monitoring_Schema+"\".job_info\nWHERE "
+ " root_pid=" + StringHandling.SQUOTE(new_job_record.root_pid)
+ " AND system_pid=" + new_job_record.system_pid
+ " AND hostname=" + StringHandling.SQUOTE(new_job_record.hostname)
+ " AND username=" + StringHandling.SQUOTE(new_job_record.username)
;
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								get_job_id.job_id = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(1) != null) {
                get_job_id.job_id = rs_tRedshiftInput_1.getLong(1);
            } else {
                    get_job_id.job_id = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 2) {
								get_job_id.moment = null;
							} else {
										
			get_job_id.moment = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 2);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 3) {
								get_job_id.root_pid = null;
							} else {
	                         		
        	get_job_id.root_pid = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 3, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 4) {
								get_job_id.system_pid = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(4) != null) {
                get_job_id.system_pid = rs_tRedshiftInput_1.getLong(4);
            } else {
                    get_job_id.system_pid = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 5) {
								get_job_id.hostname = null;
							} else {
	                         		
        	get_job_id.hostname = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 5, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 6) {
								get_job_id.username = null;
							} else {
	                         		
        	get_job_id.username = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 6, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 7) {
								get_job_id.run_date = null;
							} else {
										
			get_job_id.run_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 7);
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//get_job_id
			//get_job_id


			
				if(execStat){
					runStat.updateStatOnConnection("get_job_id"+iterateId,1, 1);
				} 
			

		

    // Initialize the Job Id
JobGlobals.setJobId(get_job_id.job_id);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

		if(conn_tRedshiftInput_1 != null && !conn_tRedshiftInput_1.isClosed()) {
			
			conn_tRedshiftInput_1.close();
			
		}
}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());




/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("get_job_id"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tRedshiftInput_1);
						}				
					





} // End of branch "inserted_record"







	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("new_job_record"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("inserted_record"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_InitJobMonitoring) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_2", false);
		start_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_2 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_2().limitLog4jByte();





String dbschema_tRedshiftOutput_2 = null;
	dbschema_tRedshiftOutput_2 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_2 = "job_stats";
String schemaForSearch_tRedshiftOutput_2 = null;
String tableForSearch_tRedshiftOutput_2 = tableName_tRedshiftOutput_2;
    if(dbschema_tRedshiftOutput_2 != null && dbschema_tRedshiftOutput_2.trim().length() > 0) {
    	tableName_tRedshiftOutput_2 = dbschema_tRedshiftOutput_2 + "\".\"" + tableName_tRedshiftOutput_2;
    }

int nb_line_tRedshiftOutput_2 = 0;
int nb_line_update_tRedshiftOutput_2 = 0;
int nb_line_inserted_tRedshiftOutput_2 = 0;
int nb_line_deleted_tRedshiftOutput_2 = 0;
int nb_line_rejected_tRedshiftOutput_2 = 0;

int deletedCount_tRedshiftOutput_2=0;
int updatedCount_tRedshiftOutput_2=0;
int insertedCount_tRedshiftOutput_2=0;
int rejectedCount_tRedshiftOutput_2=0;

java.util.Calendar calendar_tRedshiftOutput_2 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
calendar_tRedshiftOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
long date_tRedshiftOutput_2;

boolean whetherReject_tRedshiftOutput_2 = false;


java.sql.Connection conn_tRedshiftOutput_2 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_2 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_2 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_2 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_2 = decryptedPassword_tRedshiftOutput_2;
    conn_tRedshiftOutput_2 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_2,dbUser_tRedshiftOutput_2,dbPwd_tRedshiftOutput_2);
	
	resourceMap.put("conn_tRedshiftOutput_2", conn_tRedshiftOutput_2);
    conn_tRedshiftOutput_2.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_2 = 10000;
        int commitCounter_tRedshiftOutput_2 = 0;
int count_tRedshiftOutput_2=0;
	
			int rowCounttRedshiftOutput_2 = 0;
			class BufferLine_tRedshiftOutput_2 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_2 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_2 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_2 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_2 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_2 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_2 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_2 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_2 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_2 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_2 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_2 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_2> exInsertColValueListtRedshiftOutput_2 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_2 exInsertColValuetRedshiftOutput_2 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_2 = new StringBuilder();
			for(int i_tRedshiftOutput_2=0;i_tRedshiftOutput_2 < 100;i_tRedshiftOutput_2++){
				 extendInsertValueStmt_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_2!=100-1) extendInsertValueStmt_tRedshiftOutput_2.append(",");
			}

			String insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_2.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);

 



/**
 * [tRedshiftOutput_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_2 = false;
				int countertRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_2 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
									pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_2.setTimestamp(countertRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
								}
							}else{

								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_2++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.project);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.context);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.origin);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.duration);
							

							}

						
						countertRedshiftOutput_2++;
						
				exInsertColValuetRedshiftOutput_2 = new BufferLine_tRedshiftOutput_2();
                    	exInsertColValuetRedshiftOutput_2
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_2.add(exInsertColValuetRedshiftOutput_2);
				rowCounttRedshiftOutput_2++;

                nb_line_tRedshiftOutput_2++;

				if(rowCounttRedshiftOutput_2 == 100){
	                insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	                exInsertColValueListtRedshiftOutput_2.clear();
	                rowCounttRedshiftOutput_2 = 0;
					countertRedshiftOutput_2=1;
				}
                commitCounter_tRedshiftOutput_2++;

                if(commitEvery_tRedshiftOutput_2<=commitCounter_tRedshiftOutput_2) {
                                   conn_tRedshiftOutput_2.commit();
                                   commitCounter_tRedshiftOutput_2=0;
                }

 


	tos_count_tRedshiftOutput_2++;

/**
 * [tRedshiftOutput_2 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	





	    if(rowCounttRedshiftOutput_2!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_2 = new StringBuilder();
	        for(int i_tRedshiftOutput_2=0 ; i_tRedshiftOutput_2 < rowCounttRedshiftOutput_2 ; i_tRedshiftOutput_2++){
				extendInsertValue_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_2 != rowCounttRedshiftOutput_2 - 1) extendInsertValue_tRedshiftOutput_2.append(",");
	        }

				insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_2.toString();
        	pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);
			rowCounttRedshiftOutput_2 = 0;
	        for(BufferLine_tRedshiftOutput_2 bufferLtRedshiftOutput_2 : exInsertColValueListtRedshiftOutput_2){
				int counttRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_2.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_2 = bufferLtRedshiftOutput_2.moment.getTime();
						if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
							pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_2.setTimestamp(counttRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
						}
					}else{

						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.father_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.father_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.root_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.root_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.system_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.system_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.project==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.project);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_repository_id==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_version==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_version);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.context==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.context);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.origin==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.origin);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message_type==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message_type);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.duration==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.duration);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    

	            rowCounttRedshiftOutput_2++;
	        }
	        insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_2 != null) {
                            pstmt_tRedshiftOutput_2.close();
                        }

		if (commitCounter_tRedshiftOutput_2 > 0) {
			
			conn_tRedshiftOutput_2.commit();
			
		}
		
    	conn_tRedshiftOutput_2 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_2", true);
    	
	nb_line_deleted_tRedshiftOutput_2=nb_line_deleted_tRedshiftOutput_2+ deletedCount_tRedshiftOutput_2;
	nb_line_update_tRedshiftOutput_2=nb_line_update_tRedshiftOutput_2 + updatedCount_tRedshiftOutput_2;
	nb_line_inserted_tRedshiftOutput_2=nb_line_inserted_tRedshiftOutput_2 + insertedCount_tRedshiftOutput_2;
	nb_line_rejected_tRedshiftOutput_2=nb_line_rejected_tRedshiftOutput_2 + rejectedCount_tRedshiftOutput_2;
	
        globalMap.put("tRedshiftOutput_2_NB_LINE",nb_line_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_2", true);
end_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());




/**
 * [tRedshiftOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_2")==null){
			if(resourceMap.get("conn_tRedshiftOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_2 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_2");
					
					
            		
					ctn_tRedshiftOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_2) {
					String errorMessage_tRedshiftOutput_2 = "failed to close the connection in tRedshiftOutput_2 :" + sqlEx_tRedshiftOutput_2.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_2);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Task_InitJobMonitoring Task_InitJobMonitoringClass = new Task_InitJobMonitoring();

        int exitCode = Task_InitJobMonitoringClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Task_InitJobMonitoring.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/task_initjobmonitoring_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Monitoring_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob



        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFixedFlowInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFixedFlowInput_1) {
globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

e_tFixedFlowInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Task_InitJobMonitoring");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     109574 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:38 PM CDT
 ************************************************************************************************/