// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.task_clearexpungedmemberdata_0_1;

import routines.Logging;
import routines.LocationUtils;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.NotificationUtils;
import routines.ConfigFile;
import routines.RFMUtils;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.JobGlobals;
import routines.DataUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_2
	import java.lang.*;


@SuppressWarnings("unused")

/**
 * Job: Task_ClearExpungedMemberData Purpose: Clear all member data that has been expunged<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Task_ClearExpungedMemberData implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(MemberToExpunge != null){
				
					this.setProperty("MemberToExpunge", MemberToExpunge.toString());
				
			}
			
		}

public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public Long MemberToExpunge;
public Long getMemberToExpunge(){
	return this.MemberToExpunge;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Task_ClearExpungedMemberData";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Task_ClearExpungedMemberData.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Task_ClearExpungedMemberData.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Log_ExpungedComplete");
Logging.componentName(jobName, "tWarn_2", "Log_MemberToBeExpunged");
Logging.componentName(jobName, "tWarn_3", "Log_InvalidMemberID");
Logging.componentName(jobName, "tWarn_4", "Log_NoNewMemberToExpunge");
Logging.componentName(jobName, "tWarn_5", "Log_MemberAlreadyExpunged");
Logging.componentName(jobName, "tWarn_6", "Log_InvalidMember");
Logging.componentName(jobName, "tWarn_7", "Log_AccountUpdateComplete");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tJavaFlex_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class external_configStruct implements routines.system.IPersistableRow<external_configStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(external_configStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		external_configStruct external_config = new external_configStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("external_config" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// Load the config file and send its properties to the Context Loader
java.util.Map<String, String> externalConfig = ConfigFile.loadConfig(jobName, context_param);
for(String key: externalConfig.keySet()) {


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// loop
external_config.key = key;
external_config.value = externalConfig.get(key);

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//external_config
			//external_config


			
				if(execStat){
					runStat.updateStatOnConnection("external_config"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (external_config.key != null){
                          tmp_key_tContextLoad_1 = external_config.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          external_config.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(external_config.key != null) {
                    key_tContextLoad_1 =
                        external_config.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(external_config.value != null) {
                    value_tContextLoad_1 =
                        external_config.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ("Redshift_Marketing_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "Redshift_Marketing_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "MemberToExpunge".equals(key_tContextLoad_1))
        {

               context.MemberToExpunge=Long.parseLong(value_tContextLoad_1);

        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */



	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("Redshift_Marketing_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("external_config"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRedshiftConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_2", false);
		start_Hash.put("tRedshiftConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_2";

	
		int tos_count_tRedshiftConnection_2 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_2().limitLog4jByte();


	
    			String url_tRedshiftConnection_2 = "jdbc:redshift://" + context.Redshift_Marketing_Server + ":" + context.Redshift_Marketing_Port + "/" + context.Redshift_Marketing_Database + "?" + context.Redshift_Marketing_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_2 = context.Redshift_Marketing_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_2 = context.Redshift_Marketing_Password; 
		String dbPwd_tRedshiftConnection_2 = decryptedPassword_tRedshiftConnection_2;
	

	java.sql.Connection conn_tRedshiftConnection_2 = null;
	
					String driverClass_tRedshiftConnection_2 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_2);
		
		conn_tRedshiftConnection_2 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_2,dbUser_tRedshiftConnection_2,dbPwd_tRedshiftConnection_2);

		globalMap.put("conn_tRedshiftConnection_2", conn_tRedshiftConnection_2);
	if (null != conn_tRedshiftConnection_2) {
		
			conn_tRedshiftConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_2",context.Redshift_Marketing_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_2",conn_tRedshiftConnection_2);

 



/**
 * [tRedshiftConnection_2 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 


	tos_count_tRedshiftConnection_2++;

/**
 * [tRedshiftConnection_2 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 

ok_Hash.put("tRedshiftConnection_2", true);
end_Hash.put("tRedshiftConnection_2", System.currentTimeMillis());

   			if (context.MemberToExpunge != null && !(context.MemberToExpunge+"").isEmpty()
) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("valid_member_id_in", 0, "true");
					}
				
    			tRedshiftInput_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("valid_member_id_in", 0, "false");
					}   	 
   				}
   			if (context.MemberToExpunge == null && (context.getProperty("MemberToExpunge") != null && !context.getProperty("MemberToExpunge").isEmpty())) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("not_valid_member_id", 0, "true");
					}
				
    			tWarn_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("not_valid_member_id", 0, "false");
					}   	 
   				}



/**
 * [tRedshiftConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 



/**
 * [tRedshiftConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class exist_expungedStruct implements routines.system.IPersistableRow<exist_expungedStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];

	
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData) {

        	try {

        		int length = 0;
		
						this.COUNT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.COUNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(exist_expungedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		exist_expungedStruct exist_expunged = new exist_expungedStruct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("exist_expunged" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_4 = 0;
		
    	class BytesLimit65535_tJavaRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_4().limitLog4jByte();

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_2", false);
		start_Hash.put("tRedshiftInput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_2";

	
		int tos_count_tRedshiftInput_2 = 0;
		
    	class BytesLimit65535_tRedshiftInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_2 = 0;
		    java.sql.Connection conn_tRedshiftInput_2 = null;
		        conn_tRedshiftInput_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
				
		    
			java.sql.Statement stmt_tRedshiftInput_2 = conn_tRedshiftInput_2.createStatement();

		    String dbquery_tRedshiftInput_2 = StringUtils.templateString(
"\nSELECT COUNT(*) as COUNT\nFROM {{marketing.schema}}.l_expunged_member\nWHERE member_id={{member_id}}\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"member_id", context.MemberToExpunge+""
);
			

                       globalMap.put("tRedshiftInput_2_QUERY",dbquery_tRedshiftInput_2);

		    java.sql.ResultSet rs_tRedshiftInput_2 = null;
		try{
		    rs_tRedshiftInput_2 = stmt_tRedshiftInput_2.executeQuery(dbquery_tRedshiftInput_2);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_2 = rs_tRedshiftInput_2.getMetaData();
		    int colQtyInRs_tRedshiftInput_2 = rsmd_tRedshiftInput_2.getColumnCount();

		    String tmpContent_tRedshiftInput_2 = null;
		    
		    
		    while (rs_tRedshiftInput_2.next()) {
		        nb_line_tRedshiftInput_2++;
		        
							if(colQtyInRs_tRedshiftInput_2 < 1) {
								exist_expunged.COUNT = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(1) != null) {
                exist_expunged.COUNT = rs_tRedshiftInput_2.getInt(1);
            } else {
                    exist_expunged.COUNT = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_2 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 


	tos_count_tRedshiftInput_2++;

/**
 * [tRedshiftInput_2 main ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

			//exist_expunged
			//exist_expunged


			
				if(execStat){
					runStat.updateStatOnConnection("exist_expunged"+iterateId,1, 1);
				} 
			

		

    


    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */



	
	/**
	 * [tRedshiftInput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

	}
}finally{
	stmt_tRedshiftInput_2.close();

}
globalMap.put("tRedshiftInput_2_NB_LINE",nb_line_tRedshiftInput_2);

 

ok_Hash.put("tRedshiftInput_2", true);
end_Hash.put("tRedshiftInput_2", System.currentTimeMillis());




/**
 * [tRedshiftInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("exist_expunged"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

   			if (exist_expunged.COUNT > 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_exist_expunged", 0, "true");
					}
				
    			tWarn_5Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_exist_expunged", 0, "false");
					}   	 
   				}
   			if (exist_expunged.COUNT == 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("memer_not_exist_expunged", 0, "true");
					}
				
    			tRedshiftInput_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("memer_not_exist_expunged", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 



/**
 * [tRedshiftInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		
    	class BytesLimit65535_tWarn_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_5().limitLog4jByte();

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","The member has already been expunged.","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 3, "The member has already been expunged.", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_5_WARN_MESSAGES", "The member has already been expunged."); 
globalMap.put("tWarn_5_WARN_PRIORITY", 3);
globalMap.put("tWarn_5_WARN_CODE", 42);


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	


public static class valid_memberStruct implements routines.system.IPersistableRow<valid_memberStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];

	
			    public Integer COUNT;

				public Integer getCOUNT () {
					return this.COUNT;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData) {

        	try {

        		int length = 0;
		
						this.COUNT = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.COUNT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNT="+String.valueOf(COUNT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(valid_memberStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		valid_memberStruct valid_member = new valid_memberStruct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("valid_member" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_3", false);
		start_Hash.put("tRedshiftInput_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_3";

	
		int tos_count_tRedshiftInput_3 = 0;
		
    	class BytesLimit65535_tRedshiftInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_3 = 0;
		    java.sql.Connection conn_tRedshiftInput_3 = null;
		        conn_tRedshiftInput_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
				
		    
			java.sql.Statement stmt_tRedshiftInput_3 = conn_tRedshiftInput_3.createStatement();

		    String dbquery_tRedshiftInput_3 = StringUtils.templateString(
"\nSELECT COUNT(*) as COUNT\nFROM {{marketing.schema}}.r_member\nWHERE member_id={{member_id}}\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"member_id", context.MemberToExpunge+""
);
			

                       globalMap.put("tRedshiftInput_3_QUERY",dbquery_tRedshiftInput_3);

		    java.sql.ResultSet rs_tRedshiftInput_3 = null;
		try{
		    rs_tRedshiftInput_3 = stmt_tRedshiftInput_3.executeQuery(dbquery_tRedshiftInput_3);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_3 = rs_tRedshiftInput_3.getMetaData();
		    int colQtyInRs_tRedshiftInput_3 = rsmd_tRedshiftInput_3.getColumnCount();

		    String tmpContent_tRedshiftInput_3 = null;
		    
		    
		    while (rs_tRedshiftInput_3.next()) {
		        nb_line_tRedshiftInput_3++;
		        
							if(colQtyInRs_tRedshiftInput_3 < 1) {
								valid_member.COUNT = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(1) != null) {
                valid_member.COUNT = rs_tRedshiftInput_3.getInt(1);
            } else {
                    valid_member.COUNT = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_3 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 


	tos_count_tRedshiftInput_3++;

/**
 * [tRedshiftInput_3 main ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//valid_member
			//valid_member


			
				if(execStat){
					runStat.updateStatOnConnection("valid_member"+iterateId,1, 1);
				} 
			

		

    
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */



	
	/**
	 * [tRedshiftInput_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

	}
}finally{
	stmt_tRedshiftInput_3.close();

}
globalMap.put("tRedshiftInput_3_NB_LINE",nb_line_tRedshiftInput_3);

 

ok_Hash.put("tRedshiftInput_3", true);
end_Hash.put("tRedshiftInput_3", System.currentTimeMillis());




/**
 * [tRedshiftInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("valid_member"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

   			if (valid_member.COUNT > 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_is_valid", 0, "true");
					}
				
    			tRedshiftRow_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_is_valid", 0, "false");
					}   	 
   				}
   			if (valid_member.COUNT == 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_not_valid", 0, "true");
					}
				
    			tWarn_6Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("member_not_valid", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 



/**
 * [tRedshiftInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\nINSERT INTO {{marketing.schema}}.l_expunged_member VALUES ({{member_id}}, sysdate);\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"member_id", context.MemberToExpunge+""
);
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_6", false);
		start_Hash.put("tWarn_6", System.currentTimeMillis());
		
	
	currentComponent="tWarn_6";

	
		int tos_count_tWarn_6 = 0;
		
    	class BytesLimit65535_tWarn_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_6().limitLog4jByte();

 



/**
 * [tWarn_6 begin ] stop
 */
	
	/**
	 * [tWarn_6 main ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "INFO","","Invalid member","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_6", 3, "Invalid member", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_6_WARN_MESSAGES", "Invalid member"); 
globalMap.put("tWarn_6_WARN_PRIORITY", 3);
globalMap.put("tWarn_6_WARN_CODE", 42);


 


	tos_count_tWarn_6++;

/**
 * [tWarn_6 main ] stop
 */
	
	/**
	 * [tWarn_6 end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 

ok_Hash.put("tWarn_6", true);
end_Hash.put("tWarn_6", System.currentTimeMillis());




/**
 * [tWarn_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_6 finally ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		
    	class BytesLimit65535_tWarn_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_3().limitLog4jByte();

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Invalid member ID","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "Invalid member ID", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_3_WARN_MESSAGES", "Invalid member ID"); 
globalMap.put("tWarn_3_WARN_PRIORITY", 3);
globalMap.put("tWarn_3_WARN_CODE", 42);


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_2", false);
		start_Hash.put("tRedshiftClose_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_2";

	
		int tos_count_tRedshiftClose_2 = 0;
		
    	class BytesLimit65535_tRedshiftClose_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_2().limitLog4jByte();

 



/**
 * [tRedshiftClose_2 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	



	java.sql.Connection conn_tRedshiftClose_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
	if(conn_tRedshiftClose_2 != null && !conn_tRedshiftClose_2.isClosed())
	{
        conn_tRedshiftClose_2.close();
	}

 


	tos_count_tRedshiftClose_2++;

/**
 * [tRedshiftClose_2 main ] stop
 */
	
	/**
	 * [tRedshiftClose_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	

 

ok_Hash.put("tRedshiftClose_2", true);
end_Hash.put("tRedshiftClose_2", System.currentTimeMillis());




/**
 * [tRedshiftClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	

 



/**
 * [tRedshiftClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_2_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_3", false);
		start_Hash.put("tRedshiftRow_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_3";

	
		int tos_count_tRedshiftRow_3 = 0;
		
    	class BytesLimit65535_tRedshiftRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_3().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_3 = null;
	String query_tRedshiftRow_3 = "";
	boolean whetherReject_tRedshiftRow_3 = false;
				conn_tRedshiftRow_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
			
		java.sql.Statement stmt_tRedshiftRow_3 = conn_tRedshiftRow_3.createStatement();
	

 



/**
 * [tRedshiftRow_3 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

query_tRedshiftRow_3 = StringUtils.templateString(
"\n/* update account names if expunged member name is in account_name */\nUPDATE {{marketing.schema}}.r_account\n       SET account_name = 'Forgotten User'\n WHERE account_id IN (\n       /* first/last names & account IDs for each member in l_expunged_member */\n       WITH expunge_account AS (\n            SELECT a.member_id\n                          , b.account_id\n                          , c.first_name\n                          , c.last_name\n               FROM {{marketing.schema}}.l_expunged_member AS a\n                          LEFT JOIN {{marketing.schema}}.vw_r_account_admin AS b\n                          ON a.member_id = b.member_id\n\n                          LEFT JOIN {{marketing.schema}}.vw_r_member AS c\n                          ON a.member_id = c.member_id\n\n           UNION\n\n            SELECT a.member_id\n                   , b.account_id\n                   , c.first_name\n                   , c.last_name\n              FROM {{marketing.schema}}.l_expunged_member AS a\n                   LEFT JOIN {{marketing.schema}}.vw_r_account_member_map AS b\n                   ON a.member_id = b.member_id\n\n                   LEFT JOIN {{marketing.schema}}.vw_r_member AS c\n                   ON a.member_id = c.member_id\n       )\n\n        /* mark accounts to_forget */\n       , account_to_alter AS (\n          SELECT a.*\n                 , CASE\n                   WHEN b.account_name ILIKE '%' || a.first_name || '%' AND b.account_name ILIKE '%' || a.last_name || '%' THEN TRUE\n                   ELSE FALSE\n                   END AS to_forget\n            FROM expunge_account AS a\n                 LEFT JOIN {{marketing.schema}}.r_account AS b\n                 ON a.account_id = b.account_id\n       )\n\n       SELECT account_id\n         FROM account_to_alter\n        WHERE to_forget IS TRUE\n)\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
);
whetherReject_tRedshiftRow_3 = false;
globalMap.put("tRedshiftRow_3_QUERY",query_tRedshiftRow_3);
try {
		stmt_tRedshiftRow_3.execute(query_tRedshiftRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_3) {
		
	}
	

 


	tos_count_tRedshiftRow_3++;

/**
 * [tRedshiftRow_3 main ] stop
 */
	
	/**
	 * [tRedshiftRow_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

	
	stmt_tRedshiftRow_3.close();	

 

ok_Hash.put("tRedshiftRow_3", true);
end_Hash.put("tRedshiftRow_3", System.currentTimeMillis());




/**
 * [tRedshiftRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tWarn_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

 



/**
 * [tRedshiftRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_7", false);
		start_Hash.put("tWarn_7", System.currentTimeMillis());
		
	
	currentComponent="tWarn_7";

	
		int tos_count_tWarn_7 = 0;
		
    	class BytesLimit65535_tWarn_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_7().limitLog4jByte();

 



/**
 * [tWarn_7 begin ] stop
 */
	
	/**
	 * [tWarn_7 main ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread.currentThread().getId() + "", "WARN","","Completed Account Updates","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_7", 4, "Completed Account Updates", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_7_WARN_MESSAGES", "Completed Account Updates"); 
globalMap.put("tWarn_7_WARN_PRIORITY", 4);
globalMap.put("tWarn_7_WARN_CODE", 42);


 


	tos_count_tWarn_7++;

/**
 * [tWarn_7 main ] stop
 */
	
	/**
	 * [tWarn_7 end ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 

ok_Hash.put("tWarn_7", true);
end_Hash.put("tWarn_7", System.currentTimeMillis());




/**
 * [tWarn_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRedshiftInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_7 finally ] start
	 */

	

	
	
	currentComponent="tWarn_7";

	

 



/**
 * [tWarn_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[0];

	
			    public String table_name;

				public String getTable_name () {
					return this.table_name;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Task_ClearExpungedMemberData) {

        	try {

        		int length = 0;
		
					this.table_name = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.table_name,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("table_name="+table_name);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_5", false);
		start_Hash.put("tRedshiftInput_5", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_5";

	
		int tos_count_tRedshiftInput_5 = 0;
		
    	class BytesLimit65535_tRedshiftInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_5 = 0;
		    java.sql.Connection conn_tRedshiftInput_5 = null;
		        conn_tRedshiftInput_5 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
				
		    
			java.sql.Statement stmt_tRedshiftInput_5 = conn_tRedshiftInput_5.createStatement();

		    String dbquery_tRedshiftInput_5 = StringUtils.templateString(
"\nSELECT DISTINCT table_name\n   FROM information_schema.columns\nWHERE table_schema = '{{marketing.schema}}'\n     AND table_name NOT LIKE 'vw_%'\n     AND table_name <> 'l_expunged_member'\n     AND column_name = 'member_id'\n ORDER BY table_name\n",
"marketing.schema", context.Redshift_Marketing_Schema
);
			

                       globalMap.put("tRedshiftInput_5_QUERY",dbquery_tRedshiftInput_5);

		    java.sql.ResultSet rs_tRedshiftInput_5 = null;
		try{
		    rs_tRedshiftInput_5 = stmt_tRedshiftInput_5.executeQuery(dbquery_tRedshiftInput_5);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_5 = rs_tRedshiftInput_5.getMetaData();
		    int colQtyInRs_tRedshiftInput_5 = rsmd_tRedshiftInput_5.getColumnCount();

		    String tmpContent_tRedshiftInput_5 = null;
		    
		    
		    while (rs_tRedshiftInput_5.next()) {
		        nb_line_tRedshiftInput_5++;
		        
							if(colQtyInRs_tRedshiftInput_5 < 1) {
								row2.table_name = null;
							} else {
	                         		
        	row2.table_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_5, 1, false);
		                    }
					



 



/**
 * [tRedshiftInput_5 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_5 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

 


	tos_count_tRedshiftInput_5++;

/**
 * [tRedshiftInput_5 main ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

    // create "delete_query"
if (globalMap.get("delete_query") == null) {
	globalMap.put("delete_query", new StringBuilder());
}

StringBuilder sb = (StringBuilder)globalMap.get("delete_query");

// actual SQL delete query to generate
String query = StringUtils.templateString("BEGIN; DELETE FROM {{marketing.schema}}.\"{{table_name}}\" USING {{marketing.schema}}.\"l_expunged_member\" WHERE \"{{table_name}}\".\"member_id\" = \"l_expunged_member\".\"member_id\"; COMMIT;"
,
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"table_name", row2.table_name
);

// keep appending delete queries for each table
sb.append(query + "\n");
globalMap.put("delete_query", sb);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */



	
	/**
	 * [tRedshiftInput_5 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

	}
}finally{
	stmt_tRedshiftInput_5.close();

}
globalMap.put("tRedshiftInput_5_NB_LINE",nb_line_tRedshiftInput_5);

 

ok_Hash.put("tRedshiftInput_5", true);
end_Hash.put("tRedshiftInput_5", System.currentTimeMillis());




/**
 * [tRedshiftInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRedshiftRow_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_5 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

 



/**
 * [tRedshiftInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_4", false);
		start_Hash.put("tRedshiftRow_4", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_4";

	
		int tos_count_tRedshiftRow_4 = 0;
		
    	class BytesLimit65535_tRedshiftRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_4().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_4 = null;
	String query_tRedshiftRow_4 = "";
	boolean whetherReject_tRedshiftRow_4 = false;
				conn_tRedshiftRow_4 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
			
		java.sql.Statement stmt_tRedshiftRow_4 = conn_tRedshiftRow_4.createStatement();
	

 



/**
 * [tRedshiftRow_4 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_4 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

query_tRedshiftRow_4 = StringUtils.templateString(
((StringBuilder) globalMap.get("delete_query")).toString()
);
whetherReject_tRedshiftRow_4 = false;
globalMap.put("tRedshiftRow_4_QUERY",query_tRedshiftRow_4);
try {
		stmt_tRedshiftRow_4.execute(query_tRedshiftRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_4) {
		
	}
	

 


	tos_count_tRedshiftRow_4++;

/**
 * [tRedshiftRow_4 main ] stop
 */
	
	/**
	 * [tRedshiftRow_4 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

	
	stmt_tRedshiftRow_4.close();	

 

ok_Hash.put("tRedshiftRow_4", true);
end_Hash.put("tRedshiftRow_4", System.currentTimeMillis());




/**
 * [tRedshiftRow_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_4 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

 



/**
 * [tRedshiftRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "WARN","","Expungement Completed","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 4, "Expungement Completed", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Expungement Completed"); 
globalMap.put("tWarn_1_WARN_PRIORITY", 4);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Task_ClearExpungedMemberData Task_ClearExpungedMemberDataClass = new Task_ClearExpungedMemberData();

        int exitCode = Task_ClearExpungedMemberDataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Task_ClearExpungedMemberData.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/task_clearexpungedmemberdata_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("MemberToExpunge", "id_Long");
				
             try{
                 context.MemberToExpunge=routines.system.ParserUtils.parseTo_Long (context.getProperty("MemberToExpunge"));
             }catch(NumberFormatException e){
                 context.MemberToExpunge=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("MemberToExpunge")) {
                context.MemberToExpunge = (Long) parentContextMap.get("MemberToExpunge");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Marketing_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRedshiftRow_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRedshiftRow_3) {
globalMap.put("tRedshiftRow_3_SUBPROCESS_STATE", -1);

e_tRedshiftRow_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Task_ClearExpungedMemberData");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_2", globalMap.get("conn_tRedshiftConnection_2"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     132256 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:59:07 PM CDT
 ************************************************************************************************/