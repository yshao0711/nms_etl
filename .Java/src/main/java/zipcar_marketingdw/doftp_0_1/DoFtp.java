// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.doftp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: DoFtp Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class DoFtp implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(localDir != null){
				
					this.setProperty("localDir", localDir.toString());
				
			}
			
			if(remoteDir != null){
				
					this.setProperty("remoteDir", remoteDir.toString());
				
			}
			
			if(fileMask != null){
				
					this.setProperty("fileMask", fileMask.toString());
				
			}
			
			if(ftpMethod != null){
				
					this.setProperty("ftpMethod", ftpMethod.toString());
				
			}
			
			if(ftpHost != null){
				
					this.setProperty("ftpHost", ftpHost.toString());
				
			}
			
			if(ftpUser != null){
				
					this.setProperty("ftpUser", ftpUser.toString());
				
			}
			
			if(ftpPass != null){
				
					this.setProperty("ftpPass", ftpPass.toString());
				
			}
			
			if(ftpPort != null){
				
					this.setProperty("ftpPort", ftpPort.toString());
				
			}
			
		}

public String localDir;
public String getLocalDir(){
	return this.localDir;
}
public String remoteDir;
public String getRemoteDir(){
	return this.remoteDir;
}
public String fileMask;
public String getFileMask(){
	return this.fileMask;
}
public String ftpMethod;
public String getFtpMethod(){
	return this.ftpMethod;
}
public String ftpHost;
public String getFtpHost(){
	return this.ftpHost;
}
public String ftpUser;
public String getFtpUser(){
	return this.ftpUser;
}
public java.lang.String ftpPass;
public java.lang.String getFtpPass(){
	return this.ftpPass;
}
public Integer ftpPort;
public Integer getFtpPort(){
	return this.ftpPort;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DoFtp";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DoFtp.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DoFtp.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPGet_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPGet_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPGet_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


String fileMask = StringUtils.trimToEmpty(context.fileMask);
fileMask = fileMask.replaceAll(" ", "");
fileMask = fileMask.replaceAll("\\.", "\\\\\\.");
fileMask = fileMask.replaceAll("\\*", ".+");
fileMask = fileMask.replaceAll(",", "\\|");
context.fileMask = fileMask;
//System.out.println(context.fileMask);


 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFTPConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_1", false);
		start_Hash.put("tFTPConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_1";

	
		int tos_count_tFTPConnection_1 = 0;
		
    	class BytesLimit65535_tFTPConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFTPConnection_1().limitLog4jByte();

 
	class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
	 
      		String decryptedPassphrase_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");

		String passphrase_tFTPConnection_1 = decryptedPassphrase_tFTPConnection_1;

		public String getPassphrase() { return passphrase_tFTPConnection_1; }

		public String getPassword() { return null; } 

		public boolean promptPassword(String arg0) { return true; } 

		public boolean promptPassphrase(String arg0) { return true; } 

		public boolean promptYesNo(String arg0) { return true; } 

		public void showMessage(String arg0) { } 

		public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
		boolean[] echo) {
		
    	 
    	
    	
	final String decryptedPassword_tFTPConnection_1 = context.ftpPass; 
    	
			String[] password_tFTPConnection_1 = {decryptedPassword_tFTPConnection_1};
			return password_tFTPConnection_1;
		}
	};
	final com.jcraft.jsch.UserInfo defaultUserInfo_tFTPConnection_1 = new MyUserInfo();
	com.jcraft.jsch.JSch jsch_tFTPConnection_1 = new com.jcraft.jsch.JSch(); 

	
	
	com.jcraft.jsch.Session session_tFTPConnection_1 = jsch_tFTPConnection_1.getSession(context.ftpUser, context.ftpHost, context.ftpPort);
	session_tFTPConnection_1.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");
	
	 
		
	        
		
    		
		
	final String decryptedPassword_tFTPConnection_1 = context.ftpPass; 
	   	
		session_tFTPConnection_1.setPassword(decryptedPassword_tFTPConnection_1); 
	

	session_tFTPConnection_1.setUserInfo(defaultUserInfo_tFTPConnection_1); 
	
		if(("true").equals(System.getProperty("http.proxySet")) ){
			com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
			if(!"".equals(System.getProperty("http.proxyUser"))){
				proxy_tFTPConnection_1.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
			}
			session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
		}
	
  	
	session_tFTPConnection_1.connect();
	com.jcraft.jsch. Channel channel_tFTPConnection_1 = session_tFTPConnection_1.openChannel("sftp"); 
	channel_tFTPConnection_1.connect();
  	
	com.jcraft.jsch.ChannelSftp c_tFTPConnection_1 = (com.jcraft.jsch.ChannelSftp)channel_tFTPConnection_1;
	
	
	
	globalMap.put("conn_tFTPConnection_1", c_tFTPConnection_1);

 



/**
 * [tFTPConnection_1 begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 


	tos_count_tFTPConnection_1++;

/**
 * [tFTPConnection_1 main ] stop
 */
	
	/**
	 * [tFTPConnection_1 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 

ok_Hash.put("tFTPConnection_1", true);
end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

   			if ("GET".equalsIgnoreCase(context.ftpMethod)) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFTPGet_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if ("PUT".equalsIgnoreCase(context.ftpMethod)) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tFTPPut_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tFTPConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPGet_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPGet_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPGet_1", false);
		start_Hash.put("tFTPGet_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPGet_1";

	
		int tos_count_tFTPGet_1 = 0;
		
    	class BytesLimit65535_tFTPGet_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFTPGet_1().limitLog4jByte();

 
int nb_file_tFTPGet_1 = 0;  
	final java.util.List<String> msg_tFTPGet_1 = new java.util.ArrayList<String>();

	

			class MyProgressMonitor_tFTPGet_1 implements com.jcraft.jsch.SftpProgressMonitor {

				private long percent = -1;

				public void init(int op, String src, String dest, long max) {}

				public boolean count(long count) {return true;}

				public void end() {}
			} 

			class SFTPGetter_tFTPGet_1 {

				private com.jcraft.jsch.ChannelSftp cnlSFTP = null;

				private com.jcraft.jsch.SftpProgressMonitor monitor = null;

				private int count = 0;

				public void getAllFiles(String remoteDirectory, String localDirectory) throws com.jcraft.jsch.SftpException {
      
					cnlSFTP.cd(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
						continue;
						}

						if (attrs.isDir()) {
							java.io.File localFile = new java.io.File(localDirectory + "/" + lsEntry.getFilename());
							if (!localFile.exists()) {
								localFile.mkdir();
							}
							getAllFiles(remoteDirectory + "/" + lsEntry.getFilename(), localDirectory + "/" + lsEntry.getFilename());
							cnlSFTP.cd(remoteDirectory);
						} else if (!attrs.isLink()) {
							downloadFile(localDirectory, lsEntry.getFilename());
						}
					}
				}

				public void getFiles(String remoteDirectory, String localDirectory, String maskStr) throws com.jcraft.jsch.SftpException {
      
					cnlSFTP.cd(remoteDirectory);
					java.util.Vector sftpFiles = cnlSFTP.ls(".");

					for (Object sftpFile : sftpFiles) {
						com.jcraft.jsch.ChannelSftp.LsEntry lsEntry = (com.jcraft.jsch.ChannelSftp.LsEntry) sftpFile;
						com.jcraft.jsch.SftpATTRS attrs = lsEntry.getAttrs();

						if ((".").equals(lsEntry.getFilename()) || ("..").equals(lsEntry.getFilename())) {
							continue;
						}

						if (!attrs.isDir() && !attrs.isLink()) {

							if (lsEntry.getFilename().matches(maskStr)) {
            					downloadFile(localDirectory, lsEntry.getFilename());
          					}
        				}
      				}
				}

    			public void chdir(String path) throws com.jcraft.jsch.SftpException{
					cnlSFTP.cd(path);
				}

				public String pwd() throws com.jcraft.jsch.SftpException{
					return cnlSFTP.pwd();
				}

				private void downloadFile(String localFileName, String remoteFileName) throws com.jcraft.jsch.SftpException {

					try {
        				cnlSFTP.get(remoteFileName, localFileName, monitor,          
            				com.jcraft.jsch.ChannelSftp.OVERWRITE
					);
						
        				msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded successfully.");
        				
          					System.out.println("file [" + remoteFileName + "] downloaded successfully.");
        				
				    	globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer OK.");
			      	} catch (com.jcraft.jsch.SftpException e){

        				if (e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_FAILURE || e.id == com.jcraft.jsch.ChannelSftp.SSH_FX_BAD_MESSAGE) {
							msg_tFTPGet_1.add("file [" + remoteFileName + "] downloaded unsuccessfully.");
							globalMap.put("tFTPGet_1_CURRENT_STATUS", "File transfer fail.");
						}
				        throw e;
					}
					count++;
				}
			}

				com.jcraft.jsch.ChannelSftp c_tFTPGet_1 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
				
				if(c_tFTPGet_1.getHome()!=null && !c_tFTPGet_1.getHome().equals(c_tFTPGet_1.pwd())){
			  		c_tFTPGet_1.cd(c_tFTPGet_1.getHome());
			  	}
			com.jcraft.jsch.SftpProgressMonitor monitor_tFTPGet_1 = new MyProgressMonitor_tFTPGet_1();
			SFTPGetter_tFTPGet_1 getter_tFTPGet_1 = new SFTPGetter_tFTPGet_1();
			getter_tFTPGet_1.cnlSFTP = c_tFTPGet_1;
			getter_tFTPGet_1.monitor = monitor_tFTPGet_1;
			String remotedir_tFTPGet_1 = context.remoteDir;
			c_tFTPGet_1.cd(remotedir_tFTPGet_1);
java.util.List<String> maskList_tFTPGet_1 = new java.util.ArrayList<String>();
    
  maskList_tFTPGet_1.add(context.fileMask);       
String localdir_tFTPGet_1  = context.localDir;  
//create folder if local direcotry (assigned by property) not exists
java.io.File dirHandle_tFTPGet_1 = new java.io.File(localdir_tFTPGet_1);

if (!dirHandle_tFTPGet_1.exists()) {
  dirHandle_tFTPGet_1.mkdirs();
}
String root_tFTPGet_1 = getter_tFTPGet_1.pwd();

for (String maskStr_tFTPGet_1 : maskList_tFTPGet_1) { 

 



/**
 * [tFTPGet_1 begin ] stop
 */
	
	/**
	 * [tFTPGet_1 main ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

	try {
		globalMap.put("tFTPGet_1_CURRENT_STATUS", "No file transfered.");
		String dir_tFTPGet_1 = root_tFTPGet_1;
		
			String mask_tFTPGet_1 = maskStr_tFTPGet_1;
		
		int i_tFTPGet_1 = mask_tFTPGet_1.lastIndexOf('/'); 

		if (i_tFTPGet_1 != -1){
			dir_tFTPGet_1 = mask_tFTPGet_1.substring(0, i_tFTPGet_1); 
			mask_tFTPGet_1 = mask_tFTPGet_1.substring(i_tFTPGet_1+1);  
		}
  
		
  
		if (dir_tFTPGet_1!=null && !"".equals(dir_tFTPGet_1)){
			if ((".*").equals(mask_tFTPGet_1)) {
				getter_tFTPGet_1.getAllFiles(dir_tFTPGet_1, localdir_tFTPGet_1);
			} else {
				getter_tFTPGet_1.getFiles(dir_tFTPGet_1, localdir_tFTPGet_1 ,mask_tFTPGet_1);
			}
		}
		getter_tFTPGet_1.chdir(root_tFTPGet_1);
	} catch(java.lang.Exception e) {
		
    		throw(e);
  		
	}
 


	tos_count_tFTPGet_1++;

/**
 * [tFTPGet_1 main ] stop
 */
	
	/**
	 * [tFTPGet_1 end ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	
}
nb_file_tFTPGet_1 = getter_tFTPGet_1.count;

	msg_tFTPGet_1.add(getter_tFTPGet_1.count + " files have been downloaded.");
	StringBuffer sb_tFTPGet_1 = new StringBuffer();

	for (String item_tFTPGet_1 : msg_tFTPGet_1) {
		sb_tFTPGet_1.append(item_tFTPGet_1).append("\n");
	}
	globalMap.put("tFTPGet_1_TRANSFER_MESSAGES", sb_tFTPGet_1.toString());

	    
	globalMap.put("tFTPGet_1_NB_FILE",nb_file_tFTPGet_1);


 

ok_Hash.put("tFTPGet_1", true);
end_Hash.put("tFTPGet_1", System.currentTimeMillis());




/**
 * [tFTPGet_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPGet_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPGet_1";

	

 



/**
 * [tFTPGet_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPGet_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPPut_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_1", false);
		start_Hash.put("tFTPPut_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_1";

	
		int tos_count_tFTPPut_1 = 0;
		
    	class BytesLimit65535_tFTPPut_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFTPPut_1().limitLog4jByte();


int nb_file_tFTPPut_1 = 0;
// *** sftp *** //

	class MyProgressMonitor_tFTPPut_1 implements com.jcraft.jsch.SftpProgressMonitor {
		public void init(int op, String src, String dest, long max) {}
    	public boolean count(long count) { return true;}
    	public void end() {}
  	}

	
    	com.jcraft.jsch.ChannelSftp c_tFTPPut_1 = (com.jcraft.jsch.ChannelSftp)globalMap.get("conn_tFTPConnection_1");
		
    	if(c_tFTPPut_1.getHome()!=null && !c_tFTPPut_1.getHome().equals(c_tFTPPut_1.pwd())){
  			c_tFTPPut_1.cd(c_tFTPPut_1.getHome());
  		}
	
	// becasue there is not the same method in JSch class as FTPClient class, define a list here
	java.util.List<String> msg_tFTPPut_1 = new java.util.ArrayList<String>();
	com.jcraft.jsch.SftpProgressMonitor monitortFTPPut_1 = new MyProgressMonitor_tFTPPut_1();
	java.util.List<java.util.Map<String,String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String,String>>();
  
			java.util.Map<String,String> maptFTPPut_10 = new java.util.HashMap<String,String>();
		    maptFTPPut_10.put(context.fileMask, "");    
		    listtFTPPut_1.add(maptFTPPut_10);         
	String localdirtFTPPut_1 = context.localDir;
	
	for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {


 



/**
 * [tFTPPut_1 begin ] stop
 */
	
	/**
	 * [tFTPPut_1 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

try{
        globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
        for (String keytFTPPut_1 : keySettFTPPut_1){
            if(keytFTPPut_1 == null || "".equals(keytFTPPut_1)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_1 =  localdirtFTPPut_1;
            String filemasktFTPPut_1 = keytFTPPut_1;
            String dirtFTPPut_1 = null;
                String masktFTPPut_1 = filemasktFTPPut_1;
            int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
            if (itFTPPut_1!=-1){
                dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
                masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1+1);
            }
            if (dirtFTPPut_1!=null && !"".equals(dirtFTPPut_1)) tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
            final String finalMasktFTPPut_1 = masktFTPPut_1;
            java.io.File[] listingstFTPPut_1 = null;
            java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
            if (filetFTPPut_1.isDirectory()) {
                listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_1).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }
            if(listingstFTPPut_1 != null && listingstFTPPut_1.length > 0){
                for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++){
                    if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)){

                        int modetFTPPut_1 = com.jcraft.jsch.ChannelSftp.OVERWRITE;
                        try{
                            c_tFTPPut_1.put(listingstFTPPut_1[mtFTPPut_1].getAbsolutePath(), context.remoteDir, monitortFTPPut_1, modetFTPPut_1);

                            // add info to list will return
                            msg_tFTPPut_1.add("file: " + listingstFTPPut_1[mtFTPPut_1].getAbsolutePath() + ", size: "
                                + listingstFTPPut_1[mtFTPPut_1].length() + " bytes upload successfully");
                            globalMap.put("tFTPPut_1_CURRENT_STATUS", "File transfer OK.");
                            if(c_tFTPPut_1.stat(context.remoteDir+"/"+listingstFTPPut_1[mtFTPPut_1].getName()).getAtimeString() != null){
                                globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",true);
                            }
                        }catch(com.jcraft.jsch.SftpException e_tFTPPut_1) {
                            globalMap.put("tFTPPut_1_CURRENT_STATUS", "File transfer fail.");
                            if(c_tFTPPut_1.stat(context.remoteDir+"/"+listingstFTPPut_1[mtFTPPut_1].getName()).getAtimeString() != null){
                                globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",true);
                            }
                            throw(e_tFTPPut_1);
                        }catch(java.lang.Exception e_tFTPPut_1){
                           if(!(e_tFTPPut_1 instanceof com.jcraft.jsch.SftpException)) {
                                msg_tFTPPut_1.add("file " + listingstFTPPut_1[mtFTPPut_1].getAbsolutePath() + " not found?");

                                globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",false);
                            }
                            throw e_tFTPPut_1;
                        }
                        nb_file_tFTPPut_1++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if(maptFTPPut_1.get(keytFTPPut_1) != "" && keytFTPPut_1 != maptFTPPut_1.get(keytFTPPut_1)){
                    try{
                        c_tFTPPut_1.rm(context.remoteDir+"/"+maptFTPPut_1.get(keytFTPPut_1));
                    }catch(com.jcraft.jsch.SftpException e_tFTPPut_1){
                    }
                try{
                    c_tFTPPut_1.rename(context.remoteDir+"/"+keytFTPPut_1, context.remoteDir+"/"+maptFTPPut_1.get(keytFTPPut_1));
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
                }catch(com.jcraft.jsch.SftpException e_tFTPPut_1){
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_1;
                }
            }
        }


    }catch(java.lang.Exception e_tFTPPut_1){
            throw(e_tFTPPut_1);
    }

 


	tos_count_tFTPPut_1++;

/**
 * [tFTPPut_1 main ] stop
 */
	
	/**
	 * [tFTPPut_1 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 	}
    msg_tFTPPut_1.add(nb_file_tFTPPut_1 + " files have been uploaded.");  
    	
	StringBuffer sb_tFTPPut_1 = new StringBuffer();
    for (String item_tFTPPut_1 : msg_tFTPPut_1) {
        sb_tFTPPut_1.append(item_tFTPPut_1).append("\n");
    }
	globalMap.put("tFTPPut_1_TRANSFER_MESSAGES", sb_tFTPPut_1.toString());
    
	
	
globalMap.put("tFTPPut_1_NB_FILE",nb_file_tFTPPut_1);


 

ok_Hash.put("tFTPPut_1", true);
end_Hash.put("tFTPPut_1", System.currentTimeMillis());




/**
 * [tFTPPut_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final DoFtp DoFtpClass = new DoFtp();

        int exitCode = DoFtpClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DoFtp.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/doftp_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("localDir", "id_String");
				
                context.localDir=(String) context.getProperty("localDir");
				    context.setContextType("remoteDir", "id_String");
				
                context.remoteDir=(String) context.getProperty("remoteDir");
				    context.setContextType("fileMask", "id_String");
				
                context.fileMask=(String) context.getProperty("fileMask");
				    context.setContextType("ftpMethod", "id_String");
				
                context.ftpMethod=(String) context.getProperty("ftpMethod");
				    context.setContextType("ftpHost", "id_String");
				
                context.ftpHost=(String) context.getProperty("ftpHost");
				    context.setContextType("ftpUser", "id_String");
				
                context.ftpUser=(String) context.getProperty("ftpUser");
				    context.setContextType("ftpPass", "id_Password");
				
            		String pwd_ftpPass_value = context.getProperty("ftpPass");
            		context.ftpPass = null;
            		if(pwd_ftpPass_value!=null) {
            			if(context_param.containsKey("ftpPass")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.ftpPass = pwd_ftpPass_value;
            			} else if (!pwd_ftpPass_value.isEmpty()) {
            				try {
            					context.ftpPass = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ftpPass_value);
            					context.put("ftpPass",context.ftpPass);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("ftpPort", "id_Integer");
				
             try{
                 context.ftpPort=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ftpPort"));
             }catch(NumberFormatException e){
                 context.ftpPort=null;
              }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("localDir")) {
                context.localDir = (String) parentContextMap.get("localDir");
            }if (parentContextMap.containsKey("remoteDir")) {
                context.remoteDir = (String) parentContextMap.get("remoteDir");
            }if (parentContextMap.containsKey("fileMask")) {
                context.fileMask = (String) parentContextMap.get("fileMask");
            }if (parentContextMap.containsKey("ftpMethod")) {
                context.ftpMethod = (String) parentContextMap.get("ftpMethod");
            }if (parentContextMap.containsKey("ftpHost")) {
                context.ftpHost = (String) parentContextMap.get("ftpHost");
            }if (parentContextMap.containsKey("ftpUser")) {
                context.ftpUser = (String) parentContextMap.get("ftpUser");
            }if (parentContextMap.containsKey("ftpPass")) {
                context.ftpPass = (java.lang.String) parentContextMap.get("ftpPass");
            }if (parentContextMap.containsKey("ftpPort")) {
                context.ftpPort = (Integer) parentContextMap.get("ftpPort");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ftpPass");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DoFtp");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeFtpConnections();


    }






    private void closeFtpConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tFTPConnection_1");
            if (obj_conn != null) {
                ((com.jcraft.jsch.ChannelSftp) obj_conn).quit();
            }
        } catch (java.lang.Exception e) {
        }
    }








    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     51633 characters generated by Talend Open Studio for Data Integration 
 *     on the October 24, 2018 9:10:02 AM CDT
 ************************************************************************************************/