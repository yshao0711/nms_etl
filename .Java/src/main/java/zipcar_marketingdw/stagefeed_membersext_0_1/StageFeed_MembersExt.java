// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.stagefeed_membersext_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: StageFeed_MembersExt Purpose: Stage the Feed files<br>
 * Description: Load the Feed Files and Stage into its staging table. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class StageFeed_MembersExt implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(clearStagingTable != null){
				
					this.setProperty("clearStagingTable", clearStagingTable.toString());
				
			}
			
			if(bulkLoadMaxErrors != null){
				
					this.setProperty("bulkLoadMaxErrors", bulkLoadMaxErrors.toString());
				
			}
			
			if(bulkLoadPath != null){
				
					this.setProperty("bulkLoadPath", bulkLoadPath.toString());
				
			}
			
			if(bulkLoadTempPath != null){
				
					this.setProperty("bulkLoadTempPath", bulkLoadTempPath.toString());
				
			}
			
			if(s3_accesskey != null){
				
					this.setProperty("s3_accesskey", s3_accesskey.toString());
				
			}
			
			if(s3_bucket != null){
				
					this.setProperty("s3_bucket", s3_bucket.toString());
				
			}
			
			if(s3_secretkey != null){
				
					this.setProperty("s3_secretkey", s3_secretkey.toString());
				
			}
			
			if(bulkLoad != null){
				
					this.setProperty("bulkLoad", bulkLoad.toString());
				
			}
			
			if(feedArchive != null){
				
					this.setProperty("feedArchive", feedArchive.toString());
				
			}
			
			if(feedError != null){
				
					this.setProperty("feedError", feedError.toString());
				
			}
			
			if(feedInput != null){
				
					this.setProperty("feedInput", feedInput.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
			if(Redshift_Staging_AdditionalParams != null){
				
					this.setProperty("Redshift_Staging_AdditionalParams", Redshift_Staging_AdditionalParams.toString());
				
			}
			
			if(Redshift_Staging_Database != null){
				
					this.setProperty("Redshift_Staging_Database", Redshift_Staging_Database.toString());
				
			}
			
			if(Redshift_Staging_Login != null){
				
					this.setProperty("Redshift_Staging_Login", Redshift_Staging_Login.toString());
				
			}
			
			if(Redshift_Staging_Password != null){
				
					this.setProperty("Redshift_Staging_Password", Redshift_Staging_Password.toString());
				
			}
			
			if(Redshift_Staging_Port != null){
				
					this.setProperty("Redshift_Staging_Port", Redshift_Staging_Port.toString());
				
			}
			
			if(Redshift_Staging_Schema != null){
				
					this.setProperty("Redshift_Staging_Schema", Redshift_Staging_Schema.toString());
				
			}
			
			if(Redshift_Staging_Server != null){
				
					this.setProperty("Redshift_Staging_Server", Redshift_Staging_Server.toString());
				
			}
			
		}

public Boolean clearStagingTable;
public Boolean getClearStagingTable(){
	return this.clearStagingTable;
}
public Long bulkLoadMaxErrors;
public Long getBulkLoadMaxErrors(){
	return this.bulkLoadMaxErrors;
}
public String bulkLoadPath;
public String getBulkLoadPath(){
	return this.bulkLoadPath;
}
public String bulkLoadTempPath;
public String getBulkLoadTempPath(){
	return this.bulkLoadTempPath;
}
public String s3_accesskey;
public String getS3_accesskey(){
	return this.s3_accesskey;
}
public String s3_bucket;
public String getS3_bucket(){
	return this.s3_bucket;
}
public String s3_secretkey;
public String getS3_secretkey(){
	return this.s3_secretkey;
}
public Boolean bulkLoad;
public Boolean getBulkLoad(){
	return this.bulkLoad;
}
		public String feedArchive;
		public String getFeedArchive(){
			return this.feedArchive;
		}
		
		public String feedError;
		public String getFeedError(){
			return this.feedError;
		}
		
		public String feedInput;
		public String getFeedInput(){
			return this.feedInput;
		}
		
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
public String Redshift_Staging_AdditionalParams;
public String getRedshift_Staging_AdditionalParams(){
	return this.Redshift_Staging_AdditionalParams;
}
public String Redshift_Staging_Database;
public String getRedshift_Staging_Database(){
	return this.Redshift_Staging_Database;
}
public String Redshift_Staging_Login;
public String getRedshift_Staging_Login(){
	return this.Redshift_Staging_Login;
}
public java.lang.String Redshift_Staging_Password;
public java.lang.String getRedshift_Staging_Password(){
	return this.Redshift_Staging_Password;
}
public String Redshift_Staging_Port;
public String getRedshift_Staging_Port(){
	return this.Redshift_Staging_Port;
}
public String Redshift_Staging_Schema;
public String getRedshift_Staging_Schema(){
	return this.Redshift_Staging_Schema;
}
public String Redshift_Staging_Server;
public String getRedshift_Staging_Server(){
	return this.Redshift_Staging_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "StageFeed_MembersExt";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_Ilmb4M5GEeeiQrW9_8Zexg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				StageFeed_MembersExt.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(StageFeed_MembersExt.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFileCopy_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tFileCopy_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Log_FileComplete");
Logging.componentName(jobName, "tWarn_2", "Log_TableTruncated");
Logging.componentName(jobName, "tWarn_3", "Log_NoFiles");
Logging.componentName(jobName, "tWarn_4", "Log_FeedProgress");
Logging.componentName(jobName, "tWarn_5", "Log_BulkLoadFeedComplete");
Logging.componentName(jobName, "tDie_1", "Die_FileError");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSetGlobalVar_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
		int tos_count_tSetGlobalVar_2 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

globalMap.put("FileList_Counter", new java.util.concurrent.atomic.AtomicInteger(0) );

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());




/**
 * [tSetGlobalVar_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRedshiftConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_1", false);
		start_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_1";

	
		int tos_count_tRedshiftConnection_1 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_1().limitLog4jByte();


	
    			String url_tRedshiftConnection_1 = "jdbc:redshift://" + context.Redshift_Staging_Server + ":" + context.Redshift_Staging_Port + "/" + context.Redshift_Staging_Database + "?" + context.Redshift_Staging_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_1 = context.Redshift_Staging_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_1 = context.Redshift_Staging_Password; 
		String dbPwd_tRedshiftConnection_1 = decryptedPassword_tRedshiftConnection_1;
	

	java.sql.Connection conn_tRedshiftConnection_1 = null;
	
					String driverClass_tRedshiftConnection_1 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_1);
		
		conn_tRedshiftConnection_1 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_1,dbUser_tRedshiftConnection_1,dbPwd_tRedshiftConnection_1);

		globalMap.put("conn_tRedshiftConnection_1", conn_tRedshiftConnection_1);
	if (null != conn_tRedshiftConnection_1) {
		
			conn_tRedshiftConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_1",context.Redshift_Staging_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_1",conn_tRedshiftConnection_1);

 



/**
 * [tRedshiftConnection_1 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 


	tos_count_tRedshiftConnection_1++;

/**
 * [tRedshiftConnection_1 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 

ok_Hash.put("tRedshiftConnection_1", true);
end_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());




/**
 * [tRedshiftConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 



/**
 * [tRedshiftConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_1", false);
		start_Hash.put("tRedshiftClose_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_1";

	
		int tos_count_tRedshiftClose_1 = 0;
		
    	class BytesLimit65535_tRedshiftClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_1().limitLog4jByte();

 



/**
 * [tRedshiftClose_1 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	



	java.sql.Connection conn_tRedshiftClose_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	if(conn_tRedshiftClose_1 != null && !conn_tRedshiftClose_1.isClosed())
	{
        conn_tRedshiftClose_1.close();
	}

 


	tos_count_tRedshiftClose_1++;

/**
 * [tRedshiftClose_1 main ] stop
 */
	
	/**
	 * [tRedshiftClose_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 

ok_Hash.put("tRedshiftClose_1", true);
end_Hash.put("tRedshiftClose_1", System.currentTimeMillis());




/**
 * [tRedshiftClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 



/**
 * [tRedshiftClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tSetGlobalVar_1 = 0; //for statistics
						
			int NB_ITERATE_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
    	class BytesLimit65535_tFileList_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_1().limitLog4jByte();
	
 
     
    
  String directory_tFileList_1 = context.feedInput;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add(FeedFile.FileType.MEMBERS_EXT.filePattern());  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	NB_ITERATE_tSetGlobalVar_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("tables_to_clear", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("first_file", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("log_truncated", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tSetGlobalVar_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("File_Processed_Records", new java.util.concurrent.atomic.AtomicInteger(0) );
globalMap.put("FileList_CurrentIndex", ((java.util.concurrent.atomic.AtomicInteger)globalMap.get("FileList_Counter")).incrementAndGet());

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

   			if (context.clearStagingTable && ((Integer) globalMap.get("FileList_CurrentIndex")) == 1) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("first_file", 0, "true");
					}
				
    			tFixedFlowInput_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("first_file", 0, "false");
					}   	 
   				}



/**
 * [tSetGlobalVar_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tSetGlobalVar_1);
						}				
					




	NB_ITERATE_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("Record_OutputToDB", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("file_failed", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("After_Insert", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Log_Rows", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("file_success", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Row_FeedRecord", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


globalMap.put("fileName", FeedFile.getCleanFeedFileName((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
globalMap.put("tableName", FeedFile.FileType.MEMBERS_EXT.toString());
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (context.bulkLoad == null || !context.bulkLoad) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFileInputDelimited_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.bulkLoad) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tFileInputDelimited_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_2);
						}				
					




	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tFileList_1_NB_FILE")) == 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("no_files", 0, "true");
					}
				
    			tWarn_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("no_files", 0, "false");
					}   	 
   				}



/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */




	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class log_truncatedStruct implements routines.system.IPersistableRow<log_truncatedStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public String tableName;

				public String getTableName () {
					return this.tableName;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.tableName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tableName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tableName="+tableName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_truncatedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tables_to_clearStruct implements routines.system.IPersistableRow<tables_to_clearStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public String tableName;

				public String getTableName () {
					return this.tableName;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.tableName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tableName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tableName="+tableName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tables_to_clearStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		tables_to_clearStruct tables_to_clear = new tables_to_clearStruct();
log_truncatedStruct log_truncated = new log_truncatedStruct();





	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_truncated" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_2 = 0;
		
    	class BytesLimit65535_tWarn_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_2().limitLog4jByte();

 



/**
 * [tWarn_2 begin ] stop
 */



	
	/**
	 * [tRedshiftRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_1", false);
		start_Hash.put("tRedshiftRow_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("tables_to_clear" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftRow_1 = 0;
		
    	class BytesLimit65535_tRedshiftRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_1().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_1 = null;
	String query_tRedshiftRow_1 = "";
	boolean whetherReject_tRedshiftRow_1 = false;
				conn_tRedshiftRow_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_1 = conn_tRedshiftRow_1.createStatement();
	

 



/**
 * [tRedshiftRow_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		tables_to_clear.tableName = context.Redshift_Staging_Schema + "." + FeedFile.FileType.MEMBERS_EXT;
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */

	
	/**
	 * [tRedshiftRow_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

			//tables_to_clear
			//tables_to_clear


			
				if(execStat){
					runStat.updateStatOnConnection("tables_to_clear"+iterateId,1, 1);
				} 
			

		

		log_truncated = null;
		
query_tRedshiftRow_1 = "truncate  " + tables_to_clear.tableName;
whetherReject_tRedshiftRow_1 = false;
globalMap.put("tRedshiftRow_1_QUERY",query_tRedshiftRow_1);
try {
		stmt_tRedshiftRow_1.execute(query_tRedshiftRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_1 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tRedshiftRow_1) {
		
					log_truncated = new log_truncatedStruct();
					
							log_truncated.tableName = tables_to_clear.tableName;
							
	}
	

 


	tos_count_tRedshiftRow_1++;

/**
 * [tRedshiftRow_1 main ] stop
 */
// Start of branch "log_truncated"
if(log_truncated != null) { 



	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			//log_truncated
			//log_truncated


			
				if(execStat){
					runStat.updateStatOnConnection("log_truncated"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Truncating Table - " + tables_to_clear.tableName,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, "Truncating Table - " + tables_to_clear.tableName, 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_2_WARN_MESSAGES", "Truncating Table - " + tables_to_clear.tableName); 
globalMap.put("tWarn_2_WARN_PRIORITY", 3);
globalMap.put("tWarn_2_WARN_CODE", 42);


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */

} // End of branch "log_truncated"







	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tRedshiftRow_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

	
	stmt_tRedshiftRow_1.close();	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("tables_to_clear"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftRow_1", true);
end_Hash.put("tRedshiftRow_1", System.currentTimeMillis());




/**
 * [tRedshiftRow_1 end ] stop
 */

	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_truncated"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tRedshiftRow_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

 



/**
 * [tRedshiftRow_1 finally ] stop
 */

	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Log_RowsStruct implements routines.system.IPersistableRow<Log_RowsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Log_RowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class After_InsertStruct implements routines.system.IPersistableRow<After_InsertStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(After_InsertStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Record_OutputToDBStruct implements routines.system.IPersistableRow<Record_OutputToDBStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Record_OutputToDBStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Row_FeedRecordStruct implements routines.system.IPersistableRow<Row_FeedRecordStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Row_FeedRecordStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		Row_FeedRecordStruct Row_FeedRecord = new Row_FeedRecordStruct();
Record_OutputToDBStruct Record_OutputToDB = new Record_OutputToDBStruct();
After_InsertStruct After_Insert = new After_InsertStruct();
Log_RowsStruct Log_Rows = new Log_RowsStruct();







	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Log_Rows" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_4 = 0;
		
    	class BytesLimit65535_tWarn_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_4().limitLog4jByte();

 



/**
 * [tWarn_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("After_Insert" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Record_OutputToDB" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = (String)globalMap.get("schema_" + "tRedshiftConnection_1");
	
String tableName_tRedshiftOutput_1 = (String)globalMap.get("tableName");
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;
	conn_tRedshiftOutput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	
	
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						long MEMBER_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c0(long MEMBER_ID){
							this.MEMBER_ID = MEMBER_ID;
							return this;
						}				
						Long AFFILIATE_ID_1;
						
	            		public BufferLine_tRedshiftOutput_1 c1(Long AFFILIATE_ID_1){
							this.AFFILIATE_ID_1 = AFFILIATE_ID_1;
							return this;
						}				
						String AFFILIATE_NAME_1;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String AFFILIATE_NAME_1){
							this.AFFILIATE_NAME_1 = AFFILIATE_NAME_1;
							return this;
						}				
						Long AFFILIATE_ID_2;
						
	            		public BufferLine_tRedshiftOutput_1 c3(Long AFFILIATE_ID_2){
							this.AFFILIATE_ID_2 = AFFILIATE_ID_2;
							return this;
						}				
						String AFFILIATE_NAME_2;
						
	            		public BufferLine_tRedshiftOutput_1 c4(String AFFILIATE_NAME_2){
							this.AFFILIATE_NAME_2 = AFFILIATE_NAME_2;
							return this;
						}				
						Long AFFILIATE_ID_3;
						
	            		public BufferLine_tRedshiftOutput_1 c5(Long AFFILIATE_ID_3){
							this.AFFILIATE_ID_3 = AFFILIATE_ID_3;
							return this;
						}				
						String AFFILIATE_NAME_3;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String AFFILIATE_NAME_3){
							this.AFFILIATE_NAME_3 = AFFILIATE_NAME_3;
							return this;
						}				
						Long AFFILIATE_ID_4;
						
	            		public BufferLine_tRedshiftOutput_1 c7(Long AFFILIATE_ID_4){
							this.AFFILIATE_ID_4 = AFFILIATE_ID_4;
							return this;
						}				
						String AFFILIATE_NAME_4;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String AFFILIATE_NAME_4){
							this.AFFILIATE_NAME_4 = AFFILIATE_NAME_4;
							return this;
						}				
						Long AFFILIATE_ID_5;
						
	            		public BufferLine_tRedshiftOutput_1 c9(Long AFFILIATE_ID_5){
							this.AFFILIATE_ID_5 = AFFILIATE_ID_5;
							return this;
						}				
						String AFFILIATE_NAME_5;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String AFFILIATE_NAME_5){
							this.AFFILIATE_NAME_5 = AFFILIATE_NAME_5;
							return this;
						}				
						Long AFFILIATE_ID_6;
						
	            		public BufferLine_tRedshiftOutput_1 c11(Long AFFILIATE_ID_6){
							this.AFFILIATE_ID_6 = AFFILIATE_ID_6;
							return this;
						}				
						String AFFILIATE_NAME_6;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String AFFILIATE_NAME_6){
							this.AFFILIATE_NAME_6 = AFFILIATE_NAME_6;
							return this;
						}				
						Long AFFILIATE_ID_7;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long AFFILIATE_ID_7){
							this.AFFILIATE_ID_7 = AFFILIATE_ID_7;
							return this;
						}				
						String AFFILIATE_NAME_7;
						
	            		public BufferLine_tRedshiftOutput_1 c14(String AFFILIATE_NAME_7){
							this.AFFILIATE_NAME_7 = AFFILIATE_NAME_7;
							return this;
						}				
						Long AFFILIATE_ID_8;
						
	            		public BufferLine_tRedshiftOutput_1 c15(Long AFFILIATE_ID_8){
							this.AFFILIATE_ID_8 = AFFILIATE_ID_8;
							return this;
						}				
						String AFFILIATE_NAME_8;
						
	            		public BufferLine_tRedshiftOutput_1 c16(String AFFILIATE_NAME_8){
							this.AFFILIATE_NAME_8 = AFFILIATE_NAME_8;
							return this;
						}				
						Long AFFILIATE_ID_9;
						
	            		public BufferLine_tRedshiftOutput_1 c17(Long AFFILIATE_ID_9){
							this.AFFILIATE_ID_9 = AFFILIATE_ID_9;
							return this;
						}				
						String AFFILIATE_NAME_9;
						
	            		public BufferLine_tRedshiftOutput_1 c18(String AFFILIATE_NAME_9){
							this.AFFILIATE_NAME_9 = AFFILIATE_NAME_9;
							return this;
						}				
						java.util.Date DELETED_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c19(java.util.Date DELETED_DATE){
							this.DELETED_DATE = DELETED_DATE;
							return this;
						}				
						java.util.Date LAST_MODIFIED;
						
	            		public BufferLine_tRedshiftOutput_1 c20(java.util.Date LAST_MODIFIED){
							this.LAST_MODIFIED = LAST_MODIFIED;
							return this;
						}				
						java.util.Date AFFILIATE_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c21(java.util.Date AFFILIATE_REFRESH_DATE){
							this.AFFILIATE_REFRESH_DATE = AFFILIATE_REFRESH_DATE;
							return this;
						}				
						String WAIVER_ELIGIBLE_P;
						
	            		public BufferLine_tRedshiftOutput_1 c22(String WAIVER_ELIGIBLE_P){
							this.WAIVER_ELIGIBLE_P = WAIVER_ELIGIBLE_P;
							return this;
						}				
						String PER_TRIP_WAIVER_ELIGIBLE_P;
						
	            		public BufferLine_tRedshiftOutput_1 c23(String PER_TRIP_WAIVER_ELIGIBLE_P){
							this.PER_TRIP_WAIVER_ELIGIBLE_P = PER_TRIP_WAIVER_ELIGIBLE_P;
							return this;
						}				
						Long CURRENT_WAIVER_PLAN_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c24(Long CURRENT_WAIVER_PLAN_ID){
							this.CURRENT_WAIVER_PLAN_ID = CURRENT_WAIVER_PLAN_ID;
							return this;
						}				
						String CURRENT_WAIVER_PLAN_NAME;
						
	            		public BufferLine_tRedshiftOutput_1 c25(String CURRENT_WAIVER_PLAN_NAME){
							this.CURRENT_WAIVER_PLAN_NAME = CURRENT_WAIVER_PLAN_NAME;
							return this;
						}				
						Double CURRENT_WAIVER_PLAN_FEE;
						
	            		public BufferLine_tRedshiftOutput_1 c26(Double CURRENT_WAIVER_PLAN_FEE){
							this.CURRENT_WAIVER_PLAN_FEE = CURRENT_WAIVER_PLAN_FEE;
							return this;
						}				
						Long CURRENT_WAIVER_TIER;
						
	            		public BufferLine_tRedshiftOutput_1 c27(Long CURRENT_WAIVER_TIER){
							this.CURRENT_WAIVER_TIER = CURRENT_WAIVER_TIER;
							return this;
						}				
						Double CURRENT_WAIVER_DEDUCTIBLE;
						
	            		public BufferLine_tRedshiftOutput_1 c28(Double CURRENT_WAIVER_DEDUCTIBLE){
							this.CURRENT_WAIVER_DEDUCTIBLE = CURRENT_WAIVER_DEDUCTIBLE;
							return this;
						}				
						String CURRENT_W_AUTO_RENEW_P;
						
	            		public BufferLine_tRedshiftOutput_1 c29(String CURRENT_W_AUTO_RENEW_P){
							this.CURRENT_W_AUTO_RENEW_P = CURRENT_W_AUTO_RENEW_P;
							return this;
						}				
						java.util.Date CURRENT_WAIVER_START_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c30(java.util.Date CURRENT_WAIVER_START_DATE){
							this.CURRENT_WAIVER_START_DATE = CURRENT_WAIVER_START_DATE;
							return this;
						}				
						java.util.Date CURRENT_WAIVER_END_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c31(java.util.Date CURRENT_WAIVER_END_DATE){
							this.CURRENT_WAIVER_END_DATE = CURRENT_WAIVER_END_DATE;
							return this;
						}				
						int PER_TRIP_WAIVER_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c32(int PER_TRIP_WAIVER_CNT){
							this.PER_TRIP_WAIVER_CNT = PER_TRIP_WAIVER_CNT;
							return this;
						}				
						java.util.Date LAST_PER_TRIP_WAIVER_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c33(java.util.Date LAST_PER_TRIP_WAIVER_DATE){
							this.LAST_PER_TRIP_WAIVER_DATE = LAST_PER_TRIP_WAIVER_DATE;
							return this;
						}				
						String EVER_HAD_ANY_WAIVER_P;
						
	            		public BufferLine_tRedshiftOutput_1 c34(String EVER_HAD_ANY_WAIVER_P){
							this.EVER_HAD_ANY_WAIVER_P = EVER_HAD_ANY_WAIVER_P;
							return this;
						}				
						java.util.Date WAIVER_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c35(java.util.Date WAIVER_REFRESH_DATE){
							this.WAIVER_REFRESH_DATE = WAIVER_REFRESH_DATE;
							return this;
						}				
						String DRIVER_RISK_TIER_INFO_P;
						
	            		public BufferLine_tRedshiftOutput_1 c36(String DRIVER_RISK_TIER_INFO_P){
							this.DRIVER_RISK_TIER_INFO_P = DRIVER_RISK_TIER_INFO_P;
							return this;
						}				
						String FIRST_RISK_TIER_KEY;
						
	            		public BufferLine_tRedshiftOutput_1 c37(String FIRST_RISK_TIER_KEY){
							this.FIRST_RISK_TIER_KEY = FIRST_RISK_TIER_KEY;
							return this;
						}				
						String LAST_RISK_TIER_KEY;
						
	            		public BufferLine_tRedshiftOutput_1 c38(String LAST_RISK_TIER_KEY){
							this.LAST_RISK_TIER_KEY = LAST_RISK_TIER_KEY;
							return this;
						}				
						Integer FIRST_MIN_LEVEL;
						
	            		public BufferLine_tRedshiftOutput_1 c39(Integer FIRST_MIN_LEVEL){
							this.FIRST_MIN_LEVEL = FIRST_MIN_LEVEL;
							return this;
						}				
						Integer LAST_MIN_LEVEL;
						
	            		public BufferLine_tRedshiftOutput_1 c40(Integer LAST_MIN_LEVEL){
							this.LAST_MIN_LEVEL = LAST_MIN_LEVEL;
							return this;
						}				
						Integer TOTAL_RISK_TIER_CHANGES;
						
	            		public BufferLine_tRedshiftOutput_1 c41(Integer TOTAL_RISK_TIER_CHANGES){
							this.TOTAL_RISK_TIER_CHANGES = TOTAL_RISK_TIER_CHANGES;
							return this;
						}				
						int TRIPS_COMPLETED;
						
	            		public BufferLine_tRedshiftOutput_1 c42(int TRIPS_COMPLETED){
							this.TRIPS_COMPLETED = TRIPS_COMPLETED;
							return this;
						}				
						java.util.Date LAST_ACCIDENT_KARMA_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c43(java.util.Date LAST_ACCIDENT_KARMA_DATE){
							this.LAST_ACCIDENT_KARMA_DATE = LAST_ACCIDENT_KARMA_DATE;
							return this;
						}				
						java.util.Date LAST_LIC_POINTS_KARMA_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c44(java.util.Date LAST_LIC_POINTS_KARMA_DATE){
							this.LAST_LIC_POINTS_KARMA_DATE = LAST_LIC_POINTS_KARMA_DATE;
							return this;
						}				
						java.util.Date DRIVER_RISK_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c45(java.util.Date DRIVER_RISK_REFRESH_DATE){
							this.DRIVER_RISK_REFRESH_DATE = DRIVER_RISK_REFRESH_DATE;
							return this;
						}				
						java.util.Date LAST_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c46(java.util.Date LAST_RES_DATE){
							this.LAST_RES_DATE = LAST_RES_DATE;
							return this;
						}				
						String LAST_RES_TYPE;
						
	            		public BufferLine_tRedshiftOutput_1 c47(String LAST_RES_TYPE){
							this.LAST_RES_TYPE = LAST_RES_TYPE;
							return this;
						}				
						Integer DAYS_SINCE_LAST_DRIVE;
						
	            		public BufferLine_tRedshiftOutput_1 c48(Integer DAYS_SINCE_LAST_DRIVE){
							this.DAYS_SINCE_LAST_DRIVE = DAYS_SINCE_LAST_DRIVE;
							return this;
						}				
						String NEXT_RES_TYPE;
						
	            		public BufferLine_tRedshiftOutput_1 c49(String NEXT_RES_TYPE){
							this.NEXT_RES_TYPE = NEXT_RES_TYPE;
							return this;
						}				
						Integer DAYS_UNTIL_NEXT_DRIVE;
						
	            		public BufferLine_tRedshiftOutput_1 c50(Integer DAYS_UNTIL_NEXT_DRIVE){
							this.DAYS_UNTIL_NEXT_DRIVE = DAYS_UNTIL_NEXT_DRIVE;
							return this;
						}				
						java.util.Date FIRST_GAS_FILLUP_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c51(java.util.Date FIRST_GAS_FILLUP_DATE){
							this.FIRST_GAS_FILLUP_DATE = FIRST_GAS_FILLUP_DATE;
							return this;
						}				
						Double FIRST_GAS_FILLUP_AMOUNT;
						
	            		public BufferLine_tRedshiftOutput_1 c52(Double FIRST_GAS_FILLUP_AMOUNT){
							this.FIRST_GAS_FILLUP_AMOUNT = FIRST_GAS_FILLUP_AMOUNT;
							return this;
						}				
						Double FIRST_GAS_FILLUP_CHARGE;
						
	            		public BufferLine_tRedshiftOutput_1 c53(Double FIRST_GAS_FILLUP_CHARGE){
							this.FIRST_GAS_FILLUP_CHARGE = FIRST_GAS_FILLUP_CHARGE;
							return this;
						}				
						java.util.Date LAST_GAS_FILLUP_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c54(java.util.Date LAST_GAS_FILLUP_DATE){
							this.LAST_GAS_FILLUP_DATE = LAST_GAS_FILLUP_DATE;
							return this;
						}				
						Double LAST_GAS_FILLUP_AMOUNT;
						
	            		public BufferLine_tRedshiftOutput_1 c55(Double LAST_GAS_FILLUP_AMOUNT){
							this.LAST_GAS_FILLUP_AMOUNT = LAST_GAS_FILLUP_AMOUNT;
							return this;
						}				
						Double LAST_GAS_FILLUP_CHARGE;
						
	            		public BufferLine_tRedshiftOutput_1 c56(Double LAST_GAS_FILLUP_CHARGE){
							this.LAST_GAS_FILLUP_CHARGE = LAST_GAS_FILLUP_CHARGE;
							return this;
						}				
						Integer FILLUP_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c57(Integer FILLUP_CNT){
							this.FILLUP_CNT = FILLUP_CNT;
							return this;
						}				
						java.util.Date WEX_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c58(java.util.Date WEX_REFRESH_DATE){
							this.WEX_REFRESH_DATE = WEX_REFRESH_DATE;
							return this;
						}				
						java.util.Date FIRST_NPS_RESPONSE_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c59(java.util.Date FIRST_NPS_RESPONSE_DATE){
							this.FIRST_NPS_RESPONSE_DATE = FIRST_NPS_RESPONSE_DATE;
							return this;
						}				
						String FIRST_NPS_COMPLETE;
						
	            		public BufferLine_tRedshiftOutput_1 c60(String FIRST_NPS_COMPLETE){
							this.FIRST_NPS_COMPLETE = FIRST_NPS_COMPLETE;
							return this;
						}				
						Integer FIRST_NPS_SCORE;
						
	            		public BufferLine_tRedshiftOutput_1 c61(Integer FIRST_NPS_SCORE){
							this.FIRST_NPS_SCORE = FIRST_NPS_SCORE;
							return this;
						}				
						java.util.Date LAST_NPS_RESPONSE_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c62(java.util.Date LAST_NPS_RESPONSE_DATE){
							this.LAST_NPS_RESPONSE_DATE = LAST_NPS_RESPONSE_DATE;
							return this;
						}				
						String LAST_NPS_COMPLETE;
						
	            		public BufferLine_tRedshiftOutput_1 c63(String LAST_NPS_COMPLETE){
							this.LAST_NPS_COMPLETE = LAST_NPS_COMPLETE;
							return this;
						}				
						Integer LAST_NPS_SCORE;
						
	            		public BufferLine_tRedshiftOutput_1 c64(Integer LAST_NPS_SCORE){
							this.LAST_NPS_SCORE = LAST_NPS_SCORE;
							return this;
						}				
						java.util.Date NPS_SURVEY_REFRESH;
						
	            		public BufferLine_tRedshiftOutput_1 c65(java.util.Date NPS_SURVEY_REFRESH){
							this.NPS_SURVEY_REFRESH = NPS_SURVEY_REFRESH;
							return this;
						}				
						java.util.Date FIRST_RES_SEARCH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c66(java.util.Date FIRST_RES_SEARCH_DATE){
							this.FIRST_RES_SEARCH_DATE = FIRST_RES_SEARCH_DATE;
							return this;
						}				
						String FIRST_RES_SEARCH_COMPLETION_P;
						
	            		public BufferLine_tRedshiftOutput_1 c67(String FIRST_RES_SEARCH_COMPLETION_P){
							this.FIRST_RES_SEARCH_COMPLETION_P = FIRST_RES_SEARCH_COMPLETION_P;
							return this;
						}				
						java.util.Date FIRST_RES_LOCAL_START_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c68(java.util.Date FIRST_RES_LOCAL_START_DATE){
							this.FIRST_RES_LOCAL_START_DATE = FIRST_RES_LOCAL_START_DATE;
							return this;
						}				
						java.util.Date FIRST_OVERNIGHT_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c69(java.util.Date FIRST_OVERNIGHT_RES){
							this.FIRST_OVERNIGHT_RES = FIRST_OVERNIGHT_RES;
							return this;
						}				
						java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c70(java.util.Date FIRST_WKDAY_HRLY_AM_START_RES){
							this.FIRST_WKDAY_HRLY_AM_START_RES = FIRST_WKDAY_HRLY_AM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c71(java.util.Date FIRST_WKDAY_HRLY_PM_START_RES){
							this.FIRST_WKDAY_HRLY_PM_START_RES = FIRST_WKDAY_HRLY_PM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_HRLY_AM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c72(java.util.Date FIRST_WKEND_HRLY_AM_START_RES){
							this.FIRST_WKEND_HRLY_AM_START_RES = FIRST_WKEND_HRLY_AM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_HRLY_PM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c73(java.util.Date FIRST_WKEND_HRLY_PM_START_RES){
							this.FIRST_WKEND_HRLY_PM_START_RES = FIRST_WKEND_HRLY_PM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKDAY_DAILY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c74(java.util.Date FIRST_WKDAY_DAILY_RES){
							this.FIRST_WKDAY_DAILY_RES = FIRST_WKDAY_DAILY_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_DAILY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c75(java.util.Date FIRST_WKEND_DAILY_RES){
							this.FIRST_WKEND_DAILY_RES = FIRST_WKEND_DAILY_RES;
							return this;
						}				
						java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c76(java.util.Date MEMBER_FIRST_RES_REFRESH_DATE){
							this.MEMBER_FIRST_RES_REFRESH_DATE = MEMBER_FIRST_RES_REFRESH_DATE;
							return this;
						}				
						Integer REFER_A_FRIEND_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c77(Integer REFER_A_FRIEND_CNT){
							this.REFER_A_FRIEND_CNT = REFER_A_FRIEND_CNT;
							return this;
						}				
						Integer TOTAL_GIFT_CARD_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c78(Integer TOTAL_GIFT_CARD_CNT){
							this.TOTAL_GIFT_CARD_CNT = TOTAL_GIFT_CARD_CNT;
							return this;
						}				
						Double TOTAL_GIFT_CARD_AMT_USD;
						
	            		public BufferLine_tRedshiftOutput_1 c79(Double TOTAL_GIFT_CARD_AMT_USD){
							this.TOTAL_GIFT_CARD_AMT_USD = TOTAL_GIFT_CARD_AMT_USD;
							return this;
						}				
						java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c80(java.util.Date LAST_GIFT_CARD_PURCHASE_DATE){
							this.LAST_GIFT_CARD_PURCHASE_DATE = LAST_GIFT_CARD_PURCHASE_DATE;
							return this;
						}				
						Double LAST_GIFT_CARD_PURCHAS_AMT_USD;
						
	            		public BufferLine_tRedshiftOutput_1 c81(Double LAST_GIFT_CARD_PURCHAS_AMT_USD){
							this.LAST_GIFT_CARD_PURCHAS_AMT_USD = LAST_GIFT_CARD_PURCHAS_AMT_USD;
							return this;
						}				
						String LAST_GIFT_CARD_PURCHASE_CURR;
						
	            		public BufferLine_tRedshiftOutput_1 c82(String LAST_GIFT_CARD_PURCHASE_CURR){
							this.LAST_GIFT_CARD_PURCHASE_CURR = LAST_GIFT_CARD_PURCHASE_CURR;
							return this;
						}				
						Integer GIFT_CARD_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c83(Integer GIFT_CARD_CNT){
							this.GIFT_CARD_CNT = GIFT_CARD_CNT;
							return this;
						}				
						Integer LATE_RETURN_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c84(Integer LATE_RETURN_CNT){
							this.LATE_RETURN_CNT = LATE_RETURN_CNT;
							return this;
						}				
						java.util.Date LAST_LATE_RETURN_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c85(java.util.Date LAST_LATE_RETURN_DATE){
							this.LAST_LATE_RETURN_DATE = LAST_LATE_RETURN_DATE;
							return this;
						}				
						Integer LAST_LATE_RETURN_MINUTES;
						
	            		public BufferLine_tRedshiftOutput_1 c86(Integer LAST_LATE_RETURN_MINUTES){
							this.LAST_LATE_RETURN_MINUTES = LAST_LATE_RETURN_MINUTES;
							return this;
						}				
						Double LAST_LATE_RETURN_CHARGE;
						
	            		public BufferLine_tRedshiftOutput_1 c87(Double LAST_LATE_RETURN_CHARGE){
							this.LAST_LATE_RETURN_CHARGE = LAST_LATE_RETURN_CHARGE;
							return this;
						}				
						Integer MAJOR_ACCIDENTS_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c88(Integer MAJOR_ACCIDENTS_CNT){
							this.MAJOR_ACCIDENTS_CNT = MAJOR_ACCIDENTS_CNT;
							return this;
						}				
						Integer MINOR_ACCIDENTS_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c89(Integer MINOR_ACCIDENTS_CNT){
							this.MINOR_ACCIDENTS_CNT = MINOR_ACCIDENTS_CNT;
							return this;
						}				
						java.util.Date LAST_ACCIDENT_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c90(java.util.Date LAST_ACCIDENT_DATE){
							this.LAST_ACCIDENT_DATE = LAST_ACCIDENT_DATE;
							return this;
						}				
						String LAST_ACCIDENT_CLASSIFICATION;
						
	            		public BufferLine_tRedshiftOutput_1 c91(String LAST_ACCIDENT_CLASSIFICATION){
							this.LAST_ACCIDENT_CLASSIFICATION = LAST_ACCIDENT_CLASSIFICATION;
							return this;
						}				
						java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c92(java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE){
							this.MEMBER_BEHAVIOR_REFRESH_DATE = MEMBER_BEHAVIOR_REFRESH_DATE;
							return this;
						}				
						Integer ZCORPORATE_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c93(Integer ZCORPORATE_CNT){
							this.ZCORPORATE_CNT = ZCORPORATE_CNT;
							return this;
						}				
						Integer CORPORATE_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c94(Integer CORPORATE_CNT){
							this.CORPORATE_CNT = CORPORATE_CNT;
							return this;
						}				
						Integer PERSONAL_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c95(Integer PERSONAL_CNT){
							this.PERSONAL_CNT = PERSONAL_CNT;
							return this;
						}				
						Integer EVPERSONAL_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c96(Integer EVPERSONAL_CNT){
							this.EVPERSONAL_CNT = EVPERSONAL_CNT;
							return this;
						}				
						Integer SPONSORED_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c97(Integer SPONSORED_CNT){
							this.SPONSORED_CNT = SPONSORED_CNT;
							return this;
						}				
						Integer EVSPONSORED_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c98(Integer EVSPONSORED_CNT){
							this.EVSPONSORED_CNT = EVSPONSORED_CNT;
							return this;
						}				
						Integer Z2B_LARGE_ACCOUNTS_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c99(Integer Z2B_LARGE_ACCOUNTS_CNT){
							this.Z2B_LARGE_ACCOUNTS_CNT = Z2B_LARGE_ACCOUNTS_CNT;
							return this;
						}				
						Integer SUBSCRIPTION_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c100(Integer SUBSCRIPTION_CNT){
							this.SUBSCRIPTION_CNT = SUBSCRIPTION_CNT;
							return this;
						}				
						Integer UNIV_DEPTS_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c101(Integer UNIV_DEPTS_CNT){
							this.UNIV_DEPTS_CNT = UNIV_DEPTS_CNT;
							return this;
						}				
						Integer VAN_RESTRICTED_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c102(Integer VAN_RESTRICTED_CNT){
							this.VAN_RESTRICTED_CNT = VAN_RESTRICTED_CNT;
							return this;
						}				
						Integer ACCESS_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c103(Integer ACCESS_CNT){
							this.ACCESS_CNT = ACCESS_CNT;
							return this;
						}				
						Integer ZCORPORATE_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c104(Integer ZCORPORATE_HIST_CNT){
							this.ZCORPORATE_HIST_CNT = ZCORPORATE_HIST_CNT;
							return this;
						}				
						Integer CORPORATE_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c105(Integer CORPORATE_HIST_CNT){
							this.CORPORATE_HIST_CNT = CORPORATE_HIST_CNT;
							return this;
						}				
						Integer PERSONAL_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c106(Integer PERSONAL_HIST_CNT){
							this.PERSONAL_HIST_CNT = PERSONAL_HIST_CNT;
							return this;
						}				
						Integer EVPERSONAL_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c107(Integer EVPERSONAL_HIST_CNT){
							this.EVPERSONAL_HIST_CNT = EVPERSONAL_HIST_CNT;
							return this;
						}				
						Integer SPONSORED_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c108(Integer SPONSORED_HIST_CNT){
							this.SPONSORED_HIST_CNT = SPONSORED_HIST_CNT;
							return this;
						}				
						Integer EVSPONSORED_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c109(Integer EVSPONSORED_HIST_CNT){
							this.EVSPONSORED_HIST_CNT = EVSPONSORED_HIST_CNT;
							return this;
						}				
						Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c110(Integer Z2B_LARGE_ACCOUNTS_HIST_CNT){
							this.Z2B_LARGE_ACCOUNTS_HIST_CNT = Z2B_LARGE_ACCOUNTS_HIST_CNT;
							return this;
						}				
						Integer SUBSCRIPTION_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c111(Integer SUBSCRIPTION_HIST_CNT){
							this.SUBSCRIPTION_HIST_CNT = SUBSCRIPTION_HIST_CNT;
							return this;
						}				
						Integer UNIV_DEPTS_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c112(Integer UNIV_DEPTS_HIST_CNT){
							this.UNIV_DEPTS_HIST_CNT = UNIV_DEPTS_HIST_CNT;
							return this;
						}				
						Integer VAN_RESTRICTED_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c113(Integer VAN_RESTRICTED_HIST_CNT){
							this.VAN_RESTRICTED_HIST_CNT = VAN_RESTRICTED_HIST_CNT;
							return this;
						}				
						Integer ACCESS_HIST_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c114(Integer ACCESS_HIST_CNT){
							this.ACCESS_HIST_CNT = ACCESS_HIST_CNT;
							return this;
						}				
						java.util.Date LAST_RES_SEARCH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c115(java.util.Date LAST_RES_SEARCH_DATE){
							this.LAST_RES_SEARCH_DATE = LAST_RES_SEARCH_DATE;
							return this;
						}				
						String LAST_RES_SEARCH_SOURCE;
						
	            		public BufferLine_tRedshiftOutput_1 c116(String LAST_RES_SEARCH_SOURCE){
							this.LAST_RES_SEARCH_SOURCE = LAST_RES_SEARCH_SOURCE;
							return this;
						}				
						String LAST_RES_SEARCH_COMPLETION_P;
						
	            		public BufferLine_tRedshiftOutput_1 c117(String LAST_RES_SEARCH_COMPLETION_P){
							this.LAST_RES_SEARCH_COMPLETION_P = LAST_RES_SEARCH_COMPLETION_P;
							return this;
						}				
						java.util.Date LAST_OVERNIGHT_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c118(java.util.Date LAST_OVERNIGHT_RES){
							this.LAST_OVERNIGHT_RES = LAST_OVERNIGHT_RES;
							return this;
						}				
						java.util.Date LAST_WKDAY_HRLY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c119(java.util.Date LAST_WKDAY_HRLY_RES){
							this.LAST_WKDAY_HRLY_RES = LAST_WKDAY_HRLY_RES;
							return this;
						}				
						java.util.Date LAST_WKDAY_DAILY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c120(java.util.Date LAST_WKDAY_DAILY_RES){
							this.LAST_WKDAY_DAILY_RES = LAST_WKDAY_DAILY_RES;
							return this;
						}				
						java.util.Date LAST_WKEND_HRLY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c121(java.util.Date LAST_WKEND_HRLY_RES){
							this.LAST_WKEND_HRLY_RES = LAST_WKEND_HRLY_RES;
							return this;
						}				
						java.util.Date LAST_WKEND_DAILY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c122(java.util.Date LAST_WKEND_DAILY_RES){
							this.LAST_WKEND_DAILY_RES = LAST_WKEND_DAILY_RES;
							return this;
						}				
						java.util.Date LAST_OVERNIGHT_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c123(java.util.Date LAST_OVERNIGHT_RES_DATE){
							this.LAST_OVERNIGHT_RES_DATE = LAST_OVERNIGHT_RES_DATE;
							return this;
						}				
						java.util.Date LAST_WKDAY_HRLY_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c124(java.util.Date LAST_WKDAY_HRLY_RES_DATE){
							this.LAST_WKDAY_HRLY_RES_DATE = LAST_WKDAY_HRLY_RES_DATE;
							return this;
						}				
						java.util.Date LAST_WKDAY_DAILY_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c125(java.util.Date LAST_WKDAY_DAILY_RES_DATE){
							this.LAST_WKDAY_DAILY_RES_DATE = LAST_WKDAY_DAILY_RES_DATE;
							return this;
						}				
						java.util.Date LAST_WKEND_HRLY_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c126(java.util.Date LAST_WKEND_HRLY_RES_DATE){
							this.LAST_WKEND_HRLY_RES_DATE = LAST_WKEND_HRLY_RES_DATE;
							return this;
						}				
						java.util.Date LAST_WKEND_DAILY_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c127(java.util.Date LAST_WKEND_DAILY_RES_DATE){
							this.LAST_WKEND_DAILY_RES_DATE = LAST_WKEND_DAILY_RES_DATE;
							return this;
						}				
						String LAST_RES_SEARCH_TYPE;
						
	            		public BufferLine_tRedshiftOutput_1 c128(String LAST_RES_SEARCH_TYPE){
							this.LAST_RES_SEARCH_TYPE = LAST_RES_SEARCH_TYPE;
							return this;
						}				
						java.util.Date MEMBER_LAST_RES_REFRESH_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c129(java.util.Date MEMBER_LAST_RES_REFRESH_DATE){
							this.MEMBER_LAST_RES_REFRESH_DATE = MEMBER_LAST_RES_REFRESH_DATE;
							return this;
						}				
						Long LAST_RESERVATION_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c130(Long LAST_RESERVATION_ID){
							this.LAST_RESERVATION_ID = LAST_RESERVATION_ID;
							return this;
						}				
						String RES_SOURCE;
						
	            		public BufferLine_tRedshiftOutput_1 c131(String RES_SOURCE){
							this.RES_SOURCE = RES_SOURCE;
							return this;
						}				
						String RES_SOURCE_DESCRIPTION;
						
	            		public BufferLine_tRedshiftOutput_1 c132(String RES_SOURCE_DESCRIPTION){
							this.RES_SOURCE_DESCRIPTION = RES_SOURCE_DESCRIPTION;
							return this;
						}				
						java.util.Date FIRST_WKDAY_HRLY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c133(java.util.Date FIRST_WKDAY_HRLY_RES){
							this.FIRST_WKDAY_HRLY_RES = FIRST_WKDAY_HRLY_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_HRLY_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c134(java.util.Date FIRST_WKEND_HRLY_RES){
							this.FIRST_WKEND_HRLY_RES = FIRST_WKEND_HRLY_RES;
							return this;
						}				
						String FIRST_RES_TYPE;
						
	            		public BufferLine_tRedshiftOutput_1 c135(String FIRST_RES_TYPE){
							this.FIRST_RES_TYPE = FIRST_RES_TYPE;
							return this;
						}				
						Integer DAYS_FROM_JOIN_TO_FIRST_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c136(Integer DAYS_FROM_JOIN_TO_FIRST_RES){
							this.DAYS_FROM_JOIN_TO_FIRST_RES = DAYS_FROM_JOIN_TO_FIRST_RES;
							return this;
						}				
						String FIRST_NPS_COHORT;
						
	            		public BufferLine_tRedshiftOutput_1 c137(String FIRST_NPS_COHORT){
							this.FIRST_NPS_COHORT = FIRST_NPS_COHORT;
							return this;
						}				
						String LAST_NPS_COHORT;
						
	            		public BufferLine_tRedshiftOutput_1 c138(String LAST_NPS_COHORT){
							this.LAST_NPS_COHORT = LAST_NPS_COHORT;
							return this;
						}				
						Integer NPS_SURVEY_CNT;
						
	            		public BufferLine_tRedshiftOutput_1 c139(Integer NPS_SURVEY_CNT){
							this.NPS_SURVEY_CNT = NPS_SURVEY_CNT;
							return this;
						}				
						Integer TOTAL_HOURS_1_TO_3MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c140(Integer TOTAL_HOURS_1_TO_3MTHS){
							this.TOTAL_HOURS_1_TO_3MTHS = TOTAL_HOURS_1_TO_3MTHS;
							return this;
						}				
						Integer TOTAL_HOURS_4_TO_6MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c141(Integer TOTAL_HOURS_4_TO_6MTHS){
							this.TOTAL_HOURS_4_TO_6MTHS = TOTAL_HOURS_4_TO_6MTHS;
							return this;
						}				
						Integer TOTAL_HOURS_7_TO_9MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c142(Integer TOTAL_HOURS_7_TO_9MTHS){
							this.TOTAL_HOURS_7_TO_9MTHS = TOTAL_HOURS_7_TO_9MTHS;
							return this;
						}				
						Integer TOTAL_HOURS_10_TO_12MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c143(Integer TOTAL_HOURS_10_TO_12MTHS){
							this.TOTAL_HOURS_10_TO_12MTHS = TOTAL_HOURS_10_TO_12MTHS;
							return this;
						}				
						Integer TOTAL_DISTANCE_1_TO_3MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c144(Integer TOTAL_DISTANCE_1_TO_3MTHS){
							this.TOTAL_DISTANCE_1_TO_3MTHS = TOTAL_DISTANCE_1_TO_3MTHS;
							return this;
						}				
						Integer TOTAL_DISTANCE_4_TO_6MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c145(Integer TOTAL_DISTANCE_4_TO_6MTHS){
							this.TOTAL_DISTANCE_4_TO_6MTHS = TOTAL_DISTANCE_4_TO_6MTHS;
							return this;
						}				
						Integer TOTAL_DISTANCE_7_TO_9MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c146(Integer TOTAL_DISTANCE_7_TO_9MTHS){
							this.TOTAL_DISTANCE_7_TO_9MTHS = TOTAL_DISTANCE_7_TO_9MTHS;
							return this;
						}				
						Integer TOTAL_DISTANCE_10_TO_12MTHS;
						
	            		public BufferLine_tRedshiftOutput_1 c147(Integer TOTAL_DISTANCE_10_TO_12MTHS){
							this.TOTAL_DISTANCE_10_TO_12MTHS = TOTAL_DISTANCE_10_TO_12MTHS;
							return this;
						}				
						String DISTANCE_UNITS;
						
	            		public BufferLine_tRedshiftOutput_1 c148(String DISTANCE_UNITS){
							this.DISTANCE_UNITS = DISTANCE_UNITS;
							return this;
						}				
						java.util.Date NEXT_FEE_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c149(java.util.Date NEXT_FEE_DATE){
							this.NEXT_FEE_DATE = NEXT_FEE_DATE;
							return this;
						}				
						Double NEXT_FEE_CHARGE;
						
	            		public BufferLine_tRedshiftOutput_1 c150(Double NEXT_FEE_CHARGE){
							this.NEXT_FEE_CHARGE = NEXT_FEE_CHARGE;
							return this;
						}				
						String NEXT_FEE_FREQ;
						
	            		public BufferLine_tRedshiftOutput_1 c151(String NEXT_FEE_FREQ){
							this.NEXT_FEE_FREQ = NEXT_FEE_FREQ;
							return this;
						}				
						String FIRST_RES_SEARCH_SOURCE;
						
	            		public BufferLine_tRedshiftOutput_1 c152(String FIRST_RES_SEARCH_SOURCE){
							this.FIRST_RES_SEARCH_SOURCE = FIRST_RES_SEARCH_SOURCE;
							return this;
						}				
						java.util.Date FIRST_OTHER_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c153(java.util.Date FIRST_OTHER_RES){
							this.FIRST_OTHER_RES = FIRST_OTHER_RES;
							return this;
						}				
						java.util.Date FIRST_NOSHOW_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c154(java.util.Date FIRST_NOSHOW_RES){
							this.FIRST_NOSHOW_RES = FIRST_NOSHOW_RES;
							return this;
						}				
						java.util.Date FIRST_CANCELLATION_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c155(java.util.Date FIRST_CANCELLATION_RES){
							this.FIRST_CANCELLATION_RES = FIRST_CANCELLATION_RES;
							return this;
						}				
						java.util.Date LAST_OTHER_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c156(java.util.Date LAST_OTHER_RES){
							this.LAST_OTHER_RES = LAST_OTHER_RES;
							return this;
						}				
						java.util.Date LAST_NOSHOW_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c157(java.util.Date LAST_NOSHOW_RES){
							this.LAST_NOSHOW_RES = LAST_NOSHOW_RES;
							return this;
						}				
						java.util.Date LAST_CANCELLATION_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c158(java.util.Date LAST_CANCELLATION_RES){
							this.LAST_CANCELLATION_RES = LAST_CANCELLATION_RES;
							return this;
						}				
						Integer COMPLETED_RES_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c159(Integer COMPLETED_RES_3MTHS_S){
							this.COMPLETED_RES_3MTHS_S = COMPLETED_RES_3MTHS_S;
							return this;
						}				
						Integer COMPLETED_RES_6MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c160(Integer COMPLETED_RES_6MTHS_S){
							this.COMPLETED_RES_6MTHS_S = COMPLETED_RES_6MTHS_S;
							return this;
						}				
						Integer COMPLETED_RES_9MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c161(Integer COMPLETED_RES_9MTHS_S){
							this.COMPLETED_RES_9MTHS_S = COMPLETED_RES_9MTHS_S;
							return this;
						}				
						Integer COMPLETED_RES_1YEAR_S;
						
	            		public BufferLine_tRedshiftOutput_1 c162(Integer COMPLETED_RES_1YEAR_S){
							this.COMPLETED_RES_1YEAR_S = COMPLETED_RES_1YEAR_S;
							return this;
						}				
						Integer COMPLETED_RES_6MTHS_WRKDAY_S;
						
	            		public BufferLine_tRedshiftOutput_1 c163(Integer COMPLETED_RES_6MTHS_WRKDAY_S){
							this.COMPLETED_RES_6MTHS_WRKDAY_S = COMPLETED_RES_6MTHS_WRKDAY_S;
							return this;
						}				
						Integer COMPLETED_RES_1YEAR_WRKDAY_S;
						
	            		public BufferLine_tRedshiftOutput_1 c164(Integer COMPLETED_RES_1YEAR_WRKDAY_S){
							this.COMPLETED_RES_1YEAR_WRKDAY_S = COMPLETED_RES_1YEAR_WRKDAY_S;
							return this;
						}				
						Double TOTAL_UP_REVENUE_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c165(Double TOTAL_UP_REVENUE_3MTHS_S){
							this.TOTAL_UP_REVENUE_3MTHS_S = TOTAL_UP_REVENUE_3MTHS_S;
							return this;
						}				
						Double TOTAL_UP_REVENUE_6MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c166(Double TOTAL_UP_REVENUE_6MTHS_S){
							this.TOTAL_UP_REVENUE_6MTHS_S = TOTAL_UP_REVENUE_6MTHS_S;
							return this;
						}				
						Double TOTAL_UP_REVENUE_9MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c167(Double TOTAL_UP_REVENUE_9MTHS_S){
							this.TOTAL_UP_REVENUE_9MTHS_S = TOTAL_UP_REVENUE_9MTHS_S;
							return this;
						}				
						Double TOTAL_UP_REVENUE_1YEAR_S;
						
	            		public BufferLine_tRedshiftOutput_1 c168(Double TOTAL_UP_REVENUE_1YEAR_S){
							this.TOTAL_UP_REVENUE_1YEAR_S = TOTAL_UP_REVENUE_1YEAR_S;
							return this;
						}				
						Double AVG_UP_REVENUE_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c169(Double AVG_UP_REVENUE_3MTHS_S){
							this.AVG_UP_REVENUE_3MTHS_S = AVG_UP_REVENUE_3MTHS_S;
							return this;
						}				
						Double AVG_UP_REVENUE_6MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c170(Double AVG_UP_REVENUE_6MTHS_S){
							this.AVG_UP_REVENUE_6MTHS_S = AVG_UP_REVENUE_6MTHS_S;
							return this;
						}				
						Double AVG_UP_REVENUE_9MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c171(Double AVG_UP_REVENUE_9MTHS_S){
							this.AVG_UP_REVENUE_9MTHS_S = AVG_UP_REVENUE_9MTHS_S;
							return this;
						}				
						Double AVG_UP_REVENUE_1YEAR_S;
						
	            		public BufferLine_tRedshiftOutput_1 c172(Double AVG_UP_REVENUE_1YEAR_S){
							this.AVG_UP_REVENUE_1YEAR_S = AVG_UP_REVENUE_1YEAR_S;
							return this;
						}				
						Integer RES_SEARCH_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c173(Integer RES_SEARCH_3MTHS_S){
							this.RES_SEARCH_3MTHS_S = RES_SEARCH_3MTHS_S;
							return this;
						}				
						Integer RES_SEARCH_TURNDOWN_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c174(Integer RES_SEARCH_TURNDOWN_3MTHS_S){
							this.RES_SEARCH_TURNDOWN_3MTHS_S = RES_SEARCH_TURNDOWN_3MTHS_S;
							return this;
						}				
						Integer RES_SEARCH_COMPLETIONS_3MTHS_S;
						
	            		public BufferLine_tRedshiftOutput_1 c175(Integer RES_SEARCH_COMPLETIONS_3MTHS_S){
							this.RES_SEARCH_COMPLETIONS_3MTHS_S = RES_SEARCH_COMPLETIONS_3MTHS_S;
							return this;
						}				
						java.util.Date NEXT_RES_DATE_S;
						
	            		public BufferLine_tRedshiftOutput_1 c176(java.util.Date NEXT_RES_DATE_S){
							this.NEXT_RES_DATE_S = NEXT_RES_DATE_S;
							return this;
						}				
						java.util.Date RES_REFRESH_DATE_S;
						
	            		public BufferLine_tRedshiftOutput_1 c177(java.util.Date RES_REFRESH_DATE_S){
							this.RES_REFRESH_DATE_S = RES_REFRESH_DATE_S;
							return this;
						}				
						Integer CANCELED_RES_1YEAR;
						
	            		public BufferLine_tRedshiftOutput_1 c178(Integer CANCELED_RES_1YEAR){
							this.CANCELED_RES_1YEAR = CANCELED_RES_1YEAR;
							return this;
						}				
						Integer BILLED_NOSHOW_RES_1YEAR;
						
	            		public BufferLine_tRedshiftOutput_1 c179(Integer BILLED_NOSHOW_RES_1YEAR){
							this.BILLED_NOSHOW_RES_1YEAR = BILLED_NOSHOW_RES_1YEAR;
							return this;
						}				
						Integer TOTAL_RES_1YEAR;
						
	            		public BufferLine_tRedshiftOutput_1 c180(Integer TOTAL_RES_1YEAR){
							this.TOTAL_RES_1YEAR = TOTAL_RES_1YEAR;
							return this;
						}				
						String AFFILIATE_TYPE;
						
	            		public BufferLine_tRedshiftOutput_1 c181(String AFFILIATE_TYPE){
							this.AFFILIATE_TYPE = AFFILIATE_TYPE;
							return this;
						}				
						java.util.Date ANNIVERSARY_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c182(java.util.Date ANNIVERSARY_DATE){
							this.ANNIVERSARY_DATE = ANNIVERSARY_DATE;
							return this;
						}				
						String LAST_RES_RATE_PLAN_KEY;
						
	            		public BufferLine_tRedshiftOutput_1 c183(String LAST_RES_RATE_PLAN_KEY){
							this.LAST_RES_RATE_PLAN_KEY = LAST_RES_RATE_PLAN_KEY;
							return this;
						}				
						String LAST_RES_VEHICLE_CLASS;
						
	            		public BufferLine_tRedshiftOutput_1 c184(String LAST_RES_VEHICLE_CLASS){
							this.LAST_RES_VEHICLE_CLASS = LAST_RES_VEHICLE_CLASS;
							return this;
						}				
						Long LAST_RES_VEHICLE_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c185(Long LAST_RES_VEHICLE_ID){
							this.LAST_RES_VEHICLE_ID = LAST_RES_VEHICLE_ID;
							return this;
						}				
						String ACTIVE_UNI_P;
						
	            		public BufferLine_tRedshiftOutput_1 c186(String ACTIVE_UNI_P){
							this.ACTIVE_UNI_P = ACTIVE_UNI_P;
							return this;
						}				
						String CURRENT_MEMBER_P;
						
	            		public BufferLine_tRedshiftOutput_1 c187(String CURRENT_MEMBER_P){
							this.CURRENT_MEMBER_P = CURRENT_MEMBER_P;
							return this;
						}				
						Long FIRST_JOIN_ACCOUNT_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c188(Long FIRST_JOIN_ACCOUNT_ID){
							this.FIRST_JOIN_ACCOUNT_ID = FIRST_JOIN_ACCOUNT_ID;
							return this;
						}				
						Long LAST_DIGIT_FIRST_ACCOUNT_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c189(Long LAST_DIGIT_FIRST_ACCOUNT_ID){
							this.LAST_DIGIT_FIRST_ACCOUNT_ID = LAST_DIGIT_FIRST_ACCOUNT_ID;
							return this;
						}				
						String FIRST_CORPORATE_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c190(String FIRST_CORPORATE_ID){
							this.FIRST_CORPORATE_ID = FIRST_CORPORATE_ID;
							return this;
						}				
						Long CURRENT_SUSPENSION_REASON_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c191(Long CURRENT_SUSPENSION_REASON_ID){
							this.CURRENT_SUSPENSION_REASON_ID = CURRENT_SUSPENSION_REASON_ID;
							return this;
						}				
						Long FIRST_APPLICATION_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c192(Long FIRST_APPLICATION_ID){
							this.FIRST_APPLICATION_ID = FIRST_APPLICATION_ID;
							return this;
						}				
						String FIRST_APP_IJD_SESSION_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c193(String FIRST_APP_IJD_SESSION_ID){
							this.FIRST_APP_IJD_SESSION_ID = FIRST_APP_IJD_SESSION_ID;
							return this;
						}				
						String FIRST_APPLICATION_IJD_P;
						
	            		public BufferLine_tRedshiftOutput_1 c194(String FIRST_APPLICATION_IJD_P){
							this.FIRST_APPLICATION_IJD_P = FIRST_APPLICATION_IJD_P;
							return this;
						}				
						String FIRST_RES_TYPE_DAILY_HOURLY;
						
	            		public BufferLine_tRedshiftOutput_1 c195(String FIRST_RES_TYPE_DAILY_HOURLY){
							this.FIRST_RES_TYPE_DAILY_HOURLY = FIRST_RES_TYPE_DAILY_HOURLY;
							return this;
						}				
						java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c196(java.util.Date FIRST_WKDAY_DAILY_AM_START_RES){
							this.FIRST_WKDAY_DAILY_AM_START_RES = FIRST_WKDAY_DAILY_AM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c197(java.util.Date FIRST_WKDAY_DAILY_PM_START_RES){
							this.FIRST_WKDAY_DAILY_PM_START_RES = FIRST_WKDAY_DAILY_PM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_DAILY_AM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c198(java.util.Date FIRST_WKEND_DAILY_AM_START_RES){
							this.FIRST_WKEND_DAILY_AM_START_RES = FIRST_WKEND_DAILY_AM_START_RES;
							return this;
						}				
						java.util.Date FIRST_WKEND_DAILY_PM_START_RES;
						
	            		public BufferLine_tRedshiftOutput_1 c199(java.util.Date FIRST_WKEND_DAILY_PM_START_RES){
							this.FIRST_WKEND_DAILY_PM_START_RES = FIRST_WKEND_DAILY_PM_START_RES;
							return this;
						}				
						String FIRST_RES_SOURCE;
						
	            		public BufferLine_tRedshiftOutput_1 c200(String FIRST_RES_SOURCE){
							this.FIRST_RES_SOURCE = FIRST_RES_SOURCE;
							return this;
						}				
						String FIRST_RES_SOURCE_DESC;
						
	            		public BufferLine_tRedshiftOutput_1 c201(String FIRST_RES_SOURCE_DESC){
							this.FIRST_RES_SOURCE_DESC = FIRST_RES_SOURCE_DESC;
							return this;
						}				
						Long FIRST_RES_VEHICLE_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c202(Long FIRST_RES_VEHICLE_ID){
							this.FIRST_RES_VEHICLE_ID = FIRST_RES_VEHICLE_ID;
							return this;
						}				
						Long FIRST_RES_ZIPFLEET_ID;
						
	            		public BufferLine_tRedshiftOutput_1 c203(Long FIRST_RES_ZIPFLEET_ID){
							this.FIRST_RES_ZIPFLEET_ID = FIRST_RES_ZIPFLEET_ID;
							return this;
						}				
						java.util.Date FIRST_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c204(java.util.Date FIRST_RES_DATE){
							this.FIRST_RES_DATE = FIRST_RES_DATE;
							return this;
						}				
						java.util.Date SECOND_RES_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c205(java.util.Date SECOND_RES_DATE){
							this.SECOND_RES_DATE = SECOND_RES_DATE;
							return this;
						}				
						java.util.Date FIRST_WAIVER_START_DATE;
						
	            		public BufferLine_tRedshiftOutput_1 c206(java.util.Date FIRST_WAIVER_START_DATE){
							this.FIRST_WAIVER_START_DATE = FIRST_WAIVER_START_DATE;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 150;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=150-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"MEMBER_ID\",\"AFFILIATE_ID_1\",\"AFFILIATE_NAME_1\",\"AFFILIATE_ID_2\",\"AFFILIATE_NAME_2\",\"AFFILIATE_ID_3\",\"AFFILIATE_NAME_3\",\"AFFILIATE_ID_4\",\"AFFILIATE_NAME_4\",\"AFFILIATE_ID_5\",\"AFFILIATE_NAME_5\",\"AFFILIATE_ID_6\",\"AFFILIATE_NAME_6\",\"AFFILIATE_ID_7\",\"AFFILIATE_NAME_7\",\"AFFILIATE_ID_8\",\"AFFILIATE_NAME_8\",\"AFFILIATE_ID_9\",\"AFFILIATE_NAME_9\",\"DELETED_DATE\",\"LAST_MODIFIED\",\"AFFILIATE_REFRESH_DATE\",\"WAIVER_ELIGIBLE_P\",\"PER_TRIP_WAIVER_ELIGIBLE_P\",\"CURRENT_WAIVER_PLAN_ID\",\"CURRENT_WAIVER_PLAN_NAME\",\"CURRENT_WAIVER_PLAN_FEE\",\"CURRENT_WAIVER_TIER\",\"CURRENT_WAIVER_DEDUCTIBLE\",\"CURRENT_W_AUTO_RENEW_P\",\"CURRENT_WAIVER_START_DATE\",\"CURRENT_WAIVER_END_DATE\",\"PER_TRIP_WAIVER_CNT\",\"LAST_PER_TRIP_WAIVER_DATE\",\"EVER_HAD_ANY_WAIVER_P\",\"WAIVER_REFRESH_DATE\",\"DRIVER_RISK_TIER_INFO_P\",\"FIRST_RISK_TIER_KEY\",\"LAST_RISK_TIER_KEY\",\"FIRST_MIN_LEVEL\",\"LAST_MIN_LEVEL\",\"TOTAL_RISK_TIER_CHANGES\",\"TRIPS_COMPLETED\",\"LAST_ACCIDENT_KARMA_DATE\",\"LAST_LIC_POINTS_KARMA_DATE\",\"DRIVER_RISK_REFRESH_DATE\",\"LAST_RES_DATE\",\"LAST_RES_TYPE\",\"DAYS_SINCE_LAST_DRIVE\",\"NEXT_RES_TYPE\",\"DAYS_UNTIL_NEXT_DRIVE\",\"FIRST_GAS_FILLUP_DATE\",\"FIRST_GAS_FILLUP_AMOUNT\",\"FIRST_GAS_FILLUP_CHARGE\",\"LAST_GAS_FILLUP_DATE\",\"LAST_GAS_FILLUP_AMOUNT\",\"LAST_GAS_FILLUP_CHARGE\",\"FILLUP_CNT\",\"WEX_REFRESH_DATE\",\"FIRST_NPS_RESPONSE_DATE\",\"FIRST_NPS_COMPLETE\",\"FIRST_NPS_SCORE\",\"LAST_NPS_RESPONSE_DATE\",\"LAST_NPS_COMPLETE\",\"LAST_NPS_SCORE\",\"NPS_SURVEY_REFRESH\",\"FIRST_RES_SEARCH_DATE\",\"FIRST_RES_SEARCH_COMPLETION_P\",\"FIRST_RES_LOCAL_START_DATE\",\"FIRST_OVERNIGHT_RES\",\"FIRST_WKDAY_HRLY_AM_START_RES\",\"FIRST_WKDAY_HRLY_PM_START_RES\",\"FIRST_WKEND_HRLY_AM_START_RES\",\"FIRST_WKEND_HRLY_PM_START_RES\",\"FIRST_WKDAY_DAILY_RES\",\"FIRST_WKEND_DAILY_RES\",\"MEMBER_FIRST_RES_REFRESH_DATE\",\"REFER_A_FRIEND_CNT\",\"TOTAL_GIFT_CARD_CNT\",\"TOTAL_GIFT_CARD_AMT_USD\",\"LAST_GIFT_CARD_PURCHASE_DATE\",\"LAST_GIFT_CARD_PURCHAS_AMT_USD\",\"LAST_GIFT_CARD_PURCHASE_CURR\",\"GIFT_CARD_CNT\",\"LATE_RETURN_CNT\",\"LAST_LATE_RETURN_DATE\",\"LAST_LATE_RETURN_MINUTES\",\"LAST_LATE_RETURN_CHARGE\",\"MAJOR_ACCIDENTS_CNT\",\"MINOR_ACCIDENTS_CNT\",\"LAST_ACCIDENT_DATE\",\"LAST_ACCIDENT_CLASSIFICATION\",\"MEMBER_BEHAVIOR_REFRESH_DATE\",\"ZCORPORATE_CNT\",\"CORPORATE_CNT\",\"PERSONAL_CNT\",\"EVPERSONAL_CNT\",\"SPONSORED_CNT\",\"EVSPONSORED_CNT\",\"Z2B_LARGE_ACCOUNTS_CNT\",\"SUBSCRIPTION_CNT\",\"UNIV_DEPTS_CNT\",\"VAN_RESTRICTED_CNT\",\"ACCESS_CNT\",\"ZCORPORATE_HIST_CNT\",\"CORPORATE_HIST_CNT\",\"PERSONAL_HIST_CNT\",\"EVPERSONAL_HIST_CNT\",\"SPONSORED_HIST_CNT\",\"EVSPONSORED_HIST_CNT\",\"Z2B_LARGE_ACCOUNTS_HIST_CNT\",\"SUBSCRIPTION_HIST_CNT\",\"UNIV_DEPTS_HIST_CNT\",\"VAN_RESTRICTED_HIST_CNT\",\"ACCESS_HIST_CNT\",\"LAST_RES_SEARCH_DATE\",\"LAST_RES_SEARCH_SOURCE\",\"LAST_RES_SEARCH_COMPLETION_P\",\"LAST_OVERNIGHT_RES\",\"LAST_WKDAY_HRLY_RES\",\"LAST_WKDAY_DAILY_RES\",\"LAST_WKEND_HRLY_RES\",\"LAST_WKEND_DAILY_RES\",\"LAST_OVERNIGHT_RES_DATE\",\"LAST_WKDAY_HRLY_RES_DATE\",\"LAST_WKDAY_DAILY_RES_DATE\",\"LAST_WKEND_HRLY_RES_DATE\",\"LAST_WKEND_DAILY_RES_DATE\",\"LAST_RES_SEARCH_TYPE\",\"MEMBER_LAST_RES_REFRESH_DATE\",\"LAST_RESERVATION_ID\",\"RES_SOURCE\",\"RES_SOURCE_DESCRIPTION\",\"FIRST_WKDAY_HRLY_RES\",\"FIRST_WKEND_HRLY_RES\",\"FIRST_RES_TYPE\",\"DAYS_FROM_JOIN_TO_FIRST_RES\",\"FIRST_NPS_COHORT\",\"LAST_NPS_COHORT\",\"NPS_SURVEY_CNT\",\"TOTAL_HOURS_1_TO_3MTHS\",\"TOTAL_HOURS_4_TO_6MTHS\",\"TOTAL_HOURS_7_TO_9MTHS\",\"TOTAL_HOURS_10_TO_12MTHS\",\"TOTAL_DISTANCE_1_TO_3MTHS\",\"TOTAL_DISTANCE_4_TO_6MTHS\",\"TOTAL_DISTANCE_7_TO_9MTHS\",\"TOTAL_DISTANCE_10_TO_12MTHS\",\"DISTANCE_UNITS\",\"NEXT_FEE_DATE\",\"NEXT_FEE_CHARGE\",\"NEXT_FEE_FREQ\",\"FIRST_RES_SEARCH_SOURCE\",\"FIRST_OTHER_RES\",\"FIRST_NOSHOW_RES\",\"FIRST_CANCELLATION_RES\",\"LAST_OTHER_RES\",\"LAST_NOSHOW_RES\",\"LAST_CANCELLATION_RES\",\"COMPLETED_RES_3MTHS_S\",\"COMPLETED_RES_6MTHS_S\",\"COMPLETED_RES_9MTHS_S\",\"COMPLETED_RES_1YEAR_S\",\"COMPLETED_RES_6MTHS_WRKDAY_S\",\"COMPLETED_RES_1YEAR_WRKDAY_S\",\"TOTAL_UP_REVENUE_3MTHS_S\",\"TOTAL_UP_REVENUE_6MTHS_S\",\"TOTAL_UP_REVENUE_9MTHS_S\",\"TOTAL_UP_REVENUE_1YEAR_S\",\"AVG_UP_REVENUE_3MTHS_S\",\"AVG_UP_REVENUE_6MTHS_S\",\"AVG_UP_REVENUE_9MTHS_S\",\"AVG_UP_REVENUE_1YEAR_S\",\"RES_SEARCH_3MTHS_S\",\"RES_SEARCH_TURNDOWN_3MTHS_S\",\"RES_SEARCH_COMPLETIONS_3MTHS_S\",\"NEXT_RES_DATE_S\",\"RES_REFRESH_DATE_S\",\"CANCELED_RES_1YEAR\",\"BILLED_NOSHOW_RES_1YEAR\",\"TOTAL_RES_1YEAR\",\"AFFILIATE_TYPE\",\"ANNIVERSARY_DATE\",\"LAST_RES_RATE_PLAN_KEY\",\"LAST_RES_VEHICLE_CLASS\",\"LAST_RES_VEHICLE_ID\",\"ACTIVE_UNI_P\",\"CURRENT_MEMBER_P\",\"FIRST_JOIN_ACCOUNT_ID\",\"LAST_DIGIT_FIRST_ACCOUNT_ID\",\"FIRST_CORPORATE_ID\",\"CURRENT_SUSPENSION_REASON_ID\",\"FIRST_APPLICATION_ID\",\"FIRST_APP_IJD_SESSION_ID\",\"FIRST_APPLICATION_IJD_P\",\"FIRST_RES_TYPE_DAILY_HOURLY\",\"FIRST_WKDAY_DAILY_AM_START_RES\",\"FIRST_WKDAY_DAILY_PM_START_RES\",\"FIRST_WKEND_DAILY_AM_START_RES\",\"FIRST_WKEND_DAILY_PM_START_RES\",\"FIRST_RES_SOURCE\",\"FIRST_RES_SOURCE_DESC\",\"FIRST_RES_VEHICLE_ID\",\"FIRST_RES_ZIPFLEET_ID\",\"FIRST_RES_DATE\",\"SECOND_RES_DATE\",\"FIRST_WAIVER_START_DATE\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Row_FeedRecord" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_1,Row_FeedRecordStruct Row_FeedRecord ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							Row_FeedRecord.MEMBER_ID = 0;
					
							Row_FeedRecord.AFFILIATE_ID_1 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_1 = null;
					
							Row_FeedRecord.AFFILIATE_ID_2 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_2 = null;
					
							Row_FeedRecord.AFFILIATE_ID_3 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_3 = null;
					
							Row_FeedRecord.AFFILIATE_ID_4 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_4 = null;
					
							Row_FeedRecord.AFFILIATE_ID_5 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_5 = null;
					
							Row_FeedRecord.AFFILIATE_ID_6 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_6 = null;
					
							Row_FeedRecord.AFFILIATE_ID_7 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_7 = null;
					
							Row_FeedRecord.AFFILIATE_ID_8 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_8 = null;
					
							Row_FeedRecord.AFFILIATE_ID_9 = null;
					
							Row_FeedRecord.AFFILIATE_NAME_9 = null;
					
							Row_FeedRecord.DELETED_DATE = null;
					
							Row_FeedRecord.LAST_MODIFIED = null;
					
							Row_FeedRecord.AFFILIATE_REFRESH_DATE = null;
					
							Row_FeedRecord.WAIVER_ELIGIBLE_P = null;
					
							Row_FeedRecord.PER_TRIP_WAIVER_ELIGIBLE_P = null;
					
							Row_FeedRecord.CURRENT_WAIVER_PLAN_ID = null;
					
							Row_FeedRecord.CURRENT_WAIVER_PLAN_NAME = null;
					
							Row_FeedRecord.CURRENT_WAIVER_PLAN_FEE = null;
					
							Row_FeedRecord.CURRENT_WAIVER_TIER = null;
					
							Row_FeedRecord.CURRENT_WAIVER_DEDUCTIBLE = null;
					
							Row_FeedRecord.CURRENT_W_AUTO_RENEW_P = null;
					
							Row_FeedRecord.CURRENT_WAIVER_START_DATE = null;
					
							Row_FeedRecord.CURRENT_WAIVER_END_DATE = null;
					
							Row_FeedRecord.PER_TRIP_WAIVER_CNT = 0;
					
							Row_FeedRecord.LAST_PER_TRIP_WAIVER_DATE = null;
					
							Row_FeedRecord.EVER_HAD_ANY_WAIVER_P = null;
					
							Row_FeedRecord.WAIVER_REFRESH_DATE = null;
					
							Row_FeedRecord.DRIVER_RISK_TIER_INFO_P = null;
					
							Row_FeedRecord.FIRST_RISK_TIER_KEY = null;
					
							Row_FeedRecord.LAST_RISK_TIER_KEY = null;
					
							Row_FeedRecord.FIRST_MIN_LEVEL = null;
					
							Row_FeedRecord.LAST_MIN_LEVEL = null;
					
							Row_FeedRecord.TOTAL_RISK_TIER_CHANGES = null;
					
							Row_FeedRecord.TRIPS_COMPLETED = 0;
					
							Row_FeedRecord.LAST_ACCIDENT_KARMA_DATE = null;
					
							Row_FeedRecord.LAST_LIC_POINTS_KARMA_DATE = null;
					
							Row_FeedRecord.DRIVER_RISK_REFRESH_DATE = null;
					
							Row_FeedRecord.LAST_RES_DATE = null;
					
							Row_FeedRecord.LAST_RES_TYPE = null;
					
							Row_FeedRecord.DAYS_SINCE_LAST_DRIVE = null;
					
							Row_FeedRecord.NEXT_RES_TYPE = null;
					
							Row_FeedRecord.DAYS_UNTIL_NEXT_DRIVE = null;
					
							Row_FeedRecord.FIRST_GAS_FILLUP_DATE = null;
					
							Row_FeedRecord.FIRST_GAS_FILLUP_AMOUNT = null;
					
							Row_FeedRecord.FIRST_GAS_FILLUP_CHARGE = null;
					
							Row_FeedRecord.LAST_GAS_FILLUP_DATE = null;
					
							Row_FeedRecord.LAST_GAS_FILLUP_AMOUNT = null;
					
							Row_FeedRecord.LAST_GAS_FILLUP_CHARGE = null;
					
							Row_FeedRecord.FILLUP_CNT = null;
					
							Row_FeedRecord.WEX_REFRESH_DATE = null;
					
							Row_FeedRecord.FIRST_NPS_RESPONSE_DATE = null;
					
							Row_FeedRecord.FIRST_NPS_COMPLETE = null;
					
							Row_FeedRecord.FIRST_NPS_SCORE = null;
					
							Row_FeedRecord.LAST_NPS_RESPONSE_DATE = null;
					
							Row_FeedRecord.LAST_NPS_COMPLETE = null;
					
							Row_FeedRecord.LAST_NPS_SCORE = null;
					
							Row_FeedRecord.NPS_SURVEY_REFRESH = null;
					
							Row_FeedRecord.FIRST_RES_SEARCH_DATE = null;
					
							Row_FeedRecord.FIRST_RES_SEARCH_COMPLETION_P = null;
					
							Row_FeedRecord.FIRST_RES_LOCAL_START_DATE = null;
					
							Row_FeedRecord.FIRST_OVERNIGHT_RES = null;
					
							Row_FeedRecord.FIRST_WKDAY_HRLY_AM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKDAY_HRLY_PM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_HRLY_AM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_HRLY_PM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKDAY_DAILY_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_DAILY_RES = null;
					
							Row_FeedRecord.MEMBER_FIRST_RES_REFRESH_DATE = null;
					
							Row_FeedRecord.REFER_A_FRIEND_CNT = null;
					
							Row_FeedRecord.TOTAL_GIFT_CARD_CNT = null;
					
							Row_FeedRecord.TOTAL_GIFT_CARD_AMT_USD = null;
					
							Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_DATE = null;
					
							Row_FeedRecord.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
					
							Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_CURR = null;
					
							Row_FeedRecord.GIFT_CARD_CNT = null;
					
							Row_FeedRecord.LATE_RETURN_CNT = null;
					
							Row_FeedRecord.LAST_LATE_RETURN_DATE = null;
					
							Row_FeedRecord.LAST_LATE_RETURN_MINUTES = null;
					
							Row_FeedRecord.LAST_LATE_RETURN_CHARGE = null;
					
							Row_FeedRecord.MAJOR_ACCIDENTS_CNT = null;
					
							Row_FeedRecord.MINOR_ACCIDENTS_CNT = null;
					
							Row_FeedRecord.LAST_ACCIDENT_DATE = null;
					
							Row_FeedRecord.LAST_ACCIDENT_CLASSIFICATION = null;
					
							Row_FeedRecord.MEMBER_BEHAVIOR_REFRESH_DATE = null;
					
							Row_FeedRecord.ZCORPORATE_CNT = null;
					
							Row_FeedRecord.CORPORATE_CNT = null;
					
							Row_FeedRecord.PERSONAL_CNT = null;
					
							Row_FeedRecord.EVPERSONAL_CNT = null;
					
							Row_FeedRecord.SPONSORED_CNT = null;
					
							Row_FeedRecord.EVSPONSORED_CNT = null;
					
							Row_FeedRecord.Z2B_LARGE_ACCOUNTS_CNT = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.MEMBER_ID = ParserUtils.parseTo_long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'MEMBER_ID' in 'Row_FeedRecord' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MEMBER_ID = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_1 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_1 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_1 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_1 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_2 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_2 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_2 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_2 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_3 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_3 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_3 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_3 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_4 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_4 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_4 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_4 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_5 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_5 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_5 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_5 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_5 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_6 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_6 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_6 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_6 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_6 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_7 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_7 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_7 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_7 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_7 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_8 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_8 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_8 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_8 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_8 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AFFILIATE_ID_9 = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_ID_9 = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_ID_9 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_NAME_9 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_NAME_9 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.DELETED_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.DELETED_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.DELETED_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_MODIFIED = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_MODIFIED = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_MODIFIED = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.AFFILIATE_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AFFILIATE_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.WAIVER_ELIGIBLE_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.WAIVER_ELIGIBLE_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.PER_TRIP_WAIVER_ELIGIBLE_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.PER_TRIP_WAIVER_ELIGIBLE_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CURRENT_WAIVER_PLAN_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_PLAN_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_PLAN_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.CURRENT_WAIVER_PLAN_NAME = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_PLAN_NAME = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CURRENT_WAIVER_PLAN_FEE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_PLAN_FEE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_PLAN_FEE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CURRENT_WAIVER_TIER = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_TIER = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_TIER = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CURRENT_WAIVER_DEDUCTIBLE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_DEDUCTIBLE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_DEDUCTIBLE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.CURRENT_W_AUTO_RENEW_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.CURRENT_W_AUTO_RENEW_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.CURRENT_WAIVER_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_START_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.CURRENT_WAIVER_END_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_WAIVER_END_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_WAIVER_END_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.PER_TRIP_WAIVER_CNT = ParserUtils.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'PER_TRIP_WAIVER_CNT' in 'Row_FeedRecord' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.PER_TRIP_WAIVER_CNT = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_PER_TRIP_WAIVER_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_PER_TRIP_WAIVER_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_PER_TRIP_WAIVER_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.EVER_HAD_ANY_WAIVER_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.EVER_HAD_ANY_WAIVER_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.WAIVER_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.WAIVER_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.WAIVER_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.DRIVER_RISK_TIER_INFO_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.DRIVER_RISK_TIER_INFO_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RISK_TIER_KEY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RISK_TIER_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RISK_TIER_KEY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RISK_TIER_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_MIN_LEVEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_MIN_LEVEL = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_MIN_LEVEL = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_MIN_LEVEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_MIN_LEVEL = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_MIN_LEVEL = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_RISK_TIER_CHANGES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_RISK_TIER_CHANGES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_RISK_TIER_CHANGES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TRIPS_COMPLETED = ParserUtils.parseTo_int(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'TRIPS_COMPLETED' in 'Row_FeedRecord' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TRIPS_COMPLETED = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_ACCIDENT_KARMA_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_ACCIDENT_KARMA_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_ACCIDENT_KARMA_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_LIC_POINTS_KARMA_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_LIC_POINTS_KARMA_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_LIC_POINTS_KARMA_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.DRIVER_RISK_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.DRIVER_RISK_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.DRIVER_RISK_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.DAYS_SINCE_LAST_DRIVE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.DAYS_SINCE_LAST_DRIVE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.DAYS_SINCE_LAST_DRIVE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.NEXT_RES_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.NEXT_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.DAYS_UNTIL_NEXT_DRIVE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.DAYS_UNTIL_NEXT_DRIVE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.DAYS_UNTIL_NEXT_DRIVE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_GAS_FILLUP_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_GAS_FILLUP_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_GAS_FILLUP_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_GAS_FILLUP_AMOUNT = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_GAS_FILLUP_AMOUNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_GAS_FILLUP_AMOUNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_GAS_FILLUP_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_GAS_FILLUP_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_GAS_FILLUP_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_GAS_FILLUP_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_GAS_FILLUP_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_GAS_FILLUP_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_GAS_FILLUP_AMOUNT = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_GAS_FILLUP_AMOUNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_GAS_FILLUP_AMOUNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_GAS_FILLUP_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_GAS_FILLUP_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_GAS_FILLUP_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FILLUP_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FILLUP_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FILLUP_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.WEX_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.WEX_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.WEX_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_NPS_RESPONSE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_NPS_RESPONSE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_NPS_RESPONSE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_NPS_COMPLETE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_NPS_COMPLETE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_NPS_SCORE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_NPS_SCORE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_NPS_SCORE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_NPS_RESPONSE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_NPS_RESPONSE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_NPS_RESPONSE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_NPS_COMPLETE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_NPS_COMPLETE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_NPS_SCORE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_NPS_SCORE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_NPS_SCORE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.NPS_SURVEY_REFRESH = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.NPS_SURVEY_REFRESH = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.NPS_SURVEY_REFRESH = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_RES_SEARCH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_RES_SEARCH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_SEARCH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_SEARCH_COMPLETION_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_SEARCH_COMPLETION_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_RES_LOCAL_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_RES_LOCAL_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_LOCAL_START_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_OVERNIGHT_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_OVERNIGHT_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_OVERNIGHT_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_HRLY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_HRLY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_HRLY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_HRLY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_HRLY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_HRLY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_HRLY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_HRLY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_HRLY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_HRLY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_HRLY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_HRLY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.MEMBER_FIRST_RES_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.MEMBER_FIRST_RES_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MEMBER_FIRST_RES_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.REFER_A_FRIEND_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.REFER_A_FRIEND_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.REFER_A_FRIEND_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_GIFT_CARD_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_GIFT_CARD_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_GIFT_CARD_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_GIFT_CARD_AMT_USD = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_GIFT_CARD_AMT_USD = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_GIFT_CARD_AMT_USD = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_GIFT_CARD_PURCHAS_AMT_USD = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_CURR = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_CURR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.GIFT_CARD_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.GIFT_CARD_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.GIFT_CARD_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LATE_RETURN_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LATE_RETURN_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LATE_RETURN_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_LATE_RETURN_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_LATE_RETURN_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_LATE_RETURN_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_LATE_RETURN_MINUTES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_LATE_RETURN_MINUTES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_LATE_RETURN_MINUTES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_LATE_RETURN_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_LATE_RETURN_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_LATE_RETURN_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.MAJOR_ACCIDENTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.MAJOR_ACCIDENTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MAJOR_ACCIDENTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.MINOR_ACCIDENTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.MINOR_ACCIDENTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MINOR_ACCIDENTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_ACCIDENT_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_ACCIDENT_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_ACCIDENT_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_ACCIDENT_CLASSIFICATION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_ACCIDENT_CLASSIFICATION = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.MEMBER_BEHAVIOR_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.MEMBER_BEHAVIOR_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MEMBER_BEHAVIOR_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.ZCORPORATE_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.ZCORPORATE_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.ZCORPORATE_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CORPORATE_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CORPORATE_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CORPORATE_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.PERSONAL_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.PERSONAL_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.PERSONAL_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.EVPERSONAL_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.EVPERSONAL_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.EVPERSONAL_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.SPONSORED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.SPONSORED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.SPONSORED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.EVSPONSORED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.EVSPONSORED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.EVSPONSORED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.Z2B_LARGE_ACCOUNTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.Z2B_LARGE_ACCOUNTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.Z2B_LARGE_ACCOUNTS_CNT = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_1.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_1,Row_FeedRecordStruct Row_FeedRecord ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							Row_FeedRecord.SUBSCRIPTION_CNT = null;
					
							Row_FeedRecord.UNIV_DEPTS_CNT = null;
					
							Row_FeedRecord.VAN_RESTRICTED_CNT = null;
					
							Row_FeedRecord.ACCESS_CNT = null;
					
							Row_FeedRecord.ZCORPORATE_HIST_CNT = null;
					
							Row_FeedRecord.CORPORATE_HIST_CNT = null;
					
							Row_FeedRecord.PERSONAL_HIST_CNT = null;
					
							Row_FeedRecord.EVPERSONAL_HIST_CNT = null;
					
							Row_FeedRecord.SPONSORED_HIST_CNT = null;
					
							Row_FeedRecord.EVSPONSORED_HIST_CNT = null;
					
							Row_FeedRecord.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
					
							Row_FeedRecord.SUBSCRIPTION_HIST_CNT = null;
					
							Row_FeedRecord.UNIV_DEPTS_HIST_CNT = null;
					
							Row_FeedRecord.VAN_RESTRICTED_HIST_CNT = null;
					
							Row_FeedRecord.ACCESS_HIST_CNT = null;
					
							Row_FeedRecord.LAST_RES_SEARCH_DATE = null;
					
							Row_FeedRecord.LAST_RES_SEARCH_SOURCE = null;
					
							Row_FeedRecord.LAST_RES_SEARCH_COMPLETION_P = null;
					
							Row_FeedRecord.LAST_OVERNIGHT_RES = null;
					
							Row_FeedRecord.LAST_WKDAY_HRLY_RES = null;
					
							Row_FeedRecord.LAST_WKDAY_DAILY_RES = null;
					
							Row_FeedRecord.LAST_WKEND_HRLY_RES = null;
					
							Row_FeedRecord.LAST_WKEND_DAILY_RES = null;
					
							Row_FeedRecord.LAST_OVERNIGHT_RES_DATE = null;
					
							Row_FeedRecord.LAST_WKDAY_HRLY_RES_DATE = null;
					
							Row_FeedRecord.LAST_WKDAY_DAILY_RES_DATE = null;
					
							Row_FeedRecord.LAST_WKEND_HRLY_RES_DATE = null;
					
							Row_FeedRecord.LAST_WKEND_DAILY_RES_DATE = null;
					
							Row_FeedRecord.LAST_RES_SEARCH_TYPE = null;
					
							Row_FeedRecord.MEMBER_LAST_RES_REFRESH_DATE = null;
					
							Row_FeedRecord.LAST_RESERVATION_ID = null;
					
							Row_FeedRecord.RES_SOURCE = null;
					
							Row_FeedRecord.RES_SOURCE_DESCRIPTION = null;
					
							Row_FeedRecord.FIRST_WKDAY_HRLY_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_HRLY_RES = null;
					
							Row_FeedRecord.FIRST_RES_TYPE = null;
					
							Row_FeedRecord.DAYS_FROM_JOIN_TO_FIRST_RES = null;
					
							Row_FeedRecord.FIRST_NPS_COHORT = null;
					
							Row_FeedRecord.LAST_NPS_COHORT = null;
					
							Row_FeedRecord.NPS_SURVEY_CNT = null;
					
							Row_FeedRecord.TOTAL_HOURS_1_TO_3MTHS = null;
					
							Row_FeedRecord.TOTAL_HOURS_4_TO_6MTHS = null;
					
							Row_FeedRecord.TOTAL_HOURS_7_TO_9MTHS = null;
					
							Row_FeedRecord.TOTAL_HOURS_10_TO_12MTHS = null;
					
							Row_FeedRecord.TOTAL_DISTANCE_1_TO_3MTHS = null;
					
							Row_FeedRecord.TOTAL_DISTANCE_4_TO_6MTHS = null;
					
							Row_FeedRecord.TOTAL_DISTANCE_7_TO_9MTHS = null;
					
							Row_FeedRecord.TOTAL_DISTANCE_10_TO_12MTHS = null;
					
							Row_FeedRecord.DISTANCE_UNITS = null;
					
							Row_FeedRecord.NEXT_FEE_DATE = null;
					
							Row_FeedRecord.NEXT_FEE_CHARGE = null;
					
							Row_FeedRecord.NEXT_FEE_FREQ = null;
					
							Row_FeedRecord.FIRST_RES_SEARCH_SOURCE = null;
					
							Row_FeedRecord.FIRST_OTHER_RES = null;
					
							Row_FeedRecord.FIRST_NOSHOW_RES = null;
					
							Row_FeedRecord.FIRST_CANCELLATION_RES = null;
					
							Row_FeedRecord.LAST_OTHER_RES = null;
					
							Row_FeedRecord.LAST_NOSHOW_RES = null;
					
							Row_FeedRecord.LAST_CANCELLATION_RES = null;
					
							Row_FeedRecord.COMPLETED_RES_3MTHS_S = null;
					
							Row_FeedRecord.COMPLETED_RES_6MTHS_S = null;
					
							Row_FeedRecord.COMPLETED_RES_9MTHS_S = null;
					
							Row_FeedRecord.COMPLETED_RES_1YEAR_S = null;
					
							Row_FeedRecord.COMPLETED_RES_6MTHS_WRKDAY_S = null;
					
							Row_FeedRecord.COMPLETED_RES_1YEAR_WRKDAY_S = null;
					
							Row_FeedRecord.TOTAL_UP_REVENUE_3MTHS_S = null;
					
							Row_FeedRecord.TOTAL_UP_REVENUE_6MTHS_S = null;
					
							Row_FeedRecord.TOTAL_UP_REVENUE_9MTHS_S = null;
					
							Row_FeedRecord.TOTAL_UP_REVENUE_1YEAR_S = null;
					
							Row_FeedRecord.AVG_UP_REVENUE_3MTHS_S = null;
					
							Row_FeedRecord.AVG_UP_REVENUE_6MTHS_S = null;
					
							Row_FeedRecord.AVG_UP_REVENUE_9MTHS_S = null;
					
							Row_FeedRecord.AVG_UP_REVENUE_1YEAR_S = null;
					
							Row_FeedRecord.RES_SEARCH_3MTHS_S = null;
					
							Row_FeedRecord.RES_SEARCH_TURNDOWN_3MTHS_S = null;
					
							Row_FeedRecord.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
					
							Row_FeedRecord.NEXT_RES_DATE_S = null;
					
							Row_FeedRecord.RES_REFRESH_DATE_S = null;
					
							Row_FeedRecord.CANCELED_RES_1YEAR = null;
					
							Row_FeedRecord.BILLED_NOSHOW_RES_1YEAR = null;
					
							Row_FeedRecord.TOTAL_RES_1YEAR = null;
					
							Row_FeedRecord.AFFILIATE_TYPE = null;
					
							Row_FeedRecord.ANNIVERSARY_DATE = null;
					
							Row_FeedRecord.LAST_RES_RATE_PLAN_KEY = null;
					
							Row_FeedRecord.LAST_RES_VEHICLE_CLASS = null;
					
							Row_FeedRecord.LAST_RES_VEHICLE_ID = null;
					
							Row_FeedRecord.ACTIVE_UNI_P = null;
					
							Row_FeedRecord.CURRENT_MEMBER_P = null;
					
							Row_FeedRecord.FIRST_JOIN_ACCOUNT_ID = null;
					
							Row_FeedRecord.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
					
							Row_FeedRecord.FIRST_CORPORATE_ID = null;
					
							Row_FeedRecord.CURRENT_SUSPENSION_REASON_ID = null;
					
							Row_FeedRecord.FIRST_APPLICATION_ID = null;
					
							Row_FeedRecord.FIRST_APP_IJD_SESSION_ID = null;
					
							Row_FeedRecord.FIRST_APPLICATION_IJD_P = null;
					
							Row_FeedRecord.FIRST_RES_TYPE_DAILY_HOURLY = null;
					
							Row_FeedRecord.FIRST_WKDAY_DAILY_AM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKDAY_DAILY_PM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_DAILY_AM_START_RES = null;
					
							Row_FeedRecord.FIRST_WKEND_DAILY_PM_START_RES = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.SUBSCRIPTION_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.SUBSCRIPTION_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.SUBSCRIPTION_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.UNIV_DEPTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.UNIV_DEPTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.UNIV_DEPTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.VAN_RESTRICTED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.VAN_RESTRICTED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.VAN_RESTRICTED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.ACCESS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.ACCESS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.ACCESS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.ZCORPORATE_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.ZCORPORATE_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.ZCORPORATE_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CORPORATE_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CORPORATE_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CORPORATE_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.PERSONAL_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.PERSONAL_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.PERSONAL_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.EVPERSONAL_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.EVPERSONAL_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.EVPERSONAL_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.SPONSORED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.SPONSORED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.SPONSORED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.EVSPONSORED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.EVSPONSORED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.EVSPONSORED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.Z2B_LARGE_ACCOUNTS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.SUBSCRIPTION_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.SUBSCRIPTION_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.SUBSCRIPTION_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.UNIV_DEPTS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.UNIV_DEPTS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.UNIV_DEPTS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.VAN_RESTRICTED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.VAN_RESTRICTED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.VAN_RESTRICTED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.ACCESS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.ACCESS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.ACCESS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_RES_SEARCH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_RES_SEARCH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_SEARCH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_SEARCH_SOURCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_SEARCH_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_SEARCH_COMPLETION_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_SEARCH_COMPLETION_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_OVERNIGHT_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_OVERNIGHT_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_OVERNIGHT_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 119;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKDAY_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKDAY_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKDAY_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 120;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKDAY_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKDAY_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKDAY_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 121;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKEND_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKEND_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKEND_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 122;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKEND_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKEND_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKEND_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 123;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_OVERNIGHT_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_OVERNIGHT_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_OVERNIGHT_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 124;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKDAY_HRLY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKDAY_HRLY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKDAY_HRLY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 125;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKDAY_DAILY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKDAY_DAILY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKDAY_DAILY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 126;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKEND_HRLY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKEND_HRLY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKEND_HRLY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 127;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_WKEND_DAILY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_WKEND_DAILY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_WKEND_DAILY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 128;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_SEARCH_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_SEARCH_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 129;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.MEMBER_LAST_RES_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.MEMBER_LAST_RES_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.MEMBER_LAST_RES_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 130;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_RESERVATION_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_RESERVATION_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_RESERVATION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 131;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.RES_SOURCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.RES_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 132;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.RES_SOURCE_DESCRIPTION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.RES_SOURCE_DESCRIPTION = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 133;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 134;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 135;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 136;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.DAYS_FROM_JOIN_TO_FIRST_RES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.DAYS_FROM_JOIN_TO_FIRST_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.DAYS_FROM_JOIN_TO_FIRST_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 137;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_NPS_COHORT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_NPS_COHORT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 138;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_NPS_COHORT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_NPS_COHORT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 139;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.NPS_SURVEY_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.NPS_SURVEY_CNT = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.NPS_SURVEY_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 140;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_HOURS_1_TO_3MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_HOURS_1_TO_3MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_HOURS_1_TO_3MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 141;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_HOURS_4_TO_6MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_HOURS_4_TO_6MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_HOURS_4_TO_6MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 142;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_HOURS_7_TO_9MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_HOURS_7_TO_9MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_HOURS_7_TO_9MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 143;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_HOURS_10_TO_12MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_HOURS_10_TO_12MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_HOURS_10_TO_12MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 144;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_DISTANCE_1_TO_3MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_DISTANCE_1_TO_3MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_DISTANCE_1_TO_3MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 145;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_DISTANCE_4_TO_6MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_DISTANCE_4_TO_6MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_DISTANCE_4_TO_6MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 146;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_DISTANCE_7_TO_9MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_DISTANCE_7_TO_9MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_DISTANCE_7_TO_9MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 147;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_DISTANCE_10_TO_12MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_DISTANCE_10_TO_12MTHS = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_DISTANCE_10_TO_12MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 148;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.DISTANCE_UNITS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.DISTANCE_UNITS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 149;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.NEXT_FEE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.NEXT_FEE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.NEXT_FEE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 150;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.NEXT_FEE_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.NEXT_FEE_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.NEXT_FEE_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 151;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.NEXT_FEE_FREQ = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.NEXT_FEE_FREQ = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 152;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_SEARCH_SOURCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_SEARCH_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 153;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_OTHER_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_OTHER_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_OTHER_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 154;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_NOSHOW_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_NOSHOW_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_NOSHOW_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 155;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_CANCELLATION_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_CANCELLATION_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_CANCELLATION_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 156;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_OTHER_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_OTHER_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_OTHER_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 157;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_NOSHOW_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_NOSHOW_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_NOSHOW_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 158;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.LAST_CANCELLATION_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_CANCELLATION_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_CANCELLATION_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 159;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 160;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_6MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 161;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_9MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 162;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_1YEAR_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 163;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_6MTHS_WRKDAY_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_6MTHS_WRKDAY_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_6MTHS_WRKDAY_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 164;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.COMPLETED_RES_1YEAR_WRKDAY_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.COMPLETED_RES_1YEAR_WRKDAY_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.COMPLETED_RES_1YEAR_WRKDAY_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 165;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_UP_REVENUE_3MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_UP_REVENUE_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_UP_REVENUE_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 166;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_UP_REVENUE_6MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_UP_REVENUE_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_UP_REVENUE_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 167;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_UP_REVENUE_9MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_UP_REVENUE_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_UP_REVENUE_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 168;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_UP_REVENUE_1YEAR_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_UP_REVENUE_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_UP_REVENUE_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 169;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AVG_UP_REVENUE_3MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AVG_UP_REVENUE_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AVG_UP_REVENUE_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 170;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AVG_UP_REVENUE_6MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AVG_UP_REVENUE_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AVG_UP_REVENUE_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 171;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AVG_UP_REVENUE_9MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AVG_UP_REVENUE_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AVG_UP_REVENUE_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 172;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.AVG_UP_REVENUE_1YEAR_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.AVG_UP_REVENUE_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.AVG_UP_REVENUE_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 173;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.RES_SEARCH_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.RES_SEARCH_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.RES_SEARCH_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 174;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.RES_SEARCH_TURNDOWN_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.RES_SEARCH_TURNDOWN_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.RES_SEARCH_TURNDOWN_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 175;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.RES_SEARCH_COMPLETIONS_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 176;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.NEXT_RES_DATE_S = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.NEXT_RES_DATE_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.NEXT_RES_DATE_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 177;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.RES_REFRESH_DATE_S = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.RES_REFRESH_DATE_S = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.RES_REFRESH_DATE_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 178;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CANCELED_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CANCELED_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CANCELED_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 179;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.BILLED_NOSHOW_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.BILLED_NOSHOW_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.BILLED_NOSHOW_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 180;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.TOTAL_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.TOTAL_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.TOTAL_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 181;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.AFFILIATE_TYPE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.AFFILIATE_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 182;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.ANNIVERSARY_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.ANNIVERSARY_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.ANNIVERSARY_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 183;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_RATE_PLAN_KEY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_RATE_PLAN_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 184;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.LAST_RES_VEHICLE_CLASS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_VEHICLE_CLASS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 185;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_RES_VEHICLE_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_RES_VEHICLE_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_RES_VEHICLE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 186;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.ACTIVE_UNI_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.ACTIVE_UNI_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 187;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.CURRENT_MEMBER_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.CURRENT_MEMBER_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 188;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_JOIN_ACCOUNT_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_JOIN_ACCOUNT_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_JOIN_ACCOUNT_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 189;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.LAST_DIGIT_FIRST_ACCOUNT_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 190;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_CORPORATE_ID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_CORPORATE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 191;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.CURRENT_SUSPENSION_REASON_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.CURRENT_SUSPENSION_REASON_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.CURRENT_SUSPENSION_REASON_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 192;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_APPLICATION_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_APPLICATION_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_APPLICATION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 193;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_APP_IJD_SESSION_ID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_APP_IJD_SESSION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 194;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_APPLICATION_IJD_P = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_APPLICATION_IJD_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 195;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_TYPE_DAILY_HOURLY = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_TYPE_DAILY_HOURLY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 196;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_DAILY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_DAILY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_DAILY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 197;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKDAY_DAILY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKDAY_DAILY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKDAY_DAILY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 198;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_DAILY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_DAILY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_DAILY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 199;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WKEND_DAILY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WKEND_DAILY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WKEND_DAILY_PM_START_RES = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_1.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn_2(String[] rowtFileInputDelimited_1,Row_FeedRecordStruct Row_FeedRecord ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							Row_FeedRecord.FIRST_RES_SOURCE = null;
					
							Row_FeedRecord.FIRST_RES_SOURCE_DESC = null;
					
							Row_FeedRecord.FIRST_RES_VEHICLE_ID = null;
					
							Row_FeedRecord.FIRST_RES_ZIPFLEET_ID = null;
					
							Row_FeedRecord.FIRST_RES_DATE = null;
					
							Row_FeedRecord.SECOND_RES_DATE = null;
					
							Row_FeedRecord.FIRST_WAIVER_START_DATE = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 200;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_SOURCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 201;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.FIRST_RES_SOURCE_DESC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_SOURCE_DESC = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 202;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_RES_VEHICLE_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_RES_VEHICLE_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_VEHICLE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 203;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.FIRST_RES_ZIPFLEET_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_RES_ZIPFLEET_ID = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_ZIPFLEET_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 204;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 205;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.SECOND_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.SECOND_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.SECOND_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 206;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.FIRST_WAIVER_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.FIRST_WAIVER_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.FIRST_WAIVER_START_DATE = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_1.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_1,Row_FeedRecordStruct Row_FeedRecord ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_1,Row_FeedRecord );
					
						valueToConn_1(rowtFileInputDelimited_1,Row_FeedRecord );
					
						valueToConn_2(rowtFileInputDelimited_1,Row_FeedRecord );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
	        			java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
	        			try {
		        			if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
		        				zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_1));
		        			}else{
		        				zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1))));
		        			}
	        			} catch(java.lang.Exception e) {
	        				
								
								System.err.println(e.getMessage());
							
	        			}
	        			java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;
		        
				        while (true) {
			        		try {
	        					entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1.getNextEntry();
	        				} catch(java.lang.Exception e) {
	        					
									
									System.err.println(e.getMessage());
									break;
								
	        				}
	        				if(entry_tFileInputDelimited_1 == null) {
								break;
							}
	        				if(entry_tFileInputDelimited_1.isDirectory()){ //directory
	        					continue;
	        				}
	        				String[] rowtFileInputDelimited_1=null;
	        				int currentLinetFileInputDelimited_1 = 0;
	        				int outputLinetFileInputDelimited_1 = 0;
	        				try {//TD110 begin
	        					csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(zis_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							Row_FeedRecord = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								Row_FeedRecord = new Row_FeedRecordStruct();
								try {			
									
			rowHelper_tFileInputDelimited_1.valueToConn(rowtFileInputDelimited_1, Row_FeedRecord );
		
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							Row_FeedRecord = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "Row_FeedRecord"
if(Row_FeedRecord != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//Row_FeedRecord
			//Row_FeedRecord


			
				if(execStat){
					runStat.updateStatOnConnection("Row_FeedRecord"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
Record_OutputToDB.MEMBER_ID = Row_FeedRecord.MEMBER_ID;
Record_OutputToDB.AFFILIATE_ID_1 = Row_FeedRecord.AFFILIATE_ID_1;
Record_OutputToDB.AFFILIATE_NAME_1 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_1);
Record_OutputToDB.AFFILIATE_ID_2 = Row_FeedRecord.AFFILIATE_ID_2;
Record_OutputToDB.AFFILIATE_NAME_2 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_2);
Record_OutputToDB.AFFILIATE_ID_3 = Row_FeedRecord.AFFILIATE_ID_3;
Record_OutputToDB.AFFILIATE_NAME_3 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_3);
Record_OutputToDB.AFFILIATE_ID_4 = Row_FeedRecord.AFFILIATE_ID_4;
Record_OutputToDB.AFFILIATE_NAME_4 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_4);
Record_OutputToDB.AFFILIATE_ID_5 = Row_FeedRecord.AFFILIATE_ID_5;
Record_OutputToDB.AFFILIATE_NAME_5 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_5);
Record_OutputToDB.AFFILIATE_ID_6 = Row_FeedRecord.AFFILIATE_ID_6;
Record_OutputToDB.AFFILIATE_NAME_6 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_6);
Record_OutputToDB.AFFILIATE_ID_7 = Row_FeedRecord.AFFILIATE_ID_7;
Record_OutputToDB.AFFILIATE_NAME_7 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_7);
Record_OutputToDB.AFFILIATE_ID_8 = Row_FeedRecord.AFFILIATE_ID_8;
Record_OutputToDB.AFFILIATE_NAME_8 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_8);
Record_OutputToDB.AFFILIATE_ID_9 = Row_FeedRecord.AFFILIATE_ID_9;
Record_OutputToDB.AFFILIATE_NAME_9 = StringUtils.trimToNull(Row_FeedRecord.AFFILIATE_NAME_9);
Record_OutputToDB.DELETED_DATE = Row_FeedRecord.DELETED_DATE;
Record_OutputToDB.LAST_MODIFIED = Row_FeedRecord.LAST_MODIFIED;
Record_OutputToDB.AFFILIATE_REFRESH_DATE = Row_FeedRecord.AFFILIATE_REFRESH_DATE;
Record_OutputToDB.WAIVER_ELIGIBLE_P = BooleanUtils.boolChar(Row_FeedRecord.WAIVER_ELIGIBLE_P);
Record_OutputToDB.PER_TRIP_WAIVER_ELIGIBLE_P = BooleanUtils.boolChar(Row_FeedRecord.PER_TRIP_WAIVER_ELIGIBLE_P);
Record_OutputToDB.CURRENT_WAIVER_PLAN_ID = Row_FeedRecord.CURRENT_WAIVER_PLAN_ID;
Record_OutputToDB.CURRENT_WAIVER_PLAN_NAME = StringUtils.trimToNull(Row_FeedRecord.CURRENT_WAIVER_PLAN_NAME);
Record_OutputToDB.CURRENT_WAIVER_PLAN_FEE = Row_FeedRecord.CURRENT_WAIVER_PLAN_FEE;
Record_OutputToDB.CURRENT_WAIVER_TIER = Row_FeedRecord.CURRENT_WAIVER_TIER;
Record_OutputToDB.CURRENT_WAIVER_DEDUCTIBLE = Row_FeedRecord.CURRENT_WAIVER_DEDUCTIBLE;
Record_OutputToDB.CURRENT_W_AUTO_RENEW_P = BooleanUtils.boolChar(Row_FeedRecord.CURRENT_W_AUTO_RENEW_P);
Record_OutputToDB.CURRENT_WAIVER_START_DATE = Row_FeedRecord.CURRENT_WAIVER_START_DATE;
Record_OutputToDB.CURRENT_WAIVER_END_DATE = Row_FeedRecord.CURRENT_WAIVER_END_DATE;
Record_OutputToDB.PER_TRIP_WAIVER_CNT = Row_FeedRecord.PER_TRIP_WAIVER_CNT;
Record_OutputToDB.LAST_PER_TRIP_WAIVER_DATE = Row_FeedRecord.LAST_PER_TRIP_WAIVER_DATE;
Record_OutputToDB.EVER_HAD_ANY_WAIVER_P = BooleanUtils.boolChar(Row_FeedRecord.EVER_HAD_ANY_WAIVER_P);
Record_OutputToDB.WAIVER_REFRESH_DATE = Row_FeedRecord.WAIVER_REFRESH_DATE;
Record_OutputToDB.DRIVER_RISK_TIER_INFO_P = BooleanUtils.boolChar(Row_FeedRecord.DRIVER_RISK_TIER_INFO_P);
Record_OutputToDB.FIRST_RISK_TIER_KEY = StringUtils.trimToNull(Row_FeedRecord.FIRST_RISK_TIER_KEY);
Record_OutputToDB.LAST_RISK_TIER_KEY = StringUtils.trimToNull(Row_FeedRecord.LAST_RISK_TIER_KEY);
Record_OutputToDB.FIRST_MIN_LEVEL = Row_FeedRecord.FIRST_MIN_LEVEL;
Record_OutputToDB.LAST_MIN_LEVEL = Row_FeedRecord.LAST_MIN_LEVEL;
Record_OutputToDB.TOTAL_RISK_TIER_CHANGES = Row_FeedRecord.TOTAL_RISK_TIER_CHANGES;
Record_OutputToDB.TRIPS_COMPLETED = Row_FeedRecord.TRIPS_COMPLETED;
Record_OutputToDB.LAST_ACCIDENT_KARMA_DATE = Row_FeedRecord.LAST_ACCIDENT_KARMA_DATE;
Record_OutputToDB.LAST_LIC_POINTS_KARMA_DATE = Row_FeedRecord.LAST_LIC_POINTS_KARMA_DATE;
Record_OutputToDB.DRIVER_RISK_REFRESH_DATE = Row_FeedRecord.DRIVER_RISK_REFRESH_DATE;
Record_OutputToDB.LAST_RES_DATE = Row_FeedRecord.LAST_RES_DATE;
Record_OutputToDB.LAST_RES_TYPE = StringUtils.trimToNull(Row_FeedRecord.LAST_RES_TYPE);
Record_OutputToDB.DAYS_SINCE_LAST_DRIVE = Row_FeedRecord.DAYS_SINCE_LAST_DRIVE;
Record_OutputToDB.NEXT_RES_TYPE = StringUtils.trimToNull(Row_FeedRecord.NEXT_RES_TYPE);
Record_OutputToDB.DAYS_UNTIL_NEXT_DRIVE = Row_FeedRecord.DAYS_UNTIL_NEXT_DRIVE;
Record_OutputToDB.FIRST_GAS_FILLUP_DATE = Row_FeedRecord.FIRST_GAS_FILLUP_DATE;
Record_OutputToDB.FIRST_GAS_FILLUP_AMOUNT = Row_FeedRecord.FIRST_GAS_FILLUP_AMOUNT;
Record_OutputToDB.FIRST_GAS_FILLUP_CHARGE = Row_FeedRecord.FIRST_GAS_FILLUP_CHARGE;
Record_OutputToDB.LAST_GAS_FILLUP_DATE = Row_FeedRecord.LAST_GAS_FILLUP_DATE;
Record_OutputToDB.LAST_GAS_FILLUP_AMOUNT = Row_FeedRecord.LAST_GAS_FILLUP_AMOUNT;
Record_OutputToDB.LAST_GAS_FILLUP_CHARGE = Row_FeedRecord.LAST_GAS_FILLUP_CHARGE;
Record_OutputToDB.FILLUP_CNT = Row_FeedRecord.FILLUP_CNT;
Record_OutputToDB.WEX_REFRESH_DATE = Row_FeedRecord.WEX_REFRESH_DATE;
Record_OutputToDB.FIRST_NPS_RESPONSE_DATE = Row_FeedRecord.FIRST_NPS_RESPONSE_DATE;
Record_OutputToDB.FIRST_NPS_COMPLETE = BooleanUtils.boolChar(Row_FeedRecord.FIRST_NPS_COMPLETE);
Record_OutputToDB.FIRST_NPS_SCORE = Row_FeedRecord.FIRST_NPS_SCORE;
Record_OutputToDB.LAST_NPS_RESPONSE_DATE = Row_FeedRecord.LAST_NPS_RESPONSE_DATE;
Record_OutputToDB.LAST_NPS_COMPLETE = BooleanUtils.boolChar(Row_FeedRecord.LAST_NPS_COMPLETE);
Record_OutputToDB.LAST_NPS_SCORE = Row_FeedRecord.LAST_NPS_SCORE;
Record_OutputToDB.NPS_SURVEY_REFRESH = Row_FeedRecord.NPS_SURVEY_REFRESH;
Record_OutputToDB.FIRST_RES_SEARCH_DATE = Row_FeedRecord.FIRST_RES_SEARCH_DATE;
Record_OutputToDB.FIRST_RES_SEARCH_COMPLETION_P = BooleanUtils.boolChar(Row_FeedRecord.FIRST_RES_SEARCH_COMPLETION_P);
Record_OutputToDB.FIRST_RES_LOCAL_START_DATE = Row_FeedRecord.FIRST_RES_LOCAL_START_DATE;
Record_OutputToDB.FIRST_OVERNIGHT_RES = Row_FeedRecord.FIRST_OVERNIGHT_RES;
Record_OutputToDB.FIRST_WKDAY_HRLY_AM_START_RES = Row_FeedRecord.FIRST_WKDAY_HRLY_AM_START_RES;
Record_OutputToDB.FIRST_WKDAY_HRLY_PM_START_RES = Row_FeedRecord.FIRST_WKDAY_HRLY_PM_START_RES;
Record_OutputToDB.FIRST_WKEND_HRLY_AM_START_RES = Row_FeedRecord.FIRST_WKEND_HRLY_AM_START_RES;
Record_OutputToDB.FIRST_WKEND_HRLY_PM_START_RES = Row_FeedRecord.FIRST_WKEND_HRLY_PM_START_RES;
Record_OutputToDB.FIRST_WKDAY_DAILY_RES = Row_FeedRecord.FIRST_WKDAY_DAILY_RES;
Record_OutputToDB.FIRST_WKEND_DAILY_RES = Row_FeedRecord.FIRST_WKEND_DAILY_RES;
Record_OutputToDB.MEMBER_FIRST_RES_REFRESH_DATE = Row_FeedRecord.MEMBER_FIRST_RES_REFRESH_DATE;
Record_OutputToDB.REFER_A_FRIEND_CNT = Row_FeedRecord.REFER_A_FRIEND_CNT;
Record_OutputToDB.TOTAL_GIFT_CARD_CNT = Row_FeedRecord.TOTAL_GIFT_CARD_CNT;
Record_OutputToDB.TOTAL_GIFT_CARD_AMT_USD = Row_FeedRecord.TOTAL_GIFT_CARD_AMT_USD;
Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_DATE = Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_DATE;
Record_OutputToDB.LAST_GIFT_CARD_PURCHAS_AMT_USD = Row_FeedRecord.LAST_GIFT_CARD_PURCHAS_AMT_USD;
Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_CURR = StringUtils.trimToNull(Row_FeedRecord.LAST_GIFT_CARD_PURCHASE_CURR);
Record_OutputToDB.GIFT_CARD_CNT = Row_FeedRecord.GIFT_CARD_CNT;
Record_OutputToDB.LATE_RETURN_CNT = Row_FeedRecord.LATE_RETURN_CNT;
Record_OutputToDB.LAST_LATE_RETURN_DATE = Row_FeedRecord.LAST_LATE_RETURN_DATE;
Record_OutputToDB.LAST_LATE_RETURN_MINUTES = Row_FeedRecord.LAST_LATE_RETURN_MINUTES;
Record_OutputToDB.LAST_LATE_RETURN_CHARGE = Row_FeedRecord.LAST_LATE_RETURN_CHARGE;
Record_OutputToDB.MAJOR_ACCIDENTS_CNT = Row_FeedRecord.MAJOR_ACCIDENTS_CNT;
Record_OutputToDB.MINOR_ACCIDENTS_CNT = Row_FeedRecord.MINOR_ACCIDENTS_CNT;
Record_OutputToDB.LAST_ACCIDENT_DATE = Row_FeedRecord.LAST_ACCIDENT_DATE;
Record_OutputToDB.LAST_ACCIDENT_CLASSIFICATION = StringUtils.trimToNull(Row_FeedRecord.LAST_ACCIDENT_CLASSIFICATION);
Record_OutputToDB.MEMBER_BEHAVIOR_REFRESH_DATE = Row_FeedRecord.MEMBER_BEHAVIOR_REFRESH_DATE;
Record_OutputToDB.ZCORPORATE_CNT = Row_FeedRecord.ZCORPORATE_CNT;
Record_OutputToDB.CORPORATE_CNT = Row_FeedRecord.CORPORATE_CNT;
Record_OutputToDB.PERSONAL_CNT = Row_FeedRecord.PERSONAL_CNT;
Record_OutputToDB.EVPERSONAL_CNT = Row_FeedRecord.EVPERSONAL_CNT;
Record_OutputToDB.SPONSORED_CNT = Row_FeedRecord.SPONSORED_CNT;
Record_OutputToDB.EVSPONSORED_CNT = Row_FeedRecord.EVSPONSORED_CNT;
Record_OutputToDB.Z2B_LARGE_ACCOUNTS_CNT = Row_FeedRecord.Z2B_LARGE_ACCOUNTS_CNT;
Record_OutputToDB.SUBSCRIPTION_CNT = Row_FeedRecord.SUBSCRIPTION_CNT;
Record_OutputToDB.UNIV_DEPTS_CNT = Row_FeedRecord.UNIV_DEPTS_CNT;
Record_OutputToDB.VAN_RESTRICTED_CNT = Row_FeedRecord.VAN_RESTRICTED_CNT;
Record_OutputToDB.ACCESS_CNT = Row_FeedRecord.ACCESS_CNT;
Record_OutputToDB.ZCORPORATE_HIST_CNT = Row_FeedRecord.ZCORPORATE_HIST_CNT;
Record_OutputToDB.CORPORATE_HIST_CNT = Row_FeedRecord.CORPORATE_HIST_CNT;
Record_OutputToDB.PERSONAL_HIST_CNT = Row_FeedRecord.PERSONAL_HIST_CNT;
Record_OutputToDB.EVPERSONAL_HIST_CNT = Row_FeedRecord.EVPERSONAL_HIST_CNT;
Record_OutputToDB.SPONSORED_HIST_CNT = Row_FeedRecord.SPONSORED_HIST_CNT;
Record_OutputToDB.EVSPONSORED_HIST_CNT = Row_FeedRecord.EVSPONSORED_HIST_CNT;
Record_OutputToDB.Z2B_LARGE_ACCOUNTS_HIST_CNT = Row_FeedRecord.Z2B_LARGE_ACCOUNTS_HIST_CNT;
Record_OutputToDB.SUBSCRIPTION_HIST_CNT = Row_FeedRecord.SUBSCRIPTION_HIST_CNT;
Record_OutputToDB.UNIV_DEPTS_HIST_CNT = Row_FeedRecord.UNIV_DEPTS_HIST_CNT;
Record_OutputToDB.VAN_RESTRICTED_HIST_CNT = Row_FeedRecord.VAN_RESTRICTED_HIST_CNT;
Record_OutputToDB.ACCESS_HIST_CNT = Row_FeedRecord.ACCESS_HIST_CNT;
Record_OutputToDB.LAST_RES_SEARCH_DATE = Row_FeedRecord.LAST_RES_SEARCH_DATE;
Record_OutputToDB.LAST_RES_SEARCH_SOURCE = StringUtils.trimToNull(Row_FeedRecord.LAST_RES_SEARCH_SOURCE);
Record_OutputToDB.LAST_RES_SEARCH_COMPLETION_P = BooleanUtils.boolChar(Row_FeedRecord.LAST_RES_SEARCH_COMPLETION_P);
Record_OutputToDB.LAST_OVERNIGHT_RES = Row_FeedRecord.LAST_OVERNIGHT_RES;
Record_OutputToDB.LAST_WKDAY_HRLY_RES = Row_FeedRecord.LAST_WKDAY_HRLY_RES;
Record_OutputToDB.LAST_WKDAY_DAILY_RES = Row_FeedRecord.LAST_WKDAY_DAILY_RES;
Record_OutputToDB.LAST_WKEND_HRLY_RES = Row_FeedRecord.LAST_WKEND_HRLY_RES;
Record_OutputToDB.LAST_WKEND_DAILY_RES = Row_FeedRecord.LAST_WKEND_DAILY_RES;
Record_OutputToDB.LAST_OVERNIGHT_RES_DATE = Row_FeedRecord.LAST_OVERNIGHT_RES_DATE;
Record_OutputToDB.LAST_WKDAY_HRLY_RES_DATE = Row_FeedRecord.LAST_WKDAY_HRLY_RES_DATE;
Record_OutputToDB.LAST_WKDAY_DAILY_RES_DATE = Row_FeedRecord.LAST_WKDAY_DAILY_RES_DATE;
Record_OutputToDB.LAST_WKEND_HRLY_RES_DATE = Row_FeedRecord.LAST_WKEND_HRLY_RES_DATE;
Record_OutputToDB.LAST_WKEND_DAILY_RES_DATE = Row_FeedRecord.LAST_WKEND_DAILY_RES_DATE;
Record_OutputToDB.LAST_RES_SEARCH_TYPE = StringUtils.trimToNull(Row_FeedRecord.LAST_RES_SEARCH_TYPE);
Record_OutputToDB.MEMBER_LAST_RES_REFRESH_DATE = Row_FeedRecord.MEMBER_LAST_RES_REFRESH_DATE;
Record_OutputToDB.LAST_RESERVATION_ID = Row_FeedRecord.LAST_RESERVATION_ID;
Record_OutputToDB.RES_SOURCE = StringUtils.trimToNull(Row_FeedRecord.RES_SOURCE);
Record_OutputToDB.RES_SOURCE_DESCRIPTION = StringUtils.trimToNull(Row_FeedRecord.RES_SOURCE_DESCRIPTION);
Record_OutputToDB.FIRST_WKDAY_HRLY_RES = Row_FeedRecord.FIRST_WKDAY_HRLY_RES;
Record_OutputToDB.FIRST_WKEND_HRLY_RES = Row_FeedRecord.FIRST_WKEND_HRLY_RES;
Record_OutputToDB.FIRST_RES_TYPE = StringUtils.trimToNull(Row_FeedRecord.FIRST_RES_TYPE);
Record_OutputToDB.DAYS_FROM_JOIN_TO_FIRST_RES = Row_FeedRecord.DAYS_FROM_JOIN_TO_FIRST_RES;
Record_OutputToDB.FIRST_NPS_COHORT = StringUtils.trimToNull(Row_FeedRecord.FIRST_NPS_COHORT);
Record_OutputToDB.LAST_NPS_COHORT = StringUtils.trimToNull(Row_FeedRecord.LAST_NPS_COHORT);
Record_OutputToDB.NPS_SURVEY_CNT = Row_FeedRecord.NPS_SURVEY_CNT;
Record_OutputToDB.TOTAL_HOURS_1_TO_3MTHS = Row_FeedRecord.TOTAL_HOURS_1_TO_3MTHS;
Record_OutputToDB.TOTAL_HOURS_4_TO_6MTHS = Row_FeedRecord.TOTAL_HOURS_4_TO_6MTHS;
Record_OutputToDB.TOTAL_HOURS_7_TO_9MTHS = Row_FeedRecord.TOTAL_HOURS_7_TO_9MTHS;
Record_OutputToDB.TOTAL_HOURS_10_TO_12MTHS = Row_FeedRecord.TOTAL_HOURS_10_TO_12MTHS;
Record_OutputToDB.TOTAL_DISTANCE_1_TO_3MTHS = Row_FeedRecord.TOTAL_DISTANCE_1_TO_3MTHS;
Record_OutputToDB.TOTAL_DISTANCE_4_TO_6MTHS = Row_FeedRecord.TOTAL_DISTANCE_4_TO_6MTHS;
Record_OutputToDB.TOTAL_DISTANCE_7_TO_9MTHS = Row_FeedRecord.TOTAL_DISTANCE_7_TO_9MTHS;
Record_OutputToDB.TOTAL_DISTANCE_10_TO_12MTHS = Row_FeedRecord.TOTAL_DISTANCE_10_TO_12MTHS;
Record_OutputToDB.DISTANCE_UNITS = Row_FeedRecord.DISTANCE_UNITS;
Record_OutputToDB.NEXT_FEE_DATE = Row_FeedRecord.NEXT_FEE_DATE;
Record_OutputToDB.NEXT_FEE_CHARGE = Row_FeedRecord.NEXT_FEE_CHARGE;
Record_OutputToDB.NEXT_FEE_FREQ = Row_FeedRecord.NEXT_FEE_FREQ;
Record_OutputToDB.FIRST_RES_SEARCH_SOURCE = Row_FeedRecord.FIRST_RES_SEARCH_SOURCE;
Record_OutputToDB.FIRST_OTHER_RES = Row_FeedRecord.FIRST_OTHER_RES;
Record_OutputToDB.FIRST_NOSHOW_RES = Row_FeedRecord.FIRST_NOSHOW_RES;
Record_OutputToDB.FIRST_CANCELLATION_RES = Row_FeedRecord.FIRST_CANCELLATION_RES;
Record_OutputToDB.LAST_OTHER_RES = Row_FeedRecord.LAST_OTHER_RES;
Record_OutputToDB.LAST_NOSHOW_RES = Row_FeedRecord.LAST_NOSHOW_RES;
Record_OutputToDB.LAST_CANCELLATION_RES = Row_FeedRecord.LAST_CANCELLATION_RES;
Record_OutputToDB.COMPLETED_RES_3MTHS_S = Row_FeedRecord.COMPLETED_RES_3MTHS_S;
Record_OutputToDB.COMPLETED_RES_6MTHS_S = Row_FeedRecord.COMPLETED_RES_6MTHS_S;
Record_OutputToDB.COMPLETED_RES_9MTHS_S = Row_FeedRecord.COMPLETED_RES_9MTHS_S;
Record_OutputToDB.COMPLETED_RES_1YEAR_S = Row_FeedRecord.COMPLETED_RES_1YEAR_S;
Record_OutputToDB.COMPLETED_RES_6MTHS_WRKDAY_S = Row_FeedRecord.COMPLETED_RES_6MTHS_WRKDAY_S;
Record_OutputToDB.COMPLETED_RES_1YEAR_WRKDAY_S = Row_FeedRecord.COMPLETED_RES_1YEAR_WRKDAY_S;
Record_OutputToDB.TOTAL_UP_REVENUE_3MTHS_S = Row_FeedRecord.TOTAL_UP_REVENUE_3MTHS_S;
Record_OutputToDB.TOTAL_UP_REVENUE_6MTHS_S = Row_FeedRecord.TOTAL_UP_REVENUE_6MTHS_S;
Record_OutputToDB.TOTAL_UP_REVENUE_9MTHS_S = Row_FeedRecord.TOTAL_UP_REVENUE_9MTHS_S;
Record_OutputToDB.TOTAL_UP_REVENUE_1YEAR_S = Row_FeedRecord.TOTAL_UP_REVENUE_1YEAR_S;
Record_OutputToDB.AVG_UP_REVENUE_3MTHS_S = Row_FeedRecord.AVG_UP_REVENUE_3MTHS_S;
Record_OutputToDB.AVG_UP_REVENUE_6MTHS_S = Row_FeedRecord.AVG_UP_REVENUE_6MTHS_S;
Record_OutputToDB.AVG_UP_REVENUE_9MTHS_S = Row_FeedRecord.AVG_UP_REVENUE_9MTHS_S;
Record_OutputToDB.AVG_UP_REVENUE_1YEAR_S = Row_FeedRecord.AVG_UP_REVENUE_1YEAR_S;
Record_OutputToDB.RES_SEARCH_3MTHS_S = Row_FeedRecord.RES_SEARCH_3MTHS_S;
Record_OutputToDB.RES_SEARCH_TURNDOWN_3MTHS_S = Row_FeedRecord.RES_SEARCH_TURNDOWN_3MTHS_S;
Record_OutputToDB.RES_SEARCH_COMPLETIONS_3MTHS_S = Row_FeedRecord.RES_SEARCH_COMPLETIONS_3MTHS_S;
Record_OutputToDB.NEXT_RES_DATE_S = Row_FeedRecord.NEXT_RES_DATE_S;
Record_OutputToDB.RES_REFRESH_DATE_S = Row_FeedRecord.RES_REFRESH_DATE_S;
Record_OutputToDB.CANCELED_RES_1YEAR = Row_FeedRecord.CANCELED_RES_1YEAR;
Record_OutputToDB.BILLED_NOSHOW_RES_1YEAR = Row_FeedRecord.BILLED_NOSHOW_RES_1YEAR;
Record_OutputToDB.TOTAL_RES_1YEAR = Row_FeedRecord.TOTAL_RES_1YEAR;
Record_OutputToDB.AFFILIATE_TYPE = Row_FeedRecord.AFFILIATE_TYPE;
Record_OutputToDB.ANNIVERSARY_DATE = Row_FeedRecord.ANNIVERSARY_DATE;
Record_OutputToDB.LAST_RES_RATE_PLAN_KEY = Row_FeedRecord.LAST_RES_RATE_PLAN_KEY;
Record_OutputToDB.LAST_RES_VEHICLE_CLASS = Row_FeedRecord.LAST_RES_VEHICLE_CLASS;
Record_OutputToDB.LAST_RES_VEHICLE_ID = Row_FeedRecord.LAST_RES_VEHICLE_ID;
Record_OutputToDB.ACTIVE_UNI_P = Row_FeedRecord.ACTIVE_UNI_P;
Record_OutputToDB.CURRENT_MEMBER_P = Row_FeedRecord.CURRENT_MEMBER_P;
Record_OutputToDB.FIRST_JOIN_ACCOUNT_ID = Row_FeedRecord.FIRST_JOIN_ACCOUNT_ID;
Record_OutputToDB.LAST_DIGIT_FIRST_ACCOUNT_ID = Row_FeedRecord.LAST_DIGIT_FIRST_ACCOUNT_ID;
Record_OutputToDB.FIRST_CORPORATE_ID = Row_FeedRecord.FIRST_CORPORATE_ID;
Record_OutputToDB.CURRENT_SUSPENSION_REASON_ID = Row_FeedRecord.CURRENT_SUSPENSION_REASON_ID;
Record_OutputToDB.FIRST_APPLICATION_ID = Row_FeedRecord.FIRST_APPLICATION_ID;
Record_OutputToDB.FIRST_APP_IJD_SESSION_ID = Row_FeedRecord.FIRST_APP_IJD_SESSION_ID;
Record_OutputToDB.FIRST_APPLICATION_IJD_P = Row_FeedRecord.FIRST_APPLICATION_IJD_P;
Record_OutputToDB.FIRST_RES_TYPE_DAILY_HOURLY = Row_FeedRecord.FIRST_RES_TYPE_DAILY_HOURLY;
Record_OutputToDB.FIRST_WKDAY_DAILY_AM_START_RES = Row_FeedRecord.FIRST_WKDAY_DAILY_AM_START_RES;
Record_OutputToDB.FIRST_WKDAY_DAILY_PM_START_RES = Row_FeedRecord.FIRST_WKDAY_DAILY_PM_START_RES;
Record_OutputToDB.FIRST_WKEND_DAILY_AM_START_RES = Row_FeedRecord.FIRST_WKEND_DAILY_AM_START_RES;
Record_OutputToDB.FIRST_WKEND_DAILY_PM_START_RES = Row_FeedRecord.FIRST_WKEND_DAILY_PM_START_RES;
Record_OutputToDB.FIRST_RES_SOURCE = Row_FeedRecord.FIRST_RES_SOURCE;
Record_OutputToDB.FIRST_RES_SOURCE_DESC = Row_FeedRecord.FIRST_RES_SOURCE_DESC;
Record_OutputToDB.FIRST_RES_VEHICLE_ID = Row_FeedRecord.FIRST_RES_VEHICLE_ID;
Record_OutputToDB.FIRST_RES_ZIPFLEET_ID = Row_FeedRecord.FIRST_RES_ZIPFLEET_ID;
Record_OutputToDB.FIRST_RES_DATE = Row_FeedRecord.FIRST_RES_DATE;
Record_OutputToDB.SECOND_RES_DATE = Row_FeedRecord.SECOND_RES_DATE;
Record_OutputToDB.FIRST_WAIVER_START_DATE = Row_FeedRecord.FIRST_WAIVER_START_DATE;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//Record_OutputToDB
			//Record_OutputToDB


			
				if(execStat){
					runStat.updateStatOnConnection("Record_OutputToDB"+iterateId,1, 1);
				} 
			

		



            After_Insert = null;
        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(207
					)
				+ 1;

						
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.MEMBER_ID);
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_1==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_1);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_1==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_1);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_2==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_2);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_2==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_2);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_3==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_3);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_3==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_3);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_4==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_4);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_4==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_4);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_5==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_5);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_5==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_5);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_6==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_6);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_6==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_6);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_7==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_7);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_7==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_7);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_8==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_8);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_8==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_8);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_ID_9==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_ID_9);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_NAME_9==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_NAME_9);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DELETED_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.DELETED_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_MODIFIED!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_MODIFIED.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.AFFILIATE_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.WAIVER_ELIGIBLE_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.WAIVER_ELIGIBLE_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.PER_TRIP_WAIVER_ELIGIBLE_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.PER_TRIP_WAIVER_ELIGIBLE_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_PLAN_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_WAIVER_PLAN_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_PLAN_NAME==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_WAIVER_PLAN_NAME);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_PLAN_FEE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_WAIVER_PLAN_FEE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_TIER==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_WAIVER_TIER);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_DEDUCTIBLE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_WAIVER_DEDUCTIBLE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_W_AUTO_RENEW_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_W_AUTO_RENEW_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_START_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.CURRENT_WAIVER_START_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_WAIVER_END_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.CURRENT_WAIVER_END_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.PER_TRIP_WAIVER_CNT);
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_PER_TRIP_WAIVER_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_PER_TRIP_WAIVER_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.EVER_HAD_ANY_WAIVER_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.EVER_HAD_ANY_WAIVER_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.WAIVER_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.WAIVER_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DRIVER_RISK_TIER_INFO_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.DRIVER_RISK_TIER_INFO_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RISK_TIER_KEY==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RISK_TIER_KEY);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RISK_TIER_KEY==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RISK_TIER_KEY);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_MIN_LEVEL==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.FIRST_MIN_LEVEL);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_MIN_LEVEL==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.LAST_MIN_LEVEL);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_RISK_TIER_CHANGES==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_RISK_TIER_CHANGES);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TRIPS_COMPLETED);
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_ACCIDENT_KARMA_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_ACCIDENT_KARMA_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_LIC_POINTS_KARMA_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_LIC_POINTS_KARMA_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DRIVER_RISK_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.DRIVER_RISK_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_TYPE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_TYPE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DAYS_SINCE_LAST_DRIVE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.DAYS_SINCE_LAST_DRIVE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NEXT_RES_TYPE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.NEXT_RES_TYPE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DAYS_UNTIL_NEXT_DRIVE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.DAYS_UNTIL_NEXT_DRIVE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_GAS_FILLUP_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_GAS_FILLUP_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_GAS_FILLUP_AMOUNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.FIRST_GAS_FILLUP_AMOUNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_GAS_FILLUP_CHARGE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.FIRST_GAS_FILLUP_CHARGE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GAS_FILLUP_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_GAS_FILLUP_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GAS_FILLUP_AMOUNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.LAST_GAS_FILLUP_AMOUNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GAS_FILLUP_CHARGE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.LAST_GAS_FILLUP_CHARGE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FILLUP_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.FILLUP_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.WEX_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.WEX_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_NPS_RESPONSE_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_NPS_RESPONSE_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_NPS_COMPLETE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_NPS_COMPLETE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_NPS_SCORE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.FIRST_NPS_SCORE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_NPS_RESPONSE_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_NPS_RESPONSE_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_NPS_COMPLETE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_NPS_COMPLETE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_NPS_SCORE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.LAST_NPS_SCORE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NPS_SURVEY_REFRESH!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.NPS_SURVEY_REFRESH.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_SEARCH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_RES_SEARCH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_SEARCH_COMPLETION_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_SEARCH_COMPLETION_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_LOCAL_START_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_RES_LOCAL_START_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_OVERNIGHT_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_OVERNIGHT_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_HRLY_AM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_HRLY_AM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_HRLY_PM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_HRLY_PM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_HRLY_AM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_HRLY_AM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_HRLY_PM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_HRLY_PM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_DAILY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_DAILY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_DAILY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_DAILY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.MEMBER_FIRST_RES_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.MEMBER_FIRST_RES_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.REFER_A_FRIEND_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.REFER_A_FRIEND_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_GIFT_CARD_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_GIFT_CARD_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_GIFT_CARD_AMT_USD==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_GIFT_CARD_AMT_USD);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GIFT_CARD_PURCHAS_AMT_USD==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.LAST_GIFT_CARD_PURCHAS_AMT_USD);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_CURR==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_CURR);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.GIFT_CARD_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.GIFT_CARD_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LATE_RETURN_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.LATE_RETURN_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_LATE_RETURN_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_LATE_RETURN_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_LATE_RETURN_MINUTES==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.LAST_LATE_RETURN_MINUTES);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_LATE_RETURN_CHARGE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.LAST_LATE_RETURN_CHARGE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.MAJOR_ACCIDENTS_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.MAJOR_ACCIDENTS_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.MINOR_ACCIDENTS_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.MINOR_ACCIDENTS_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_ACCIDENT_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_ACCIDENT_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_ACCIDENT_CLASSIFICATION==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_ACCIDENT_CLASSIFICATION);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.MEMBER_BEHAVIOR_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.MEMBER_BEHAVIOR_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ZCORPORATE_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.ZCORPORATE_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CORPORATE_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.CORPORATE_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.PERSONAL_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.PERSONAL_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.EVPERSONAL_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.EVPERSONAL_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.SPONSORED_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.SPONSORED_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.EVSPONSORED_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.EVSPONSORED_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.Z2B_LARGE_ACCOUNTS_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.Z2B_LARGE_ACCOUNTS_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.SUBSCRIPTION_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.SUBSCRIPTION_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.UNIV_DEPTS_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.UNIV_DEPTS_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.VAN_RESTRICTED_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.VAN_RESTRICTED_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ACCESS_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.ACCESS_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ZCORPORATE_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.ZCORPORATE_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CORPORATE_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.CORPORATE_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.PERSONAL_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.PERSONAL_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.EVPERSONAL_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.EVPERSONAL_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.SPONSORED_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.SPONSORED_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.EVSPONSORED_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.EVSPONSORED_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.Z2B_LARGE_ACCOUNTS_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.Z2B_LARGE_ACCOUNTS_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.SUBSCRIPTION_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.SUBSCRIPTION_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.UNIV_DEPTS_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.UNIV_DEPTS_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.VAN_RESTRICTED_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.VAN_RESTRICTED_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ACCESS_HIST_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.ACCESS_HIST_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_SEARCH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_RES_SEARCH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_SEARCH_SOURCE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_SEARCH_SOURCE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_SEARCH_COMPLETION_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_SEARCH_COMPLETION_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_OVERNIGHT_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_OVERNIGHT_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKDAY_HRLY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKDAY_HRLY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKDAY_DAILY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKDAY_DAILY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKEND_HRLY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKEND_HRLY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKEND_DAILY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKEND_DAILY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_OVERNIGHT_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_OVERNIGHT_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKDAY_HRLY_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKDAY_HRLY_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKDAY_DAILY_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKDAY_DAILY_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKEND_HRLY_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKEND_HRLY_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_WKEND_DAILY_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_WKEND_DAILY_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_SEARCH_TYPE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_SEARCH_TYPE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.MEMBER_LAST_RES_REFRESH_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.MEMBER_LAST_RES_REFRESH_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RESERVATION_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.LAST_RESERVATION_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_SOURCE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.RES_SOURCE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_SOURCE_DESCRIPTION==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.RES_SOURCE_DESCRIPTION);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_HRLY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_HRLY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_HRLY_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_HRLY_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_TYPE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_TYPE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DAYS_FROM_JOIN_TO_FIRST_RES==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.DAYS_FROM_JOIN_TO_FIRST_RES);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_NPS_COHORT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_NPS_COHORT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_NPS_COHORT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_NPS_COHORT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NPS_SURVEY_CNT==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.NPS_SURVEY_CNT);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_HOURS_1_TO_3MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_HOURS_1_TO_3MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_HOURS_4_TO_6MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_HOURS_4_TO_6MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_HOURS_7_TO_9MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_HOURS_7_TO_9MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_HOURS_10_TO_12MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_HOURS_10_TO_12MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_DISTANCE_1_TO_3MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_DISTANCE_1_TO_3MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_DISTANCE_4_TO_6MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_DISTANCE_4_TO_6MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_DISTANCE_7_TO_9MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_DISTANCE_7_TO_9MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_DISTANCE_10_TO_12MTHS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_DISTANCE_10_TO_12MTHS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.DISTANCE_UNITS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.DISTANCE_UNITS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NEXT_FEE_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.NEXT_FEE_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NEXT_FEE_CHARGE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.NEXT_FEE_CHARGE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NEXT_FEE_FREQ==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.NEXT_FEE_FREQ);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_SEARCH_SOURCE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_SEARCH_SOURCE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_OTHER_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_OTHER_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_NOSHOW_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_NOSHOW_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_CANCELLATION_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_CANCELLATION_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_OTHER_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_OTHER_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_NOSHOW_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_NOSHOW_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_CANCELLATION_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.LAST_CANCELLATION_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_6MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_6MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_9MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_9MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_1YEAR_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_1YEAR_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_6MTHS_WRKDAY_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_6MTHS_WRKDAY_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.COMPLETED_RES_1YEAR_WRKDAY_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.COMPLETED_RES_1YEAR_WRKDAY_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_UP_REVENUE_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_UP_REVENUE_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_UP_REVENUE_6MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_UP_REVENUE_6MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_UP_REVENUE_9MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_UP_REVENUE_9MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_UP_REVENUE_1YEAR_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_UP_REVENUE_1YEAR_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AVG_UP_REVENUE_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.AVG_UP_REVENUE_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AVG_UP_REVENUE_6MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.AVG_UP_REVENUE_6MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AVG_UP_REVENUE_9MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.AVG_UP_REVENUE_9MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AVG_UP_REVENUE_1YEAR_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.AVG_UP_REVENUE_1YEAR_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_SEARCH_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.RES_SEARCH_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_SEARCH_TURNDOWN_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.RES_SEARCH_TURNDOWN_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_SEARCH_COMPLETIONS_3MTHS_S==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.RES_SEARCH_COMPLETIONS_3MTHS_S);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.NEXT_RES_DATE_S!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.NEXT_RES_DATE_S.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.RES_REFRESH_DATE_S!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.RES_REFRESH_DATE_S.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CANCELED_RES_1YEAR==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.CANCELED_RES_1YEAR);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.BILLED_NOSHOW_RES_1YEAR==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.BILLED_NOSHOW_RES_1YEAR);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.TOTAL_RES_1YEAR==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.TOTAL_RES_1YEAR);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.AFFILIATE_TYPE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.AFFILIATE_TYPE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ANNIVERSARY_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.ANNIVERSARY_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_RATE_PLAN_KEY==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_RATE_PLAN_KEY);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_VEHICLE_CLASS==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_VEHICLE_CLASS);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_RES_VEHICLE_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.LAST_RES_VEHICLE_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.ACTIVE_UNI_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.ACTIVE_UNI_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_MEMBER_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_MEMBER_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_JOIN_ACCOUNT_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.FIRST_JOIN_ACCOUNT_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.LAST_DIGIT_FIRST_ACCOUNT_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.LAST_DIGIT_FIRST_ACCOUNT_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_CORPORATE_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_CORPORATE_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.CURRENT_SUSPENSION_REASON_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.CURRENT_SUSPENSION_REASON_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_APPLICATION_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.FIRST_APPLICATION_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_APP_IJD_SESSION_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_APP_IJD_SESSION_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_APPLICATION_IJD_P==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_APPLICATION_IJD_P);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_TYPE_DAILY_HOURLY==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_TYPE_DAILY_HOURLY);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_DAILY_AM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_DAILY_AM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKDAY_DAILY_PM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKDAY_DAILY_PM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_DAILY_AM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_DAILY_AM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WKEND_DAILY_PM_START_RES!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WKEND_DAILY_PM_START_RES.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_SOURCE==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_SOURCE);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_SOURCE_DESC==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_SOURCE_DESC);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_VEHICLE_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_VEHICLE_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_ZIPFLEET_ID==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.FIRST_RES_ZIPFLEET_ID);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.SECOND_RES_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.SECOND_RES_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.FIRST_WAIVER_START_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.FIRST_WAIVER_START_DATE.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(Record_OutputToDB.MEMBER_ID)
                        .c1(Record_OutputToDB.AFFILIATE_ID_1)
                        .c2(Record_OutputToDB.AFFILIATE_NAME_1)
                        .c3(Record_OutputToDB.AFFILIATE_ID_2)
                        .c4(Record_OutputToDB.AFFILIATE_NAME_2)
                        .c5(Record_OutputToDB.AFFILIATE_ID_3)
                        .c6(Record_OutputToDB.AFFILIATE_NAME_3)
                        .c7(Record_OutputToDB.AFFILIATE_ID_4)
                        .c8(Record_OutputToDB.AFFILIATE_NAME_4)
                        .c9(Record_OutputToDB.AFFILIATE_ID_5)
                        .c10(Record_OutputToDB.AFFILIATE_NAME_5)
                        .c11(Record_OutputToDB.AFFILIATE_ID_6)
                        .c12(Record_OutputToDB.AFFILIATE_NAME_6)
                        .c13(Record_OutputToDB.AFFILIATE_ID_7)
                        .c14(Record_OutputToDB.AFFILIATE_NAME_7)
                        .c15(Record_OutputToDB.AFFILIATE_ID_8)
                        .c16(Record_OutputToDB.AFFILIATE_NAME_8)
                        .c17(Record_OutputToDB.AFFILIATE_ID_9)
                        .c18(Record_OutputToDB.AFFILIATE_NAME_9)
                        .c19(Record_OutputToDB.DELETED_DATE)
                        .c20(Record_OutputToDB.LAST_MODIFIED)
                        .c21(Record_OutputToDB.AFFILIATE_REFRESH_DATE)
                        .c22(Record_OutputToDB.WAIVER_ELIGIBLE_P)
                        .c23(Record_OutputToDB.PER_TRIP_WAIVER_ELIGIBLE_P)
                        .c24(Record_OutputToDB.CURRENT_WAIVER_PLAN_ID)
                        .c25(Record_OutputToDB.CURRENT_WAIVER_PLAN_NAME)
                        .c26(Record_OutputToDB.CURRENT_WAIVER_PLAN_FEE)
                        .c27(Record_OutputToDB.CURRENT_WAIVER_TIER)
                        .c28(Record_OutputToDB.CURRENT_WAIVER_DEDUCTIBLE)
                        .c29(Record_OutputToDB.CURRENT_W_AUTO_RENEW_P)
                        .c30(Record_OutputToDB.CURRENT_WAIVER_START_DATE)
                        .c31(Record_OutputToDB.CURRENT_WAIVER_END_DATE)
                        .c32(Record_OutputToDB.PER_TRIP_WAIVER_CNT)
                        .c33(Record_OutputToDB.LAST_PER_TRIP_WAIVER_DATE)
                        .c34(Record_OutputToDB.EVER_HAD_ANY_WAIVER_P)
                        .c35(Record_OutputToDB.WAIVER_REFRESH_DATE)
                        .c36(Record_OutputToDB.DRIVER_RISK_TIER_INFO_P)
                        .c37(Record_OutputToDB.FIRST_RISK_TIER_KEY)
                        .c38(Record_OutputToDB.LAST_RISK_TIER_KEY)
                        .c39(Record_OutputToDB.FIRST_MIN_LEVEL)
                        .c40(Record_OutputToDB.LAST_MIN_LEVEL)
                        .c41(Record_OutputToDB.TOTAL_RISK_TIER_CHANGES)
                        .c42(Record_OutputToDB.TRIPS_COMPLETED)
                        .c43(Record_OutputToDB.LAST_ACCIDENT_KARMA_DATE)
                        .c44(Record_OutputToDB.LAST_LIC_POINTS_KARMA_DATE)
                        .c45(Record_OutputToDB.DRIVER_RISK_REFRESH_DATE)
                        .c46(Record_OutputToDB.LAST_RES_DATE)
                        .c47(Record_OutputToDB.LAST_RES_TYPE)
                        .c48(Record_OutputToDB.DAYS_SINCE_LAST_DRIVE)
                        .c49(Record_OutputToDB.NEXT_RES_TYPE)
                        .c50(Record_OutputToDB.DAYS_UNTIL_NEXT_DRIVE)
                        .c51(Record_OutputToDB.FIRST_GAS_FILLUP_DATE)
                        .c52(Record_OutputToDB.FIRST_GAS_FILLUP_AMOUNT)
                        .c53(Record_OutputToDB.FIRST_GAS_FILLUP_CHARGE)
                        .c54(Record_OutputToDB.LAST_GAS_FILLUP_DATE)
                        .c55(Record_OutputToDB.LAST_GAS_FILLUP_AMOUNT)
                        .c56(Record_OutputToDB.LAST_GAS_FILLUP_CHARGE)
                        .c57(Record_OutputToDB.FILLUP_CNT)
                        .c58(Record_OutputToDB.WEX_REFRESH_DATE)
                        .c59(Record_OutputToDB.FIRST_NPS_RESPONSE_DATE)
                        .c60(Record_OutputToDB.FIRST_NPS_COMPLETE)
                        .c61(Record_OutputToDB.FIRST_NPS_SCORE)
                        .c62(Record_OutputToDB.LAST_NPS_RESPONSE_DATE)
                        .c63(Record_OutputToDB.LAST_NPS_COMPLETE)
                        .c64(Record_OutputToDB.LAST_NPS_SCORE)
                        .c65(Record_OutputToDB.NPS_SURVEY_REFRESH)
                        .c66(Record_OutputToDB.FIRST_RES_SEARCH_DATE)
                        .c67(Record_OutputToDB.FIRST_RES_SEARCH_COMPLETION_P)
                        .c68(Record_OutputToDB.FIRST_RES_LOCAL_START_DATE)
                        .c69(Record_OutputToDB.FIRST_OVERNIGHT_RES)
                        .c70(Record_OutputToDB.FIRST_WKDAY_HRLY_AM_START_RES)
                        .c71(Record_OutputToDB.FIRST_WKDAY_HRLY_PM_START_RES)
                        .c72(Record_OutputToDB.FIRST_WKEND_HRLY_AM_START_RES)
                        .c73(Record_OutputToDB.FIRST_WKEND_HRLY_PM_START_RES)
                        .c74(Record_OutputToDB.FIRST_WKDAY_DAILY_RES)
                        .c75(Record_OutputToDB.FIRST_WKEND_DAILY_RES)
                        .c76(Record_OutputToDB.MEMBER_FIRST_RES_REFRESH_DATE)
                        .c77(Record_OutputToDB.REFER_A_FRIEND_CNT)
                        .c78(Record_OutputToDB.TOTAL_GIFT_CARD_CNT)
                        .c79(Record_OutputToDB.TOTAL_GIFT_CARD_AMT_USD)
                        .c80(Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_DATE)
                        .c81(Record_OutputToDB.LAST_GIFT_CARD_PURCHAS_AMT_USD)
                        .c82(Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_CURR)
                        .c83(Record_OutputToDB.GIFT_CARD_CNT)
                        .c84(Record_OutputToDB.LATE_RETURN_CNT)
                        .c85(Record_OutputToDB.LAST_LATE_RETURN_DATE)
                        .c86(Record_OutputToDB.LAST_LATE_RETURN_MINUTES)
                        .c87(Record_OutputToDB.LAST_LATE_RETURN_CHARGE)
                        .c88(Record_OutputToDB.MAJOR_ACCIDENTS_CNT)
                        .c89(Record_OutputToDB.MINOR_ACCIDENTS_CNT)
                        .c90(Record_OutputToDB.LAST_ACCIDENT_DATE)
                        .c91(Record_OutputToDB.LAST_ACCIDENT_CLASSIFICATION)
                        .c92(Record_OutputToDB.MEMBER_BEHAVIOR_REFRESH_DATE)
                        .c93(Record_OutputToDB.ZCORPORATE_CNT)
                        .c94(Record_OutputToDB.CORPORATE_CNT)
                        .c95(Record_OutputToDB.PERSONAL_CNT)
                        .c96(Record_OutputToDB.EVPERSONAL_CNT)
                        .c97(Record_OutputToDB.SPONSORED_CNT)
                        .c98(Record_OutputToDB.EVSPONSORED_CNT)
                        .c99(Record_OutputToDB.Z2B_LARGE_ACCOUNTS_CNT)
                        .c100(Record_OutputToDB.SUBSCRIPTION_CNT)
                        .c101(Record_OutputToDB.UNIV_DEPTS_CNT)
                        .c102(Record_OutputToDB.VAN_RESTRICTED_CNT)
                        .c103(Record_OutputToDB.ACCESS_CNT)
                        .c104(Record_OutputToDB.ZCORPORATE_HIST_CNT)
                        .c105(Record_OutputToDB.CORPORATE_HIST_CNT)
                        .c106(Record_OutputToDB.PERSONAL_HIST_CNT)
                        .c107(Record_OutputToDB.EVPERSONAL_HIST_CNT)
                        .c108(Record_OutputToDB.SPONSORED_HIST_CNT)
                        .c109(Record_OutputToDB.EVSPONSORED_HIST_CNT)
                        .c110(Record_OutputToDB.Z2B_LARGE_ACCOUNTS_HIST_CNT)
                        .c111(Record_OutputToDB.SUBSCRIPTION_HIST_CNT)
                        .c112(Record_OutputToDB.UNIV_DEPTS_HIST_CNT)
                        .c113(Record_OutputToDB.VAN_RESTRICTED_HIST_CNT)
                        .c114(Record_OutputToDB.ACCESS_HIST_CNT)
                        .c115(Record_OutputToDB.LAST_RES_SEARCH_DATE)
                        .c116(Record_OutputToDB.LAST_RES_SEARCH_SOURCE)
                        .c117(Record_OutputToDB.LAST_RES_SEARCH_COMPLETION_P)
                        .c118(Record_OutputToDB.LAST_OVERNIGHT_RES)
                        .c119(Record_OutputToDB.LAST_WKDAY_HRLY_RES)
                        .c120(Record_OutputToDB.LAST_WKDAY_DAILY_RES)
                        .c121(Record_OutputToDB.LAST_WKEND_HRLY_RES)
                        .c122(Record_OutputToDB.LAST_WKEND_DAILY_RES)
                        .c123(Record_OutputToDB.LAST_OVERNIGHT_RES_DATE)
                        .c124(Record_OutputToDB.LAST_WKDAY_HRLY_RES_DATE)
                        .c125(Record_OutputToDB.LAST_WKDAY_DAILY_RES_DATE)
                        .c126(Record_OutputToDB.LAST_WKEND_HRLY_RES_DATE)
                        .c127(Record_OutputToDB.LAST_WKEND_DAILY_RES_DATE)
                        .c128(Record_OutputToDB.LAST_RES_SEARCH_TYPE)
                        .c129(Record_OutputToDB.MEMBER_LAST_RES_REFRESH_DATE)
                        .c130(Record_OutputToDB.LAST_RESERVATION_ID)
                        .c131(Record_OutputToDB.RES_SOURCE)
                        .c132(Record_OutputToDB.RES_SOURCE_DESCRIPTION)
                        .c133(Record_OutputToDB.FIRST_WKDAY_HRLY_RES)
                        .c134(Record_OutputToDB.FIRST_WKEND_HRLY_RES)
                        .c135(Record_OutputToDB.FIRST_RES_TYPE)
                        .c136(Record_OutputToDB.DAYS_FROM_JOIN_TO_FIRST_RES)
                        .c137(Record_OutputToDB.FIRST_NPS_COHORT)
                        .c138(Record_OutputToDB.LAST_NPS_COHORT)
                        .c139(Record_OutputToDB.NPS_SURVEY_CNT)
                        .c140(Record_OutputToDB.TOTAL_HOURS_1_TO_3MTHS)
                        .c141(Record_OutputToDB.TOTAL_HOURS_4_TO_6MTHS)
                        .c142(Record_OutputToDB.TOTAL_HOURS_7_TO_9MTHS)
                        .c143(Record_OutputToDB.TOTAL_HOURS_10_TO_12MTHS)
                        .c144(Record_OutputToDB.TOTAL_DISTANCE_1_TO_3MTHS)
                        .c145(Record_OutputToDB.TOTAL_DISTANCE_4_TO_6MTHS)
                        .c146(Record_OutputToDB.TOTAL_DISTANCE_7_TO_9MTHS)
                        .c147(Record_OutputToDB.TOTAL_DISTANCE_10_TO_12MTHS)
                        .c148(Record_OutputToDB.DISTANCE_UNITS)
                        .c149(Record_OutputToDB.NEXT_FEE_DATE)
                        .c150(Record_OutputToDB.NEXT_FEE_CHARGE)
                        .c151(Record_OutputToDB.NEXT_FEE_FREQ)
                        .c152(Record_OutputToDB.FIRST_RES_SEARCH_SOURCE)
                        .c153(Record_OutputToDB.FIRST_OTHER_RES)
                        .c154(Record_OutputToDB.FIRST_NOSHOW_RES)
                        .c155(Record_OutputToDB.FIRST_CANCELLATION_RES)
                        .c156(Record_OutputToDB.LAST_OTHER_RES)
                        .c157(Record_OutputToDB.LAST_NOSHOW_RES)
                        .c158(Record_OutputToDB.LAST_CANCELLATION_RES)
                        .c159(Record_OutputToDB.COMPLETED_RES_3MTHS_S)
                        .c160(Record_OutputToDB.COMPLETED_RES_6MTHS_S)
                        .c161(Record_OutputToDB.COMPLETED_RES_9MTHS_S)
                        .c162(Record_OutputToDB.COMPLETED_RES_1YEAR_S)
                        .c163(Record_OutputToDB.COMPLETED_RES_6MTHS_WRKDAY_S)
                        .c164(Record_OutputToDB.COMPLETED_RES_1YEAR_WRKDAY_S)
                        .c165(Record_OutputToDB.TOTAL_UP_REVENUE_3MTHS_S)
                        .c166(Record_OutputToDB.TOTAL_UP_REVENUE_6MTHS_S)
                        .c167(Record_OutputToDB.TOTAL_UP_REVENUE_9MTHS_S)
                        .c168(Record_OutputToDB.TOTAL_UP_REVENUE_1YEAR_S)
                        .c169(Record_OutputToDB.AVG_UP_REVENUE_3MTHS_S)
                        .c170(Record_OutputToDB.AVG_UP_REVENUE_6MTHS_S)
                        .c171(Record_OutputToDB.AVG_UP_REVENUE_9MTHS_S)
                        .c172(Record_OutputToDB.AVG_UP_REVENUE_1YEAR_S)
                        .c173(Record_OutputToDB.RES_SEARCH_3MTHS_S)
                        .c174(Record_OutputToDB.RES_SEARCH_TURNDOWN_3MTHS_S)
                        .c175(Record_OutputToDB.RES_SEARCH_COMPLETIONS_3MTHS_S)
                        .c176(Record_OutputToDB.NEXT_RES_DATE_S)
                        .c177(Record_OutputToDB.RES_REFRESH_DATE_S)
                        .c178(Record_OutputToDB.CANCELED_RES_1YEAR)
                        .c179(Record_OutputToDB.BILLED_NOSHOW_RES_1YEAR)
                        .c180(Record_OutputToDB.TOTAL_RES_1YEAR)
                        .c181(Record_OutputToDB.AFFILIATE_TYPE)
                        .c182(Record_OutputToDB.ANNIVERSARY_DATE)
                        .c183(Record_OutputToDB.LAST_RES_RATE_PLAN_KEY)
                        .c184(Record_OutputToDB.LAST_RES_VEHICLE_CLASS)
                        .c185(Record_OutputToDB.LAST_RES_VEHICLE_ID)
                        .c186(Record_OutputToDB.ACTIVE_UNI_P)
                        .c187(Record_OutputToDB.CURRENT_MEMBER_P)
                        .c188(Record_OutputToDB.FIRST_JOIN_ACCOUNT_ID)
                        .c189(Record_OutputToDB.LAST_DIGIT_FIRST_ACCOUNT_ID)
                        .c190(Record_OutputToDB.FIRST_CORPORATE_ID)
                        .c191(Record_OutputToDB.CURRENT_SUSPENSION_REASON_ID)
                        .c192(Record_OutputToDB.FIRST_APPLICATION_ID)
                        .c193(Record_OutputToDB.FIRST_APP_IJD_SESSION_ID)
                        .c194(Record_OutputToDB.FIRST_APPLICATION_IJD_P)
                        .c195(Record_OutputToDB.FIRST_RES_TYPE_DAILY_HOURLY)
                        .c196(Record_OutputToDB.FIRST_WKDAY_DAILY_AM_START_RES)
                        .c197(Record_OutputToDB.FIRST_WKDAY_DAILY_PM_START_RES)
                        .c198(Record_OutputToDB.FIRST_WKEND_DAILY_AM_START_RES)
                        .c199(Record_OutputToDB.FIRST_WKEND_DAILY_PM_START_RES)
                        .c200(Record_OutputToDB.FIRST_RES_SOURCE)
                        .c201(Record_OutputToDB.FIRST_RES_SOURCE_DESC)
                        .c202(Record_OutputToDB.FIRST_RES_VEHICLE_ID)
                        .c203(Record_OutputToDB.FIRST_RES_ZIPFLEET_ID)
                        .c204(Record_OutputToDB.FIRST_RES_DATE)
                        .c205(Record_OutputToDB.SECOND_RES_DATE)
                        .c206(Record_OutputToDB.FIRST_WAIVER_START_DATE)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 150){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
            if(!whetherReject_tRedshiftOutput_1) {
                            After_Insert = new After_InsertStruct();
                                After_Insert.MEMBER_ID = Record_OutputToDB.MEMBER_ID;
                                After_Insert.AFFILIATE_ID_1 = Record_OutputToDB.AFFILIATE_ID_1;
                                After_Insert.AFFILIATE_NAME_1 = Record_OutputToDB.AFFILIATE_NAME_1;
                                After_Insert.AFFILIATE_ID_2 = Record_OutputToDB.AFFILIATE_ID_2;
                                After_Insert.AFFILIATE_NAME_2 = Record_OutputToDB.AFFILIATE_NAME_2;
                                After_Insert.AFFILIATE_ID_3 = Record_OutputToDB.AFFILIATE_ID_3;
                                After_Insert.AFFILIATE_NAME_3 = Record_OutputToDB.AFFILIATE_NAME_3;
                                After_Insert.AFFILIATE_ID_4 = Record_OutputToDB.AFFILIATE_ID_4;
                                After_Insert.AFFILIATE_NAME_4 = Record_OutputToDB.AFFILIATE_NAME_4;
                                After_Insert.AFFILIATE_ID_5 = Record_OutputToDB.AFFILIATE_ID_5;
                                After_Insert.AFFILIATE_NAME_5 = Record_OutputToDB.AFFILIATE_NAME_5;
                                After_Insert.AFFILIATE_ID_6 = Record_OutputToDB.AFFILIATE_ID_6;
                                After_Insert.AFFILIATE_NAME_6 = Record_OutputToDB.AFFILIATE_NAME_6;
                                After_Insert.AFFILIATE_ID_7 = Record_OutputToDB.AFFILIATE_ID_7;
                                After_Insert.AFFILIATE_NAME_7 = Record_OutputToDB.AFFILIATE_NAME_7;
                                After_Insert.AFFILIATE_ID_8 = Record_OutputToDB.AFFILIATE_ID_8;
                                After_Insert.AFFILIATE_NAME_8 = Record_OutputToDB.AFFILIATE_NAME_8;
                                After_Insert.AFFILIATE_ID_9 = Record_OutputToDB.AFFILIATE_ID_9;
                                After_Insert.AFFILIATE_NAME_9 = Record_OutputToDB.AFFILIATE_NAME_9;
                                After_Insert.DELETED_DATE = Record_OutputToDB.DELETED_DATE;
                                After_Insert.LAST_MODIFIED = Record_OutputToDB.LAST_MODIFIED;
                                After_Insert.AFFILIATE_REFRESH_DATE = Record_OutputToDB.AFFILIATE_REFRESH_DATE;
                                After_Insert.WAIVER_ELIGIBLE_P = Record_OutputToDB.WAIVER_ELIGIBLE_P;
                                After_Insert.PER_TRIP_WAIVER_ELIGIBLE_P = Record_OutputToDB.PER_TRIP_WAIVER_ELIGIBLE_P;
                                After_Insert.CURRENT_WAIVER_PLAN_ID = Record_OutputToDB.CURRENT_WAIVER_PLAN_ID;
                                After_Insert.CURRENT_WAIVER_PLAN_NAME = Record_OutputToDB.CURRENT_WAIVER_PLAN_NAME;
                                After_Insert.CURRENT_WAIVER_PLAN_FEE = Record_OutputToDB.CURRENT_WAIVER_PLAN_FEE;
                                After_Insert.CURRENT_WAIVER_TIER = Record_OutputToDB.CURRENT_WAIVER_TIER;
                                After_Insert.CURRENT_WAIVER_DEDUCTIBLE = Record_OutputToDB.CURRENT_WAIVER_DEDUCTIBLE;
                                After_Insert.CURRENT_W_AUTO_RENEW_P = Record_OutputToDB.CURRENT_W_AUTO_RENEW_P;
                                After_Insert.CURRENT_WAIVER_START_DATE = Record_OutputToDB.CURRENT_WAIVER_START_DATE;
                                After_Insert.CURRENT_WAIVER_END_DATE = Record_OutputToDB.CURRENT_WAIVER_END_DATE;
                                After_Insert.PER_TRIP_WAIVER_CNT = Record_OutputToDB.PER_TRIP_WAIVER_CNT;
                                After_Insert.LAST_PER_TRIP_WAIVER_DATE = Record_OutputToDB.LAST_PER_TRIP_WAIVER_DATE;
                                After_Insert.EVER_HAD_ANY_WAIVER_P = Record_OutputToDB.EVER_HAD_ANY_WAIVER_P;
                                After_Insert.WAIVER_REFRESH_DATE = Record_OutputToDB.WAIVER_REFRESH_DATE;
                                After_Insert.DRIVER_RISK_TIER_INFO_P = Record_OutputToDB.DRIVER_RISK_TIER_INFO_P;
                                After_Insert.FIRST_RISK_TIER_KEY = Record_OutputToDB.FIRST_RISK_TIER_KEY;
                                After_Insert.LAST_RISK_TIER_KEY = Record_OutputToDB.LAST_RISK_TIER_KEY;
                                After_Insert.FIRST_MIN_LEVEL = Record_OutputToDB.FIRST_MIN_LEVEL;
                                After_Insert.LAST_MIN_LEVEL = Record_OutputToDB.LAST_MIN_LEVEL;
                                After_Insert.TOTAL_RISK_TIER_CHANGES = Record_OutputToDB.TOTAL_RISK_TIER_CHANGES;
                                After_Insert.TRIPS_COMPLETED = Record_OutputToDB.TRIPS_COMPLETED;
                                After_Insert.LAST_ACCIDENT_KARMA_DATE = Record_OutputToDB.LAST_ACCIDENT_KARMA_DATE;
                                After_Insert.LAST_LIC_POINTS_KARMA_DATE = Record_OutputToDB.LAST_LIC_POINTS_KARMA_DATE;
                                After_Insert.DRIVER_RISK_REFRESH_DATE = Record_OutputToDB.DRIVER_RISK_REFRESH_DATE;
                                After_Insert.LAST_RES_DATE = Record_OutputToDB.LAST_RES_DATE;
                                After_Insert.LAST_RES_TYPE = Record_OutputToDB.LAST_RES_TYPE;
                                After_Insert.DAYS_SINCE_LAST_DRIVE = Record_OutputToDB.DAYS_SINCE_LAST_DRIVE;
                                After_Insert.NEXT_RES_TYPE = Record_OutputToDB.NEXT_RES_TYPE;
                                After_Insert.DAYS_UNTIL_NEXT_DRIVE = Record_OutputToDB.DAYS_UNTIL_NEXT_DRIVE;
                                After_Insert.FIRST_GAS_FILLUP_DATE = Record_OutputToDB.FIRST_GAS_FILLUP_DATE;
                                After_Insert.FIRST_GAS_FILLUP_AMOUNT = Record_OutputToDB.FIRST_GAS_FILLUP_AMOUNT;
                                After_Insert.FIRST_GAS_FILLUP_CHARGE = Record_OutputToDB.FIRST_GAS_FILLUP_CHARGE;
                                After_Insert.LAST_GAS_FILLUP_DATE = Record_OutputToDB.LAST_GAS_FILLUP_DATE;
                                After_Insert.LAST_GAS_FILLUP_AMOUNT = Record_OutputToDB.LAST_GAS_FILLUP_AMOUNT;
                                After_Insert.LAST_GAS_FILLUP_CHARGE = Record_OutputToDB.LAST_GAS_FILLUP_CHARGE;
                                After_Insert.FILLUP_CNT = Record_OutputToDB.FILLUP_CNT;
                                After_Insert.WEX_REFRESH_DATE = Record_OutputToDB.WEX_REFRESH_DATE;
                                After_Insert.FIRST_NPS_RESPONSE_DATE = Record_OutputToDB.FIRST_NPS_RESPONSE_DATE;
                                After_Insert.FIRST_NPS_COMPLETE = Record_OutputToDB.FIRST_NPS_COMPLETE;
                                After_Insert.FIRST_NPS_SCORE = Record_OutputToDB.FIRST_NPS_SCORE;
                                After_Insert.LAST_NPS_RESPONSE_DATE = Record_OutputToDB.LAST_NPS_RESPONSE_DATE;
                                After_Insert.LAST_NPS_COMPLETE = Record_OutputToDB.LAST_NPS_COMPLETE;
                                After_Insert.LAST_NPS_SCORE = Record_OutputToDB.LAST_NPS_SCORE;
                                After_Insert.NPS_SURVEY_REFRESH = Record_OutputToDB.NPS_SURVEY_REFRESH;
                                After_Insert.FIRST_RES_SEARCH_DATE = Record_OutputToDB.FIRST_RES_SEARCH_DATE;
                                After_Insert.FIRST_RES_SEARCH_COMPLETION_P = Record_OutputToDB.FIRST_RES_SEARCH_COMPLETION_P;
                                After_Insert.FIRST_RES_LOCAL_START_DATE = Record_OutputToDB.FIRST_RES_LOCAL_START_DATE;
                                After_Insert.FIRST_OVERNIGHT_RES = Record_OutputToDB.FIRST_OVERNIGHT_RES;
                                After_Insert.FIRST_WKDAY_HRLY_AM_START_RES = Record_OutputToDB.FIRST_WKDAY_HRLY_AM_START_RES;
                                After_Insert.FIRST_WKDAY_HRLY_PM_START_RES = Record_OutputToDB.FIRST_WKDAY_HRLY_PM_START_RES;
                                After_Insert.FIRST_WKEND_HRLY_AM_START_RES = Record_OutputToDB.FIRST_WKEND_HRLY_AM_START_RES;
                                After_Insert.FIRST_WKEND_HRLY_PM_START_RES = Record_OutputToDB.FIRST_WKEND_HRLY_PM_START_RES;
                                After_Insert.FIRST_WKDAY_DAILY_RES = Record_OutputToDB.FIRST_WKDAY_DAILY_RES;
                                After_Insert.FIRST_WKEND_DAILY_RES = Record_OutputToDB.FIRST_WKEND_DAILY_RES;
                                After_Insert.MEMBER_FIRST_RES_REFRESH_DATE = Record_OutputToDB.MEMBER_FIRST_RES_REFRESH_DATE;
                                After_Insert.REFER_A_FRIEND_CNT = Record_OutputToDB.REFER_A_FRIEND_CNT;
                                After_Insert.TOTAL_GIFT_CARD_CNT = Record_OutputToDB.TOTAL_GIFT_CARD_CNT;
                                After_Insert.TOTAL_GIFT_CARD_AMT_USD = Record_OutputToDB.TOTAL_GIFT_CARD_AMT_USD;
                                After_Insert.LAST_GIFT_CARD_PURCHASE_DATE = Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_DATE;
                                After_Insert.LAST_GIFT_CARD_PURCHAS_AMT_USD = Record_OutputToDB.LAST_GIFT_CARD_PURCHAS_AMT_USD;
                                After_Insert.LAST_GIFT_CARD_PURCHASE_CURR = Record_OutputToDB.LAST_GIFT_CARD_PURCHASE_CURR;
                                After_Insert.GIFT_CARD_CNT = Record_OutputToDB.GIFT_CARD_CNT;
                                After_Insert.LATE_RETURN_CNT = Record_OutputToDB.LATE_RETURN_CNT;
                                After_Insert.LAST_LATE_RETURN_DATE = Record_OutputToDB.LAST_LATE_RETURN_DATE;
                                After_Insert.LAST_LATE_RETURN_MINUTES = Record_OutputToDB.LAST_LATE_RETURN_MINUTES;
                                After_Insert.LAST_LATE_RETURN_CHARGE = Record_OutputToDB.LAST_LATE_RETURN_CHARGE;
                                After_Insert.MAJOR_ACCIDENTS_CNT = Record_OutputToDB.MAJOR_ACCIDENTS_CNT;
                                After_Insert.MINOR_ACCIDENTS_CNT = Record_OutputToDB.MINOR_ACCIDENTS_CNT;
                                After_Insert.LAST_ACCIDENT_DATE = Record_OutputToDB.LAST_ACCIDENT_DATE;
                                After_Insert.LAST_ACCIDENT_CLASSIFICATION = Record_OutputToDB.LAST_ACCIDENT_CLASSIFICATION;
                                After_Insert.MEMBER_BEHAVIOR_REFRESH_DATE = Record_OutputToDB.MEMBER_BEHAVIOR_REFRESH_DATE;
                                After_Insert.ZCORPORATE_CNT = Record_OutputToDB.ZCORPORATE_CNT;
                                After_Insert.CORPORATE_CNT = Record_OutputToDB.CORPORATE_CNT;
                                After_Insert.PERSONAL_CNT = Record_OutputToDB.PERSONAL_CNT;
                                After_Insert.EVPERSONAL_CNT = Record_OutputToDB.EVPERSONAL_CNT;
                                After_Insert.SPONSORED_CNT = Record_OutputToDB.SPONSORED_CNT;
                                After_Insert.EVSPONSORED_CNT = Record_OutputToDB.EVSPONSORED_CNT;
                                After_Insert.Z2B_LARGE_ACCOUNTS_CNT = Record_OutputToDB.Z2B_LARGE_ACCOUNTS_CNT;
                                After_Insert.SUBSCRIPTION_CNT = Record_OutputToDB.SUBSCRIPTION_CNT;
                                After_Insert.UNIV_DEPTS_CNT = Record_OutputToDB.UNIV_DEPTS_CNT;
                                After_Insert.VAN_RESTRICTED_CNT = Record_OutputToDB.VAN_RESTRICTED_CNT;
                                After_Insert.ACCESS_CNT = Record_OutputToDB.ACCESS_CNT;
                                After_Insert.ZCORPORATE_HIST_CNT = Record_OutputToDB.ZCORPORATE_HIST_CNT;
                                After_Insert.CORPORATE_HIST_CNT = Record_OutputToDB.CORPORATE_HIST_CNT;
                                After_Insert.PERSONAL_HIST_CNT = Record_OutputToDB.PERSONAL_HIST_CNT;
                                After_Insert.EVPERSONAL_HIST_CNT = Record_OutputToDB.EVPERSONAL_HIST_CNT;
                                After_Insert.SPONSORED_HIST_CNT = Record_OutputToDB.SPONSORED_HIST_CNT;
                                After_Insert.EVSPONSORED_HIST_CNT = Record_OutputToDB.EVSPONSORED_HIST_CNT;
                                After_Insert.Z2B_LARGE_ACCOUNTS_HIST_CNT = Record_OutputToDB.Z2B_LARGE_ACCOUNTS_HIST_CNT;
                                After_Insert.SUBSCRIPTION_HIST_CNT = Record_OutputToDB.SUBSCRIPTION_HIST_CNT;
                                After_Insert.UNIV_DEPTS_HIST_CNT = Record_OutputToDB.UNIV_DEPTS_HIST_CNT;
                                After_Insert.VAN_RESTRICTED_HIST_CNT = Record_OutputToDB.VAN_RESTRICTED_HIST_CNT;
                                After_Insert.ACCESS_HIST_CNT = Record_OutputToDB.ACCESS_HIST_CNT;
                                After_Insert.LAST_RES_SEARCH_DATE = Record_OutputToDB.LAST_RES_SEARCH_DATE;
                                After_Insert.LAST_RES_SEARCH_SOURCE = Record_OutputToDB.LAST_RES_SEARCH_SOURCE;
                                After_Insert.LAST_RES_SEARCH_COMPLETION_P = Record_OutputToDB.LAST_RES_SEARCH_COMPLETION_P;
                                After_Insert.LAST_OVERNIGHT_RES = Record_OutputToDB.LAST_OVERNIGHT_RES;
                                After_Insert.LAST_WKDAY_HRLY_RES = Record_OutputToDB.LAST_WKDAY_HRLY_RES;
                                After_Insert.LAST_WKDAY_DAILY_RES = Record_OutputToDB.LAST_WKDAY_DAILY_RES;
                                After_Insert.LAST_WKEND_HRLY_RES = Record_OutputToDB.LAST_WKEND_HRLY_RES;
                                After_Insert.LAST_WKEND_DAILY_RES = Record_OutputToDB.LAST_WKEND_DAILY_RES;
                                After_Insert.LAST_OVERNIGHT_RES_DATE = Record_OutputToDB.LAST_OVERNIGHT_RES_DATE;
                                After_Insert.LAST_WKDAY_HRLY_RES_DATE = Record_OutputToDB.LAST_WKDAY_HRLY_RES_DATE;
                                After_Insert.LAST_WKDAY_DAILY_RES_DATE = Record_OutputToDB.LAST_WKDAY_DAILY_RES_DATE;
                                After_Insert.LAST_WKEND_HRLY_RES_DATE = Record_OutputToDB.LAST_WKEND_HRLY_RES_DATE;
                                After_Insert.LAST_WKEND_DAILY_RES_DATE = Record_OutputToDB.LAST_WKEND_DAILY_RES_DATE;
                                After_Insert.LAST_RES_SEARCH_TYPE = Record_OutputToDB.LAST_RES_SEARCH_TYPE;
                                After_Insert.MEMBER_LAST_RES_REFRESH_DATE = Record_OutputToDB.MEMBER_LAST_RES_REFRESH_DATE;
                                After_Insert.LAST_RESERVATION_ID = Record_OutputToDB.LAST_RESERVATION_ID;
                                After_Insert.RES_SOURCE = Record_OutputToDB.RES_SOURCE;
                                After_Insert.RES_SOURCE_DESCRIPTION = Record_OutputToDB.RES_SOURCE_DESCRIPTION;
                                After_Insert.FIRST_WKDAY_HRLY_RES = Record_OutputToDB.FIRST_WKDAY_HRLY_RES;
                                After_Insert.FIRST_WKEND_HRLY_RES = Record_OutputToDB.FIRST_WKEND_HRLY_RES;
                                After_Insert.FIRST_RES_TYPE = Record_OutputToDB.FIRST_RES_TYPE;
                                After_Insert.DAYS_FROM_JOIN_TO_FIRST_RES = Record_OutputToDB.DAYS_FROM_JOIN_TO_FIRST_RES;
                                After_Insert.FIRST_NPS_COHORT = Record_OutputToDB.FIRST_NPS_COHORT;
                                After_Insert.LAST_NPS_COHORT = Record_OutputToDB.LAST_NPS_COHORT;
                                After_Insert.NPS_SURVEY_CNT = Record_OutputToDB.NPS_SURVEY_CNT;
                                After_Insert.TOTAL_HOURS_1_TO_3MTHS = Record_OutputToDB.TOTAL_HOURS_1_TO_3MTHS;
                                After_Insert.TOTAL_HOURS_4_TO_6MTHS = Record_OutputToDB.TOTAL_HOURS_4_TO_6MTHS;
                                After_Insert.TOTAL_HOURS_7_TO_9MTHS = Record_OutputToDB.TOTAL_HOURS_7_TO_9MTHS;
                                After_Insert.TOTAL_HOURS_10_TO_12MTHS = Record_OutputToDB.TOTAL_HOURS_10_TO_12MTHS;
                                After_Insert.TOTAL_DISTANCE_1_TO_3MTHS = Record_OutputToDB.TOTAL_DISTANCE_1_TO_3MTHS;
                                After_Insert.TOTAL_DISTANCE_4_TO_6MTHS = Record_OutputToDB.TOTAL_DISTANCE_4_TO_6MTHS;
                                After_Insert.TOTAL_DISTANCE_7_TO_9MTHS = Record_OutputToDB.TOTAL_DISTANCE_7_TO_9MTHS;
                                After_Insert.TOTAL_DISTANCE_10_TO_12MTHS = Record_OutputToDB.TOTAL_DISTANCE_10_TO_12MTHS;
                                After_Insert.DISTANCE_UNITS = Record_OutputToDB.DISTANCE_UNITS;
                                After_Insert.NEXT_FEE_DATE = Record_OutputToDB.NEXT_FEE_DATE;
                                After_Insert.NEXT_FEE_CHARGE = Record_OutputToDB.NEXT_FEE_CHARGE;
                                After_Insert.NEXT_FEE_FREQ = Record_OutputToDB.NEXT_FEE_FREQ;
                                After_Insert.FIRST_RES_SEARCH_SOURCE = Record_OutputToDB.FIRST_RES_SEARCH_SOURCE;
                                After_Insert.FIRST_OTHER_RES = Record_OutputToDB.FIRST_OTHER_RES;
                                After_Insert.FIRST_NOSHOW_RES = Record_OutputToDB.FIRST_NOSHOW_RES;
                                After_Insert.FIRST_CANCELLATION_RES = Record_OutputToDB.FIRST_CANCELLATION_RES;
                                After_Insert.LAST_OTHER_RES = Record_OutputToDB.LAST_OTHER_RES;
                                After_Insert.LAST_NOSHOW_RES = Record_OutputToDB.LAST_NOSHOW_RES;
                                After_Insert.LAST_CANCELLATION_RES = Record_OutputToDB.LAST_CANCELLATION_RES;
                                After_Insert.COMPLETED_RES_3MTHS_S = Record_OutputToDB.COMPLETED_RES_3MTHS_S;
                                After_Insert.COMPLETED_RES_6MTHS_S = Record_OutputToDB.COMPLETED_RES_6MTHS_S;
                                After_Insert.COMPLETED_RES_9MTHS_S = Record_OutputToDB.COMPLETED_RES_9MTHS_S;
                                After_Insert.COMPLETED_RES_1YEAR_S = Record_OutputToDB.COMPLETED_RES_1YEAR_S;
                                After_Insert.COMPLETED_RES_6MTHS_WRKDAY_S = Record_OutputToDB.COMPLETED_RES_6MTHS_WRKDAY_S;
                                After_Insert.COMPLETED_RES_1YEAR_WRKDAY_S = Record_OutputToDB.COMPLETED_RES_1YEAR_WRKDAY_S;
                                After_Insert.TOTAL_UP_REVENUE_3MTHS_S = Record_OutputToDB.TOTAL_UP_REVENUE_3MTHS_S;
                                After_Insert.TOTAL_UP_REVENUE_6MTHS_S = Record_OutputToDB.TOTAL_UP_REVENUE_6MTHS_S;
                                After_Insert.TOTAL_UP_REVENUE_9MTHS_S = Record_OutputToDB.TOTAL_UP_REVENUE_9MTHS_S;
                                After_Insert.TOTAL_UP_REVENUE_1YEAR_S = Record_OutputToDB.TOTAL_UP_REVENUE_1YEAR_S;
                                After_Insert.AVG_UP_REVENUE_3MTHS_S = Record_OutputToDB.AVG_UP_REVENUE_3MTHS_S;
                                After_Insert.AVG_UP_REVENUE_6MTHS_S = Record_OutputToDB.AVG_UP_REVENUE_6MTHS_S;
                                After_Insert.AVG_UP_REVENUE_9MTHS_S = Record_OutputToDB.AVG_UP_REVENUE_9MTHS_S;
                                After_Insert.AVG_UP_REVENUE_1YEAR_S = Record_OutputToDB.AVG_UP_REVENUE_1YEAR_S;
                                After_Insert.RES_SEARCH_3MTHS_S = Record_OutputToDB.RES_SEARCH_3MTHS_S;
                                After_Insert.RES_SEARCH_TURNDOWN_3MTHS_S = Record_OutputToDB.RES_SEARCH_TURNDOWN_3MTHS_S;
                                After_Insert.RES_SEARCH_COMPLETIONS_3MTHS_S = Record_OutputToDB.RES_SEARCH_COMPLETIONS_3MTHS_S;
                                After_Insert.NEXT_RES_DATE_S = Record_OutputToDB.NEXT_RES_DATE_S;
                                After_Insert.RES_REFRESH_DATE_S = Record_OutputToDB.RES_REFRESH_DATE_S;
                                After_Insert.CANCELED_RES_1YEAR = Record_OutputToDB.CANCELED_RES_1YEAR;
                                After_Insert.BILLED_NOSHOW_RES_1YEAR = Record_OutputToDB.BILLED_NOSHOW_RES_1YEAR;
                                After_Insert.TOTAL_RES_1YEAR = Record_OutputToDB.TOTAL_RES_1YEAR;
                                After_Insert.AFFILIATE_TYPE = Record_OutputToDB.AFFILIATE_TYPE;
                                After_Insert.ANNIVERSARY_DATE = Record_OutputToDB.ANNIVERSARY_DATE;
                                After_Insert.LAST_RES_RATE_PLAN_KEY = Record_OutputToDB.LAST_RES_RATE_PLAN_KEY;
                                After_Insert.LAST_RES_VEHICLE_CLASS = Record_OutputToDB.LAST_RES_VEHICLE_CLASS;
                                After_Insert.LAST_RES_VEHICLE_ID = Record_OutputToDB.LAST_RES_VEHICLE_ID;
                                After_Insert.ACTIVE_UNI_P = Record_OutputToDB.ACTIVE_UNI_P;
                                After_Insert.CURRENT_MEMBER_P = Record_OutputToDB.CURRENT_MEMBER_P;
                                After_Insert.FIRST_JOIN_ACCOUNT_ID = Record_OutputToDB.FIRST_JOIN_ACCOUNT_ID;
                                After_Insert.LAST_DIGIT_FIRST_ACCOUNT_ID = Record_OutputToDB.LAST_DIGIT_FIRST_ACCOUNT_ID;
                                After_Insert.FIRST_CORPORATE_ID = Record_OutputToDB.FIRST_CORPORATE_ID;
                                After_Insert.CURRENT_SUSPENSION_REASON_ID = Record_OutputToDB.CURRENT_SUSPENSION_REASON_ID;
                                After_Insert.FIRST_APPLICATION_ID = Record_OutputToDB.FIRST_APPLICATION_ID;
                                After_Insert.FIRST_APP_IJD_SESSION_ID = Record_OutputToDB.FIRST_APP_IJD_SESSION_ID;
                                After_Insert.FIRST_APPLICATION_IJD_P = Record_OutputToDB.FIRST_APPLICATION_IJD_P;
                                After_Insert.FIRST_RES_TYPE_DAILY_HOURLY = Record_OutputToDB.FIRST_RES_TYPE_DAILY_HOURLY;
                                After_Insert.FIRST_WKDAY_DAILY_AM_START_RES = Record_OutputToDB.FIRST_WKDAY_DAILY_AM_START_RES;
                                After_Insert.FIRST_WKDAY_DAILY_PM_START_RES = Record_OutputToDB.FIRST_WKDAY_DAILY_PM_START_RES;
                                After_Insert.FIRST_WKEND_DAILY_AM_START_RES = Record_OutputToDB.FIRST_WKEND_DAILY_AM_START_RES;
                                After_Insert.FIRST_WKEND_DAILY_PM_START_RES = Record_OutputToDB.FIRST_WKEND_DAILY_PM_START_RES;
                                After_Insert.FIRST_RES_SOURCE = Record_OutputToDB.FIRST_RES_SOURCE;
                                After_Insert.FIRST_RES_SOURCE_DESC = Record_OutputToDB.FIRST_RES_SOURCE_DESC;
                                After_Insert.FIRST_RES_VEHICLE_ID = Record_OutputToDB.FIRST_RES_VEHICLE_ID;
                                After_Insert.FIRST_RES_ZIPFLEET_ID = Record_OutputToDB.FIRST_RES_ZIPFLEET_ID;
                                After_Insert.FIRST_RES_DATE = Record_OutputToDB.FIRST_RES_DATE;
                                After_Insert.SECOND_RES_DATE = Record_OutputToDB.SECOND_RES_DATE;
                                After_Insert.FIRST_WAIVER_START_DATE = Record_OutputToDB.FIRST_WAIVER_START_DATE;
            }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */
// Start of branch "After_Insert"
if(After_Insert != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//After_Insert
			//After_Insert


			
				if(execStat){
					runStat.updateStatOnConnection("After_Insert"+iterateId,1, 1);
				} 
			

		

          Log_Rows = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
      ope_tFilterRow_1.matches((// Log Every X Records
((java.util.concurrent.atomic.AtomicInteger)globalMap.get("File_Processed_Records")).incrementAndGet() % Logging.PROGRESS_ROW_COUNT  == 0), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(Log_Rows == null){ 
                Log_Rows = new Log_RowsStruct();
              }
               Log_Rows.MEMBER_ID = After_Insert.MEMBER_ID;
               Log_Rows.AFFILIATE_ID_1 = After_Insert.AFFILIATE_ID_1;
               Log_Rows.AFFILIATE_NAME_1 = After_Insert.AFFILIATE_NAME_1;
               Log_Rows.AFFILIATE_ID_2 = After_Insert.AFFILIATE_ID_2;
               Log_Rows.AFFILIATE_NAME_2 = After_Insert.AFFILIATE_NAME_2;
               Log_Rows.AFFILIATE_ID_3 = After_Insert.AFFILIATE_ID_3;
               Log_Rows.AFFILIATE_NAME_3 = After_Insert.AFFILIATE_NAME_3;
               Log_Rows.AFFILIATE_ID_4 = After_Insert.AFFILIATE_ID_4;
               Log_Rows.AFFILIATE_NAME_4 = After_Insert.AFFILIATE_NAME_4;
               Log_Rows.AFFILIATE_ID_5 = After_Insert.AFFILIATE_ID_5;
               Log_Rows.AFFILIATE_NAME_5 = After_Insert.AFFILIATE_NAME_5;
               Log_Rows.AFFILIATE_ID_6 = After_Insert.AFFILIATE_ID_6;
               Log_Rows.AFFILIATE_NAME_6 = After_Insert.AFFILIATE_NAME_6;
               Log_Rows.AFFILIATE_ID_7 = After_Insert.AFFILIATE_ID_7;
               Log_Rows.AFFILIATE_NAME_7 = After_Insert.AFFILIATE_NAME_7;
               Log_Rows.AFFILIATE_ID_8 = After_Insert.AFFILIATE_ID_8;
               Log_Rows.AFFILIATE_NAME_8 = After_Insert.AFFILIATE_NAME_8;
               Log_Rows.AFFILIATE_ID_9 = After_Insert.AFFILIATE_ID_9;
               Log_Rows.AFFILIATE_NAME_9 = After_Insert.AFFILIATE_NAME_9;
               Log_Rows.DELETED_DATE = After_Insert.DELETED_DATE;
               Log_Rows.LAST_MODIFIED = After_Insert.LAST_MODIFIED;
               Log_Rows.AFFILIATE_REFRESH_DATE = After_Insert.AFFILIATE_REFRESH_DATE;
               Log_Rows.WAIVER_ELIGIBLE_P = After_Insert.WAIVER_ELIGIBLE_P;
               Log_Rows.PER_TRIP_WAIVER_ELIGIBLE_P = After_Insert.PER_TRIP_WAIVER_ELIGIBLE_P;
               Log_Rows.CURRENT_WAIVER_PLAN_ID = After_Insert.CURRENT_WAIVER_PLAN_ID;
               Log_Rows.CURRENT_WAIVER_PLAN_NAME = After_Insert.CURRENT_WAIVER_PLAN_NAME;
               Log_Rows.CURRENT_WAIVER_PLAN_FEE = After_Insert.CURRENT_WAIVER_PLAN_FEE;
               Log_Rows.CURRENT_WAIVER_TIER = After_Insert.CURRENT_WAIVER_TIER;
               Log_Rows.CURRENT_WAIVER_DEDUCTIBLE = After_Insert.CURRENT_WAIVER_DEDUCTIBLE;
               Log_Rows.CURRENT_W_AUTO_RENEW_P = After_Insert.CURRENT_W_AUTO_RENEW_P;
               Log_Rows.CURRENT_WAIVER_START_DATE = After_Insert.CURRENT_WAIVER_START_DATE;
               Log_Rows.CURRENT_WAIVER_END_DATE = After_Insert.CURRENT_WAIVER_END_DATE;
               Log_Rows.PER_TRIP_WAIVER_CNT = After_Insert.PER_TRIP_WAIVER_CNT;
               Log_Rows.LAST_PER_TRIP_WAIVER_DATE = After_Insert.LAST_PER_TRIP_WAIVER_DATE;
               Log_Rows.EVER_HAD_ANY_WAIVER_P = After_Insert.EVER_HAD_ANY_WAIVER_P;
               Log_Rows.WAIVER_REFRESH_DATE = After_Insert.WAIVER_REFRESH_DATE;
               Log_Rows.DRIVER_RISK_TIER_INFO_P = After_Insert.DRIVER_RISK_TIER_INFO_P;
               Log_Rows.FIRST_RISK_TIER_KEY = After_Insert.FIRST_RISK_TIER_KEY;
               Log_Rows.LAST_RISK_TIER_KEY = After_Insert.LAST_RISK_TIER_KEY;
               Log_Rows.FIRST_MIN_LEVEL = After_Insert.FIRST_MIN_LEVEL;
               Log_Rows.LAST_MIN_LEVEL = After_Insert.LAST_MIN_LEVEL;
               Log_Rows.TOTAL_RISK_TIER_CHANGES = After_Insert.TOTAL_RISK_TIER_CHANGES;
               Log_Rows.TRIPS_COMPLETED = After_Insert.TRIPS_COMPLETED;
               Log_Rows.LAST_ACCIDENT_KARMA_DATE = After_Insert.LAST_ACCIDENT_KARMA_DATE;
               Log_Rows.LAST_LIC_POINTS_KARMA_DATE = After_Insert.LAST_LIC_POINTS_KARMA_DATE;
               Log_Rows.DRIVER_RISK_REFRESH_DATE = After_Insert.DRIVER_RISK_REFRESH_DATE;
               Log_Rows.LAST_RES_DATE = After_Insert.LAST_RES_DATE;
               Log_Rows.LAST_RES_TYPE = After_Insert.LAST_RES_TYPE;
               Log_Rows.DAYS_SINCE_LAST_DRIVE = After_Insert.DAYS_SINCE_LAST_DRIVE;
               Log_Rows.NEXT_RES_TYPE = After_Insert.NEXT_RES_TYPE;
               Log_Rows.DAYS_UNTIL_NEXT_DRIVE = After_Insert.DAYS_UNTIL_NEXT_DRIVE;
               Log_Rows.FIRST_GAS_FILLUP_DATE = After_Insert.FIRST_GAS_FILLUP_DATE;
               Log_Rows.FIRST_GAS_FILLUP_AMOUNT = After_Insert.FIRST_GAS_FILLUP_AMOUNT;
               Log_Rows.FIRST_GAS_FILLUP_CHARGE = After_Insert.FIRST_GAS_FILLUP_CHARGE;
               Log_Rows.LAST_GAS_FILLUP_DATE = After_Insert.LAST_GAS_FILLUP_DATE;
               Log_Rows.LAST_GAS_FILLUP_AMOUNT = After_Insert.LAST_GAS_FILLUP_AMOUNT;
               Log_Rows.LAST_GAS_FILLUP_CHARGE = After_Insert.LAST_GAS_FILLUP_CHARGE;
               Log_Rows.FILLUP_CNT = After_Insert.FILLUP_CNT;
               Log_Rows.WEX_REFRESH_DATE = After_Insert.WEX_REFRESH_DATE;
               Log_Rows.FIRST_NPS_RESPONSE_DATE = After_Insert.FIRST_NPS_RESPONSE_DATE;
               Log_Rows.FIRST_NPS_COMPLETE = After_Insert.FIRST_NPS_COMPLETE;
               Log_Rows.FIRST_NPS_SCORE = After_Insert.FIRST_NPS_SCORE;
               Log_Rows.LAST_NPS_RESPONSE_DATE = After_Insert.LAST_NPS_RESPONSE_DATE;
               Log_Rows.LAST_NPS_COMPLETE = After_Insert.LAST_NPS_COMPLETE;
               Log_Rows.LAST_NPS_SCORE = After_Insert.LAST_NPS_SCORE;
               Log_Rows.NPS_SURVEY_REFRESH = After_Insert.NPS_SURVEY_REFRESH;
               Log_Rows.FIRST_RES_SEARCH_DATE = After_Insert.FIRST_RES_SEARCH_DATE;
               Log_Rows.FIRST_RES_SEARCH_COMPLETION_P = After_Insert.FIRST_RES_SEARCH_COMPLETION_P;
               Log_Rows.FIRST_RES_LOCAL_START_DATE = After_Insert.FIRST_RES_LOCAL_START_DATE;
               Log_Rows.FIRST_OVERNIGHT_RES = After_Insert.FIRST_OVERNIGHT_RES;
               Log_Rows.FIRST_WKDAY_HRLY_AM_START_RES = After_Insert.FIRST_WKDAY_HRLY_AM_START_RES;
               Log_Rows.FIRST_WKDAY_HRLY_PM_START_RES = After_Insert.FIRST_WKDAY_HRLY_PM_START_RES;
               Log_Rows.FIRST_WKEND_HRLY_AM_START_RES = After_Insert.FIRST_WKEND_HRLY_AM_START_RES;
               Log_Rows.FIRST_WKEND_HRLY_PM_START_RES = After_Insert.FIRST_WKEND_HRLY_PM_START_RES;
               Log_Rows.FIRST_WKDAY_DAILY_RES = After_Insert.FIRST_WKDAY_DAILY_RES;
               Log_Rows.FIRST_WKEND_DAILY_RES = After_Insert.FIRST_WKEND_DAILY_RES;
               Log_Rows.MEMBER_FIRST_RES_REFRESH_DATE = After_Insert.MEMBER_FIRST_RES_REFRESH_DATE;
               Log_Rows.REFER_A_FRIEND_CNT = After_Insert.REFER_A_FRIEND_CNT;
               Log_Rows.TOTAL_GIFT_CARD_CNT = After_Insert.TOTAL_GIFT_CARD_CNT;
               Log_Rows.TOTAL_GIFT_CARD_AMT_USD = After_Insert.TOTAL_GIFT_CARD_AMT_USD;
               Log_Rows.LAST_GIFT_CARD_PURCHASE_DATE = After_Insert.LAST_GIFT_CARD_PURCHASE_DATE;
               Log_Rows.LAST_GIFT_CARD_PURCHAS_AMT_USD = After_Insert.LAST_GIFT_CARD_PURCHAS_AMT_USD;
               Log_Rows.LAST_GIFT_CARD_PURCHASE_CURR = After_Insert.LAST_GIFT_CARD_PURCHASE_CURR;
               Log_Rows.GIFT_CARD_CNT = After_Insert.GIFT_CARD_CNT;
               Log_Rows.LATE_RETURN_CNT = After_Insert.LATE_RETURN_CNT;
               Log_Rows.LAST_LATE_RETURN_DATE = After_Insert.LAST_LATE_RETURN_DATE;
               Log_Rows.LAST_LATE_RETURN_MINUTES = After_Insert.LAST_LATE_RETURN_MINUTES;
               Log_Rows.LAST_LATE_RETURN_CHARGE = After_Insert.LAST_LATE_RETURN_CHARGE;
               Log_Rows.MAJOR_ACCIDENTS_CNT = After_Insert.MAJOR_ACCIDENTS_CNT;
               Log_Rows.MINOR_ACCIDENTS_CNT = After_Insert.MINOR_ACCIDENTS_CNT;
               Log_Rows.LAST_ACCIDENT_DATE = After_Insert.LAST_ACCIDENT_DATE;
               Log_Rows.LAST_ACCIDENT_CLASSIFICATION = After_Insert.LAST_ACCIDENT_CLASSIFICATION;
               Log_Rows.MEMBER_BEHAVIOR_REFRESH_DATE = After_Insert.MEMBER_BEHAVIOR_REFRESH_DATE;
               Log_Rows.ZCORPORATE_CNT = After_Insert.ZCORPORATE_CNT;
               Log_Rows.CORPORATE_CNT = After_Insert.CORPORATE_CNT;
               Log_Rows.PERSONAL_CNT = After_Insert.PERSONAL_CNT;
               Log_Rows.EVPERSONAL_CNT = After_Insert.EVPERSONAL_CNT;
               Log_Rows.SPONSORED_CNT = After_Insert.SPONSORED_CNT;
               Log_Rows.EVSPONSORED_CNT = After_Insert.EVSPONSORED_CNT;
               Log_Rows.Z2B_LARGE_ACCOUNTS_CNT = After_Insert.Z2B_LARGE_ACCOUNTS_CNT;
               Log_Rows.SUBSCRIPTION_CNT = After_Insert.SUBSCRIPTION_CNT;
               Log_Rows.UNIV_DEPTS_CNT = After_Insert.UNIV_DEPTS_CNT;
               Log_Rows.VAN_RESTRICTED_CNT = After_Insert.VAN_RESTRICTED_CNT;
               Log_Rows.ACCESS_CNT = After_Insert.ACCESS_CNT;
               Log_Rows.ZCORPORATE_HIST_CNT = After_Insert.ZCORPORATE_HIST_CNT;
               Log_Rows.CORPORATE_HIST_CNT = After_Insert.CORPORATE_HIST_CNT;
               Log_Rows.PERSONAL_HIST_CNT = After_Insert.PERSONAL_HIST_CNT;
               Log_Rows.EVPERSONAL_HIST_CNT = After_Insert.EVPERSONAL_HIST_CNT;
               Log_Rows.SPONSORED_HIST_CNT = After_Insert.SPONSORED_HIST_CNT;
               Log_Rows.EVSPONSORED_HIST_CNT = After_Insert.EVSPONSORED_HIST_CNT;
               Log_Rows.Z2B_LARGE_ACCOUNTS_HIST_CNT = After_Insert.Z2B_LARGE_ACCOUNTS_HIST_CNT;
               Log_Rows.SUBSCRIPTION_HIST_CNT = After_Insert.SUBSCRIPTION_HIST_CNT;
               Log_Rows.UNIV_DEPTS_HIST_CNT = After_Insert.UNIV_DEPTS_HIST_CNT;
               Log_Rows.VAN_RESTRICTED_HIST_CNT = After_Insert.VAN_RESTRICTED_HIST_CNT;
               Log_Rows.ACCESS_HIST_CNT = After_Insert.ACCESS_HIST_CNT;
               Log_Rows.LAST_RES_SEARCH_DATE = After_Insert.LAST_RES_SEARCH_DATE;
               Log_Rows.LAST_RES_SEARCH_SOURCE = After_Insert.LAST_RES_SEARCH_SOURCE;
               Log_Rows.LAST_RES_SEARCH_COMPLETION_P = After_Insert.LAST_RES_SEARCH_COMPLETION_P;
               Log_Rows.LAST_OVERNIGHT_RES = After_Insert.LAST_OVERNIGHT_RES;
               Log_Rows.LAST_WKDAY_HRLY_RES = After_Insert.LAST_WKDAY_HRLY_RES;
               Log_Rows.LAST_WKDAY_DAILY_RES = After_Insert.LAST_WKDAY_DAILY_RES;
               Log_Rows.LAST_WKEND_HRLY_RES = After_Insert.LAST_WKEND_HRLY_RES;
               Log_Rows.LAST_WKEND_DAILY_RES = After_Insert.LAST_WKEND_DAILY_RES;
               Log_Rows.LAST_OVERNIGHT_RES_DATE = After_Insert.LAST_OVERNIGHT_RES_DATE;
               Log_Rows.LAST_WKDAY_HRLY_RES_DATE = After_Insert.LAST_WKDAY_HRLY_RES_DATE;
               Log_Rows.LAST_WKDAY_DAILY_RES_DATE = After_Insert.LAST_WKDAY_DAILY_RES_DATE;
               Log_Rows.LAST_WKEND_HRLY_RES_DATE = After_Insert.LAST_WKEND_HRLY_RES_DATE;
               Log_Rows.LAST_WKEND_DAILY_RES_DATE = After_Insert.LAST_WKEND_DAILY_RES_DATE;
               Log_Rows.LAST_RES_SEARCH_TYPE = After_Insert.LAST_RES_SEARCH_TYPE;
               Log_Rows.MEMBER_LAST_RES_REFRESH_DATE = After_Insert.MEMBER_LAST_RES_REFRESH_DATE;
               Log_Rows.LAST_RESERVATION_ID = After_Insert.LAST_RESERVATION_ID;
               Log_Rows.RES_SOURCE = After_Insert.RES_SOURCE;
               Log_Rows.RES_SOURCE_DESCRIPTION = After_Insert.RES_SOURCE_DESCRIPTION;
               Log_Rows.FIRST_WKDAY_HRLY_RES = After_Insert.FIRST_WKDAY_HRLY_RES;
               Log_Rows.FIRST_WKEND_HRLY_RES = After_Insert.FIRST_WKEND_HRLY_RES;
               Log_Rows.FIRST_RES_TYPE = After_Insert.FIRST_RES_TYPE;
               Log_Rows.DAYS_FROM_JOIN_TO_FIRST_RES = After_Insert.DAYS_FROM_JOIN_TO_FIRST_RES;
               Log_Rows.FIRST_NPS_COHORT = After_Insert.FIRST_NPS_COHORT;
               Log_Rows.LAST_NPS_COHORT = After_Insert.LAST_NPS_COHORT;
               Log_Rows.NPS_SURVEY_CNT = After_Insert.NPS_SURVEY_CNT;
               Log_Rows.TOTAL_HOURS_1_TO_3MTHS = After_Insert.TOTAL_HOURS_1_TO_3MTHS;
               Log_Rows.TOTAL_HOURS_4_TO_6MTHS = After_Insert.TOTAL_HOURS_4_TO_6MTHS;
               Log_Rows.TOTAL_HOURS_7_TO_9MTHS = After_Insert.TOTAL_HOURS_7_TO_9MTHS;
               Log_Rows.TOTAL_HOURS_10_TO_12MTHS = After_Insert.TOTAL_HOURS_10_TO_12MTHS;
               Log_Rows.TOTAL_DISTANCE_1_TO_3MTHS = After_Insert.TOTAL_DISTANCE_1_TO_3MTHS;
               Log_Rows.TOTAL_DISTANCE_4_TO_6MTHS = After_Insert.TOTAL_DISTANCE_4_TO_6MTHS;
               Log_Rows.TOTAL_DISTANCE_7_TO_9MTHS = After_Insert.TOTAL_DISTANCE_7_TO_9MTHS;
               Log_Rows.TOTAL_DISTANCE_10_TO_12MTHS = After_Insert.TOTAL_DISTANCE_10_TO_12MTHS;
               Log_Rows.DISTANCE_UNITS = After_Insert.DISTANCE_UNITS;
               Log_Rows.NEXT_FEE_DATE = After_Insert.NEXT_FEE_DATE;
               Log_Rows.NEXT_FEE_CHARGE = After_Insert.NEXT_FEE_CHARGE;
               Log_Rows.NEXT_FEE_FREQ = After_Insert.NEXT_FEE_FREQ;
               Log_Rows.FIRST_RES_SEARCH_SOURCE = After_Insert.FIRST_RES_SEARCH_SOURCE;
               Log_Rows.FIRST_OTHER_RES = After_Insert.FIRST_OTHER_RES;
               Log_Rows.FIRST_NOSHOW_RES = After_Insert.FIRST_NOSHOW_RES;
               Log_Rows.FIRST_CANCELLATION_RES = After_Insert.FIRST_CANCELLATION_RES;
               Log_Rows.LAST_OTHER_RES = After_Insert.LAST_OTHER_RES;
               Log_Rows.LAST_NOSHOW_RES = After_Insert.LAST_NOSHOW_RES;
               Log_Rows.LAST_CANCELLATION_RES = After_Insert.LAST_CANCELLATION_RES;
               Log_Rows.COMPLETED_RES_3MTHS_S = After_Insert.COMPLETED_RES_3MTHS_S;
               Log_Rows.COMPLETED_RES_6MTHS_S = After_Insert.COMPLETED_RES_6MTHS_S;
               Log_Rows.COMPLETED_RES_9MTHS_S = After_Insert.COMPLETED_RES_9MTHS_S;
               Log_Rows.COMPLETED_RES_1YEAR_S = After_Insert.COMPLETED_RES_1YEAR_S;
               Log_Rows.COMPLETED_RES_6MTHS_WRKDAY_S = After_Insert.COMPLETED_RES_6MTHS_WRKDAY_S;
               Log_Rows.COMPLETED_RES_1YEAR_WRKDAY_S = After_Insert.COMPLETED_RES_1YEAR_WRKDAY_S;
               Log_Rows.TOTAL_UP_REVENUE_3MTHS_S = After_Insert.TOTAL_UP_REVENUE_3MTHS_S;
               Log_Rows.TOTAL_UP_REVENUE_6MTHS_S = After_Insert.TOTAL_UP_REVENUE_6MTHS_S;
               Log_Rows.TOTAL_UP_REVENUE_9MTHS_S = After_Insert.TOTAL_UP_REVENUE_9MTHS_S;
               Log_Rows.TOTAL_UP_REVENUE_1YEAR_S = After_Insert.TOTAL_UP_REVENUE_1YEAR_S;
               Log_Rows.AVG_UP_REVENUE_3MTHS_S = After_Insert.AVG_UP_REVENUE_3MTHS_S;
               Log_Rows.AVG_UP_REVENUE_6MTHS_S = After_Insert.AVG_UP_REVENUE_6MTHS_S;
               Log_Rows.AVG_UP_REVENUE_9MTHS_S = After_Insert.AVG_UP_REVENUE_9MTHS_S;
               Log_Rows.AVG_UP_REVENUE_1YEAR_S = After_Insert.AVG_UP_REVENUE_1YEAR_S;
               Log_Rows.RES_SEARCH_3MTHS_S = After_Insert.RES_SEARCH_3MTHS_S;
               Log_Rows.RES_SEARCH_TURNDOWN_3MTHS_S = After_Insert.RES_SEARCH_TURNDOWN_3MTHS_S;
               Log_Rows.RES_SEARCH_COMPLETIONS_3MTHS_S = After_Insert.RES_SEARCH_COMPLETIONS_3MTHS_S;
               Log_Rows.NEXT_RES_DATE_S = After_Insert.NEXT_RES_DATE_S;
               Log_Rows.RES_REFRESH_DATE_S = After_Insert.RES_REFRESH_DATE_S;
               Log_Rows.CANCELED_RES_1YEAR = After_Insert.CANCELED_RES_1YEAR;
               Log_Rows.BILLED_NOSHOW_RES_1YEAR = After_Insert.BILLED_NOSHOW_RES_1YEAR;
               Log_Rows.TOTAL_RES_1YEAR = After_Insert.TOTAL_RES_1YEAR;
               Log_Rows.AFFILIATE_TYPE = After_Insert.AFFILIATE_TYPE;
               Log_Rows.ANNIVERSARY_DATE = After_Insert.ANNIVERSARY_DATE;
               Log_Rows.LAST_RES_RATE_PLAN_KEY = After_Insert.LAST_RES_RATE_PLAN_KEY;
               Log_Rows.LAST_RES_VEHICLE_CLASS = After_Insert.LAST_RES_VEHICLE_CLASS;
               Log_Rows.LAST_RES_VEHICLE_ID = After_Insert.LAST_RES_VEHICLE_ID;
               Log_Rows.ACTIVE_UNI_P = After_Insert.ACTIVE_UNI_P;
               Log_Rows.CURRENT_MEMBER_P = After_Insert.CURRENT_MEMBER_P;
               Log_Rows.FIRST_JOIN_ACCOUNT_ID = After_Insert.FIRST_JOIN_ACCOUNT_ID;
               Log_Rows.LAST_DIGIT_FIRST_ACCOUNT_ID = After_Insert.LAST_DIGIT_FIRST_ACCOUNT_ID;
               Log_Rows.FIRST_CORPORATE_ID = After_Insert.FIRST_CORPORATE_ID;
               Log_Rows.CURRENT_SUSPENSION_REASON_ID = After_Insert.CURRENT_SUSPENSION_REASON_ID;
               Log_Rows.FIRST_APPLICATION_ID = After_Insert.FIRST_APPLICATION_ID;
               Log_Rows.FIRST_APP_IJD_SESSION_ID = After_Insert.FIRST_APP_IJD_SESSION_ID;
               Log_Rows.FIRST_APPLICATION_IJD_P = After_Insert.FIRST_APPLICATION_IJD_P;
               Log_Rows.FIRST_RES_TYPE_DAILY_HOURLY = After_Insert.FIRST_RES_TYPE_DAILY_HOURLY;
               Log_Rows.FIRST_WKDAY_DAILY_AM_START_RES = After_Insert.FIRST_WKDAY_DAILY_AM_START_RES;
               Log_Rows.FIRST_WKDAY_DAILY_PM_START_RES = After_Insert.FIRST_WKDAY_DAILY_PM_START_RES;
               Log_Rows.FIRST_WKEND_DAILY_AM_START_RES = After_Insert.FIRST_WKEND_DAILY_AM_START_RES;
               Log_Rows.FIRST_WKEND_DAILY_PM_START_RES = After_Insert.FIRST_WKEND_DAILY_PM_START_RES;
               Log_Rows.FIRST_RES_SOURCE = After_Insert.FIRST_RES_SOURCE;
               Log_Rows.FIRST_RES_SOURCE_DESC = After_Insert.FIRST_RES_SOURCE_DESC;
               Log_Rows.FIRST_RES_VEHICLE_ID = After_Insert.FIRST_RES_VEHICLE_ID;
               Log_Rows.FIRST_RES_ZIPFLEET_ID = After_Insert.FIRST_RES_ZIPFLEET_ID;
               Log_Rows.FIRST_RES_DATE = After_Insert.FIRST_RES_DATE;
               Log_Rows.SECOND_RES_DATE = After_Insert.SECOND_RES_DATE;
               Log_Rows.FIRST_WAIVER_START_DATE = After_Insert.FIRST_WAIVER_START_DATE;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "Log_Rows"
if(Log_Rows != null) { 



	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			//Log_Rows
			//Log_Rows


			
				if(execStat){
					runStat.updateStatOnConnection("Log_Rows"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "TRACE","","Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 1, "Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_4_WARN_MESSAGES", "Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records"))); 
globalMap.put("tWarn_4_WARN_PRIORITY", 1);
globalMap.put("tWarn_4_WARN_CODE", 42);


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */

} // End of branch "Log_Rows"





} // End of branch "After_Insert"








} // End of branch "Row_FeedRecord"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			}
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileCopy_1Process(globalMap);



/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Row_FeedRecord"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"MEMBER_ID\",\"AFFILIATE_ID_1\",\"AFFILIATE_NAME_1\",\"AFFILIATE_ID_2\",\"AFFILIATE_NAME_2\",\"AFFILIATE_ID_3\",\"AFFILIATE_NAME_3\",\"AFFILIATE_ID_4\",\"AFFILIATE_NAME_4\",\"AFFILIATE_ID_5\",\"AFFILIATE_NAME_5\",\"AFFILIATE_ID_6\",\"AFFILIATE_NAME_6\",\"AFFILIATE_ID_7\",\"AFFILIATE_NAME_7\",\"AFFILIATE_ID_8\",\"AFFILIATE_NAME_8\",\"AFFILIATE_ID_9\",\"AFFILIATE_NAME_9\",\"DELETED_DATE\",\"LAST_MODIFIED\",\"AFFILIATE_REFRESH_DATE\",\"WAIVER_ELIGIBLE_P\",\"PER_TRIP_WAIVER_ELIGIBLE_P\",\"CURRENT_WAIVER_PLAN_ID\",\"CURRENT_WAIVER_PLAN_NAME\",\"CURRENT_WAIVER_PLAN_FEE\",\"CURRENT_WAIVER_TIER\",\"CURRENT_WAIVER_DEDUCTIBLE\",\"CURRENT_W_AUTO_RENEW_P\",\"CURRENT_WAIVER_START_DATE\",\"CURRENT_WAIVER_END_DATE\",\"PER_TRIP_WAIVER_CNT\",\"LAST_PER_TRIP_WAIVER_DATE\",\"EVER_HAD_ANY_WAIVER_P\",\"WAIVER_REFRESH_DATE\",\"DRIVER_RISK_TIER_INFO_P\",\"FIRST_RISK_TIER_KEY\",\"LAST_RISK_TIER_KEY\",\"FIRST_MIN_LEVEL\",\"LAST_MIN_LEVEL\",\"TOTAL_RISK_TIER_CHANGES\",\"TRIPS_COMPLETED\",\"LAST_ACCIDENT_KARMA_DATE\",\"LAST_LIC_POINTS_KARMA_DATE\",\"DRIVER_RISK_REFRESH_DATE\",\"LAST_RES_DATE\",\"LAST_RES_TYPE\",\"DAYS_SINCE_LAST_DRIVE\",\"NEXT_RES_TYPE\",\"DAYS_UNTIL_NEXT_DRIVE\",\"FIRST_GAS_FILLUP_DATE\",\"FIRST_GAS_FILLUP_AMOUNT\",\"FIRST_GAS_FILLUP_CHARGE\",\"LAST_GAS_FILLUP_DATE\",\"LAST_GAS_FILLUP_AMOUNT\",\"LAST_GAS_FILLUP_CHARGE\",\"FILLUP_CNT\",\"WEX_REFRESH_DATE\",\"FIRST_NPS_RESPONSE_DATE\",\"FIRST_NPS_COMPLETE\",\"FIRST_NPS_SCORE\",\"LAST_NPS_RESPONSE_DATE\",\"LAST_NPS_COMPLETE\",\"LAST_NPS_SCORE\",\"NPS_SURVEY_REFRESH\",\"FIRST_RES_SEARCH_DATE\",\"FIRST_RES_SEARCH_COMPLETION_P\",\"FIRST_RES_LOCAL_START_DATE\",\"FIRST_OVERNIGHT_RES\",\"FIRST_WKDAY_HRLY_AM_START_RES\",\"FIRST_WKDAY_HRLY_PM_START_RES\",\"FIRST_WKEND_HRLY_AM_START_RES\",\"FIRST_WKEND_HRLY_PM_START_RES\",\"FIRST_WKDAY_DAILY_RES\",\"FIRST_WKEND_DAILY_RES\",\"MEMBER_FIRST_RES_REFRESH_DATE\",\"REFER_A_FRIEND_CNT\",\"TOTAL_GIFT_CARD_CNT\",\"TOTAL_GIFT_CARD_AMT_USD\",\"LAST_GIFT_CARD_PURCHASE_DATE\",\"LAST_GIFT_CARD_PURCHAS_AMT_USD\",\"LAST_GIFT_CARD_PURCHASE_CURR\",\"GIFT_CARD_CNT\",\"LATE_RETURN_CNT\",\"LAST_LATE_RETURN_DATE\",\"LAST_LATE_RETURN_MINUTES\",\"LAST_LATE_RETURN_CHARGE\",\"MAJOR_ACCIDENTS_CNT\",\"MINOR_ACCIDENTS_CNT\",\"LAST_ACCIDENT_DATE\",\"LAST_ACCIDENT_CLASSIFICATION\",\"MEMBER_BEHAVIOR_REFRESH_DATE\",\"ZCORPORATE_CNT\",\"CORPORATE_CNT\",\"PERSONAL_CNT\",\"EVPERSONAL_CNT\",\"SPONSORED_CNT\",\"EVSPONSORED_CNT\",\"Z2B_LARGE_ACCOUNTS_CNT\",\"SUBSCRIPTION_CNT\",\"UNIV_DEPTS_CNT\",\"VAN_RESTRICTED_CNT\",\"ACCESS_CNT\",\"ZCORPORATE_HIST_CNT\",\"CORPORATE_HIST_CNT\",\"PERSONAL_HIST_CNT\",\"EVPERSONAL_HIST_CNT\",\"SPONSORED_HIST_CNT\",\"EVSPONSORED_HIST_CNT\",\"Z2B_LARGE_ACCOUNTS_HIST_CNT\",\"SUBSCRIPTION_HIST_CNT\",\"UNIV_DEPTS_HIST_CNT\",\"VAN_RESTRICTED_HIST_CNT\",\"ACCESS_HIST_CNT\",\"LAST_RES_SEARCH_DATE\",\"LAST_RES_SEARCH_SOURCE\",\"LAST_RES_SEARCH_COMPLETION_P\",\"LAST_OVERNIGHT_RES\",\"LAST_WKDAY_HRLY_RES\",\"LAST_WKDAY_DAILY_RES\",\"LAST_WKEND_HRLY_RES\",\"LAST_WKEND_DAILY_RES\",\"LAST_OVERNIGHT_RES_DATE\",\"LAST_WKDAY_HRLY_RES_DATE\",\"LAST_WKDAY_DAILY_RES_DATE\",\"LAST_WKEND_HRLY_RES_DATE\",\"LAST_WKEND_DAILY_RES_DATE\",\"LAST_RES_SEARCH_TYPE\",\"MEMBER_LAST_RES_REFRESH_DATE\",\"LAST_RESERVATION_ID\",\"RES_SOURCE\",\"RES_SOURCE_DESCRIPTION\",\"FIRST_WKDAY_HRLY_RES\",\"FIRST_WKEND_HRLY_RES\",\"FIRST_RES_TYPE\",\"DAYS_FROM_JOIN_TO_FIRST_RES\",\"FIRST_NPS_COHORT\",\"LAST_NPS_COHORT\",\"NPS_SURVEY_CNT\",\"TOTAL_HOURS_1_TO_3MTHS\",\"TOTAL_HOURS_4_TO_6MTHS\",\"TOTAL_HOURS_7_TO_9MTHS\",\"TOTAL_HOURS_10_TO_12MTHS\",\"TOTAL_DISTANCE_1_TO_3MTHS\",\"TOTAL_DISTANCE_4_TO_6MTHS\",\"TOTAL_DISTANCE_7_TO_9MTHS\",\"TOTAL_DISTANCE_10_TO_12MTHS\",\"DISTANCE_UNITS\",\"NEXT_FEE_DATE\",\"NEXT_FEE_CHARGE\",\"NEXT_FEE_FREQ\",\"FIRST_RES_SEARCH_SOURCE\",\"FIRST_OTHER_RES\",\"FIRST_NOSHOW_RES\",\"FIRST_CANCELLATION_RES\",\"LAST_OTHER_RES\",\"LAST_NOSHOW_RES\",\"LAST_CANCELLATION_RES\",\"COMPLETED_RES_3MTHS_S\",\"COMPLETED_RES_6MTHS_S\",\"COMPLETED_RES_9MTHS_S\",\"COMPLETED_RES_1YEAR_S\",\"COMPLETED_RES_6MTHS_WRKDAY_S\",\"COMPLETED_RES_1YEAR_WRKDAY_S\",\"TOTAL_UP_REVENUE_3MTHS_S\",\"TOTAL_UP_REVENUE_6MTHS_S\",\"TOTAL_UP_REVENUE_9MTHS_S\",\"TOTAL_UP_REVENUE_1YEAR_S\",\"AVG_UP_REVENUE_3MTHS_S\",\"AVG_UP_REVENUE_6MTHS_S\",\"AVG_UP_REVENUE_9MTHS_S\",\"AVG_UP_REVENUE_1YEAR_S\",\"RES_SEARCH_3MTHS_S\",\"RES_SEARCH_TURNDOWN_3MTHS_S\",\"RES_SEARCH_COMPLETIONS_3MTHS_S\",\"NEXT_RES_DATE_S\",\"RES_REFRESH_DATE_S\",\"CANCELED_RES_1YEAR\",\"BILLED_NOSHOW_RES_1YEAR\",\"TOTAL_RES_1YEAR\",\"AFFILIATE_TYPE\",\"ANNIVERSARY_DATE\",\"LAST_RES_RATE_PLAN_KEY\",\"LAST_RES_VEHICLE_CLASS\",\"LAST_RES_VEHICLE_ID\",\"ACTIVE_UNI_P\",\"CURRENT_MEMBER_P\",\"FIRST_JOIN_ACCOUNT_ID\",\"LAST_DIGIT_FIRST_ACCOUNT_ID\",\"FIRST_CORPORATE_ID\",\"CURRENT_SUSPENSION_REASON_ID\",\"FIRST_APPLICATION_ID\",\"FIRST_APP_IJD_SESSION_ID\",\"FIRST_APPLICATION_IJD_P\",\"FIRST_RES_TYPE_DAILY_HOURLY\",\"FIRST_WKDAY_DAILY_AM_START_RES\",\"FIRST_WKDAY_DAILY_PM_START_RES\",\"FIRST_WKEND_DAILY_AM_START_RES\",\"FIRST_WKEND_DAILY_PM_START_RES\",\"FIRST_RES_SOURCE\",\"FIRST_RES_SOURCE_DESC\",\"FIRST_RES_VEHICLE_ID\",\"FIRST_RES_ZIPFLEET_ID\",\"FIRST_RES_DATE\",\"SECOND_RES_DATE\",\"FIRST_WAIVER_START_DATE\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(207
					)
				+ 1;
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.MEMBER_ID);
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_1==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_1);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_1==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_1);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_2==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_2);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_2==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_2);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_3==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_3);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_3==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_3);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_4==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_4);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_4==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_4);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_5==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_5);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_5==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_5);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_6==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_6);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_6==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_6);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_7==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_7);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_7==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_7);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_8==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_8);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_8==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_8);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_ID_9==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_ID_9);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_NAME_9==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_NAME_9);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DELETED_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.DELETED_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_MODIFIED!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_MODIFIED.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.AFFILIATE_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.WAIVER_ELIGIBLE_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.WAIVER_ELIGIBLE_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.PER_TRIP_WAIVER_ELIGIBLE_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.PER_TRIP_WAIVER_ELIGIBLE_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_NAME==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_NAME);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_FEE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_WAIVER_PLAN_FEE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_TIER==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_WAIVER_TIER);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_DEDUCTIBLE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_WAIVER_DEDUCTIBLE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_W_AUTO_RENEW_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_W_AUTO_RENEW_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_START_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.CURRENT_WAIVER_START_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_WAIVER_END_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.CURRENT_WAIVER_END_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.PER_TRIP_WAIVER_CNT);
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_PER_TRIP_WAIVER_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_PER_TRIP_WAIVER_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.EVER_HAD_ANY_WAIVER_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.EVER_HAD_ANY_WAIVER_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.WAIVER_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.WAIVER_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DRIVER_RISK_TIER_INFO_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.DRIVER_RISK_TIER_INFO_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RISK_TIER_KEY==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RISK_TIER_KEY);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RISK_TIER_KEY==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RISK_TIER_KEY);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_MIN_LEVEL==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_MIN_LEVEL);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_MIN_LEVEL==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_MIN_LEVEL);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_RISK_TIER_CHANGES==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_RISK_TIER_CHANGES);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TRIPS_COMPLETED);
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_ACCIDENT_KARMA_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_ACCIDENT_KARMA_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_LIC_POINTS_KARMA_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_LIC_POINTS_KARMA_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DRIVER_RISK_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.DRIVER_RISK_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_TYPE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_TYPE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DAYS_SINCE_LAST_DRIVE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.DAYS_SINCE_LAST_DRIVE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NEXT_RES_TYPE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.NEXT_RES_TYPE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DAYS_UNTIL_NEXT_DRIVE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.DAYS_UNTIL_NEXT_DRIVE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_AMOUNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_AMOUNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_CHARGE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_GAS_FILLUP_CHARGE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_AMOUNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_AMOUNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_CHARGE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_GAS_FILLUP_CHARGE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FILLUP_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FILLUP_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.WEX_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.WEX_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_NPS_RESPONSE_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_NPS_RESPONSE_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_NPS_COMPLETE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_NPS_COMPLETE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_NPS_SCORE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_NPS_SCORE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_NPS_RESPONSE_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_NPS_RESPONSE_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_NPS_COMPLETE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_NPS_COMPLETE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_NPS_SCORE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_NPS_SCORE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NPS_SURVEY_REFRESH!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.NPS_SURVEY_REFRESH.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_COMPLETION_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_COMPLETION_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_LOCAL_START_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_RES_LOCAL_START_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_OVERNIGHT_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_OVERNIGHT_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_AM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_AM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_PM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_PM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_AM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_AM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_PM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_PM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.MEMBER_FIRST_RES_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.MEMBER_FIRST_RES_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.REFER_A_FRIEND_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.REFER_A_FRIEND_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_GIFT_CARD_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_GIFT_CARD_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_GIFT_CARD_AMT_USD==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_GIFT_CARD_AMT_USD);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHASE_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHASE_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHAS_AMT_USD==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHAS_AMT_USD);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHASE_CURR==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_GIFT_CARD_PURCHASE_CURR);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.GIFT_CARD_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.GIFT_CARD_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LATE_RETURN_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LATE_RETURN_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_LATE_RETURN_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_LATE_RETURN_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_LATE_RETURN_MINUTES==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_LATE_RETURN_MINUTES);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_LATE_RETURN_CHARGE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_LATE_RETURN_CHARGE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.MAJOR_ACCIDENTS_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.MAJOR_ACCIDENTS_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.MINOR_ACCIDENTS_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.MINOR_ACCIDENTS_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_ACCIDENT_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_ACCIDENT_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_ACCIDENT_CLASSIFICATION==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_ACCIDENT_CLASSIFICATION);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.MEMBER_BEHAVIOR_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.MEMBER_BEHAVIOR_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ZCORPORATE_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.ZCORPORATE_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CORPORATE_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CORPORATE_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.PERSONAL_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.PERSONAL_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.EVPERSONAL_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.EVPERSONAL_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.SPONSORED_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.SPONSORED_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.EVSPONSORED_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.EVSPONSORED_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.Z2B_LARGE_ACCOUNTS_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.Z2B_LARGE_ACCOUNTS_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.SUBSCRIPTION_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.SUBSCRIPTION_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.UNIV_DEPTS_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.UNIV_DEPTS_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.VAN_RESTRICTED_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.VAN_RESTRICTED_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ACCESS_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.ACCESS_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ZCORPORATE_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.ZCORPORATE_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CORPORATE_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CORPORATE_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.PERSONAL_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.PERSONAL_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.EVPERSONAL_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.EVPERSONAL_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.SPONSORED_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.SPONSORED_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.EVSPONSORED_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.EVSPONSORED_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.Z2B_LARGE_ACCOUNTS_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.Z2B_LARGE_ACCOUNTS_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.SUBSCRIPTION_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.SUBSCRIPTION_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.UNIV_DEPTS_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.UNIV_DEPTS_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.VAN_RESTRICTED_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.VAN_RESTRICTED_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ACCESS_HIST_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.ACCESS_HIST_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_SEARCH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_RES_SEARCH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_SEARCH_SOURCE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_SEARCH_SOURCE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_SEARCH_COMPLETION_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_SEARCH_COMPLETION_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_OVERNIGHT_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_OVERNIGHT_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKDAY_HRLY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKDAY_HRLY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKDAY_DAILY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKDAY_DAILY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKEND_HRLY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKEND_HRLY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKEND_DAILY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKEND_DAILY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_OVERNIGHT_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_OVERNIGHT_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKDAY_HRLY_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKDAY_HRLY_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKDAY_DAILY_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKDAY_DAILY_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKEND_HRLY_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKEND_HRLY_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_WKEND_DAILY_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_WKEND_DAILY_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_SEARCH_TYPE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_SEARCH_TYPE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.MEMBER_LAST_RES_REFRESH_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.MEMBER_LAST_RES_REFRESH_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RESERVATION_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RESERVATION_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_SOURCE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.RES_SOURCE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_SOURCE_DESCRIPTION==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.RES_SOURCE_DESCRIPTION);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_HRLY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_HRLY_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_TYPE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_TYPE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DAYS_FROM_JOIN_TO_FIRST_RES==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.DAYS_FROM_JOIN_TO_FIRST_RES);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_NPS_COHORT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_NPS_COHORT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_NPS_COHORT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_NPS_COHORT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NPS_SURVEY_CNT==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.NPS_SURVEY_CNT);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_HOURS_1_TO_3MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_HOURS_1_TO_3MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_HOURS_4_TO_6MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_HOURS_4_TO_6MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_HOURS_7_TO_9MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_HOURS_7_TO_9MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_HOURS_10_TO_12MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_HOURS_10_TO_12MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_DISTANCE_1_TO_3MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_DISTANCE_1_TO_3MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_DISTANCE_4_TO_6MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_DISTANCE_4_TO_6MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_DISTANCE_7_TO_9MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_DISTANCE_7_TO_9MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_DISTANCE_10_TO_12MTHS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_DISTANCE_10_TO_12MTHS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.DISTANCE_UNITS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.DISTANCE_UNITS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NEXT_FEE_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.NEXT_FEE_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NEXT_FEE_CHARGE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.NEXT_FEE_CHARGE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NEXT_FEE_FREQ==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.NEXT_FEE_FREQ);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_SOURCE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_SEARCH_SOURCE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_OTHER_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_OTHER_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_NOSHOW_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_NOSHOW_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_CANCELLATION_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_CANCELLATION_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_OTHER_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_OTHER_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_NOSHOW_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_NOSHOW_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_CANCELLATION_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.LAST_CANCELLATION_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_6MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_6MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_9MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_9MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_1YEAR_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_1YEAR_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_6MTHS_WRKDAY_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_6MTHS_WRKDAY_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.COMPLETED_RES_1YEAR_WRKDAY_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.COMPLETED_RES_1YEAR_WRKDAY_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_6MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_6MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_9MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_9MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_1YEAR_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_UP_REVENUE_1YEAR_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AVG_UP_REVENUE_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AVG_UP_REVENUE_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AVG_UP_REVENUE_6MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AVG_UP_REVENUE_6MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AVG_UP_REVENUE_9MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AVG_UP_REVENUE_9MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AVG_UP_REVENUE_1YEAR_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AVG_UP_REVENUE_1YEAR_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_SEARCH_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.RES_SEARCH_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_SEARCH_TURNDOWN_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.RES_SEARCH_TURNDOWN_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_SEARCH_COMPLETIONS_3MTHS_S==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.RES_SEARCH_COMPLETIONS_3MTHS_S);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.NEXT_RES_DATE_S!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.NEXT_RES_DATE_S.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.RES_REFRESH_DATE_S!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.RES_REFRESH_DATE_S.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CANCELED_RES_1YEAR==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CANCELED_RES_1YEAR);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.BILLED_NOSHOW_RES_1YEAR==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.BILLED_NOSHOW_RES_1YEAR);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.TOTAL_RES_1YEAR==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.TOTAL_RES_1YEAR);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.AFFILIATE_TYPE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.AFFILIATE_TYPE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ANNIVERSARY_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.ANNIVERSARY_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_RATE_PLAN_KEY==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_RATE_PLAN_KEY);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_VEHICLE_CLASS==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_VEHICLE_CLASS);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_RES_VEHICLE_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_RES_VEHICLE_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.ACTIVE_UNI_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.ACTIVE_UNI_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_MEMBER_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_MEMBER_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_JOIN_ACCOUNT_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_JOIN_ACCOUNT_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.LAST_DIGIT_FIRST_ACCOUNT_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.LAST_DIGIT_FIRST_ACCOUNT_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_CORPORATE_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_CORPORATE_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.CURRENT_SUSPENSION_REASON_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.CURRENT_SUSPENSION_REASON_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_APPLICATION_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_APPLICATION_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_APP_IJD_SESSION_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_APP_IJD_SESSION_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_APPLICATION_IJD_P==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_APPLICATION_IJD_P);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_TYPE_DAILY_HOURLY==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_TYPE_DAILY_HOURLY);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_AM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_AM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_PM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKDAY_DAILY_PM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_AM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_AM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_PM_START_RES!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WKEND_DAILY_PM_START_RES.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_SOURCE==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_SOURCE);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_SOURCE_DESC==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_SOURCE_DESC);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_VEHICLE_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_VEHICLE_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_ZIPFLEET_ID==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.FIRST_RES_ZIPFLEET_ID);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.SECOND_RES_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.SECOND_RES_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.FIRST_WAIVER_START_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.FIRST_WAIVER_START_DATE.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Record_OutputToDB"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("After_Insert"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Log_Rows"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class file_failedStruct implements routines.system.IPersistableRow<file_failedStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public String filePath;

				public String getFilePath () {
					return this.filePath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.filePath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filePath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filePath="+filePath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(file_failedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileCopy_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		file_failedStruct file_failed = new file_failedStruct();




	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("file_failed" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDie_1 = 0;
		
    	class BytesLimit65535_tDie_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDie_1().limitLog4jByte();

 



/**
 * [tDie_1 begin ] stop
 */



	
	/**
	 * [tFileCopy_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_2", false);
		start_Hash.put("tFileCopy_2", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_2";

	
		int tos_count_tFileCopy_2 = 0;
		
    	class BytesLimit65535_tFileCopy_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_2().limitLog4jByte();

 



/**
 * [tFileCopy_2 begin ] stop
 */
	
	/**
	 * [tFileCopy_2 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 


        String srcFileName_tFileCopy_2 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));

		java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
		}
        String desDirName_tFileCopy_2 = context.feedError;

		String desFileName_tFileCopy_2 =  srcFile_tFileCopy_2.getName() ;

		if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())){
			desFileName_tFileCopy_2 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2, desFileName_tFileCopy_2);

		if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())  ) {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(), desFile_tFileCopy_2.getPath(), true);
				java.io.File isRemoved_tFileCopy_2 = new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
				if(isRemoved_tFileCopy_2.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_2 = String.format("tFileCopy_2 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_2);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_2);
				} 

		}
		globalMap.put("tFileCopy_2_DESTINATION_FILEPATH",desFile_tFileCopy_2.getPath()); 
		globalMap.put("tFileCopy_2_DESTINATION_FILENAME",desFile_tFileCopy_2.getName()); 

		globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
		globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());        
        

 


	tos_count_tFileCopy_2++;

/**
 * [tFileCopy_2 main ] stop
 */

	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

			//file_failed
			//file_failed


			
				if(execStat){
					runStat.updateStatOnConnection("file_failed"+iterateId,1, 1);
				} 
			

		


				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")), 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	globalMap.put("tDie_1_DIE_MESSAGES", "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */



	
	/**
	 * [tFileCopy_2 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 

ok_Hash.put("tFileCopy_2", true);
end_Hash.put("tFileCopy_2", System.currentTimeMillis());




/**
 * [tFileCopy_2 end ] stop
 */

	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("file_failed"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_2 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 finally ] stop
 */

	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 1);
	}
	


public static class file_successStruct implements routines.system.IPersistableRow<file_successStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer MEMBER_ID;

				public Integer getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public String FIRST_NAME;

				public String getFIRST_NAME () {
					return this.FIRST_NAME;
				}
				
			    public String LAST_NAME;

				public String getLAST_NAME () {
					return this.LAST_NAME;
				}
				
			    public java.util.Date BIRTHDATE;

				public java.util.Date getBIRTHDATE () {
					return this.BIRTHDATE;
				}
				
			    public String EMAIL;

				public String getEMAIL () {
					return this.EMAIL;
				}
				
			    public String EMAILABLE_P;

				public String getEMAILABLE_P () {
					return this.EMAILABLE_P;
				}
				
			    public String CURRENT_STATUS;

				public String getCURRENT_STATUS () {
					return this.CURRENT_STATUS;
				}
				
			    public java.util.Date CREATION_DATE;

				public java.util.Date getCREATION_DATE () {
					return this.CREATION_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.MEMBER_ID == null) ? 0 : this.MEMBER_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final file_successStruct other = (file_successStruct) obj;
		
						if (this.MEMBER_ID == null) {
							if (other.MEMBER_ID != null)
								return false;
						
						} else if (!this.MEMBER_ID.equals(other.MEMBER_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(file_successStruct other) {

		other.MEMBER_ID = this.MEMBER_ID;
	            other.FIRST_NAME = this.FIRST_NAME;
	            other.LAST_NAME = this.LAST_NAME;
	            other.BIRTHDATE = this.BIRTHDATE;
	            other.EMAIL = this.EMAIL;
	            other.EMAILABLE_P = this.EMAILABLE_P;
	            other.CURRENT_STATUS = this.CURRENT_STATUS;
	            other.CREATION_DATE = this.CREATION_DATE;
	            other.LAST_MODIFIED = this.LAST_MODIFIED;
	            other.DELETED_DATE = this.DELETED_DATE;
	            
	}

	public void copyKeysDataTo(file_successStruct other) {

		other.MEMBER_ID = this.MEMBER_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
						this.MEMBER_ID = readInteger(dis);
					
					this.FIRST_NAME = readString(dis);
					
					this.LAST_NAME = readString(dis);
					
					this.BIRTHDATE = readDate(dis);
					
					this.EMAIL = readString(dis);
					
					this.EMAILABLE_P = readString(dis);
					
					this.CURRENT_STATUS = readString(dis);
					
					this.CREATION_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.DELETED_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.MEMBER_ID,dos);
					
					// String
				
						writeString(this.FIRST_NAME,dos);
					
					// String
				
						writeString(this.LAST_NAME,dos);
					
					// java.util.Date
				
						writeDate(this.BIRTHDATE,dos);
					
					// String
				
						writeString(this.EMAIL,dos);
					
					// String
				
						writeString(this.EMAILABLE_P,dos);
					
					// String
				
						writeString(this.CURRENT_STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.CREATION_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",FIRST_NAME="+FIRST_NAME);
		sb.append(",LAST_NAME="+LAST_NAME);
		sb.append(",BIRTHDATE="+String.valueOf(BIRTHDATE));
		sb.append(",EMAIL="+EMAIL);
		sb.append(",EMAILABLE_P="+EMAILABLE_P);
		sb.append(",CURRENT_STATUS="+CURRENT_STATUS);
		sb.append(",CREATION_DATE="+String.valueOf(CREATION_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(file_successStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.MEMBER_ID, other.MEMBER_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		file_successStruct file_success = new file_successStruct();




	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("file_success" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */



	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		
    	class BytesLimit65535_tFileCopy_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_1().limitLog4jByte();

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = context.feedArchive;

		String desFileName_tFileCopy_1 =  srcFile_tFileCopy_1.getName() ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				java.io.File isRemoved_tFileCopy_1 = new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_1);
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */

	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

			//file_success
			//file_success


			
				if(execStat){
					runStat.updateStatOnConnection("file_success"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE"))); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */



	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());




/**
 * [tFileCopy_1 end ] stop
 */

	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("file_success"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */

	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public long MEMBER_ID;

				public long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long AFFILIATE_ID_1;

				public Long getAFFILIATE_ID_1 () {
					return this.AFFILIATE_ID_1;
				}
				
			    public String AFFILIATE_NAME_1;

				public String getAFFILIATE_NAME_1 () {
					return this.AFFILIATE_NAME_1;
				}
				
			    public Long AFFILIATE_ID_2;

				public Long getAFFILIATE_ID_2 () {
					return this.AFFILIATE_ID_2;
				}
				
			    public String AFFILIATE_NAME_2;

				public String getAFFILIATE_NAME_2 () {
					return this.AFFILIATE_NAME_2;
				}
				
			    public Long AFFILIATE_ID_3;

				public Long getAFFILIATE_ID_3 () {
					return this.AFFILIATE_ID_3;
				}
				
			    public String AFFILIATE_NAME_3;

				public String getAFFILIATE_NAME_3 () {
					return this.AFFILIATE_NAME_3;
				}
				
			    public Long AFFILIATE_ID_4;

				public Long getAFFILIATE_ID_4 () {
					return this.AFFILIATE_ID_4;
				}
				
			    public String AFFILIATE_NAME_4;

				public String getAFFILIATE_NAME_4 () {
					return this.AFFILIATE_NAME_4;
				}
				
			    public Long AFFILIATE_ID_5;

				public Long getAFFILIATE_ID_5 () {
					return this.AFFILIATE_ID_5;
				}
				
			    public String AFFILIATE_NAME_5;

				public String getAFFILIATE_NAME_5 () {
					return this.AFFILIATE_NAME_5;
				}
				
			    public Long AFFILIATE_ID_6;

				public Long getAFFILIATE_ID_6 () {
					return this.AFFILIATE_ID_6;
				}
				
			    public String AFFILIATE_NAME_6;

				public String getAFFILIATE_NAME_6 () {
					return this.AFFILIATE_NAME_6;
				}
				
			    public Long AFFILIATE_ID_7;

				public Long getAFFILIATE_ID_7 () {
					return this.AFFILIATE_ID_7;
				}
				
			    public String AFFILIATE_NAME_7;

				public String getAFFILIATE_NAME_7 () {
					return this.AFFILIATE_NAME_7;
				}
				
			    public Long AFFILIATE_ID_8;

				public Long getAFFILIATE_ID_8 () {
					return this.AFFILIATE_ID_8;
				}
				
			    public String AFFILIATE_NAME_8;

				public String getAFFILIATE_NAME_8 () {
					return this.AFFILIATE_NAME_8;
				}
				
			    public Long AFFILIATE_ID_9;

				public Long getAFFILIATE_ID_9 () {
					return this.AFFILIATE_ID_9;
				}
				
			    public String AFFILIATE_NAME_9;

				public String getAFFILIATE_NAME_9 () {
					return this.AFFILIATE_NAME_9;
				}
				
			    public java.util.Date DELETED_DATE;

				public java.util.Date getDELETED_DATE () {
					return this.DELETED_DATE;
				}
				
			    public java.util.Date LAST_MODIFIED;

				public java.util.Date getLAST_MODIFIED () {
					return this.LAST_MODIFIED;
				}
				
			    public java.util.Date AFFILIATE_REFRESH_DATE;

				public java.util.Date getAFFILIATE_REFRESH_DATE () {
					return this.AFFILIATE_REFRESH_DATE;
				}
				
			    public String WAIVER_ELIGIBLE_P;

				public String getWAIVER_ELIGIBLE_P () {
					return this.WAIVER_ELIGIBLE_P;
				}
				
			    public String PER_TRIP_WAIVER_ELIGIBLE_P;

				public String getPER_TRIP_WAIVER_ELIGIBLE_P () {
					return this.PER_TRIP_WAIVER_ELIGIBLE_P;
				}
				
			    public Long CURRENT_WAIVER_PLAN_ID;

				public Long getCURRENT_WAIVER_PLAN_ID () {
					return this.CURRENT_WAIVER_PLAN_ID;
				}
				
			    public String CURRENT_WAIVER_PLAN_NAME;

				public String getCURRENT_WAIVER_PLAN_NAME () {
					return this.CURRENT_WAIVER_PLAN_NAME;
				}
				
			    public Double CURRENT_WAIVER_PLAN_FEE;

				public Double getCURRENT_WAIVER_PLAN_FEE () {
					return this.CURRENT_WAIVER_PLAN_FEE;
				}
				
			    public Long CURRENT_WAIVER_TIER;

				public Long getCURRENT_WAIVER_TIER () {
					return this.CURRENT_WAIVER_TIER;
				}
				
			    public Double CURRENT_WAIVER_DEDUCTIBLE;

				public Double getCURRENT_WAIVER_DEDUCTIBLE () {
					return this.CURRENT_WAIVER_DEDUCTIBLE;
				}
				
			    public String CURRENT_W_AUTO_RENEW_P;

				public String getCURRENT_W_AUTO_RENEW_P () {
					return this.CURRENT_W_AUTO_RENEW_P;
				}
				
			    public java.util.Date CURRENT_WAIVER_START_DATE;

				public java.util.Date getCURRENT_WAIVER_START_DATE () {
					return this.CURRENT_WAIVER_START_DATE;
				}
				
			    public java.util.Date CURRENT_WAIVER_END_DATE;

				public java.util.Date getCURRENT_WAIVER_END_DATE () {
					return this.CURRENT_WAIVER_END_DATE;
				}
				
			    public int PER_TRIP_WAIVER_CNT;

				public int getPER_TRIP_WAIVER_CNT () {
					return this.PER_TRIP_WAIVER_CNT;
				}
				
			    public java.util.Date LAST_PER_TRIP_WAIVER_DATE;

				public java.util.Date getLAST_PER_TRIP_WAIVER_DATE () {
					return this.LAST_PER_TRIP_WAIVER_DATE;
				}
				
			    public String EVER_HAD_ANY_WAIVER_P;

				public String getEVER_HAD_ANY_WAIVER_P () {
					return this.EVER_HAD_ANY_WAIVER_P;
				}
				
			    public java.util.Date WAIVER_REFRESH_DATE;

				public java.util.Date getWAIVER_REFRESH_DATE () {
					return this.WAIVER_REFRESH_DATE;
				}
				
			    public String DRIVER_RISK_TIER_INFO_P;

				public String getDRIVER_RISK_TIER_INFO_P () {
					return this.DRIVER_RISK_TIER_INFO_P;
				}
				
			    public String FIRST_RISK_TIER_KEY;

				public String getFIRST_RISK_TIER_KEY () {
					return this.FIRST_RISK_TIER_KEY;
				}
				
			    public String LAST_RISK_TIER_KEY;

				public String getLAST_RISK_TIER_KEY () {
					return this.LAST_RISK_TIER_KEY;
				}
				
			    public Integer FIRST_MIN_LEVEL;

				public Integer getFIRST_MIN_LEVEL () {
					return this.FIRST_MIN_LEVEL;
				}
				
			    public Integer LAST_MIN_LEVEL;

				public Integer getLAST_MIN_LEVEL () {
					return this.LAST_MIN_LEVEL;
				}
				
			    public Integer TOTAL_RISK_TIER_CHANGES;

				public Integer getTOTAL_RISK_TIER_CHANGES () {
					return this.TOTAL_RISK_TIER_CHANGES;
				}
				
			    public int TRIPS_COMPLETED;

				public int getTRIPS_COMPLETED () {
					return this.TRIPS_COMPLETED;
				}
				
			    public java.util.Date LAST_ACCIDENT_KARMA_DATE;

				public java.util.Date getLAST_ACCIDENT_KARMA_DATE () {
					return this.LAST_ACCIDENT_KARMA_DATE;
				}
				
			    public java.util.Date LAST_LIC_POINTS_KARMA_DATE;

				public java.util.Date getLAST_LIC_POINTS_KARMA_DATE () {
					return this.LAST_LIC_POINTS_KARMA_DATE;
				}
				
			    public java.util.Date DRIVER_RISK_REFRESH_DATE;

				public java.util.Date getDRIVER_RISK_REFRESH_DATE () {
					return this.DRIVER_RISK_REFRESH_DATE;
				}
				
			    public java.util.Date LAST_RES_DATE;

				public java.util.Date getLAST_RES_DATE () {
					return this.LAST_RES_DATE;
				}
				
			    public String LAST_RES_TYPE;

				public String getLAST_RES_TYPE () {
					return this.LAST_RES_TYPE;
				}
				
			    public Integer DAYS_SINCE_LAST_DRIVE;

				public Integer getDAYS_SINCE_LAST_DRIVE () {
					return this.DAYS_SINCE_LAST_DRIVE;
				}
				
			    public String NEXT_RES_TYPE;

				public String getNEXT_RES_TYPE () {
					return this.NEXT_RES_TYPE;
				}
				
			    public Integer DAYS_UNTIL_NEXT_DRIVE;

				public Integer getDAYS_UNTIL_NEXT_DRIVE () {
					return this.DAYS_UNTIL_NEXT_DRIVE;
				}
				
			    public java.util.Date FIRST_GAS_FILLUP_DATE;

				public java.util.Date getFIRST_GAS_FILLUP_DATE () {
					return this.FIRST_GAS_FILLUP_DATE;
				}
				
			    public Double FIRST_GAS_FILLUP_AMOUNT;

				public Double getFIRST_GAS_FILLUP_AMOUNT () {
					return this.FIRST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double FIRST_GAS_FILLUP_CHARGE;

				public Double getFIRST_GAS_FILLUP_CHARGE () {
					return this.FIRST_GAS_FILLUP_CHARGE;
				}
				
			    public java.util.Date LAST_GAS_FILLUP_DATE;

				public java.util.Date getLAST_GAS_FILLUP_DATE () {
					return this.LAST_GAS_FILLUP_DATE;
				}
				
			    public Double LAST_GAS_FILLUP_AMOUNT;

				public Double getLAST_GAS_FILLUP_AMOUNT () {
					return this.LAST_GAS_FILLUP_AMOUNT;
				}
				
			    public Double LAST_GAS_FILLUP_CHARGE;

				public Double getLAST_GAS_FILLUP_CHARGE () {
					return this.LAST_GAS_FILLUP_CHARGE;
				}
				
			    public Integer FILLUP_CNT;

				public Integer getFILLUP_CNT () {
					return this.FILLUP_CNT;
				}
				
			    public java.util.Date WEX_REFRESH_DATE;

				public java.util.Date getWEX_REFRESH_DATE () {
					return this.WEX_REFRESH_DATE;
				}
				
			    public java.util.Date FIRST_NPS_RESPONSE_DATE;

				public java.util.Date getFIRST_NPS_RESPONSE_DATE () {
					return this.FIRST_NPS_RESPONSE_DATE;
				}
				
			    public String FIRST_NPS_COMPLETE;

				public String getFIRST_NPS_COMPLETE () {
					return this.FIRST_NPS_COMPLETE;
				}
				
			    public Integer FIRST_NPS_SCORE;

				public Integer getFIRST_NPS_SCORE () {
					return this.FIRST_NPS_SCORE;
				}
				
			    public java.util.Date LAST_NPS_RESPONSE_DATE;

				public java.util.Date getLAST_NPS_RESPONSE_DATE () {
					return this.LAST_NPS_RESPONSE_DATE;
				}
				
			    public String LAST_NPS_COMPLETE;

				public String getLAST_NPS_COMPLETE () {
					return this.LAST_NPS_COMPLETE;
				}
				
			    public Integer LAST_NPS_SCORE;

				public Integer getLAST_NPS_SCORE () {
					return this.LAST_NPS_SCORE;
				}
				
			    public java.util.Date NPS_SURVEY_REFRESH;

				public java.util.Date getNPS_SURVEY_REFRESH () {
					return this.NPS_SURVEY_REFRESH;
				}
				
			    public java.util.Date FIRST_RES_SEARCH_DATE;

				public java.util.Date getFIRST_RES_SEARCH_DATE () {
					return this.FIRST_RES_SEARCH_DATE;
				}
				
			    public String FIRST_RES_SEARCH_COMPLETION_P;

				public String getFIRST_RES_SEARCH_COMPLETION_P () {
					return this.FIRST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date FIRST_RES_LOCAL_START_DATE;

				public java.util.Date getFIRST_RES_LOCAL_START_DATE () {
					return this.FIRST_RES_LOCAL_START_DATE;
				}
				
			    public java.util.Date FIRST_OVERNIGHT_RES;

				public java.util.Date getFIRST_OVERNIGHT_RES () {
					return this.FIRST_OVERNIGHT_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_AM_START_RES () {
					return this.FIRST_WKDAY_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_PM_START_RES () {
					return this.FIRST_WKDAY_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_AM_START_RES () {
					return this.FIRST_WKEND_HRLY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_HRLY_PM_START_RES () {
					return this.FIRST_WKEND_HRLY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_RES () {
					return this.FIRST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_RES;

				public java.util.Date getFIRST_WKEND_DAILY_RES () {
					return this.FIRST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date MEMBER_FIRST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_FIRST_RES_REFRESH_DATE () {
					return this.MEMBER_FIRST_RES_REFRESH_DATE;
				}
				
			    public Integer REFER_A_FRIEND_CNT;

				public Integer getREFER_A_FRIEND_CNT () {
					return this.REFER_A_FRIEND_CNT;
				}
				
			    public Integer TOTAL_GIFT_CARD_CNT;

				public Integer getTOTAL_GIFT_CARD_CNT () {
					return this.TOTAL_GIFT_CARD_CNT;
				}
				
			    public Double TOTAL_GIFT_CARD_AMT_USD;

				public Double getTOTAL_GIFT_CARD_AMT_USD () {
					return this.TOTAL_GIFT_CARD_AMT_USD;
				}
				
			    public java.util.Date LAST_GIFT_CARD_PURCHASE_DATE;

				public java.util.Date getLAST_GIFT_CARD_PURCHASE_DATE () {
					return this.LAST_GIFT_CARD_PURCHASE_DATE;
				}
				
			    public Double LAST_GIFT_CARD_PURCHAS_AMT_USD;

				public Double getLAST_GIFT_CARD_PURCHAS_AMT_USD () {
					return this.LAST_GIFT_CARD_PURCHAS_AMT_USD;
				}
				
			    public String LAST_GIFT_CARD_PURCHASE_CURR;

				public String getLAST_GIFT_CARD_PURCHASE_CURR () {
					return this.LAST_GIFT_CARD_PURCHASE_CURR;
				}
				
			    public Integer GIFT_CARD_CNT;

				public Integer getGIFT_CARD_CNT () {
					return this.GIFT_CARD_CNT;
				}
				
			    public Integer LATE_RETURN_CNT;

				public Integer getLATE_RETURN_CNT () {
					return this.LATE_RETURN_CNT;
				}
				
			    public java.util.Date LAST_LATE_RETURN_DATE;

				public java.util.Date getLAST_LATE_RETURN_DATE () {
					return this.LAST_LATE_RETURN_DATE;
				}
				
			    public Integer LAST_LATE_RETURN_MINUTES;

				public Integer getLAST_LATE_RETURN_MINUTES () {
					return this.LAST_LATE_RETURN_MINUTES;
				}
				
			    public Double LAST_LATE_RETURN_CHARGE;

				public Double getLAST_LATE_RETURN_CHARGE () {
					return this.LAST_LATE_RETURN_CHARGE;
				}
				
			    public Integer MAJOR_ACCIDENTS_CNT;

				public Integer getMAJOR_ACCIDENTS_CNT () {
					return this.MAJOR_ACCIDENTS_CNT;
				}
				
			    public Integer MINOR_ACCIDENTS_CNT;

				public Integer getMINOR_ACCIDENTS_CNT () {
					return this.MINOR_ACCIDENTS_CNT;
				}
				
			    public java.util.Date LAST_ACCIDENT_DATE;

				public java.util.Date getLAST_ACCIDENT_DATE () {
					return this.LAST_ACCIDENT_DATE;
				}
				
			    public String LAST_ACCIDENT_CLASSIFICATION;

				public String getLAST_ACCIDENT_CLASSIFICATION () {
					return this.LAST_ACCIDENT_CLASSIFICATION;
				}
				
			    public java.util.Date MEMBER_BEHAVIOR_REFRESH_DATE;

				public java.util.Date getMEMBER_BEHAVIOR_REFRESH_DATE () {
					return this.MEMBER_BEHAVIOR_REFRESH_DATE;
				}
				
			    public Integer ZCORPORATE_CNT;

				public Integer getZCORPORATE_CNT () {
					return this.ZCORPORATE_CNT;
				}
				
			    public Integer CORPORATE_CNT;

				public Integer getCORPORATE_CNT () {
					return this.CORPORATE_CNT;
				}
				
			    public Integer PERSONAL_CNT;

				public Integer getPERSONAL_CNT () {
					return this.PERSONAL_CNT;
				}
				
			    public Integer EVPERSONAL_CNT;

				public Integer getEVPERSONAL_CNT () {
					return this.EVPERSONAL_CNT;
				}
				
			    public Integer SPONSORED_CNT;

				public Integer getSPONSORED_CNT () {
					return this.SPONSORED_CNT;
				}
				
			    public Integer EVSPONSORED_CNT;

				public Integer getEVSPONSORED_CNT () {
					return this.EVSPONSORED_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_CNT;
				}
				
			    public Integer SUBSCRIPTION_CNT;

				public Integer getSUBSCRIPTION_CNT () {
					return this.SUBSCRIPTION_CNT;
				}
				
			    public Integer UNIV_DEPTS_CNT;

				public Integer getUNIV_DEPTS_CNT () {
					return this.UNIV_DEPTS_CNT;
				}
				
			    public Integer VAN_RESTRICTED_CNT;

				public Integer getVAN_RESTRICTED_CNT () {
					return this.VAN_RESTRICTED_CNT;
				}
				
			    public Integer ACCESS_CNT;

				public Integer getACCESS_CNT () {
					return this.ACCESS_CNT;
				}
				
			    public Integer ZCORPORATE_HIST_CNT;

				public Integer getZCORPORATE_HIST_CNT () {
					return this.ZCORPORATE_HIST_CNT;
				}
				
			    public Integer CORPORATE_HIST_CNT;

				public Integer getCORPORATE_HIST_CNT () {
					return this.CORPORATE_HIST_CNT;
				}
				
			    public Integer PERSONAL_HIST_CNT;

				public Integer getPERSONAL_HIST_CNT () {
					return this.PERSONAL_HIST_CNT;
				}
				
			    public Integer EVPERSONAL_HIST_CNT;

				public Integer getEVPERSONAL_HIST_CNT () {
					return this.EVPERSONAL_HIST_CNT;
				}
				
			    public Integer SPONSORED_HIST_CNT;

				public Integer getSPONSORED_HIST_CNT () {
					return this.SPONSORED_HIST_CNT;
				}
				
			    public Integer EVSPONSORED_HIST_CNT;

				public Integer getEVSPONSORED_HIST_CNT () {
					return this.EVSPONSORED_HIST_CNT;
				}
				
			    public Integer Z2B_LARGE_ACCOUNTS_HIST_CNT;

				public Integer getZ2B_LARGE_ACCOUNTS_HIST_CNT () {
					return this.Z2B_LARGE_ACCOUNTS_HIST_CNT;
				}
				
			    public Integer SUBSCRIPTION_HIST_CNT;

				public Integer getSUBSCRIPTION_HIST_CNT () {
					return this.SUBSCRIPTION_HIST_CNT;
				}
				
			    public Integer UNIV_DEPTS_HIST_CNT;

				public Integer getUNIV_DEPTS_HIST_CNT () {
					return this.UNIV_DEPTS_HIST_CNT;
				}
				
			    public Integer VAN_RESTRICTED_HIST_CNT;

				public Integer getVAN_RESTRICTED_HIST_CNT () {
					return this.VAN_RESTRICTED_HIST_CNT;
				}
				
			    public Integer ACCESS_HIST_CNT;

				public Integer getACCESS_HIST_CNT () {
					return this.ACCESS_HIST_CNT;
				}
				
			    public java.util.Date LAST_RES_SEARCH_DATE;

				public java.util.Date getLAST_RES_SEARCH_DATE () {
					return this.LAST_RES_SEARCH_DATE;
				}
				
			    public String LAST_RES_SEARCH_SOURCE;

				public String getLAST_RES_SEARCH_SOURCE () {
					return this.LAST_RES_SEARCH_SOURCE;
				}
				
			    public String LAST_RES_SEARCH_COMPLETION_P;

				public String getLAST_RES_SEARCH_COMPLETION_P () {
					return this.LAST_RES_SEARCH_COMPLETION_P;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES;

				public java.util.Date getLAST_OVERNIGHT_RES () {
					return this.LAST_OVERNIGHT_RES;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES;

				public java.util.Date getLAST_WKDAY_HRLY_RES () {
					return this.LAST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES;

				public java.util.Date getLAST_WKDAY_DAILY_RES () {
					return this.LAST_WKDAY_DAILY_RES;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES;

				public java.util.Date getLAST_WKEND_HRLY_RES () {
					return this.LAST_WKEND_HRLY_RES;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES;

				public java.util.Date getLAST_WKEND_DAILY_RES () {
					return this.LAST_WKEND_DAILY_RES;
				}
				
			    public java.util.Date LAST_OVERNIGHT_RES_DATE;

				public java.util.Date getLAST_OVERNIGHT_RES_DATE () {
					return this.LAST_OVERNIGHT_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_HRLY_RES_DATE;

				public java.util.Date getLAST_WKDAY_HRLY_RES_DATE () {
					return this.LAST_WKDAY_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKDAY_DAILY_RES_DATE;

				public java.util.Date getLAST_WKDAY_DAILY_RES_DATE () {
					return this.LAST_WKDAY_DAILY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_HRLY_RES_DATE;

				public java.util.Date getLAST_WKEND_HRLY_RES_DATE () {
					return this.LAST_WKEND_HRLY_RES_DATE;
				}
				
			    public java.util.Date LAST_WKEND_DAILY_RES_DATE;

				public java.util.Date getLAST_WKEND_DAILY_RES_DATE () {
					return this.LAST_WKEND_DAILY_RES_DATE;
				}
				
			    public String LAST_RES_SEARCH_TYPE;

				public String getLAST_RES_SEARCH_TYPE () {
					return this.LAST_RES_SEARCH_TYPE;
				}
				
			    public java.util.Date MEMBER_LAST_RES_REFRESH_DATE;

				public java.util.Date getMEMBER_LAST_RES_REFRESH_DATE () {
					return this.MEMBER_LAST_RES_REFRESH_DATE;
				}
				
			    public Long LAST_RESERVATION_ID;

				public Long getLAST_RESERVATION_ID () {
					return this.LAST_RESERVATION_ID;
				}
				
			    public String RES_SOURCE;

				public String getRES_SOURCE () {
					return this.RES_SOURCE;
				}
				
			    public String RES_SOURCE_DESCRIPTION;

				public String getRES_SOURCE_DESCRIPTION () {
					return this.RES_SOURCE_DESCRIPTION;
				}
				
			    public java.util.Date FIRST_WKDAY_HRLY_RES;

				public java.util.Date getFIRST_WKDAY_HRLY_RES () {
					return this.FIRST_WKDAY_HRLY_RES;
				}
				
			    public java.util.Date FIRST_WKEND_HRLY_RES;

				public java.util.Date getFIRST_WKEND_HRLY_RES () {
					return this.FIRST_WKEND_HRLY_RES;
				}
				
			    public String FIRST_RES_TYPE;

				public String getFIRST_RES_TYPE () {
					return this.FIRST_RES_TYPE;
				}
				
			    public Integer DAYS_FROM_JOIN_TO_FIRST_RES;

				public Integer getDAYS_FROM_JOIN_TO_FIRST_RES () {
					return this.DAYS_FROM_JOIN_TO_FIRST_RES;
				}
				
			    public String FIRST_NPS_COHORT;

				public String getFIRST_NPS_COHORT () {
					return this.FIRST_NPS_COHORT;
				}
				
			    public String LAST_NPS_COHORT;

				public String getLAST_NPS_COHORT () {
					return this.LAST_NPS_COHORT;
				}
				
			    public Integer NPS_SURVEY_CNT;

				public Integer getNPS_SURVEY_CNT () {
					return this.NPS_SURVEY_CNT;
				}
				
			    public Integer TOTAL_HOURS_1_TO_3MTHS;

				public Integer getTOTAL_HOURS_1_TO_3MTHS () {
					return this.TOTAL_HOURS_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_HOURS_4_TO_6MTHS;

				public Integer getTOTAL_HOURS_4_TO_6MTHS () {
					return this.TOTAL_HOURS_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_HOURS_7_TO_9MTHS;

				public Integer getTOTAL_HOURS_7_TO_9MTHS () {
					return this.TOTAL_HOURS_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_HOURS_10_TO_12MTHS;

				public Integer getTOTAL_HOURS_10_TO_12MTHS () {
					return this.TOTAL_HOURS_10_TO_12MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_1_TO_3MTHS;

				public Integer getTOTAL_DISTANCE_1_TO_3MTHS () {
					return this.TOTAL_DISTANCE_1_TO_3MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_4_TO_6MTHS;

				public Integer getTOTAL_DISTANCE_4_TO_6MTHS () {
					return this.TOTAL_DISTANCE_4_TO_6MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_7_TO_9MTHS;

				public Integer getTOTAL_DISTANCE_7_TO_9MTHS () {
					return this.TOTAL_DISTANCE_7_TO_9MTHS;
				}
				
			    public Integer TOTAL_DISTANCE_10_TO_12MTHS;

				public Integer getTOTAL_DISTANCE_10_TO_12MTHS () {
					return this.TOTAL_DISTANCE_10_TO_12MTHS;
				}
				
			    public String DISTANCE_UNITS;

				public String getDISTANCE_UNITS () {
					return this.DISTANCE_UNITS;
				}
				
			    public java.util.Date NEXT_FEE_DATE;

				public java.util.Date getNEXT_FEE_DATE () {
					return this.NEXT_FEE_DATE;
				}
				
			    public Double NEXT_FEE_CHARGE;

				public Double getNEXT_FEE_CHARGE () {
					return this.NEXT_FEE_CHARGE;
				}
				
			    public String NEXT_FEE_FREQ;

				public String getNEXT_FEE_FREQ () {
					return this.NEXT_FEE_FREQ;
				}
				
			    public String FIRST_RES_SEARCH_SOURCE;

				public String getFIRST_RES_SEARCH_SOURCE () {
					return this.FIRST_RES_SEARCH_SOURCE;
				}
				
			    public java.util.Date FIRST_OTHER_RES;

				public java.util.Date getFIRST_OTHER_RES () {
					return this.FIRST_OTHER_RES;
				}
				
			    public java.util.Date FIRST_NOSHOW_RES;

				public java.util.Date getFIRST_NOSHOW_RES () {
					return this.FIRST_NOSHOW_RES;
				}
				
			    public java.util.Date FIRST_CANCELLATION_RES;

				public java.util.Date getFIRST_CANCELLATION_RES () {
					return this.FIRST_CANCELLATION_RES;
				}
				
			    public java.util.Date LAST_OTHER_RES;

				public java.util.Date getLAST_OTHER_RES () {
					return this.LAST_OTHER_RES;
				}
				
			    public java.util.Date LAST_NOSHOW_RES;

				public java.util.Date getLAST_NOSHOW_RES () {
					return this.LAST_NOSHOW_RES;
				}
				
			    public java.util.Date LAST_CANCELLATION_RES;

				public java.util.Date getLAST_CANCELLATION_RES () {
					return this.LAST_CANCELLATION_RES;
				}
				
			    public Integer COMPLETED_RES_3MTHS_S;

				public Integer getCOMPLETED_RES_3MTHS_S () {
					return this.COMPLETED_RES_3MTHS_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_S;

				public Integer getCOMPLETED_RES_6MTHS_S () {
					return this.COMPLETED_RES_6MTHS_S;
				}
				
			    public Integer COMPLETED_RES_9MTHS_S;

				public Integer getCOMPLETED_RES_9MTHS_S () {
					return this.COMPLETED_RES_9MTHS_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_S;

				public Integer getCOMPLETED_RES_1YEAR_S () {
					return this.COMPLETED_RES_1YEAR_S;
				}
				
			    public Integer COMPLETED_RES_6MTHS_WRKDAY_S;

				public Integer getCOMPLETED_RES_6MTHS_WRKDAY_S () {
					return this.COMPLETED_RES_6MTHS_WRKDAY_S;
				}
				
			    public Integer COMPLETED_RES_1YEAR_WRKDAY_S;

				public Integer getCOMPLETED_RES_1YEAR_WRKDAY_S () {
					return this.COMPLETED_RES_1YEAR_WRKDAY_S;
				}
				
			    public Double TOTAL_UP_REVENUE_3MTHS_S;

				public Double getTOTAL_UP_REVENUE_3MTHS_S () {
					return this.TOTAL_UP_REVENUE_3MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_6MTHS_S;

				public Double getTOTAL_UP_REVENUE_6MTHS_S () {
					return this.TOTAL_UP_REVENUE_6MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_9MTHS_S;

				public Double getTOTAL_UP_REVENUE_9MTHS_S () {
					return this.TOTAL_UP_REVENUE_9MTHS_S;
				}
				
			    public Double TOTAL_UP_REVENUE_1YEAR_S;

				public Double getTOTAL_UP_REVENUE_1YEAR_S () {
					return this.TOTAL_UP_REVENUE_1YEAR_S;
				}
				
			    public Double AVG_UP_REVENUE_3MTHS_S;

				public Double getAVG_UP_REVENUE_3MTHS_S () {
					return this.AVG_UP_REVENUE_3MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_6MTHS_S;

				public Double getAVG_UP_REVENUE_6MTHS_S () {
					return this.AVG_UP_REVENUE_6MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_9MTHS_S;

				public Double getAVG_UP_REVENUE_9MTHS_S () {
					return this.AVG_UP_REVENUE_9MTHS_S;
				}
				
			    public Double AVG_UP_REVENUE_1YEAR_S;

				public Double getAVG_UP_REVENUE_1YEAR_S () {
					return this.AVG_UP_REVENUE_1YEAR_S;
				}
				
			    public Integer RES_SEARCH_3MTHS_S;

				public Integer getRES_SEARCH_3MTHS_S () {
					return this.RES_SEARCH_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_TURNDOWN_3MTHS_S;

				public Integer getRES_SEARCH_TURNDOWN_3MTHS_S () {
					return this.RES_SEARCH_TURNDOWN_3MTHS_S;
				}
				
			    public Integer RES_SEARCH_COMPLETIONS_3MTHS_S;

				public Integer getRES_SEARCH_COMPLETIONS_3MTHS_S () {
					return this.RES_SEARCH_COMPLETIONS_3MTHS_S;
				}
				
			    public java.util.Date NEXT_RES_DATE_S;

				public java.util.Date getNEXT_RES_DATE_S () {
					return this.NEXT_RES_DATE_S;
				}
				
			    public java.util.Date RES_REFRESH_DATE_S;

				public java.util.Date getRES_REFRESH_DATE_S () {
					return this.RES_REFRESH_DATE_S;
				}
				
			    public Integer CANCELED_RES_1YEAR;

				public Integer getCANCELED_RES_1YEAR () {
					return this.CANCELED_RES_1YEAR;
				}
				
			    public Integer BILLED_NOSHOW_RES_1YEAR;

				public Integer getBILLED_NOSHOW_RES_1YEAR () {
					return this.BILLED_NOSHOW_RES_1YEAR;
				}
				
			    public Integer TOTAL_RES_1YEAR;

				public Integer getTOTAL_RES_1YEAR () {
					return this.TOTAL_RES_1YEAR;
				}
				
			    public String AFFILIATE_TYPE;

				public String getAFFILIATE_TYPE () {
					return this.AFFILIATE_TYPE;
				}
				
			    public java.util.Date ANNIVERSARY_DATE;

				public java.util.Date getANNIVERSARY_DATE () {
					return this.ANNIVERSARY_DATE;
				}
				
			    public String LAST_RES_RATE_PLAN_KEY;

				public String getLAST_RES_RATE_PLAN_KEY () {
					return this.LAST_RES_RATE_PLAN_KEY;
				}
				
			    public String LAST_RES_VEHICLE_CLASS;

				public String getLAST_RES_VEHICLE_CLASS () {
					return this.LAST_RES_VEHICLE_CLASS;
				}
				
			    public Long LAST_RES_VEHICLE_ID;

				public Long getLAST_RES_VEHICLE_ID () {
					return this.LAST_RES_VEHICLE_ID;
				}
				
			    public String ACTIVE_UNI_P;

				public String getACTIVE_UNI_P () {
					return this.ACTIVE_UNI_P;
				}
				
			    public String CURRENT_MEMBER_P;

				public String getCURRENT_MEMBER_P () {
					return this.CURRENT_MEMBER_P;
				}
				
			    public Long FIRST_JOIN_ACCOUNT_ID;

				public Long getFIRST_JOIN_ACCOUNT_ID () {
					return this.FIRST_JOIN_ACCOUNT_ID;
				}
				
			    public Long LAST_DIGIT_FIRST_ACCOUNT_ID;

				public Long getLAST_DIGIT_FIRST_ACCOUNT_ID () {
					return this.LAST_DIGIT_FIRST_ACCOUNT_ID;
				}
				
			    public String FIRST_CORPORATE_ID;

				public String getFIRST_CORPORATE_ID () {
					return this.FIRST_CORPORATE_ID;
				}
				
			    public Long CURRENT_SUSPENSION_REASON_ID;

				public Long getCURRENT_SUSPENSION_REASON_ID () {
					return this.CURRENT_SUSPENSION_REASON_ID;
				}
				
			    public Long FIRST_APPLICATION_ID;

				public Long getFIRST_APPLICATION_ID () {
					return this.FIRST_APPLICATION_ID;
				}
				
			    public String FIRST_APP_IJD_SESSION_ID;

				public String getFIRST_APP_IJD_SESSION_ID () {
					return this.FIRST_APP_IJD_SESSION_ID;
				}
				
			    public String FIRST_APPLICATION_IJD_P;

				public String getFIRST_APPLICATION_IJD_P () {
					return this.FIRST_APPLICATION_IJD_P;
				}
				
			    public String FIRST_RES_TYPE_DAILY_HOURLY;

				public String getFIRST_RES_TYPE_DAILY_HOURLY () {
					return this.FIRST_RES_TYPE_DAILY_HOURLY;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_AM_START_RES () {
					return this.FIRST_WKDAY_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKDAY_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKDAY_DAILY_PM_START_RES () {
					return this.FIRST_WKDAY_DAILY_PM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_AM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_AM_START_RES () {
					return this.FIRST_WKEND_DAILY_AM_START_RES;
				}
				
			    public java.util.Date FIRST_WKEND_DAILY_PM_START_RES;

				public java.util.Date getFIRST_WKEND_DAILY_PM_START_RES () {
					return this.FIRST_WKEND_DAILY_PM_START_RES;
				}
				
			    public String FIRST_RES_SOURCE;

				public String getFIRST_RES_SOURCE () {
					return this.FIRST_RES_SOURCE;
				}
				
			    public String FIRST_RES_SOURCE_DESC;

				public String getFIRST_RES_SOURCE_DESC () {
					return this.FIRST_RES_SOURCE_DESC;
				}
				
			    public Long FIRST_RES_VEHICLE_ID;

				public Long getFIRST_RES_VEHICLE_ID () {
					return this.FIRST_RES_VEHICLE_ID;
				}
				
			    public Long FIRST_RES_ZIPFLEET_ID;

				public Long getFIRST_RES_ZIPFLEET_ID () {
					return this.FIRST_RES_ZIPFLEET_ID;
				}
				
			    public java.util.Date FIRST_RES_DATE;

				public java.util.Date getFIRST_RES_DATE () {
					return this.FIRST_RES_DATE;
				}
				
			    public java.util.Date SECOND_RES_DATE;

				public java.util.Date getSECOND_RES_DATE () {
					return this.SECOND_RES_DATE;
				}
				
			    public java.util.Date FIRST_WAIVER_START_DATE;

				public java.util.Date getFIRST_WAIVER_START_DATE () {
					return this.FIRST_WAIVER_START_DATE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
			        this.MEMBER_ID = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_1 = null;
           				} else {
           			    	this.AFFILIATE_ID_1 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_2 = null;
           				} else {
           			    	this.AFFILIATE_ID_2 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_2 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_3 = null;
           				} else {
           			    	this.AFFILIATE_ID_3 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_3 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_4 = null;
           				} else {
           			    	this.AFFILIATE_ID_4 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_4 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_5 = null;
           				} else {
           			    	this.AFFILIATE_ID_5 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_5 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_6 = null;
           				} else {
           			    	this.AFFILIATE_ID_6 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_6 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_7 = null;
           				} else {
           			    	this.AFFILIATE_ID_7 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_7 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_8 = null;
           				} else {
           			    	this.AFFILIATE_ID_8 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_8 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AFFILIATE_ID_9 = null;
           				} else {
           			    	this.AFFILIATE_ID_9 = dis.readLong();
           				}
					
					this.AFFILIATE_NAME_9 = readString(dis);
					
					this.DELETED_DATE = readDate(dis);
					
					this.LAST_MODIFIED = readDate(dis);
					
					this.AFFILIATE_REFRESH_DATE = readDate(dis);
					
					this.WAIVER_ELIGIBLE_P = readString(dis);
					
					this.PER_TRIP_WAIVER_ELIGIBLE_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_ID = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_ID = dis.readLong();
           				}
					
					this.CURRENT_WAIVER_PLAN_NAME = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_PLAN_FEE = null;
           				} else {
           			    	this.CURRENT_WAIVER_PLAN_FEE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_TIER = null;
           				} else {
           			    	this.CURRENT_WAIVER_TIER = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_WAIVER_DEDUCTIBLE = null;
           				} else {
           			    	this.CURRENT_WAIVER_DEDUCTIBLE = dis.readDouble();
           				}
					
					this.CURRENT_W_AUTO_RENEW_P = readString(dis);
					
					this.CURRENT_WAIVER_START_DATE = readDate(dis);
					
					this.CURRENT_WAIVER_END_DATE = readDate(dis);
					
			        this.PER_TRIP_WAIVER_CNT = dis.readInt();
					
					this.LAST_PER_TRIP_WAIVER_DATE = readDate(dis);
					
					this.EVER_HAD_ANY_WAIVER_P = readString(dis);
					
					this.WAIVER_REFRESH_DATE = readDate(dis);
					
					this.DRIVER_RISK_TIER_INFO_P = readString(dis);
					
					this.FIRST_RISK_TIER_KEY = readString(dis);
					
					this.LAST_RISK_TIER_KEY = readString(dis);
					
						this.FIRST_MIN_LEVEL = readInteger(dis);
					
						this.LAST_MIN_LEVEL = readInteger(dis);
					
						this.TOTAL_RISK_TIER_CHANGES = readInteger(dis);
					
			        this.TRIPS_COMPLETED = dis.readInt();
					
					this.LAST_ACCIDENT_KARMA_DATE = readDate(dis);
					
					this.LAST_LIC_POINTS_KARMA_DATE = readDate(dis);
					
					this.DRIVER_RISK_REFRESH_DATE = readDate(dis);
					
					this.LAST_RES_DATE = readDate(dis);
					
					this.LAST_RES_TYPE = readString(dis);
					
						this.DAYS_SINCE_LAST_DRIVE = readInteger(dis);
					
					this.NEXT_RES_TYPE = readString(dis);
					
						this.DAYS_UNTIL_NEXT_DRIVE = readInteger(dis);
					
					this.FIRST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.FIRST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
					this.LAST_GAS_FILLUP_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_AMOUNT = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_AMOUNT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GAS_FILLUP_CHARGE = null;
           				} else {
           			    	this.LAST_GAS_FILLUP_CHARGE = dis.readDouble();
           				}
					
						this.FILLUP_CNT = readInteger(dis);
					
					this.WEX_REFRESH_DATE = readDate(dis);
					
					this.FIRST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.FIRST_NPS_COMPLETE = readString(dis);
					
						this.FIRST_NPS_SCORE = readInteger(dis);
					
					this.LAST_NPS_RESPONSE_DATE = readDate(dis);
					
					this.LAST_NPS_COMPLETE = readString(dis);
					
						this.LAST_NPS_SCORE = readInteger(dis);
					
					this.NPS_SURVEY_REFRESH = readDate(dis);
					
					this.FIRST_RES_SEARCH_DATE = readDate(dis);
					
					this.FIRST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.FIRST_RES_LOCAL_START_DATE = readDate(dis);
					
					this.FIRST_OVERNIGHT_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_RES = readDate(dis);
					
					this.MEMBER_FIRST_RES_REFRESH_DATE = readDate(dis);
					
						this.REFER_A_FRIEND_CNT = readInteger(dis);
					
						this.TOTAL_GIFT_CARD_CNT = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_GIFT_CARD_AMT_USD = null;
           				} else {
           			    	this.TOTAL_GIFT_CARD_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
           				} else {
           			    	this.LAST_GIFT_CARD_PURCHAS_AMT_USD = dis.readDouble();
           				}
					
					this.LAST_GIFT_CARD_PURCHASE_CURR = readString(dis);
					
						this.GIFT_CARD_CNT = readInteger(dis);
					
						this.LATE_RETURN_CNT = readInteger(dis);
					
					this.LAST_LATE_RETURN_DATE = readDate(dis);
					
						this.LAST_LATE_RETURN_MINUTES = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_LATE_RETURN_CHARGE = null;
           				} else {
           			    	this.LAST_LATE_RETURN_CHARGE = dis.readDouble();
           				}
					
						this.MAJOR_ACCIDENTS_CNT = readInteger(dis);
					
						this.MINOR_ACCIDENTS_CNT = readInteger(dis);
					
					this.LAST_ACCIDENT_DATE = readDate(dis);
					
					this.LAST_ACCIDENT_CLASSIFICATION = readString(dis);
					
					this.MEMBER_BEHAVIOR_REFRESH_DATE = readDate(dis);
					
						this.ZCORPORATE_CNT = readInteger(dis);
					
						this.CORPORATE_CNT = readInteger(dis);
					
						this.PERSONAL_CNT = readInteger(dis);
					
						this.EVPERSONAL_CNT = readInteger(dis);
					
						this.SPONSORED_CNT = readInteger(dis);
					
						this.EVSPONSORED_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_CNT = readInteger(dis);
					
						this.ACCESS_CNT = readInteger(dis);
					
						this.ZCORPORATE_HIST_CNT = readInteger(dis);
					
						this.CORPORATE_HIST_CNT = readInteger(dis);
					
						this.PERSONAL_HIST_CNT = readInteger(dis);
					
						this.EVPERSONAL_HIST_CNT = readInteger(dis);
					
						this.SPONSORED_HIST_CNT = readInteger(dis);
					
						this.EVSPONSORED_HIST_CNT = readInteger(dis);
					
						this.Z2B_LARGE_ACCOUNTS_HIST_CNT = readInteger(dis);
					
						this.SUBSCRIPTION_HIST_CNT = readInteger(dis);
					
						this.UNIV_DEPTS_HIST_CNT = readInteger(dis);
					
						this.VAN_RESTRICTED_HIST_CNT = readInteger(dis);
					
						this.ACCESS_HIST_CNT = readInteger(dis);
					
					this.LAST_RES_SEARCH_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_SOURCE = readString(dis);
					
					this.LAST_RES_SEARCH_COMPLETION_P = readString(dis);
					
					this.LAST_OVERNIGHT_RES = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES = readDate(dis);
					
					this.LAST_OVERNIGHT_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKDAY_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_HRLY_RES_DATE = readDate(dis);
					
					this.LAST_WKEND_DAILY_RES_DATE = readDate(dis);
					
					this.LAST_RES_SEARCH_TYPE = readString(dis);
					
					this.MEMBER_LAST_RES_REFRESH_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RESERVATION_ID = null;
           				} else {
           			    	this.LAST_RESERVATION_ID = dis.readLong();
           				}
					
					this.RES_SOURCE = readString(dis);
					
					this.RES_SOURCE_DESCRIPTION = readString(dis);
					
					this.FIRST_WKDAY_HRLY_RES = readDate(dis);
					
					this.FIRST_WKEND_HRLY_RES = readDate(dis);
					
					this.FIRST_RES_TYPE = readString(dis);
					
						this.DAYS_FROM_JOIN_TO_FIRST_RES = readInteger(dis);
					
					this.FIRST_NPS_COHORT = readString(dis);
					
					this.LAST_NPS_COHORT = readString(dis);
					
						this.NPS_SURVEY_CNT = readInteger(dis);
					
						this.TOTAL_HOURS_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_HOURS_10_TO_12MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_1_TO_3MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_4_TO_6MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_7_TO_9MTHS = readInteger(dis);
					
						this.TOTAL_DISTANCE_10_TO_12MTHS = readInteger(dis);
					
					this.DISTANCE_UNITS = readString(dis);
					
					this.NEXT_FEE_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NEXT_FEE_CHARGE = null;
           				} else {
           			    	this.NEXT_FEE_CHARGE = dis.readDouble();
           				}
					
					this.NEXT_FEE_FREQ = readString(dis);
					
					this.FIRST_RES_SEARCH_SOURCE = readString(dis);
					
					this.FIRST_OTHER_RES = readDate(dis);
					
					this.FIRST_NOSHOW_RES = readDate(dis);
					
					this.FIRST_CANCELLATION_RES = readDate(dis);
					
					this.LAST_OTHER_RES = readDate(dis);
					
					this.LAST_NOSHOW_RES = readDate(dis);
					
					this.LAST_CANCELLATION_RES = readDate(dis);
					
						this.COMPLETED_RES_3MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_9MTHS_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_S = readInteger(dis);
					
						this.COMPLETED_RES_6MTHS_WRKDAY_S = readInteger(dis);
					
						this.COMPLETED_RES_1YEAR_WRKDAY_S = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TOTAL_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.TOTAL_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_3MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_3MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_6MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_6MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_9MTHS_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_9MTHS_S = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.AVG_UP_REVENUE_1YEAR_S = null;
           				} else {
           			    	this.AVG_UP_REVENUE_1YEAR_S = dis.readDouble();
           				}
					
						this.RES_SEARCH_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_TURNDOWN_3MTHS_S = readInteger(dis);
					
						this.RES_SEARCH_COMPLETIONS_3MTHS_S = readInteger(dis);
					
					this.NEXT_RES_DATE_S = readDate(dis);
					
					this.RES_REFRESH_DATE_S = readDate(dis);
					
						this.CANCELED_RES_1YEAR = readInteger(dis);
					
						this.BILLED_NOSHOW_RES_1YEAR = readInteger(dis);
					
						this.TOTAL_RES_1YEAR = readInteger(dis);
					
					this.AFFILIATE_TYPE = readString(dis);
					
					this.ANNIVERSARY_DATE = readDate(dis);
					
					this.LAST_RES_RATE_PLAN_KEY = readString(dis);
					
					this.LAST_RES_VEHICLE_CLASS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.LAST_RES_VEHICLE_ID = dis.readLong();
           				}
					
					this.ACTIVE_UNI_P = readString(dis);
					
					this.CURRENT_MEMBER_P = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_JOIN_ACCOUNT_ID = null;
           				} else {
           			    	this.FIRST_JOIN_ACCOUNT_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
           				} else {
           			    	this.LAST_DIGIT_FIRST_ACCOUNT_ID = dis.readLong();
           				}
					
					this.FIRST_CORPORATE_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_SUSPENSION_REASON_ID = null;
           				} else {
           			    	this.CURRENT_SUSPENSION_REASON_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_APPLICATION_ID = null;
           				} else {
           			    	this.FIRST_APPLICATION_ID = dis.readLong();
           				}
					
					this.FIRST_APP_IJD_SESSION_ID = readString(dis);
					
					this.FIRST_APPLICATION_IJD_P = readString(dis);
					
					this.FIRST_RES_TYPE_DAILY_HOURLY = readString(dis);
					
					this.FIRST_WKDAY_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKDAY_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_AM_START_RES = readDate(dis);
					
					this.FIRST_WKEND_DAILY_PM_START_RES = readDate(dis);
					
					this.FIRST_RES_SOURCE = readString(dis);
					
					this.FIRST_RES_SOURCE_DESC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_VEHICLE_ID = null;
           				} else {
           			    	this.FIRST_RES_VEHICLE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.FIRST_RES_ZIPFLEET_ID = null;
           				} else {
           			    	this.FIRST_RES_ZIPFLEET_ID = dis.readLong();
           				}
					
					this.FIRST_RES_DATE = readDate(dis);
					
					this.SECOND_RES_DATE = readDate(dis);
					
					this.FIRST_WAIVER_START_DATE = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.MEMBER_ID);
					
					// Long
				
						if(this.AFFILIATE_ID_1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_1);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_1,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_2);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_2,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_3);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_3,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_4);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_4,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_5);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_5,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_6);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_6,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_7);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_7,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_8);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_8,dos);
					
					// Long
				
						if(this.AFFILIATE_ID_9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.AFFILIATE_ID_9);
		            	}
					
					// String
				
						writeString(this.AFFILIATE_NAME_9,dos);
					
					// java.util.Date
				
						writeDate(this.DELETED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_MODIFIED,dos);
					
					// java.util.Date
				
						writeDate(this.AFFILIATE_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.WAIVER_ELIGIBLE_P,dos);
					
					// String
				
						writeString(this.PER_TRIP_WAIVER_ELIGIBLE_P,dos);
					
					// Long
				
						if(this.CURRENT_WAIVER_PLAN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_PLAN_ID);
		            	}
					
					// String
				
						writeString(this.CURRENT_WAIVER_PLAN_NAME,dos);
					
					// Double
				
						if(this.CURRENT_WAIVER_PLAN_FEE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_PLAN_FEE);
		            	}
					
					// Long
				
						if(this.CURRENT_WAIVER_TIER == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_WAIVER_TIER);
		            	}
					
					// Double
				
						if(this.CURRENT_WAIVER_DEDUCTIBLE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_WAIVER_DEDUCTIBLE);
		            	}
					
					// String
				
						writeString(this.CURRENT_W_AUTO_RENEW_P,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CURRENT_WAIVER_END_DATE,dos);
					
					// int
				
		            	dos.writeInt(this.PER_TRIP_WAIVER_CNT);
					
					// java.util.Date
				
						writeDate(this.LAST_PER_TRIP_WAIVER_DATE,dos);
					
					// String
				
						writeString(this.EVER_HAD_ANY_WAIVER_P,dos);
					
					// java.util.Date
				
						writeDate(this.WAIVER_REFRESH_DATE,dos);
					
					// String
				
						writeString(this.DRIVER_RISK_TIER_INFO_P,dos);
					
					// String
				
						writeString(this.FIRST_RISK_TIER_KEY,dos);
					
					// String
				
						writeString(this.LAST_RISK_TIER_KEY,dos);
					
					// Integer
				
						writeInteger(this.FIRST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.LAST_MIN_LEVEL,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RISK_TIER_CHANGES,dos);
					
					// int
				
		            	dos.writeInt(this.TRIPS_COMPLETED);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LIC_POINTS_KARMA_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.DRIVER_RISK_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_SINCE_LAST_DRIVE,dos);
					
					// String
				
						writeString(this.NEXT_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_UNTIL_NEXT_DRIVE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.FIRST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.FIRST_GAS_FILLUP_CHARGE);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GAS_FILLUP_DATE,dos);
					
					// Double
				
						if(this.LAST_GAS_FILLUP_AMOUNT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_AMOUNT);
		            	}
					
					// Double
				
						if(this.LAST_GAS_FILLUP_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GAS_FILLUP_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.FILLUP_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.WEX_REFRESH_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.FIRST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NPS_RESPONSE_DATE,dos);
					
					// String
				
						writeString(this.LAST_NPS_COMPLETE,dos);
					
					// Integer
				
						writeInteger(this.LAST_NPS_SCORE,dos);
					
					// java.util.Date
				
						writeDate(this.NPS_SURVEY_REFRESH,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_LOCAL_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_FIRST_RES_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.REFER_A_FRIEND_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_GIFT_CARD_CNT,dos);
					
					// Double
				
						if(this.TOTAL_GIFT_CARD_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_GIFT_CARD_AMT_USD);
		            	}
					
					// java.util.Date
				
						writeDate(this.LAST_GIFT_CARD_PURCHASE_DATE,dos);
					
					// Double
				
						if(this.LAST_GIFT_CARD_PURCHAS_AMT_USD == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_GIFT_CARD_PURCHAS_AMT_USD);
		            	}
					
					// String
				
						writeString(this.LAST_GIFT_CARD_PURCHASE_CURR,dos);
					
					// Integer
				
						writeInteger(this.GIFT_CARD_CNT,dos);
					
					// Integer
				
						writeInteger(this.LATE_RETURN_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_LATE_RETURN_DATE,dos);
					
					// Integer
				
						writeInteger(this.LAST_LATE_RETURN_MINUTES,dos);
					
					// Double
				
						if(this.LAST_LATE_RETURN_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.LAST_LATE_RETURN_CHARGE);
		            	}
					
					// Integer
				
						writeInteger(this.MAJOR_ACCIDENTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.MINOR_ACCIDENTS_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_ACCIDENT_DATE,dos);
					
					// String
				
						writeString(this.LAST_ACCIDENT_CLASSIFICATION,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_BEHAVIOR_REFRESH_DATE,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_CNT,dos);
					
					// Integer
				
						writeInteger(this.ZCORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.CORPORATE_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.PERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVPERSONAL_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.EVSPONSORED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.Z2B_LARGE_ACCOUNTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.SUBSCRIPTION_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.UNIV_DEPTS_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.VAN_RESTRICTED_HIST_CNT,dos);
					
					// Integer
				
						writeInteger(this.ACCESS_HIST_CNT,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_RES_SEARCH_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_SOURCE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_COMPLETION_P,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OVERNIGHT_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKDAY_DAILY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_HRLY_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_WKEND_DAILY_RES_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_SEARCH_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.MEMBER_LAST_RES_REFRESH_DATE,dos);
					
					// Long
				
						if(this.LAST_RESERVATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RESERVATION_ID);
		            	}
					
					// String
				
						writeString(this.RES_SOURCE,dos);
					
					// String
				
						writeString(this.RES_SOURCE_DESCRIPTION,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_HRLY_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_HRLY_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE,dos);
					
					// Integer
				
						writeInteger(this.DAYS_FROM_JOIN_TO_FIRST_RES,dos);
					
					// String
				
						writeString(this.FIRST_NPS_COHORT,dos);
					
					// String
				
						writeString(this.LAST_NPS_COHORT,dos);
					
					// Integer
				
						writeInteger(this.NPS_SURVEY_CNT,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_HOURS_10_TO_12MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_1_TO_3MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_4_TO_6MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_7_TO_9MTHS,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_DISTANCE_10_TO_12MTHS,dos);
					
					// String
				
						writeString(this.DISTANCE_UNITS,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_FEE_DATE,dos);
					
					// Double
				
						if(this.NEXT_FEE_CHARGE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NEXT_FEE_CHARGE);
		            	}
					
					// String
				
						writeString(this.NEXT_FEE_FREQ,dos);
					
					// String
				
						writeString(this.FIRST_RES_SEARCH_SOURCE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_CANCELLATION_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_OTHER_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_NOSHOW_RES,dos);
					
					// java.util.Date
				
						writeDate(this.LAST_CANCELLATION_RES,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_9MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_6MTHS_WRKDAY_S,dos);
					
					// Integer
				
						writeInteger(this.COMPLETED_RES_1YEAR_WRKDAY_S,dos);
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.TOTAL_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.TOTAL_UP_REVENUE_1YEAR_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_3MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_3MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_6MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_6MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_9MTHS_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_9MTHS_S);
		            	}
					
					// Double
				
						if(this.AVG_UP_REVENUE_1YEAR_S == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.AVG_UP_REVENUE_1YEAR_S);
		            	}
					
					// Integer
				
						writeInteger(this.RES_SEARCH_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_TURNDOWN_3MTHS_S,dos);
					
					// Integer
				
						writeInteger(this.RES_SEARCH_COMPLETIONS_3MTHS_S,dos);
					
					// java.util.Date
				
						writeDate(this.NEXT_RES_DATE_S,dos);
					
					// java.util.Date
				
						writeDate(this.RES_REFRESH_DATE_S,dos);
					
					// Integer
				
						writeInteger(this.CANCELED_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.BILLED_NOSHOW_RES_1YEAR,dos);
					
					// Integer
				
						writeInteger(this.TOTAL_RES_1YEAR,dos);
					
					// String
				
						writeString(this.AFFILIATE_TYPE,dos);
					
					// java.util.Date
				
						writeDate(this.ANNIVERSARY_DATE,dos);
					
					// String
				
						writeString(this.LAST_RES_RATE_PLAN_KEY,dos);
					
					// String
				
						writeString(this.LAST_RES_VEHICLE_CLASS,dos);
					
					// Long
				
						if(this.LAST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_RES_VEHICLE_ID);
		            	}
					
					// String
				
						writeString(this.ACTIVE_UNI_P,dos);
					
					// String
				
						writeString(this.CURRENT_MEMBER_P,dos);
					
					// Long
				
						if(this.FIRST_JOIN_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_JOIN_ACCOUNT_ID);
		            	}
					
					// Long
				
						if(this.LAST_DIGIT_FIRST_ACCOUNT_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.LAST_DIGIT_FIRST_ACCOUNT_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_CORPORATE_ID,dos);
					
					// Long
				
						if(this.CURRENT_SUSPENSION_REASON_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CURRENT_SUSPENSION_REASON_ID);
		            	}
					
					// Long
				
						if(this.FIRST_APPLICATION_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_APPLICATION_ID);
		            	}
					
					// String
				
						writeString(this.FIRST_APP_IJD_SESSION_ID,dos);
					
					// String
				
						writeString(this.FIRST_APPLICATION_IJD_P,dos);
					
					// String
				
						writeString(this.FIRST_RES_TYPE_DAILY_HOURLY,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKDAY_DAILY_PM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_AM_START_RES,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WKEND_DAILY_PM_START_RES,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE,dos);
					
					// String
				
						writeString(this.FIRST_RES_SOURCE_DESC,dos);
					
					// Long
				
						if(this.FIRST_RES_VEHICLE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_VEHICLE_ID);
		            	}
					
					// Long
				
						if(this.FIRST_RES_ZIPFLEET_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.FIRST_RES_ZIPFLEET_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.FIRST_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SECOND_RES_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.FIRST_WAIVER_START_DATE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",AFFILIATE_ID_1="+String.valueOf(AFFILIATE_ID_1));
		sb.append(",AFFILIATE_NAME_1="+AFFILIATE_NAME_1);
		sb.append(",AFFILIATE_ID_2="+String.valueOf(AFFILIATE_ID_2));
		sb.append(",AFFILIATE_NAME_2="+AFFILIATE_NAME_2);
		sb.append(",AFFILIATE_ID_3="+String.valueOf(AFFILIATE_ID_3));
		sb.append(",AFFILIATE_NAME_3="+AFFILIATE_NAME_3);
		sb.append(",AFFILIATE_ID_4="+String.valueOf(AFFILIATE_ID_4));
		sb.append(",AFFILIATE_NAME_4="+AFFILIATE_NAME_4);
		sb.append(",AFFILIATE_ID_5="+String.valueOf(AFFILIATE_ID_5));
		sb.append(",AFFILIATE_NAME_5="+AFFILIATE_NAME_5);
		sb.append(",AFFILIATE_ID_6="+String.valueOf(AFFILIATE_ID_6));
		sb.append(",AFFILIATE_NAME_6="+AFFILIATE_NAME_6);
		sb.append(",AFFILIATE_ID_7="+String.valueOf(AFFILIATE_ID_7));
		sb.append(",AFFILIATE_NAME_7="+AFFILIATE_NAME_7);
		sb.append(",AFFILIATE_ID_8="+String.valueOf(AFFILIATE_ID_8));
		sb.append(",AFFILIATE_NAME_8="+AFFILIATE_NAME_8);
		sb.append(",AFFILIATE_ID_9="+String.valueOf(AFFILIATE_ID_9));
		sb.append(",AFFILIATE_NAME_9="+AFFILIATE_NAME_9);
		sb.append(",DELETED_DATE="+String.valueOf(DELETED_DATE));
		sb.append(",LAST_MODIFIED="+String.valueOf(LAST_MODIFIED));
		sb.append(",AFFILIATE_REFRESH_DATE="+String.valueOf(AFFILIATE_REFRESH_DATE));
		sb.append(",WAIVER_ELIGIBLE_P="+WAIVER_ELIGIBLE_P);
		sb.append(",PER_TRIP_WAIVER_ELIGIBLE_P="+PER_TRIP_WAIVER_ELIGIBLE_P);
		sb.append(",CURRENT_WAIVER_PLAN_ID="+String.valueOf(CURRENT_WAIVER_PLAN_ID));
		sb.append(",CURRENT_WAIVER_PLAN_NAME="+CURRENT_WAIVER_PLAN_NAME);
		sb.append(",CURRENT_WAIVER_PLAN_FEE="+String.valueOf(CURRENT_WAIVER_PLAN_FEE));
		sb.append(",CURRENT_WAIVER_TIER="+String.valueOf(CURRENT_WAIVER_TIER));
		sb.append(",CURRENT_WAIVER_DEDUCTIBLE="+String.valueOf(CURRENT_WAIVER_DEDUCTIBLE));
		sb.append(",CURRENT_W_AUTO_RENEW_P="+CURRENT_W_AUTO_RENEW_P);
		sb.append(",CURRENT_WAIVER_START_DATE="+String.valueOf(CURRENT_WAIVER_START_DATE));
		sb.append(",CURRENT_WAIVER_END_DATE="+String.valueOf(CURRENT_WAIVER_END_DATE));
		sb.append(",PER_TRIP_WAIVER_CNT="+String.valueOf(PER_TRIP_WAIVER_CNT));
		sb.append(",LAST_PER_TRIP_WAIVER_DATE="+String.valueOf(LAST_PER_TRIP_WAIVER_DATE));
		sb.append(",EVER_HAD_ANY_WAIVER_P="+EVER_HAD_ANY_WAIVER_P);
		sb.append(",WAIVER_REFRESH_DATE="+String.valueOf(WAIVER_REFRESH_DATE));
		sb.append(",DRIVER_RISK_TIER_INFO_P="+DRIVER_RISK_TIER_INFO_P);
		sb.append(",FIRST_RISK_TIER_KEY="+FIRST_RISK_TIER_KEY);
		sb.append(",LAST_RISK_TIER_KEY="+LAST_RISK_TIER_KEY);
		sb.append(",FIRST_MIN_LEVEL="+String.valueOf(FIRST_MIN_LEVEL));
		sb.append(",LAST_MIN_LEVEL="+String.valueOf(LAST_MIN_LEVEL));
		sb.append(",TOTAL_RISK_TIER_CHANGES="+String.valueOf(TOTAL_RISK_TIER_CHANGES));
		sb.append(",TRIPS_COMPLETED="+String.valueOf(TRIPS_COMPLETED));
		sb.append(",LAST_ACCIDENT_KARMA_DATE="+String.valueOf(LAST_ACCIDENT_KARMA_DATE));
		sb.append(",LAST_LIC_POINTS_KARMA_DATE="+String.valueOf(LAST_LIC_POINTS_KARMA_DATE));
		sb.append(",DRIVER_RISK_REFRESH_DATE="+String.valueOf(DRIVER_RISK_REFRESH_DATE));
		sb.append(",LAST_RES_DATE="+String.valueOf(LAST_RES_DATE));
		sb.append(",LAST_RES_TYPE="+LAST_RES_TYPE);
		sb.append(",DAYS_SINCE_LAST_DRIVE="+String.valueOf(DAYS_SINCE_LAST_DRIVE));
		sb.append(",NEXT_RES_TYPE="+NEXT_RES_TYPE);
		sb.append(",DAYS_UNTIL_NEXT_DRIVE="+String.valueOf(DAYS_UNTIL_NEXT_DRIVE));
		sb.append(",FIRST_GAS_FILLUP_DATE="+String.valueOf(FIRST_GAS_FILLUP_DATE));
		sb.append(",FIRST_GAS_FILLUP_AMOUNT="+String.valueOf(FIRST_GAS_FILLUP_AMOUNT));
		sb.append(",FIRST_GAS_FILLUP_CHARGE="+String.valueOf(FIRST_GAS_FILLUP_CHARGE));
		sb.append(",LAST_GAS_FILLUP_DATE="+String.valueOf(LAST_GAS_FILLUP_DATE));
		sb.append(",LAST_GAS_FILLUP_AMOUNT="+String.valueOf(LAST_GAS_FILLUP_AMOUNT));
		sb.append(",LAST_GAS_FILLUP_CHARGE="+String.valueOf(LAST_GAS_FILLUP_CHARGE));
		sb.append(",FILLUP_CNT="+String.valueOf(FILLUP_CNT));
		sb.append(",WEX_REFRESH_DATE="+String.valueOf(WEX_REFRESH_DATE));
		sb.append(",FIRST_NPS_RESPONSE_DATE="+String.valueOf(FIRST_NPS_RESPONSE_DATE));
		sb.append(",FIRST_NPS_COMPLETE="+FIRST_NPS_COMPLETE);
		sb.append(",FIRST_NPS_SCORE="+String.valueOf(FIRST_NPS_SCORE));
		sb.append(",LAST_NPS_RESPONSE_DATE="+String.valueOf(LAST_NPS_RESPONSE_DATE));
		sb.append(",LAST_NPS_COMPLETE="+LAST_NPS_COMPLETE);
		sb.append(",LAST_NPS_SCORE="+String.valueOf(LAST_NPS_SCORE));
		sb.append(",NPS_SURVEY_REFRESH="+String.valueOf(NPS_SURVEY_REFRESH));
		sb.append(",FIRST_RES_SEARCH_DATE="+String.valueOf(FIRST_RES_SEARCH_DATE));
		sb.append(",FIRST_RES_SEARCH_COMPLETION_P="+FIRST_RES_SEARCH_COMPLETION_P);
		sb.append(",FIRST_RES_LOCAL_START_DATE="+String.valueOf(FIRST_RES_LOCAL_START_DATE));
		sb.append(",FIRST_OVERNIGHT_RES="+String.valueOf(FIRST_OVERNIGHT_RES));
		sb.append(",FIRST_WKDAY_HRLY_AM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_AM_START_RES));
		sb.append(",FIRST_WKDAY_HRLY_PM_START_RES="+String.valueOf(FIRST_WKDAY_HRLY_PM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_AM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_AM_START_RES));
		sb.append(",FIRST_WKEND_HRLY_PM_START_RES="+String.valueOf(FIRST_WKEND_HRLY_PM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_RES="+String.valueOf(FIRST_WKDAY_DAILY_RES));
		sb.append(",FIRST_WKEND_DAILY_RES="+String.valueOf(FIRST_WKEND_DAILY_RES));
		sb.append(",MEMBER_FIRST_RES_REFRESH_DATE="+String.valueOf(MEMBER_FIRST_RES_REFRESH_DATE));
		sb.append(",REFER_A_FRIEND_CNT="+String.valueOf(REFER_A_FRIEND_CNT));
		sb.append(",TOTAL_GIFT_CARD_CNT="+String.valueOf(TOTAL_GIFT_CARD_CNT));
		sb.append(",TOTAL_GIFT_CARD_AMT_USD="+String.valueOf(TOTAL_GIFT_CARD_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_DATE="+String.valueOf(LAST_GIFT_CARD_PURCHASE_DATE));
		sb.append(",LAST_GIFT_CARD_PURCHAS_AMT_USD="+String.valueOf(LAST_GIFT_CARD_PURCHAS_AMT_USD));
		sb.append(",LAST_GIFT_CARD_PURCHASE_CURR="+LAST_GIFT_CARD_PURCHASE_CURR);
		sb.append(",GIFT_CARD_CNT="+String.valueOf(GIFT_CARD_CNT));
		sb.append(",LATE_RETURN_CNT="+String.valueOf(LATE_RETURN_CNT));
		sb.append(",LAST_LATE_RETURN_DATE="+String.valueOf(LAST_LATE_RETURN_DATE));
		sb.append(",LAST_LATE_RETURN_MINUTES="+String.valueOf(LAST_LATE_RETURN_MINUTES));
		sb.append(",LAST_LATE_RETURN_CHARGE="+String.valueOf(LAST_LATE_RETURN_CHARGE));
		sb.append(",MAJOR_ACCIDENTS_CNT="+String.valueOf(MAJOR_ACCIDENTS_CNT));
		sb.append(",MINOR_ACCIDENTS_CNT="+String.valueOf(MINOR_ACCIDENTS_CNT));
		sb.append(",LAST_ACCIDENT_DATE="+String.valueOf(LAST_ACCIDENT_DATE));
		sb.append(",LAST_ACCIDENT_CLASSIFICATION="+LAST_ACCIDENT_CLASSIFICATION);
		sb.append(",MEMBER_BEHAVIOR_REFRESH_DATE="+String.valueOf(MEMBER_BEHAVIOR_REFRESH_DATE));
		sb.append(",ZCORPORATE_CNT="+String.valueOf(ZCORPORATE_CNT));
		sb.append(",CORPORATE_CNT="+String.valueOf(CORPORATE_CNT));
		sb.append(",PERSONAL_CNT="+String.valueOf(PERSONAL_CNT));
		sb.append(",EVPERSONAL_CNT="+String.valueOf(EVPERSONAL_CNT));
		sb.append(",SPONSORED_CNT="+String.valueOf(SPONSORED_CNT));
		sb.append(",EVSPONSORED_CNT="+String.valueOf(EVSPONSORED_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_CNT));
		sb.append(",SUBSCRIPTION_CNT="+String.valueOf(SUBSCRIPTION_CNT));
		sb.append(",UNIV_DEPTS_CNT="+String.valueOf(UNIV_DEPTS_CNT));
		sb.append(",VAN_RESTRICTED_CNT="+String.valueOf(VAN_RESTRICTED_CNT));
		sb.append(",ACCESS_CNT="+String.valueOf(ACCESS_CNT));
		sb.append(",ZCORPORATE_HIST_CNT="+String.valueOf(ZCORPORATE_HIST_CNT));
		sb.append(",CORPORATE_HIST_CNT="+String.valueOf(CORPORATE_HIST_CNT));
		sb.append(",PERSONAL_HIST_CNT="+String.valueOf(PERSONAL_HIST_CNT));
		sb.append(",EVPERSONAL_HIST_CNT="+String.valueOf(EVPERSONAL_HIST_CNT));
		sb.append(",SPONSORED_HIST_CNT="+String.valueOf(SPONSORED_HIST_CNT));
		sb.append(",EVSPONSORED_HIST_CNT="+String.valueOf(EVSPONSORED_HIST_CNT));
		sb.append(",Z2B_LARGE_ACCOUNTS_HIST_CNT="+String.valueOf(Z2B_LARGE_ACCOUNTS_HIST_CNT));
		sb.append(",SUBSCRIPTION_HIST_CNT="+String.valueOf(SUBSCRIPTION_HIST_CNT));
		sb.append(",UNIV_DEPTS_HIST_CNT="+String.valueOf(UNIV_DEPTS_HIST_CNT));
		sb.append(",VAN_RESTRICTED_HIST_CNT="+String.valueOf(VAN_RESTRICTED_HIST_CNT));
		sb.append(",ACCESS_HIST_CNT="+String.valueOf(ACCESS_HIST_CNT));
		sb.append(",LAST_RES_SEARCH_DATE="+String.valueOf(LAST_RES_SEARCH_DATE));
		sb.append(",LAST_RES_SEARCH_SOURCE="+LAST_RES_SEARCH_SOURCE);
		sb.append(",LAST_RES_SEARCH_COMPLETION_P="+LAST_RES_SEARCH_COMPLETION_P);
		sb.append(",LAST_OVERNIGHT_RES="+String.valueOf(LAST_OVERNIGHT_RES));
		sb.append(",LAST_WKDAY_HRLY_RES="+String.valueOf(LAST_WKDAY_HRLY_RES));
		sb.append(",LAST_WKDAY_DAILY_RES="+String.valueOf(LAST_WKDAY_DAILY_RES));
		sb.append(",LAST_WKEND_HRLY_RES="+String.valueOf(LAST_WKEND_HRLY_RES));
		sb.append(",LAST_WKEND_DAILY_RES="+String.valueOf(LAST_WKEND_DAILY_RES));
		sb.append(",LAST_OVERNIGHT_RES_DATE="+String.valueOf(LAST_OVERNIGHT_RES_DATE));
		sb.append(",LAST_WKDAY_HRLY_RES_DATE="+String.valueOf(LAST_WKDAY_HRLY_RES_DATE));
		sb.append(",LAST_WKDAY_DAILY_RES_DATE="+String.valueOf(LAST_WKDAY_DAILY_RES_DATE));
		sb.append(",LAST_WKEND_HRLY_RES_DATE="+String.valueOf(LAST_WKEND_HRLY_RES_DATE));
		sb.append(",LAST_WKEND_DAILY_RES_DATE="+String.valueOf(LAST_WKEND_DAILY_RES_DATE));
		sb.append(",LAST_RES_SEARCH_TYPE="+LAST_RES_SEARCH_TYPE);
		sb.append(",MEMBER_LAST_RES_REFRESH_DATE="+String.valueOf(MEMBER_LAST_RES_REFRESH_DATE));
		sb.append(",LAST_RESERVATION_ID="+String.valueOf(LAST_RESERVATION_ID));
		sb.append(",RES_SOURCE="+RES_SOURCE);
		sb.append(",RES_SOURCE_DESCRIPTION="+RES_SOURCE_DESCRIPTION);
		sb.append(",FIRST_WKDAY_HRLY_RES="+String.valueOf(FIRST_WKDAY_HRLY_RES));
		sb.append(",FIRST_WKEND_HRLY_RES="+String.valueOf(FIRST_WKEND_HRLY_RES));
		sb.append(",FIRST_RES_TYPE="+FIRST_RES_TYPE);
		sb.append(",DAYS_FROM_JOIN_TO_FIRST_RES="+String.valueOf(DAYS_FROM_JOIN_TO_FIRST_RES));
		sb.append(",FIRST_NPS_COHORT="+FIRST_NPS_COHORT);
		sb.append(",LAST_NPS_COHORT="+LAST_NPS_COHORT);
		sb.append(",NPS_SURVEY_CNT="+String.valueOf(NPS_SURVEY_CNT));
		sb.append(",TOTAL_HOURS_1_TO_3MTHS="+String.valueOf(TOTAL_HOURS_1_TO_3MTHS));
		sb.append(",TOTAL_HOURS_4_TO_6MTHS="+String.valueOf(TOTAL_HOURS_4_TO_6MTHS));
		sb.append(",TOTAL_HOURS_7_TO_9MTHS="+String.valueOf(TOTAL_HOURS_7_TO_9MTHS));
		sb.append(",TOTAL_HOURS_10_TO_12MTHS="+String.valueOf(TOTAL_HOURS_10_TO_12MTHS));
		sb.append(",TOTAL_DISTANCE_1_TO_3MTHS="+String.valueOf(TOTAL_DISTANCE_1_TO_3MTHS));
		sb.append(",TOTAL_DISTANCE_4_TO_6MTHS="+String.valueOf(TOTAL_DISTANCE_4_TO_6MTHS));
		sb.append(",TOTAL_DISTANCE_7_TO_9MTHS="+String.valueOf(TOTAL_DISTANCE_7_TO_9MTHS));
		sb.append(",TOTAL_DISTANCE_10_TO_12MTHS="+String.valueOf(TOTAL_DISTANCE_10_TO_12MTHS));
		sb.append(",DISTANCE_UNITS="+DISTANCE_UNITS);
		sb.append(",NEXT_FEE_DATE="+String.valueOf(NEXT_FEE_DATE));
		sb.append(",NEXT_FEE_CHARGE="+String.valueOf(NEXT_FEE_CHARGE));
		sb.append(",NEXT_FEE_FREQ="+NEXT_FEE_FREQ);
		sb.append(",FIRST_RES_SEARCH_SOURCE="+FIRST_RES_SEARCH_SOURCE);
		sb.append(",FIRST_OTHER_RES="+String.valueOf(FIRST_OTHER_RES));
		sb.append(",FIRST_NOSHOW_RES="+String.valueOf(FIRST_NOSHOW_RES));
		sb.append(",FIRST_CANCELLATION_RES="+String.valueOf(FIRST_CANCELLATION_RES));
		sb.append(",LAST_OTHER_RES="+String.valueOf(LAST_OTHER_RES));
		sb.append(",LAST_NOSHOW_RES="+String.valueOf(LAST_NOSHOW_RES));
		sb.append(",LAST_CANCELLATION_RES="+String.valueOf(LAST_CANCELLATION_RES));
		sb.append(",COMPLETED_RES_3MTHS_S="+String.valueOf(COMPLETED_RES_3MTHS_S));
		sb.append(",COMPLETED_RES_6MTHS_S="+String.valueOf(COMPLETED_RES_6MTHS_S));
		sb.append(",COMPLETED_RES_9MTHS_S="+String.valueOf(COMPLETED_RES_9MTHS_S));
		sb.append(",COMPLETED_RES_1YEAR_S="+String.valueOf(COMPLETED_RES_1YEAR_S));
		sb.append(",COMPLETED_RES_6MTHS_WRKDAY_S="+String.valueOf(COMPLETED_RES_6MTHS_WRKDAY_S));
		sb.append(",COMPLETED_RES_1YEAR_WRKDAY_S="+String.valueOf(COMPLETED_RES_1YEAR_WRKDAY_S));
		sb.append(",TOTAL_UP_REVENUE_3MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_3MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_6MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_6MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_9MTHS_S="+String.valueOf(TOTAL_UP_REVENUE_9MTHS_S));
		sb.append(",TOTAL_UP_REVENUE_1YEAR_S="+String.valueOf(TOTAL_UP_REVENUE_1YEAR_S));
		sb.append(",AVG_UP_REVENUE_3MTHS_S="+String.valueOf(AVG_UP_REVENUE_3MTHS_S));
		sb.append(",AVG_UP_REVENUE_6MTHS_S="+String.valueOf(AVG_UP_REVENUE_6MTHS_S));
		sb.append(",AVG_UP_REVENUE_9MTHS_S="+String.valueOf(AVG_UP_REVENUE_9MTHS_S));
		sb.append(",AVG_UP_REVENUE_1YEAR_S="+String.valueOf(AVG_UP_REVENUE_1YEAR_S));
		sb.append(",RES_SEARCH_3MTHS_S="+String.valueOf(RES_SEARCH_3MTHS_S));
		sb.append(",RES_SEARCH_TURNDOWN_3MTHS_S="+String.valueOf(RES_SEARCH_TURNDOWN_3MTHS_S));
		sb.append(",RES_SEARCH_COMPLETIONS_3MTHS_S="+String.valueOf(RES_SEARCH_COMPLETIONS_3MTHS_S));
		sb.append(",NEXT_RES_DATE_S="+String.valueOf(NEXT_RES_DATE_S));
		sb.append(",RES_REFRESH_DATE_S="+String.valueOf(RES_REFRESH_DATE_S));
		sb.append(",CANCELED_RES_1YEAR="+String.valueOf(CANCELED_RES_1YEAR));
		sb.append(",BILLED_NOSHOW_RES_1YEAR="+String.valueOf(BILLED_NOSHOW_RES_1YEAR));
		sb.append(",TOTAL_RES_1YEAR="+String.valueOf(TOTAL_RES_1YEAR));
		sb.append(",AFFILIATE_TYPE="+AFFILIATE_TYPE);
		sb.append(",ANNIVERSARY_DATE="+String.valueOf(ANNIVERSARY_DATE));
		sb.append(",LAST_RES_RATE_PLAN_KEY="+LAST_RES_RATE_PLAN_KEY);
		sb.append(",LAST_RES_VEHICLE_CLASS="+LAST_RES_VEHICLE_CLASS);
		sb.append(",LAST_RES_VEHICLE_ID="+String.valueOf(LAST_RES_VEHICLE_ID));
		sb.append(",ACTIVE_UNI_P="+ACTIVE_UNI_P);
		sb.append(",CURRENT_MEMBER_P="+CURRENT_MEMBER_P);
		sb.append(",FIRST_JOIN_ACCOUNT_ID="+String.valueOf(FIRST_JOIN_ACCOUNT_ID));
		sb.append(",LAST_DIGIT_FIRST_ACCOUNT_ID="+String.valueOf(LAST_DIGIT_FIRST_ACCOUNT_ID));
		sb.append(",FIRST_CORPORATE_ID="+FIRST_CORPORATE_ID);
		sb.append(",CURRENT_SUSPENSION_REASON_ID="+String.valueOf(CURRENT_SUSPENSION_REASON_ID));
		sb.append(",FIRST_APPLICATION_ID="+String.valueOf(FIRST_APPLICATION_ID));
		sb.append(",FIRST_APP_IJD_SESSION_ID="+FIRST_APP_IJD_SESSION_ID);
		sb.append(",FIRST_APPLICATION_IJD_P="+FIRST_APPLICATION_IJD_P);
		sb.append(",FIRST_RES_TYPE_DAILY_HOURLY="+FIRST_RES_TYPE_DAILY_HOURLY);
		sb.append(",FIRST_WKDAY_DAILY_AM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_AM_START_RES));
		sb.append(",FIRST_WKDAY_DAILY_PM_START_RES="+String.valueOf(FIRST_WKDAY_DAILY_PM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_AM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_AM_START_RES));
		sb.append(",FIRST_WKEND_DAILY_PM_START_RES="+String.valueOf(FIRST_WKEND_DAILY_PM_START_RES));
		sb.append(",FIRST_RES_SOURCE="+FIRST_RES_SOURCE);
		sb.append(",FIRST_RES_SOURCE_DESC="+FIRST_RES_SOURCE_DESC);
		sb.append(",FIRST_RES_VEHICLE_ID="+String.valueOf(FIRST_RES_VEHICLE_ID));
		sb.append(",FIRST_RES_ZIPFLEET_ID="+String.valueOf(FIRST_RES_ZIPFLEET_ID));
		sb.append(",FIRST_RES_DATE="+String.valueOf(FIRST_RES_DATE));
		sb.append(",SECOND_RES_DATE="+String.valueOf(SECOND_RES_DATE));
		sb.append(",FIRST_WAIVER_START_DATE="+String.valueOf(FIRST_WAIVER_START_DATE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_1{
                                public void putValue_0(final row2Struct row2,String[] rowtFileOutputDelimited_1){
                                    rowtFileOutputDelimited_1[0]=
                                    String.valueOf(row2.MEMBER_ID);
                                    rowtFileOutputDelimited_1[1]=row2.AFFILIATE_ID_1 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_1);
                                    rowtFileOutputDelimited_1[2]=row2.AFFILIATE_NAME_1 == null ? null : 
                                    row2.AFFILIATE_NAME_1;
                                    rowtFileOutputDelimited_1[3]=row2.AFFILIATE_ID_2 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_2);
                                    rowtFileOutputDelimited_1[4]=row2.AFFILIATE_NAME_2 == null ? null : 
                                    row2.AFFILIATE_NAME_2;
                                    rowtFileOutputDelimited_1[5]=row2.AFFILIATE_ID_3 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_3);
                                    rowtFileOutputDelimited_1[6]=row2.AFFILIATE_NAME_3 == null ? null : 
                                    row2.AFFILIATE_NAME_3;
                                    rowtFileOutputDelimited_1[7]=row2.AFFILIATE_ID_4 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_4);
                                    rowtFileOutputDelimited_1[8]=row2.AFFILIATE_NAME_4 == null ? null : 
                                    row2.AFFILIATE_NAME_4;
                                    rowtFileOutputDelimited_1[9]=row2.AFFILIATE_ID_5 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_5);
                                    rowtFileOutputDelimited_1[10]=row2.AFFILIATE_NAME_5 == null ? null : 
                                    row2.AFFILIATE_NAME_5;
                                    rowtFileOutputDelimited_1[11]=row2.AFFILIATE_ID_6 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_6);
                                    rowtFileOutputDelimited_1[12]=row2.AFFILIATE_NAME_6 == null ? null : 
                                    row2.AFFILIATE_NAME_6;
                                    rowtFileOutputDelimited_1[13]=row2.AFFILIATE_ID_7 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_7);
                                    rowtFileOutputDelimited_1[14]=row2.AFFILIATE_NAME_7 == null ? null : 
                                    row2.AFFILIATE_NAME_7;
                                    rowtFileOutputDelimited_1[15]=row2.AFFILIATE_ID_8 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_8);
                                    rowtFileOutputDelimited_1[16]=row2.AFFILIATE_NAME_8 == null ? null : 
                                    row2.AFFILIATE_NAME_8;
                                    rowtFileOutputDelimited_1[17]=row2.AFFILIATE_ID_9 == null ? null : 
                                    String.valueOf(row2.AFFILIATE_ID_9);
                                    rowtFileOutputDelimited_1[18]=row2.AFFILIATE_NAME_9 == null ? null : 
                                    row2.AFFILIATE_NAME_9;
                                    rowtFileOutputDelimited_1[19]=row2.DELETED_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.DELETED_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[20]=row2.LAST_MODIFIED == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_MODIFIED, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[21]=row2.AFFILIATE_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.AFFILIATE_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[22]=row2.WAIVER_ELIGIBLE_P == null ? null : 
                                    row2.WAIVER_ELIGIBLE_P;
                                    rowtFileOutputDelimited_1[23]=row2.PER_TRIP_WAIVER_ELIGIBLE_P == null ? null : 
                                    row2.PER_TRIP_WAIVER_ELIGIBLE_P;
                                    rowtFileOutputDelimited_1[24]=row2.CURRENT_WAIVER_PLAN_ID == null ? null : 
                                    String.valueOf(row2.CURRENT_WAIVER_PLAN_ID);
                                    rowtFileOutputDelimited_1[25]=row2.CURRENT_WAIVER_PLAN_NAME == null ? null : 
                                    row2.CURRENT_WAIVER_PLAN_NAME;
                                    rowtFileOutputDelimited_1[26]=row2.CURRENT_WAIVER_PLAN_FEE == null ? null : 
                                    String.valueOf(row2.CURRENT_WAIVER_PLAN_FEE);
                                    rowtFileOutputDelimited_1[27]=row2.CURRENT_WAIVER_TIER == null ? null : 
                                    String.valueOf(row2.CURRENT_WAIVER_TIER);
                                    rowtFileOutputDelimited_1[28]=row2.CURRENT_WAIVER_DEDUCTIBLE == null ? null : 
                                    String.valueOf(row2.CURRENT_WAIVER_DEDUCTIBLE);
                                    rowtFileOutputDelimited_1[29]=row2.CURRENT_W_AUTO_RENEW_P == null ? null : 
                                    row2.CURRENT_W_AUTO_RENEW_P;
                                    rowtFileOutputDelimited_1[30]=row2.CURRENT_WAIVER_START_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.CURRENT_WAIVER_START_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[31]=row2.CURRENT_WAIVER_END_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.CURRENT_WAIVER_END_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[32]=
                                    String.valueOf(row2.PER_TRIP_WAIVER_CNT);
                                    rowtFileOutputDelimited_1[33]=row2.LAST_PER_TRIP_WAIVER_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_PER_TRIP_WAIVER_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[34]=row2.EVER_HAD_ANY_WAIVER_P == null ? null : 
                                    row2.EVER_HAD_ANY_WAIVER_P;
                                    rowtFileOutputDelimited_1[35]=row2.WAIVER_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.WAIVER_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[36]=row2.DRIVER_RISK_TIER_INFO_P == null ? null : 
                                    row2.DRIVER_RISK_TIER_INFO_P;
                                    rowtFileOutputDelimited_1[37]=row2.FIRST_RISK_TIER_KEY == null ? null : 
                                    row2.FIRST_RISK_TIER_KEY;
                                    rowtFileOutputDelimited_1[38]=row2.LAST_RISK_TIER_KEY == null ? null : 
                                    row2.LAST_RISK_TIER_KEY;
                                    rowtFileOutputDelimited_1[39]=row2.FIRST_MIN_LEVEL == null ? null : 
                                    String.valueOf(row2.FIRST_MIN_LEVEL);
                                    rowtFileOutputDelimited_1[40]=row2.LAST_MIN_LEVEL == null ? null : 
                                    String.valueOf(row2.LAST_MIN_LEVEL);
                                    rowtFileOutputDelimited_1[41]=row2.TOTAL_RISK_TIER_CHANGES == null ? null : 
                                    String.valueOf(row2.TOTAL_RISK_TIER_CHANGES);
                                    rowtFileOutputDelimited_1[42]=
                                    String.valueOf(row2.TRIPS_COMPLETED);
                                    rowtFileOutputDelimited_1[43]=row2.LAST_ACCIDENT_KARMA_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_ACCIDENT_KARMA_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[44]=row2.LAST_LIC_POINTS_KARMA_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_LIC_POINTS_KARMA_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[45]=row2.DRIVER_RISK_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.DRIVER_RISK_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[46]=row2.LAST_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[47]=row2.LAST_RES_TYPE == null ? null : 
                                    row2.LAST_RES_TYPE;
                                    rowtFileOutputDelimited_1[48]=row2.DAYS_SINCE_LAST_DRIVE == null ? null : 
                                    String.valueOf(row2.DAYS_SINCE_LAST_DRIVE);
                                    rowtFileOutputDelimited_1[49]=row2.NEXT_RES_TYPE == null ? null : 
                                    row2.NEXT_RES_TYPE;
                                    rowtFileOutputDelimited_1[50]=row2.DAYS_UNTIL_NEXT_DRIVE == null ? null : 
                                    String.valueOf(row2.DAYS_UNTIL_NEXT_DRIVE);
                                    rowtFileOutputDelimited_1[51]=row2.FIRST_GAS_FILLUP_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_GAS_FILLUP_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[52]=row2.FIRST_GAS_FILLUP_AMOUNT == null ? null : 
                                    String.valueOf(row2.FIRST_GAS_FILLUP_AMOUNT);
                                    rowtFileOutputDelimited_1[53]=row2.FIRST_GAS_FILLUP_CHARGE == null ? null : 
                                    String.valueOf(row2.FIRST_GAS_FILLUP_CHARGE);
                                    rowtFileOutputDelimited_1[54]=row2.LAST_GAS_FILLUP_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_GAS_FILLUP_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[55]=row2.LAST_GAS_FILLUP_AMOUNT == null ? null : 
                                    String.valueOf(row2.LAST_GAS_FILLUP_AMOUNT);
                                    rowtFileOutputDelimited_1[56]=row2.LAST_GAS_FILLUP_CHARGE == null ? null : 
                                    String.valueOf(row2.LAST_GAS_FILLUP_CHARGE);
                                    rowtFileOutputDelimited_1[57]=row2.FILLUP_CNT == null ? null : 
                                    String.valueOf(row2.FILLUP_CNT);
                                    rowtFileOutputDelimited_1[58]=row2.WEX_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.WEX_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[59]=row2.FIRST_NPS_RESPONSE_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_NPS_RESPONSE_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[60]=row2.FIRST_NPS_COMPLETE == null ? null : 
                                    row2.FIRST_NPS_COMPLETE;
                                    rowtFileOutputDelimited_1[61]=row2.FIRST_NPS_SCORE == null ? null : 
                                    String.valueOf(row2.FIRST_NPS_SCORE);
                                    rowtFileOutputDelimited_1[62]=row2.LAST_NPS_RESPONSE_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_NPS_RESPONSE_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[63]=row2.LAST_NPS_COMPLETE == null ? null : 
                                    row2.LAST_NPS_COMPLETE;
                                    rowtFileOutputDelimited_1[64]=row2.LAST_NPS_SCORE == null ? null : 
                                    String.valueOf(row2.LAST_NPS_SCORE);
                                    rowtFileOutputDelimited_1[65]=row2.NPS_SURVEY_REFRESH == null ? null : 
                                    FormatterUtils.format_Date(row2.NPS_SURVEY_REFRESH, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[66]=row2.FIRST_RES_SEARCH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_RES_SEARCH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[67]=row2.FIRST_RES_SEARCH_COMPLETION_P == null ? null : 
                                    row2.FIRST_RES_SEARCH_COMPLETION_P;
                                    rowtFileOutputDelimited_1[68]=row2.FIRST_RES_LOCAL_START_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_RES_LOCAL_START_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[69]=row2.FIRST_OVERNIGHT_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_OVERNIGHT_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[70]=row2.FIRST_WKDAY_HRLY_AM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_HRLY_AM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[71]=row2.FIRST_WKDAY_HRLY_PM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_HRLY_PM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[72]=row2.FIRST_WKEND_HRLY_AM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_HRLY_AM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[73]=row2.FIRST_WKEND_HRLY_PM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_HRLY_PM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[74]=row2.FIRST_WKDAY_DAILY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_DAILY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[75]=row2.FIRST_WKEND_DAILY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_DAILY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[76]=row2.MEMBER_FIRST_RES_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.MEMBER_FIRST_RES_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[77]=row2.REFER_A_FRIEND_CNT == null ? null : 
                                    String.valueOf(row2.REFER_A_FRIEND_CNT);
                                    rowtFileOutputDelimited_1[78]=row2.TOTAL_GIFT_CARD_CNT == null ? null : 
                                    String.valueOf(row2.TOTAL_GIFT_CARD_CNT);
                                    rowtFileOutputDelimited_1[79]=row2.TOTAL_GIFT_CARD_AMT_USD == null ? null : 
                                    String.valueOf(row2.TOTAL_GIFT_CARD_AMT_USD);
                                    rowtFileOutputDelimited_1[80]=row2.LAST_GIFT_CARD_PURCHASE_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_GIFT_CARD_PURCHASE_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[81]=row2.LAST_GIFT_CARD_PURCHAS_AMT_USD == null ? null : 
                                    String.valueOf(row2.LAST_GIFT_CARD_PURCHAS_AMT_USD);
                                    rowtFileOutputDelimited_1[82]=row2.LAST_GIFT_CARD_PURCHASE_CURR == null ? null : 
                                    row2.LAST_GIFT_CARD_PURCHASE_CURR;
                                    rowtFileOutputDelimited_1[83]=row2.GIFT_CARD_CNT == null ? null : 
                                    String.valueOf(row2.GIFT_CARD_CNT);
                                    rowtFileOutputDelimited_1[84]=row2.LATE_RETURN_CNT == null ? null : 
                                    String.valueOf(row2.LATE_RETURN_CNT);
                                    rowtFileOutputDelimited_1[85]=row2.LAST_LATE_RETURN_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_LATE_RETURN_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[86]=row2.LAST_LATE_RETURN_MINUTES == null ? null : 
                                    String.valueOf(row2.LAST_LATE_RETURN_MINUTES);
                                    rowtFileOutputDelimited_1[87]=row2.LAST_LATE_RETURN_CHARGE == null ? null : 
                                    String.valueOf(row2.LAST_LATE_RETURN_CHARGE);
                                    rowtFileOutputDelimited_1[88]=row2.MAJOR_ACCIDENTS_CNT == null ? null : 
                                    String.valueOf(row2.MAJOR_ACCIDENTS_CNT);
                                    rowtFileOutputDelimited_1[89]=row2.MINOR_ACCIDENTS_CNT == null ? null : 
                                    String.valueOf(row2.MINOR_ACCIDENTS_CNT);
                                }
                                public void putValue_1(final row2Struct row2,String[] rowtFileOutputDelimited_1){
                                    rowtFileOutputDelimited_1[90]=row2.LAST_ACCIDENT_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_ACCIDENT_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[91]=row2.LAST_ACCIDENT_CLASSIFICATION == null ? null : 
                                    row2.LAST_ACCIDENT_CLASSIFICATION;
                                    rowtFileOutputDelimited_1[92]=row2.MEMBER_BEHAVIOR_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.MEMBER_BEHAVIOR_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[93]=row2.ZCORPORATE_CNT == null ? null : 
                                    String.valueOf(row2.ZCORPORATE_CNT);
                                    rowtFileOutputDelimited_1[94]=row2.CORPORATE_CNT == null ? null : 
                                    String.valueOf(row2.CORPORATE_CNT);
                                    rowtFileOutputDelimited_1[95]=row2.PERSONAL_CNT == null ? null : 
                                    String.valueOf(row2.PERSONAL_CNT);
                                    rowtFileOutputDelimited_1[96]=row2.EVPERSONAL_CNT == null ? null : 
                                    String.valueOf(row2.EVPERSONAL_CNT);
                                    rowtFileOutputDelimited_1[97]=row2.SPONSORED_CNT == null ? null : 
                                    String.valueOf(row2.SPONSORED_CNT);
                                    rowtFileOutputDelimited_1[98]=row2.EVSPONSORED_CNT == null ? null : 
                                    String.valueOf(row2.EVSPONSORED_CNT);
                                    rowtFileOutputDelimited_1[99]=row2.Z2B_LARGE_ACCOUNTS_CNT == null ? null : 
                                    String.valueOf(row2.Z2B_LARGE_ACCOUNTS_CNT);
                                    rowtFileOutputDelimited_1[100]=row2.SUBSCRIPTION_CNT == null ? null : 
                                    String.valueOf(row2.SUBSCRIPTION_CNT);
                                    rowtFileOutputDelimited_1[101]=row2.UNIV_DEPTS_CNT == null ? null : 
                                    String.valueOf(row2.UNIV_DEPTS_CNT);
                                    rowtFileOutputDelimited_1[102]=row2.VAN_RESTRICTED_CNT == null ? null : 
                                    String.valueOf(row2.VAN_RESTRICTED_CNT);
                                    rowtFileOutputDelimited_1[103]=row2.ACCESS_CNT == null ? null : 
                                    String.valueOf(row2.ACCESS_CNT);
                                    rowtFileOutputDelimited_1[104]=row2.ZCORPORATE_HIST_CNT == null ? null : 
                                    String.valueOf(row2.ZCORPORATE_HIST_CNT);
                                    rowtFileOutputDelimited_1[105]=row2.CORPORATE_HIST_CNT == null ? null : 
                                    String.valueOf(row2.CORPORATE_HIST_CNT);
                                    rowtFileOutputDelimited_1[106]=row2.PERSONAL_HIST_CNT == null ? null : 
                                    String.valueOf(row2.PERSONAL_HIST_CNT);
                                    rowtFileOutputDelimited_1[107]=row2.EVPERSONAL_HIST_CNT == null ? null : 
                                    String.valueOf(row2.EVPERSONAL_HIST_CNT);
                                    rowtFileOutputDelimited_1[108]=row2.SPONSORED_HIST_CNT == null ? null : 
                                    String.valueOf(row2.SPONSORED_HIST_CNT);
                                    rowtFileOutputDelimited_1[109]=row2.EVSPONSORED_HIST_CNT == null ? null : 
                                    String.valueOf(row2.EVSPONSORED_HIST_CNT);
                                    rowtFileOutputDelimited_1[110]=row2.Z2B_LARGE_ACCOUNTS_HIST_CNT == null ? null : 
                                    String.valueOf(row2.Z2B_LARGE_ACCOUNTS_HIST_CNT);
                                    rowtFileOutputDelimited_1[111]=row2.SUBSCRIPTION_HIST_CNT == null ? null : 
                                    String.valueOf(row2.SUBSCRIPTION_HIST_CNT);
                                    rowtFileOutputDelimited_1[112]=row2.UNIV_DEPTS_HIST_CNT == null ? null : 
                                    String.valueOf(row2.UNIV_DEPTS_HIST_CNT);
                                    rowtFileOutputDelimited_1[113]=row2.VAN_RESTRICTED_HIST_CNT == null ? null : 
                                    String.valueOf(row2.VAN_RESTRICTED_HIST_CNT);
                                    rowtFileOutputDelimited_1[114]=row2.ACCESS_HIST_CNT == null ? null : 
                                    String.valueOf(row2.ACCESS_HIST_CNT);
                                    rowtFileOutputDelimited_1[115]=row2.LAST_RES_SEARCH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_RES_SEARCH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[116]=row2.LAST_RES_SEARCH_SOURCE == null ? null : 
                                    row2.LAST_RES_SEARCH_SOURCE;
                                    rowtFileOutputDelimited_1[117]=row2.LAST_RES_SEARCH_COMPLETION_P == null ? null : 
                                    row2.LAST_RES_SEARCH_COMPLETION_P;
                                    rowtFileOutputDelimited_1[118]=row2.LAST_OVERNIGHT_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_OVERNIGHT_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[119]=row2.LAST_WKDAY_HRLY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKDAY_HRLY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[120]=row2.LAST_WKDAY_DAILY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKDAY_DAILY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[121]=row2.LAST_WKEND_HRLY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKEND_HRLY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[122]=row2.LAST_WKEND_DAILY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKEND_DAILY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[123]=row2.LAST_OVERNIGHT_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_OVERNIGHT_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[124]=row2.LAST_WKDAY_HRLY_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKDAY_HRLY_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[125]=row2.LAST_WKDAY_DAILY_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKDAY_DAILY_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[126]=row2.LAST_WKEND_HRLY_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKEND_HRLY_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[127]=row2.LAST_WKEND_DAILY_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_WKEND_DAILY_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[128]=row2.LAST_RES_SEARCH_TYPE == null ? null : 
                                    row2.LAST_RES_SEARCH_TYPE;
                                    rowtFileOutputDelimited_1[129]=row2.MEMBER_LAST_RES_REFRESH_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.MEMBER_LAST_RES_REFRESH_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[130]=row2.LAST_RESERVATION_ID == null ? null : 
                                    String.valueOf(row2.LAST_RESERVATION_ID);
                                    rowtFileOutputDelimited_1[131]=row2.RES_SOURCE == null ? null : 
                                    row2.RES_SOURCE;
                                    rowtFileOutputDelimited_1[132]=row2.RES_SOURCE_DESCRIPTION == null ? null : 
                                    row2.RES_SOURCE_DESCRIPTION;
                                    rowtFileOutputDelimited_1[133]=row2.FIRST_WKDAY_HRLY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_HRLY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[134]=row2.FIRST_WKEND_HRLY_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_HRLY_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[135]=row2.FIRST_RES_TYPE == null ? null : 
                                    row2.FIRST_RES_TYPE;
                                    rowtFileOutputDelimited_1[136]=row2.DAYS_FROM_JOIN_TO_FIRST_RES == null ? null : 
                                    String.valueOf(row2.DAYS_FROM_JOIN_TO_FIRST_RES);
                                    rowtFileOutputDelimited_1[137]=row2.FIRST_NPS_COHORT == null ? null : 
                                    row2.FIRST_NPS_COHORT;
                                    rowtFileOutputDelimited_1[138]=row2.LAST_NPS_COHORT == null ? null : 
                                    row2.LAST_NPS_COHORT;
                                    rowtFileOutputDelimited_1[139]=row2.NPS_SURVEY_CNT == null ? null : 
                                    String.valueOf(row2.NPS_SURVEY_CNT);
                                    rowtFileOutputDelimited_1[140]=row2.TOTAL_HOURS_1_TO_3MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_HOURS_1_TO_3MTHS);
                                    rowtFileOutputDelimited_1[141]=row2.TOTAL_HOURS_4_TO_6MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_HOURS_4_TO_6MTHS);
                                    rowtFileOutputDelimited_1[142]=row2.TOTAL_HOURS_7_TO_9MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_HOURS_7_TO_9MTHS);
                                    rowtFileOutputDelimited_1[143]=row2.TOTAL_HOURS_10_TO_12MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_HOURS_10_TO_12MTHS);
                                    rowtFileOutputDelimited_1[144]=row2.TOTAL_DISTANCE_1_TO_3MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_DISTANCE_1_TO_3MTHS);
                                    rowtFileOutputDelimited_1[145]=row2.TOTAL_DISTANCE_4_TO_6MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_DISTANCE_4_TO_6MTHS);
                                    rowtFileOutputDelimited_1[146]=row2.TOTAL_DISTANCE_7_TO_9MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_DISTANCE_7_TO_9MTHS);
                                    rowtFileOutputDelimited_1[147]=row2.TOTAL_DISTANCE_10_TO_12MTHS == null ? null : 
                                    String.valueOf(row2.TOTAL_DISTANCE_10_TO_12MTHS);
                                    rowtFileOutputDelimited_1[148]=row2.DISTANCE_UNITS == null ? null : 
                                    row2.DISTANCE_UNITS;
                                    rowtFileOutputDelimited_1[149]=row2.NEXT_FEE_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.NEXT_FEE_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[150]=row2.NEXT_FEE_CHARGE == null ? null : 
                                    String.valueOf(row2.NEXT_FEE_CHARGE);
                                    rowtFileOutputDelimited_1[151]=row2.NEXT_FEE_FREQ == null ? null : 
                                    row2.NEXT_FEE_FREQ;
                                    rowtFileOutputDelimited_1[152]=row2.FIRST_RES_SEARCH_SOURCE == null ? null : 
                                    row2.FIRST_RES_SEARCH_SOURCE;
                                    rowtFileOutputDelimited_1[153]=row2.FIRST_OTHER_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_OTHER_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[154]=row2.FIRST_NOSHOW_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_NOSHOW_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[155]=row2.FIRST_CANCELLATION_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_CANCELLATION_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[156]=row2.LAST_OTHER_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_OTHER_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[157]=row2.LAST_NOSHOW_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_NOSHOW_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[158]=row2.LAST_CANCELLATION_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.LAST_CANCELLATION_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[159]=row2.COMPLETED_RES_3MTHS_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_3MTHS_S);
                                    rowtFileOutputDelimited_1[160]=row2.COMPLETED_RES_6MTHS_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_6MTHS_S);
                                    rowtFileOutputDelimited_1[161]=row2.COMPLETED_RES_9MTHS_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_9MTHS_S);
                                    rowtFileOutputDelimited_1[162]=row2.COMPLETED_RES_1YEAR_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_1YEAR_S);
                                    rowtFileOutputDelimited_1[163]=row2.COMPLETED_RES_6MTHS_WRKDAY_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_6MTHS_WRKDAY_S);
                                    rowtFileOutputDelimited_1[164]=row2.COMPLETED_RES_1YEAR_WRKDAY_S == null ? null : 
                                    String.valueOf(row2.COMPLETED_RES_1YEAR_WRKDAY_S);
                                    rowtFileOutputDelimited_1[165]=row2.TOTAL_UP_REVENUE_3MTHS_S == null ? null : 
                                    String.valueOf(row2.TOTAL_UP_REVENUE_3MTHS_S);
                                    rowtFileOutputDelimited_1[166]=row2.TOTAL_UP_REVENUE_6MTHS_S == null ? null : 
                                    String.valueOf(row2.TOTAL_UP_REVENUE_6MTHS_S);
                                    rowtFileOutputDelimited_1[167]=row2.TOTAL_UP_REVENUE_9MTHS_S == null ? null : 
                                    String.valueOf(row2.TOTAL_UP_REVENUE_9MTHS_S);
                                    rowtFileOutputDelimited_1[168]=row2.TOTAL_UP_REVENUE_1YEAR_S == null ? null : 
                                    String.valueOf(row2.TOTAL_UP_REVENUE_1YEAR_S);
                                    rowtFileOutputDelimited_1[169]=row2.AVG_UP_REVENUE_3MTHS_S == null ? null : 
                                    String.valueOf(row2.AVG_UP_REVENUE_3MTHS_S);
                                    rowtFileOutputDelimited_1[170]=row2.AVG_UP_REVENUE_6MTHS_S == null ? null : 
                                    String.valueOf(row2.AVG_UP_REVENUE_6MTHS_S);
                                    rowtFileOutputDelimited_1[171]=row2.AVG_UP_REVENUE_9MTHS_S == null ? null : 
                                    String.valueOf(row2.AVG_UP_REVENUE_9MTHS_S);
                                    rowtFileOutputDelimited_1[172]=row2.AVG_UP_REVENUE_1YEAR_S == null ? null : 
                                    String.valueOf(row2.AVG_UP_REVENUE_1YEAR_S);
                                    rowtFileOutputDelimited_1[173]=row2.RES_SEARCH_3MTHS_S == null ? null : 
                                    String.valueOf(row2.RES_SEARCH_3MTHS_S);
                                    rowtFileOutputDelimited_1[174]=row2.RES_SEARCH_TURNDOWN_3MTHS_S == null ? null : 
                                    String.valueOf(row2.RES_SEARCH_TURNDOWN_3MTHS_S);
                                    rowtFileOutputDelimited_1[175]=row2.RES_SEARCH_COMPLETIONS_3MTHS_S == null ? null : 
                                    String.valueOf(row2.RES_SEARCH_COMPLETIONS_3MTHS_S);
                                    rowtFileOutputDelimited_1[176]=row2.NEXT_RES_DATE_S == null ? null : 
                                    FormatterUtils.format_Date(row2.NEXT_RES_DATE_S, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[177]=row2.RES_REFRESH_DATE_S == null ? null : 
                                    FormatterUtils.format_Date(row2.RES_REFRESH_DATE_S, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[178]=row2.CANCELED_RES_1YEAR == null ? null : 
                                    String.valueOf(row2.CANCELED_RES_1YEAR);
                                    rowtFileOutputDelimited_1[179]=row2.BILLED_NOSHOW_RES_1YEAR == null ? null : 
                                    String.valueOf(row2.BILLED_NOSHOW_RES_1YEAR);
                                }
                                public void putValue_2(final row2Struct row2,String[] rowtFileOutputDelimited_1){
                                    rowtFileOutputDelimited_1[180]=row2.TOTAL_RES_1YEAR == null ? null : 
                                    String.valueOf(row2.TOTAL_RES_1YEAR);
                                    rowtFileOutputDelimited_1[181]=row2.AFFILIATE_TYPE == null ? null : 
                                    row2.AFFILIATE_TYPE;
                                    rowtFileOutputDelimited_1[182]=row2.ANNIVERSARY_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.ANNIVERSARY_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[183]=row2.LAST_RES_RATE_PLAN_KEY == null ? null : 
                                    row2.LAST_RES_RATE_PLAN_KEY;
                                    rowtFileOutputDelimited_1[184]=row2.LAST_RES_VEHICLE_CLASS == null ? null : 
                                    row2.LAST_RES_VEHICLE_CLASS;
                                    rowtFileOutputDelimited_1[185]=row2.LAST_RES_VEHICLE_ID == null ? null : 
                                    String.valueOf(row2.LAST_RES_VEHICLE_ID);
                                    rowtFileOutputDelimited_1[186]=row2.ACTIVE_UNI_P == null ? null : 
                                    row2.ACTIVE_UNI_P;
                                    rowtFileOutputDelimited_1[187]=row2.CURRENT_MEMBER_P == null ? null : 
                                    row2.CURRENT_MEMBER_P;
                                    rowtFileOutputDelimited_1[188]=row2.FIRST_JOIN_ACCOUNT_ID == null ? null : 
                                    String.valueOf(row2.FIRST_JOIN_ACCOUNT_ID);
                                    rowtFileOutputDelimited_1[189]=row2.LAST_DIGIT_FIRST_ACCOUNT_ID == null ? null : 
                                    String.valueOf(row2.LAST_DIGIT_FIRST_ACCOUNT_ID);
                                    rowtFileOutputDelimited_1[190]=row2.FIRST_CORPORATE_ID == null ? null : 
                                    row2.FIRST_CORPORATE_ID;
                                    rowtFileOutputDelimited_1[191]=row2.CURRENT_SUSPENSION_REASON_ID == null ? null : 
                                    String.valueOf(row2.CURRENT_SUSPENSION_REASON_ID);
                                    rowtFileOutputDelimited_1[192]=row2.FIRST_APPLICATION_ID == null ? null : 
                                    String.valueOf(row2.FIRST_APPLICATION_ID);
                                    rowtFileOutputDelimited_1[193]=row2.FIRST_APP_IJD_SESSION_ID == null ? null : 
                                    row2.FIRST_APP_IJD_SESSION_ID;
                                    rowtFileOutputDelimited_1[194]=row2.FIRST_APPLICATION_IJD_P == null ? null : 
                                    row2.FIRST_APPLICATION_IJD_P;
                                    rowtFileOutputDelimited_1[195]=row2.FIRST_RES_TYPE_DAILY_HOURLY == null ? null : 
                                    row2.FIRST_RES_TYPE_DAILY_HOURLY;
                                    rowtFileOutputDelimited_1[196]=row2.FIRST_WKDAY_DAILY_AM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_DAILY_AM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[197]=row2.FIRST_WKDAY_DAILY_PM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKDAY_DAILY_PM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[198]=row2.FIRST_WKEND_DAILY_AM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_DAILY_AM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[199]=row2.FIRST_WKEND_DAILY_PM_START_RES == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WKEND_DAILY_PM_START_RES, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[200]=row2.FIRST_RES_SOURCE == null ? null : 
                                    row2.FIRST_RES_SOURCE;
                                    rowtFileOutputDelimited_1[201]=row2.FIRST_RES_SOURCE_DESC == null ? null : 
                                    row2.FIRST_RES_SOURCE_DESC;
                                    rowtFileOutputDelimited_1[202]=row2.FIRST_RES_VEHICLE_ID == null ? null : 
                                    String.valueOf(row2.FIRST_RES_VEHICLE_ID);
                                    rowtFileOutputDelimited_1[203]=row2.FIRST_RES_ZIPFLEET_ID == null ? null : 
                                    String.valueOf(row2.FIRST_RES_ZIPFLEET_ID);
                                    rowtFileOutputDelimited_1[204]=row2.FIRST_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[205]=row2.SECOND_RES_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.SECOND_RES_DATE, FeedFile.DF_DATETIME);
                                    rowtFileOutputDelimited_1[206]=row2.FIRST_WAIVER_START_DATE == null ? null : 
                                    FormatterUtils.format_Date(row2.FIRST_WAIVER_START_DATE, FeedFile.DF_DATETIME);
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_1 fileOutputDelimitedUtil_tFileOutputDelimited_1=new FileOutputDelimitedUtil_tFileOutputDelimited_1();
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.bulkLoadTempPath + "/" + globalMap.get("fileName"))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[207];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("|");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator("|");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\\","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_2{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_2,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.MEMBER_ID = 0;
					
							row1.AFFILIATE_ID_1 = null;
					
							row1.AFFILIATE_NAME_1 = null;
					
							row1.AFFILIATE_ID_2 = null;
					
							row1.AFFILIATE_NAME_2 = null;
					
							row1.AFFILIATE_ID_3 = null;
					
							row1.AFFILIATE_NAME_3 = null;
					
							row1.AFFILIATE_ID_4 = null;
					
							row1.AFFILIATE_NAME_4 = null;
					
							row1.AFFILIATE_ID_5 = null;
					
							row1.AFFILIATE_NAME_5 = null;
					
							row1.AFFILIATE_ID_6 = null;
					
							row1.AFFILIATE_NAME_6 = null;
					
							row1.AFFILIATE_ID_7 = null;
					
							row1.AFFILIATE_NAME_7 = null;
					
							row1.AFFILIATE_ID_8 = null;
					
							row1.AFFILIATE_NAME_8 = null;
					
							row1.AFFILIATE_ID_9 = null;
					
							row1.AFFILIATE_NAME_9 = null;
					
							row1.DELETED_DATE = null;
					
							row1.LAST_MODIFIED = null;
					
							row1.AFFILIATE_REFRESH_DATE = null;
					
							row1.WAIVER_ELIGIBLE_P = null;
					
							row1.PER_TRIP_WAIVER_ELIGIBLE_P = null;
					
							row1.CURRENT_WAIVER_PLAN_ID = null;
					
							row1.CURRENT_WAIVER_PLAN_NAME = null;
					
							row1.CURRENT_WAIVER_PLAN_FEE = null;
					
							row1.CURRENT_WAIVER_TIER = null;
					
							row1.CURRENT_WAIVER_DEDUCTIBLE = null;
					
							row1.CURRENT_W_AUTO_RENEW_P = null;
					
							row1.CURRENT_WAIVER_START_DATE = null;
					
							row1.CURRENT_WAIVER_END_DATE = null;
					
							row1.PER_TRIP_WAIVER_CNT = 0;
					
							row1.LAST_PER_TRIP_WAIVER_DATE = null;
					
							row1.EVER_HAD_ANY_WAIVER_P = null;
					
							row1.WAIVER_REFRESH_DATE = null;
					
							row1.DRIVER_RISK_TIER_INFO_P = null;
					
							row1.FIRST_RISK_TIER_KEY = null;
					
							row1.LAST_RISK_TIER_KEY = null;
					
							row1.FIRST_MIN_LEVEL = null;
					
							row1.LAST_MIN_LEVEL = null;
					
							row1.TOTAL_RISK_TIER_CHANGES = null;
					
							row1.TRIPS_COMPLETED = 0;
					
							row1.LAST_ACCIDENT_KARMA_DATE = null;
					
							row1.LAST_LIC_POINTS_KARMA_DATE = null;
					
							row1.DRIVER_RISK_REFRESH_DATE = null;
					
							row1.LAST_RES_DATE = null;
					
							row1.LAST_RES_TYPE = null;
					
							row1.DAYS_SINCE_LAST_DRIVE = null;
					
							row1.NEXT_RES_TYPE = null;
					
							row1.DAYS_UNTIL_NEXT_DRIVE = null;
					
							row1.FIRST_GAS_FILLUP_DATE = null;
					
							row1.FIRST_GAS_FILLUP_AMOUNT = null;
					
							row1.FIRST_GAS_FILLUP_CHARGE = null;
					
							row1.LAST_GAS_FILLUP_DATE = null;
					
							row1.LAST_GAS_FILLUP_AMOUNT = null;
					
							row1.LAST_GAS_FILLUP_CHARGE = null;
					
							row1.FILLUP_CNT = null;
					
							row1.WEX_REFRESH_DATE = null;
					
							row1.FIRST_NPS_RESPONSE_DATE = null;
					
							row1.FIRST_NPS_COMPLETE = null;
					
							row1.FIRST_NPS_SCORE = null;
					
							row1.LAST_NPS_RESPONSE_DATE = null;
					
							row1.LAST_NPS_COMPLETE = null;
					
							row1.LAST_NPS_SCORE = null;
					
							row1.NPS_SURVEY_REFRESH = null;
					
							row1.FIRST_RES_SEARCH_DATE = null;
					
							row1.FIRST_RES_SEARCH_COMPLETION_P = null;
					
							row1.FIRST_RES_LOCAL_START_DATE = null;
					
							row1.FIRST_OVERNIGHT_RES = null;
					
							row1.FIRST_WKDAY_HRLY_AM_START_RES = null;
					
							row1.FIRST_WKDAY_HRLY_PM_START_RES = null;
					
							row1.FIRST_WKEND_HRLY_AM_START_RES = null;
					
							row1.FIRST_WKEND_HRLY_PM_START_RES = null;
					
							row1.FIRST_WKDAY_DAILY_RES = null;
					
							row1.FIRST_WKEND_DAILY_RES = null;
					
							row1.MEMBER_FIRST_RES_REFRESH_DATE = null;
					
							row1.REFER_A_FRIEND_CNT = null;
					
							row1.TOTAL_GIFT_CARD_CNT = null;
					
							row1.TOTAL_GIFT_CARD_AMT_USD = null;
					
							row1.LAST_GIFT_CARD_PURCHASE_DATE = null;
					
							row1.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
					
							row1.LAST_GIFT_CARD_PURCHASE_CURR = null;
					
							row1.GIFT_CARD_CNT = null;
					
							row1.LATE_RETURN_CNT = null;
					
							row1.LAST_LATE_RETURN_DATE = null;
					
							row1.LAST_LATE_RETURN_MINUTES = null;
					
							row1.LAST_LATE_RETURN_CHARGE = null;
					
							row1.MAJOR_ACCIDENTS_CNT = null;
					
							row1.MINOR_ACCIDENTS_CNT = null;
					
							row1.LAST_ACCIDENT_DATE = null;
					
							row1.LAST_ACCIDENT_CLASSIFICATION = null;
					
							row1.MEMBER_BEHAVIOR_REFRESH_DATE = null;
					
							row1.ZCORPORATE_CNT = null;
					
							row1.CORPORATE_CNT = null;
					
							row1.PERSONAL_CNT = null;
					
							row1.EVPERSONAL_CNT = null;
					
							row1.SPONSORED_CNT = null;
					
							row1.EVSPONSORED_CNT = null;
					
							row1.Z2B_LARGE_ACCOUNTS_CNT = null;
					
				}else{
					
					for(int i_tFileInputDelimited_2=0;i_tFileInputDelimited_2<rowtFileInputDelimited_2.length;i_tFileInputDelimited_2++){
						rowtFileInputDelimited_2[i_tFileInputDelimited_2]=rowtFileInputDelimited_2[i_tFileInputDelimited_2].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.MEMBER_ID = ParserUtils.parseTo_long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'MEMBER_ID' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							row1.MEMBER_ID = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_1 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_1 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_1 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_1 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_2 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_2 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_2 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_2 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_3 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_3 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_3 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_3 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_4 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_4 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_4 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_4 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_5 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_5 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_5 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_5 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_6 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_6 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_6 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_6 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_6 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_7 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_7 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_7 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_7 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_7 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_8 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_8 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_8 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_8 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_8 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AFFILIATE_ID_9 = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_ID_9 = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_ID_9 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_NAME_9 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_NAME_9 = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.DELETED_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.DELETED_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.DELETED_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_MODIFIED = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_MODIFIED = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_MODIFIED = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.AFFILIATE_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AFFILIATE_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.AFFILIATE_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.WAIVER_ELIGIBLE_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.WAIVER_ELIGIBLE_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.PER_TRIP_WAIVER_ELIGIBLE_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.PER_TRIP_WAIVER_ELIGIBLE_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CURRENT_WAIVER_PLAN_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_PLAN_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_PLAN_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.CURRENT_WAIVER_PLAN_NAME = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.CURRENT_WAIVER_PLAN_NAME = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CURRENT_WAIVER_PLAN_FEE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_PLAN_FEE = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_PLAN_FEE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CURRENT_WAIVER_TIER = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_TIER = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_TIER = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CURRENT_WAIVER_DEDUCTIBLE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_DEDUCTIBLE = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_DEDUCTIBLE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.CURRENT_W_AUTO_RENEW_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.CURRENT_W_AUTO_RENEW_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.CURRENT_WAIVER_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_START_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.CURRENT_WAIVER_END_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_WAIVER_END_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_WAIVER_END_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.PER_TRIP_WAIVER_CNT = ParserUtils.parseTo_int(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'PER_TRIP_WAIVER_CNT' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							row1.PER_TRIP_WAIVER_CNT = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_PER_TRIP_WAIVER_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_PER_TRIP_WAIVER_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_PER_TRIP_WAIVER_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.EVER_HAD_ANY_WAIVER_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.EVER_HAD_ANY_WAIVER_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.WAIVER_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.WAIVER_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.WAIVER_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.DRIVER_RISK_TIER_INFO_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.DRIVER_RISK_TIER_INFO_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RISK_TIER_KEY = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RISK_TIER_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RISK_TIER_KEY = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RISK_TIER_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_MIN_LEVEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_MIN_LEVEL = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_MIN_LEVEL = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_MIN_LEVEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_MIN_LEVEL = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_MIN_LEVEL = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_RISK_TIER_CHANGES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_RISK_TIER_CHANGES = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_RISK_TIER_CHANGES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TRIPS_COMPLETED = ParserUtils.parseTo_int(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'TRIPS_COMPLETED' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							row1.TRIPS_COMPLETED = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_ACCIDENT_KARMA_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_ACCIDENT_KARMA_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_ACCIDENT_KARMA_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_LIC_POINTS_KARMA_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_LIC_POINTS_KARMA_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_LIC_POINTS_KARMA_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.DRIVER_RISK_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.DRIVER_RISK_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.DRIVER_RISK_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_TYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.DAYS_SINCE_LAST_DRIVE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.DAYS_SINCE_LAST_DRIVE = null;
    									
    								}
									
									
							
						
						}else{
							row1.DAYS_SINCE_LAST_DRIVE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.NEXT_RES_TYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.NEXT_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.DAYS_UNTIL_NEXT_DRIVE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.DAYS_UNTIL_NEXT_DRIVE = null;
    									
    								}
									
									
							
						
						}else{
							row1.DAYS_UNTIL_NEXT_DRIVE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_GAS_FILLUP_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_GAS_FILLUP_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_GAS_FILLUP_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_GAS_FILLUP_AMOUNT = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_GAS_FILLUP_AMOUNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_GAS_FILLUP_AMOUNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_GAS_FILLUP_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_GAS_FILLUP_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_GAS_FILLUP_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_GAS_FILLUP_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_GAS_FILLUP_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_GAS_FILLUP_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_GAS_FILLUP_AMOUNT = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_GAS_FILLUP_AMOUNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_GAS_FILLUP_AMOUNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_GAS_FILLUP_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_GAS_FILLUP_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_GAS_FILLUP_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FILLUP_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FILLUP_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.FILLUP_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.WEX_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.WEX_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.WEX_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_NPS_RESPONSE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_NPS_RESPONSE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_NPS_RESPONSE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_NPS_COMPLETE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_NPS_COMPLETE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_NPS_SCORE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_NPS_SCORE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_NPS_SCORE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_NPS_RESPONSE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_NPS_RESPONSE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_NPS_RESPONSE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_NPS_COMPLETE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_NPS_COMPLETE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_NPS_SCORE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_NPS_SCORE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_NPS_SCORE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.NPS_SURVEY_REFRESH = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.NPS_SURVEY_REFRESH = null;
    									
    								}
									
									
							
						
						}else{
							row1.NPS_SURVEY_REFRESH = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_RES_SEARCH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_RES_SEARCH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_RES_SEARCH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_SEARCH_COMPLETION_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_SEARCH_COMPLETION_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_RES_LOCAL_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_RES_LOCAL_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_RES_LOCAL_START_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_OVERNIGHT_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_OVERNIGHT_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_OVERNIGHT_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_HRLY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_HRLY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_HRLY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_HRLY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_HRLY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_HRLY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_HRLY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_HRLY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_HRLY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_HRLY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_HRLY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_HRLY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.MEMBER_FIRST_RES_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.MEMBER_FIRST_RES_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.MEMBER_FIRST_RES_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.REFER_A_FRIEND_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.REFER_A_FRIEND_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.REFER_A_FRIEND_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_GIFT_CARD_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_GIFT_CARD_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_GIFT_CARD_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_GIFT_CARD_AMT_USD = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_GIFT_CARD_AMT_USD = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_GIFT_CARD_AMT_USD = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_GIFT_CARD_PURCHASE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_GIFT_CARD_PURCHASE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_GIFT_CARD_PURCHASE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_GIFT_CARD_PURCHAS_AMT_USD = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_GIFT_CARD_PURCHAS_AMT_USD = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_GIFT_CARD_PURCHASE_CURR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_GIFT_CARD_PURCHASE_CURR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.GIFT_CARD_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.GIFT_CARD_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.GIFT_CARD_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LATE_RETURN_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LATE_RETURN_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.LATE_RETURN_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_LATE_RETURN_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_LATE_RETURN_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_LATE_RETURN_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_LATE_RETURN_MINUTES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_LATE_RETURN_MINUTES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_LATE_RETURN_MINUTES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_LATE_RETURN_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_LATE_RETURN_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_LATE_RETURN_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.MAJOR_ACCIDENTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.MAJOR_ACCIDENTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.MAJOR_ACCIDENTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.MINOR_ACCIDENTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.MINOR_ACCIDENTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.MINOR_ACCIDENTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_ACCIDENT_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_ACCIDENT_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_ACCIDENT_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_ACCIDENT_CLASSIFICATION = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_ACCIDENT_CLASSIFICATION = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.MEMBER_BEHAVIOR_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.MEMBER_BEHAVIOR_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.MEMBER_BEHAVIOR_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.ZCORPORATE_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.ZCORPORATE_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.ZCORPORATE_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CORPORATE_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CORPORATE_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.CORPORATE_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.PERSONAL_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.PERSONAL_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.PERSONAL_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.EVPERSONAL_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.EVPERSONAL_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.EVPERSONAL_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.SPONSORED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.SPONSORED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.SPONSORED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.EVSPONSORED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.EVSPONSORED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.EVSPONSORED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.Z2B_LARGE_ACCOUNTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.Z2B_LARGE_ACCOUNTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.Z2B_LARGE_ACCOUNTS_CNT = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_2.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_2,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.SUBSCRIPTION_CNT = null;
					
							row1.UNIV_DEPTS_CNT = null;
					
							row1.VAN_RESTRICTED_CNT = null;
					
							row1.ACCESS_CNT = null;
					
							row1.ZCORPORATE_HIST_CNT = null;
					
							row1.CORPORATE_HIST_CNT = null;
					
							row1.PERSONAL_HIST_CNT = null;
					
							row1.EVPERSONAL_HIST_CNT = null;
					
							row1.SPONSORED_HIST_CNT = null;
					
							row1.EVSPONSORED_HIST_CNT = null;
					
							row1.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
					
							row1.SUBSCRIPTION_HIST_CNT = null;
					
							row1.UNIV_DEPTS_HIST_CNT = null;
					
							row1.VAN_RESTRICTED_HIST_CNT = null;
					
							row1.ACCESS_HIST_CNT = null;
					
							row1.LAST_RES_SEARCH_DATE = null;
					
							row1.LAST_RES_SEARCH_SOURCE = null;
					
							row1.LAST_RES_SEARCH_COMPLETION_P = null;
					
							row1.LAST_OVERNIGHT_RES = null;
					
							row1.LAST_WKDAY_HRLY_RES = null;
					
							row1.LAST_WKDAY_DAILY_RES = null;
					
							row1.LAST_WKEND_HRLY_RES = null;
					
							row1.LAST_WKEND_DAILY_RES = null;
					
							row1.LAST_OVERNIGHT_RES_DATE = null;
					
							row1.LAST_WKDAY_HRLY_RES_DATE = null;
					
							row1.LAST_WKDAY_DAILY_RES_DATE = null;
					
							row1.LAST_WKEND_HRLY_RES_DATE = null;
					
							row1.LAST_WKEND_DAILY_RES_DATE = null;
					
							row1.LAST_RES_SEARCH_TYPE = null;
					
							row1.MEMBER_LAST_RES_REFRESH_DATE = null;
					
							row1.LAST_RESERVATION_ID = null;
					
							row1.RES_SOURCE = null;
					
							row1.RES_SOURCE_DESCRIPTION = null;
					
							row1.FIRST_WKDAY_HRLY_RES = null;
					
							row1.FIRST_WKEND_HRLY_RES = null;
					
							row1.FIRST_RES_TYPE = null;
					
							row1.DAYS_FROM_JOIN_TO_FIRST_RES = null;
					
							row1.FIRST_NPS_COHORT = null;
					
							row1.LAST_NPS_COHORT = null;
					
							row1.NPS_SURVEY_CNT = null;
					
							row1.TOTAL_HOURS_1_TO_3MTHS = null;
					
							row1.TOTAL_HOURS_4_TO_6MTHS = null;
					
							row1.TOTAL_HOURS_7_TO_9MTHS = null;
					
							row1.TOTAL_HOURS_10_TO_12MTHS = null;
					
							row1.TOTAL_DISTANCE_1_TO_3MTHS = null;
					
							row1.TOTAL_DISTANCE_4_TO_6MTHS = null;
					
							row1.TOTAL_DISTANCE_7_TO_9MTHS = null;
					
							row1.TOTAL_DISTANCE_10_TO_12MTHS = null;
					
							row1.DISTANCE_UNITS = null;
					
							row1.NEXT_FEE_DATE = null;
					
							row1.NEXT_FEE_CHARGE = null;
					
							row1.NEXT_FEE_FREQ = null;
					
							row1.FIRST_RES_SEARCH_SOURCE = null;
					
							row1.FIRST_OTHER_RES = null;
					
							row1.FIRST_NOSHOW_RES = null;
					
							row1.FIRST_CANCELLATION_RES = null;
					
							row1.LAST_OTHER_RES = null;
					
							row1.LAST_NOSHOW_RES = null;
					
							row1.LAST_CANCELLATION_RES = null;
					
							row1.COMPLETED_RES_3MTHS_S = null;
					
							row1.COMPLETED_RES_6MTHS_S = null;
					
							row1.COMPLETED_RES_9MTHS_S = null;
					
							row1.COMPLETED_RES_1YEAR_S = null;
					
							row1.COMPLETED_RES_6MTHS_WRKDAY_S = null;
					
							row1.COMPLETED_RES_1YEAR_WRKDAY_S = null;
					
							row1.TOTAL_UP_REVENUE_3MTHS_S = null;
					
							row1.TOTAL_UP_REVENUE_6MTHS_S = null;
					
							row1.TOTAL_UP_REVENUE_9MTHS_S = null;
					
							row1.TOTAL_UP_REVENUE_1YEAR_S = null;
					
							row1.AVG_UP_REVENUE_3MTHS_S = null;
					
							row1.AVG_UP_REVENUE_6MTHS_S = null;
					
							row1.AVG_UP_REVENUE_9MTHS_S = null;
					
							row1.AVG_UP_REVENUE_1YEAR_S = null;
					
							row1.RES_SEARCH_3MTHS_S = null;
					
							row1.RES_SEARCH_TURNDOWN_3MTHS_S = null;
					
							row1.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
					
							row1.NEXT_RES_DATE_S = null;
					
							row1.RES_REFRESH_DATE_S = null;
					
							row1.CANCELED_RES_1YEAR = null;
					
							row1.BILLED_NOSHOW_RES_1YEAR = null;
					
							row1.TOTAL_RES_1YEAR = null;
					
							row1.AFFILIATE_TYPE = null;
					
							row1.ANNIVERSARY_DATE = null;
					
							row1.LAST_RES_RATE_PLAN_KEY = null;
					
							row1.LAST_RES_VEHICLE_CLASS = null;
					
							row1.LAST_RES_VEHICLE_ID = null;
					
							row1.ACTIVE_UNI_P = null;
					
							row1.CURRENT_MEMBER_P = null;
					
							row1.FIRST_JOIN_ACCOUNT_ID = null;
					
							row1.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
					
							row1.FIRST_CORPORATE_ID = null;
					
							row1.CURRENT_SUSPENSION_REASON_ID = null;
					
							row1.FIRST_APPLICATION_ID = null;
					
							row1.FIRST_APP_IJD_SESSION_ID = null;
					
							row1.FIRST_APPLICATION_IJD_P = null;
					
							row1.FIRST_RES_TYPE_DAILY_HOURLY = null;
					
							row1.FIRST_WKDAY_DAILY_AM_START_RES = null;
					
							row1.FIRST_WKDAY_DAILY_PM_START_RES = null;
					
							row1.FIRST_WKEND_DAILY_AM_START_RES = null;
					
							row1.FIRST_WKEND_DAILY_PM_START_RES = null;
					
				}else{
					
					for(int i_tFileInputDelimited_2=0;i_tFileInputDelimited_2<rowtFileInputDelimited_2.length;i_tFileInputDelimited_2++){
						rowtFileInputDelimited_2[i_tFileInputDelimited_2]=rowtFileInputDelimited_2[i_tFileInputDelimited_2].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.SUBSCRIPTION_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.SUBSCRIPTION_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.SUBSCRIPTION_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.UNIV_DEPTS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.UNIV_DEPTS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.UNIV_DEPTS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.VAN_RESTRICTED_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.VAN_RESTRICTED_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.VAN_RESTRICTED_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.ACCESS_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.ACCESS_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.ACCESS_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.ZCORPORATE_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.ZCORPORATE_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.ZCORPORATE_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CORPORATE_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CORPORATE_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.CORPORATE_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.PERSONAL_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.PERSONAL_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.PERSONAL_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.EVPERSONAL_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.EVPERSONAL_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.EVPERSONAL_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.SPONSORED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.SPONSORED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.SPONSORED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.EVSPONSORED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.EVSPONSORED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.EVSPONSORED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.Z2B_LARGE_ACCOUNTS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.Z2B_LARGE_ACCOUNTS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.SUBSCRIPTION_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.SUBSCRIPTION_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.SUBSCRIPTION_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.UNIV_DEPTS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.UNIV_DEPTS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.UNIV_DEPTS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.VAN_RESTRICTED_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.VAN_RESTRICTED_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.VAN_RESTRICTED_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.ACCESS_HIST_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.ACCESS_HIST_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.ACCESS_HIST_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_RES_SEARCH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_RES_SEARCH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_RES_SEARCH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_SEARCH_SOURCE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_SEARCH_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_SEARCH_COMPLETION_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_SEARCH_COMPLETION_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_OVERNIGHT_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_OVERNIGHT_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_OVERNIGHT_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 119;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKDAY_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKDAY_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKDAY_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 120;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKDAY_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKDAY_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKDAY_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 121;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKEND_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKEND_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKEND_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 122;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKEND_DAILY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKEND_DAILY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKEND_DAILY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 123;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_OVERNIGHT_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_OVERNIGHT_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_OVERNIGHT_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 124;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKDAY_HRLY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKDAY_HRLY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKDAY_HRLY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 125;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKDAY_DAILY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKDAY_DAILY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKDAY_DAILY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 126;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKEND_HRLY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKEND_HRLY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKEND_HRLY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 127;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_WKEND_DAILY_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_WKEND_DAILY_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_WKEND_DAILY_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 128;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_SEARCH_TYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_SEARCH_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 129;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.MEMBER_LAST_RES_REFRESH_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.MEMBER_LAST_RES_REFRESH_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.MEMBER_LAST_RES_REFRESH_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 130;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_RESERVATION_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_RESERVATION_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_RESERVATION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 131;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.RES_SOURCE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.RES_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 132;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.RES_SOURCE_DESCRIPTION = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.RES_SOURCE_DESCRIPTION = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 133;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 134;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_HRLY_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_HRLY_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_HRLY_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 135;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_TYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 136;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.DAYS_FROM_JOIN_TO_FIRST_RES = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.DAYS_FROM_JOIN_TO_FIRST_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.DAYS_FROM_JOIN_TO_FIRST_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 137;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_NPS_COHORT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_NPS_COHORT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 138;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_NPS_COHORT = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_NPS_COHORT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 139;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.NPS_SURVEY_CNT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.NPS_SURVEY_CNT = null;
    									
    								}
									
									
							
						
						}else{
							row1.NPS_SURVEY_CNT = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 140;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_HOURS_1_TO_3MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_HOURS_1_TO_3MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_HOURS_1_TO_3MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 141;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_HOURS_4_TO_6MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_HOURS_4_TO_6MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_HOURS_4_TO_6MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 142;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_HOURS_7_TO_9MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_HOURS_7_TO_9MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_HOURS_7_TO_9MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 143;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_HOURS_10_TO_12MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_HOURS_10_TO_12MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_HOURS_10_TO_12MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 144;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_DISTANCE_1_TO_3MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_DISTANCE_1_TO_3MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_DISTANCE_1_TO_3MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 145;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_DISTANCE_4_TO_6MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_DISTANCE_4_TO_6MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_DISTANCE_4_TO_6MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 146;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_DISTANCE_7_TO_9MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_DISTANCE_7_TO_9MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_DISTANCE_7_TO_9MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 147;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_DISTANCE_10_TO_12MTHS = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_DISTANCE_10_TO_12MTHS = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_DISTANCE_10_TO_12MTHS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 148;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.DISTANCE_UNITS = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.DISTANCE_UNITS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 149;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.NEXT_FEE_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.NEXT_FEE_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.NEXT_FEE_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 150;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.NEXT_FEE_CHARGE = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.NEXT_FEE_CHARGE = null;
    									
    								}
									
									
							
						
						}else{
							row1.NEXT_FEE_CHARGE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 151;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.NEXT_FEE_FREQ = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.NEXT_FEE_FREQ = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 152;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_SEARCH_SOURCE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_SEARCH_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 153;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_OTHER_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_OTHER_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_OTHER_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 154;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_NOSHOW_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_NOSHOW_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_NOSHOW_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 155;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_CANCELLATION_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_CANCELLATION_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_CANCELLATION_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 156;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_OTHER_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_OTHER_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_OTHER_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 157;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_NOSHOW_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_NOSHOW_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_NOSHOW_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 158;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.LAST_CANCELLATION_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_CANCELLATION_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_CANCELLATION_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 159;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 160;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_6MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 161;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_9MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 162;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_1YEAR_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 163;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_6MTHS_WRKDAY_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_6MTHS_WRKDAY_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_6MTHS_WRKDAY_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 164;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.COMPLETED_RES_1YEAR_WRKDAY_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.COMPLETED_RES_1YEAR_WRKDAY_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.COMPLETED_RES_1YEAR_WRKDAY_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 165;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_UP_REVENUE_3MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_UP_REVENUE_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_UP_REVENUE_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 166;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_UP_REVENUE_6MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_UP_REVENUE_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_UP_REVENUE_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 167;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_UP_REVENUE_9MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_UP_REVENUE_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_UP_REVENUE_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 168;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_UP_REVENUE_1YEAR_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_UP_REVENUE_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_UP_REVENUE_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 169;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AVG_UP_REVENUE_3MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AVG_UP_REVENUE_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.AVG_UP_REVENUE_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 170;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AVG_UP_REVENUE_6MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AVG_UP_REVENUE_6MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.AVG_UP_REVENUE_6MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 171;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AVG_UP_REVENUE_9MTHS_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AVG_UP_REVENUE_9MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.AVG_UP_REVENUE_9MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 172;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.AVG_UP_REVENUE_1YEAR_S = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.AVG_UP_REVENUE_1YEAR_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.AVG_UP_REVENUE_1YEAR_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 173;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.RES_SEARCH_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.RES_SEARCH_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.RES_SEARCH_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 174;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.RES_SEARCH_TURNDOWN_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.RES_SEARCH_TURNDOWN_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.RES_SEARCH_TURNDOWN_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 175;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.RES_SEARCH_COMPLETIONS_3MTHS_S = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.RES_SEARCH_COMPLETIONS_3MTHS_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 176;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.NEXT_RES_DATE_S = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.NEXT_RES_DATE_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.NEXT_RES_DATE_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 177;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.RES_REFRESH_DATE_S = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.RES_REFRESH_DATE_S = null;
    									
    								}
									
									
							
						
						}else{
							row1.RES_REFRESH_DATE_S = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 178;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CANCELED_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CANCELED_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							row1.CANCELED_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 179;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.BILLED_NOSHOW_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.BILLED_NOSHOW_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							row1.BILLED_NOSHOW_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 180;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.TOTAL_RES_1YEAR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.TOTAL_RES_1YEAR = null;
    									
    								}
									
									
							
						
						}else{
							row1.TOTAL_RES_1YEAR = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 181;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.AFFILIATE_TYPE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.AFFILIATE_TYPE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 182;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.ANNIVERSARY_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.ANNIVERSARY_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.ANNIVERSARY_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 183;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_RATE_PLAN_KEY = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_RATE_PLAN_KEY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 184;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.LAST_RES_VEHICLE_CLASS = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.LAST_RES_VEHICLE_CLASS = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 185;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_RES_VEHICLE_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_RES_VEHICLE_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_RES_VEHICLE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 186;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.ACTIVE_UNI_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.ACTIVE_UNI_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 187;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.CURRENT_MEMBER_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.CURRENT_MEMBER_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 188;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_JOIN_ACCOUNT_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_JOIN_ACCOUNT_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_JOIN_ACCOUNT_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 189;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.LAST_DIGIT_FIRST_ACCOUNT_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.LAST_DIGIT_FIRST_ACCOUNT_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 190;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_CORPORATE_ID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_CORPORATE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 191;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.CURRENT_SUSPENSION_REASON_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.CURRENT_SUSPENSION_REASON_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.CURRENT_SUSPENSION_REASON_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 192;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_APPLICATION_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_APPLICATION_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_APPLICATION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 193;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_APP_IJD_SESSION_ID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_APP_IJD_SESSION_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 194;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_APPLICATION_IJD_P = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_APPLICATION_IJD_P = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 195;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_TYPE_DAILY_HOURLY = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_TYPE_DAILY_HOURLY = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 196;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_DAILY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_DAILY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_DAILY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 197;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKDAY_DAILY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKDAY_DAILY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKDAY_DAILY_PM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 198;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_DAILY_AM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_DAILY_AM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_DAILY_AM_START_RES = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 199;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WKEND_DAILY_PM_START_RES = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WKEND_DAILY_PM_START_RES = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WKEND_DAILY_PM_START_RES = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_2.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn_2(String[] rowtFileInputDelimited_2,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.FIRST_RES_SOURCE = null;
					
							row1.FIRST_RES_SOURCE_DESC = null;
					
							row1.FIRST_RES_VEHICLE_ID = null;
					
							row1.FIRST_RES_ZIPFLEET_ID = null;
					
							row1.FIRST_RES_DATE = null;
					
							row1.SECOND_RES_DATE = null;
					
							row1.FIRST_WAIVER_START_DATE = null;
					
				}else{
					
					for(int i_tFileInputDelimited_2=0;i_tFileInputDelimited_2<rowtFileInputDelimited_2.length;i_tFileInputDelimited_2++){
						rowtFileInputDelimited_2[i_tFileInputDelimited_2]=rowtFileInputDelimited_2[i_tFileInputDelimited_2].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 200;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_SOURCE = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_SOURCE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 201;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.FIRST_RES_SOURCE_DESC = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.FIRST_RES_SOURCE_DESC = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 202;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_RES_VEHICLE_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_RES_VEHICLE_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_RES_VEHICLE_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 203;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.FIRST_RES_ZIPFLEET_ID = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_RES_ZIPFLEET_ID = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_RES_ZIPFLEET_ID = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 204;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 205;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.SECOND_RES_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.SECOND_RES_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.SECOND_RES_DATE = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 206;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.FIRST_WAIVER_START_DATE = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.FIRST_WAIVER_START_DATE = null;
    									
    								}
									
									
							
						
						}else{
							row1.FIRST_WAIVER_START_DATE = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_2.length;
 					if(filedsum < (207 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (207 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_2,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_2,row1 );
					
						valueToConn_1(rowtFileInputDelimited_2,row1 );
					
						valueToConn_2(rowtFileInputDelimited_2,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2  = new RowHelper_tFileInputDelimited_2();
			
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
	        			java.util.zip.ZipInputStream zis_tFileInputDelimited_2 = null;
	        			try {
		        			if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
		        				zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_2));
		        			}else{
		        				zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2))));
		        			}
	        			} catch(java.lang.Exception e) {
	        				
								
								System.err.println(e.getMessage());
							
	        			}
	        			java.util.zip.ZipEntry entry_tFileInputDelimited_2 = null;
		        
				        while (true) {
			        		try {
	        					entry_tFileInputDelimited_2 = zis_tFileInputDelimited_2.getNextEntry();
	        				} catch(java.lang.Exception e) {
	        					
									
									System.err.println(e.getMessage());
									break;
								
	        				}
	        				if(entry_tFileInputDelimited_2 == null) {
								break;
							}
	        				if(entry_tFileInputDelimited_2.isDirectory()){ //directory
	        					continue;
	        				}
	        				String[] rowtFileInputDelimited_2=null;
	        				int currentLinetFileInputDelimited_2 = 0;
	        				int outputLinetFileInputDelimited_2 = 0;
	        				try {//TD110 begin
	        					csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(zis_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row1 = new row1Struct();
								try {			
									
			rowHelper_tFileInputDelimited_2.valueToConn(rowtFileInputDelimited_2, row1 );
		
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row2.MEMBER_ID = row1.MEMBER_ID;
row2.AFFILIATE_ID_1 = row1.AFFILIATE_ID_1;
row2.AFFILIATE_NAME_1 = StringUtils.trimToNull(row1.AFFILIATE_NAME_1);
row2.AFFILIATE_ID_2 = row1.AFFILIATE_ID_2;
row2.AFFILIATE_NAME_2 = StringUtils.trimToNull(row1.AFFILIATE_NAME_2);
row2.AFFILIATE_ID_3 = row1.AFFILIATE_ID_3;
row2.AFFILIATE_NAME_3 = StringUtils.trimToNull(row1.AFFILIATE_NAME_3);
row2.AFFILIATE_ID_4 = row1.AFFILIATE_ID_4;
row2.AFFILIATE_NAME_4 = StringUtils.trimToNull(row1.AFFILIATE_NAME_4);
row2.AFFILIATE_ID_5 = row1.AFFILIATE_ID_5;
row2.AFFILIATE_NAME_5 = StringUtils.trimToNull(row1.AFFILIATE_NAME_5);
row2.AFFILIATE_ID_6 = row1.AFFILIATE_ID_6;
row2.AFFILIATE_NAME_6 = StringUtils.trimToNull(row1.AFFILIATE_NAME_6);
row2.AFFILIATE_ID_7 = row1.AFFILIATE_ID_7;
row2.AFFILIATE_NAME_7 = StringUtils.trimToNull(row1.AFFILIATE_NAME_7);
row2.AFFILIATE_ID_8 = row1.AFFILIATE_ID_8;
row2.AFFILIATE_NAME_8 = StringUtils.trimToNull(row1.AFFILIATE_NAME_8);
row2.AFFILIATE_ID_9 = row1.AFFILIATE_ID_9;
row2.AFFILIATE_NAME_9 = StringUtils.trimToNull(row1.AFFILIATE_NAME_9);
row2.DELETED_DATE = row1.DELETED_DATE;
row2.LAST_MODIFIED = row1.LAST_MODIFIED;
row2.AFFILIATE_REFRESH_DATE = row1.AFFILIATE_REFRESH_DATE;
row2.WAIVER_ELIGIBLE_P = BooleanUtils.boolChar(row1.WAIVER_ELIGIBLE_P);
row2.PER_TRIP_WAIVER_ELIGIBLE_P = BooleanUtils.boolChar(row1.PER_TRIP_WAIVER_ELIGIBLE_P);
row2.CURRENT_WAIVER_PLAN_ID = row1.CURRENT_WAIVER_PLAN_ID;
row2.CURRENT_WAIVER_PLAN_NAME = StringUtils.trimToNull(row1.CURRENT_WAIVER_PLAN_NAME);
row2.CURRENT_WAIVER_PLAN_FEE = row1.CURRENT_WAIVER_PLAN_FEE;
row2.CURRENT_WAIVER_TIER = row1.CURRENT_WAIVER_TIER;
row2.CURRENT_WAIVER_DEDUCTIBLE = row1.CURRENT_WAIVER_DEDUCTIBLE;
row2.CURRENT_W_AUTO_RENEW_P = BooleanUtils.boolChar(row1.CURRENT_W_AUTO_RENEW_P);
row2.CURRENT_WAIVER_START_DATE = row1.CURRENT_WAIVER_START_DATE;
row2.CURRENT_WAIVER_END_DATE = row1.CURRENT_WAIVER_END_DATE;
row2.PER_TRIP_WAIVER_CNT = row1.PER_TRIP_WAIVER_CNT;
row2.LAST_PER_TRIP_WAIVER_DATE = row1.LAST_PER_TRIP_WAIVER_DATE;
row2.EVER_HAD_ANY_WAIVER_P = BooleanUtils.boolChar(row1.EVER_HAD_ANY_WAIVER_P);
row2.WAIVER_REFRESH_DATE = row1.WAIVER_REFRESH_DATE;
row2.DRIVER_RISK_TIER_INFO_P = BooleanUtils.boolChar(row1.DRIVER_RISK_TIER_INFO_P);
row2.FIRST_RISK_TIER_KEY = StringUtils.trimToNull(row1.FIRST_RISK_TIER_KEY);
row2.LAST_RISK_TIER_KEY = StringUtils.trimToNull(row1.LAST_RISK_TIER_KEY);
row2.FIRST_MIN_LEVEL = row1.FIRST_MIN_LEVEL;
row2.LAST_MIN_LEVEL = row1.LAST_MIN_LEVEL;
row2.TOTAL_RISK_TIER_CHANGES = row1.TOTAL_RISK_TIER_CHANGES;
row2.TRIPS_COMPLETED = row1.TRIPS_COMPLETED;
row2.LAST_ACCIDENT_KARMA_DATE = row1.LAST_ACCIDENT_KARMA_DATE;
row2.LAST_LIC_POINTS_KARMA_DATE = row1.LAST_LIC_POINTS_KARMA_DATE;
row2.DRIVER_RISK_REFRESH_DATE = row1.DRIVER_RISK_REFRESH_DATE;
row2.LAST_RES_DATE = row1.LAST_RES_DATE;
row2.LAST_RES_TYPE = StringUtils.trimToNull(row1.LAST_RES_TYPE);
row2.DAYS_SINCE_LAST_DRIVE = row1.DAYS_SINCE_LAST_DRIVE;
row2.NEXT_RES_TYPE = StringUtils.trimToNull(row1.NEXT_RES_TYPE);
row2.DAYS_UNTIL_NEXT_DRIVE = row1.DAYS_UNTIL_NEXT_DRIVE;
row2.FIRST_GAS_FILLUP_DATE = row1.FIRST_GAS_FILLUP_DATE;
row2.FIRST_GAS_FILLUP_AMOUNT = row1.FIRST_GAS_FILLUP_AMOUNT;
row2.FIRST_GAS_FILLUP_CHARGE = row1.FIRST_GAS_FILLUP_CHARGE;
row2.LAST_GAS_FILLUP_DATE = row1.LAST_GAS_FILLUP_DATE;
row2.LAST_GAS_FILLUP_AMOUNT = row1.LAST_GAS_FILLUP_AMOUNT;
row2.LAST_GAS_FILLUP_CHARGE = row1.LAST_GAS_FILLUP_CHARGE;
row2.FILLUP_CNT = row1.FILLUP_CNT;
row2.WEX_REFRESH_DATE = row1.WEX_REFRESH_DATE;
row2.FIRST_NPS_RESPONSE_DATE = row1.FIRST_NPS_RESPONSE_DATE;
row2.FIRST_NPS_COMPLETE = BooleanUtils.boolChar(row1.FIRST_NPS_COMPLETE);
row2.FIRST_NPS_SCORE = row1.FIRST_NPS_SCORE;
row2.LAST_NPS_RESPONSE_DATE = row1.LAST_NPS_RESPONSE_DATE;
row2.LAST_NPS_COMPLETE = BooleanUtils.boolChar(row1.LAST_NPS_COMPLETE);
row2.LAST_NPS_SCORE = row1.LAST_NPS_SCORE;
row2.NPS_SURVEY_REFRESH = row1.NPS_SURVEY_REFRESH;
row2.FIRST_RES_SEARCH_DATE = row1.FIRST_RES_SEARCH_DATE;
row2.FIRST_RES_SEARCH_COMPLETION_P = BooleanUtils.boolChar(row1.FIRST_RES_SEARCH_COMPLETION_P);
row2.FIRST_RES_LOCAL_START_DATE = row1.FIRST_RES_LOCAL_START_DATE;
row2.FIRST_OVERNIGHT_RES = row1.FIRST_OVERNIGHT_RES;
row2.FIRST_WKDAY_HRLY_AM_START_RES = row1.FIRST_WKDAY_HRLY_AM_START_RES;
row2.FIRST_WKDAY_HRLY_PM_START_RES = row1.FIRST_WKDAY_HRLY_PM_START_RES;
row2.FIRST_WKEND_HRLY_AM_START_RES = row1.FIRST_WKEND_HRLY_AM_START_RES;
row2.FIRST_WKEND_HRLY_PM_START_RES = row1.FIRST_WKEND_HRLY_PM_START_RES;
row2.FIRST_WKDAY_DAILY_RES = row1.FIRST_WKDAY_DAILY_RES;
row2.FIRST_WKEND_DAILY_RES = row1.FIRST_WKEND_DAILY_RES;
row2.MEMBER_FIRST_RES_REFRESH_DATE = row1.MEMBER_FIRST_RES_REFRESH_DATE;
row2.REFER_A_FRIEND_CNT = row1.REFER_A_FRIEND_CNT;
row2.TOTAL_GIFT_CARD_CNT = row1.TOTAL_GIFT_CARD_CNT;
row2.TOTAL_GIFT_CARD_AMT_USD = row1.TOTAL_GIFT_CARD_AMT_USD;
row2.LAST_GIFT_CARD_PURCHASE_DATE = row1.LAST_GIFT_CARD_PURCHASE_DATE;
row2.LAST_GIFT_CARD_PURCHAS_AMT_USD = row1.LAST_GIFT_CARD_PURCHAS_AMT_USD;
row2.LAST_GIFT_CARD_PURCHASE_CURR = StringUtils.trimToNull(row1.LAST_GIFT_CARD_PURCHASE_CURR);
row2.GIFT_CARD_CNT = row1.GIFT_CARD_CNT;
row2.LATE_RETURN_CNT = row1.LATE_RETURN_CNT;
row2.LAST_LATE_RETURN_DATE = row1.LAST_LATE_RETURN_DATE;
row2.LAST_LATE_RETURN_MINUTES = row1.LAST_LATE_RETURN_MINUTES;
row2.LAST_LATE_RETURN_CHARGE = row1.LAST_LATE_RETURN_CHARGE;
row2.MAJOR_ACCIDENTS_CNT = row1.MAJOR_ACCIDENTS_CNT;
row2.MINOR_ACCIDENTS_CNT = row1.MINOR_ACCIDENTS_CNT;
row2.LAST_ACCIDENT_DATE = row1.LAST_ACCIDENT_DATE;
row2.LAST_ACCIDENT_CLASSIFICATION = StringUtils.trimToNull(row1.LAST_ACCIDENT_CLASSIFICATION);
row2.MEMBER_BEHAVIOR_REFRESH_DATE = row1.MEMBER_BEHAVIOR_REFRESH_DATE;
row2.ZCORPORATE_CNT = row1.ZCORPORATE_CNT;
row2.CORPORATE_CNT = row1.CORPORATE_CNT;
row2.PERSONAL_CNT = row1.PERSONAL_CNT;
row2.EVPERSONAL_CNT = row1.EVPERSONAL_CNT;
row2.SPONSORED_CNT = row1.SPONSORED_CNT;
row2.EVSPONSORED_CNT = row1.EVSPONSORED_CNT;
row2.Z2B_LARGE_ACCOUNTS_CNT = row1.Z2B_LARGE_ACCOUNTS_CNT;
row2.SUBSCRIPTION_CNT = row1.SUBSCRIPTION_CNT;
row2.UNIV_DEPTS_CNT = row1.UNIV_DEPTS_CNT;
row2.VAN_RESTRICTED_CNT = row1.VAN_RESTRICTED_CNT;
row2.ACCESS_CNT = row1.ACCESS_CNT;
row2.ZCORPORATE_HIST_CNT = row1.ZCORPORATE_HIST_CNT;
row2.CORPORATE_HIST_CNT = row1.CORPORATE_HIST_CNT;
row2.PERSONAL_HIST_CNT = row1.PERSONAL_HIST_CNT;
row2.EVPERSONAL_HIST_CNT = row1.EVPERSONAL_HIST_CNT;
row2.SPONSORED_HIST_CNT = row1.SPONSORED_HIST_CNT;
row2.EVSPONSORED_HIST_CNT = row1.EVSPONSORED_HIST_CNT;
row2.Z2B_LARGE_ACCOUNTS_HIST_CNT = row1.Z2B_LARGE_ACCOUNTS_HIST_CNT;
row2.SUBSCRIPTION_HIST_CNT = row1.SUBSCRIPTION_HIST_CNT;
row2.UNIV_DEPTS_HIST_CNT = row1.UNIV_DEPTS_HIST_CNT;
row2.VAN_RESTRICTED_HIST_CNT = row1.VAN_RESTRICTED_HIST_CNT;
row2.ACCESS_HIST_CNT = row1.ACCESS_HIST_CNT;
row2.LAST_RES_SEARCH_DATE = row1.LAST_RES_SEARCH_DATE;
row2.LAST_RES_SEARCH_SOURCE = StringUtils.trimToNull(row1.LAST_RES_SEARCH_SOURCE);
row2.LAST_RES_SEARCH_COMPLETION_P = BooleanUtils.boolChar(row1.LAST_RES_SEARCH_COMPLETION_P);
row2.LAST_OVERNIGHT_RES = row1.LAST_OVERNIGHT_RES;
row2.LAST_WKDAY_HRLY_RES = row1.LAST_WKDAY_HRLY_RES;
row2.LAST_WKDAY_DAILY_RES = row1.LAST_WKDAY_DAILY_RES;
row2.LAST_WKEND_HRLY_RES = row1.LAST_WKEND_HRLY_RES;
row2.LAST_WKEND_DAILY_RES = row1.LAST_WKEND_DAILY_RES;
row2.LAST_OVERNIGHT_RES_DATE = row1.LAST_OVERNIGHT_RES_DATE;
row2.LAST_WKDAY_HRLY_RES_DATE = row1.LAST_WKDAY_HRLY_RES_DATE;
row2.LAST_WKDAY_DAILY_RES_DATE = row1.LAST_WKDAY_DAILY_RES_DATE;
row2.LAST_WKEND_HRLY_RES_DATE = row1.LAST_WKEND_HRLY_RES_DATE;
row2.LAST_WKEND_DAILY_RES_DATE = row1.LAST_WKEND_DAILY_RES_DATE;
row2.LAST_RES_SEARCH_TYPE = StringUtils.trimToNull(row1.LAST_RES_SEARCH_TYPE);
row2.MEMBER_LAST_RES_REFRESH_DATE = row1.MEMBER_LAST_RES_REFRESH_DATE;
row2.LAST_RESERVATION_ID = row1.LAST_RESERVATION_ID;
row2.RES_SOURCE = StringUtils.trimToNull(row1.RES_SOURCE);
row2.RES_SOURCE_DESCRIPTION = StringUtils.trimToNull(row1.RES_SOURCE_DESCRIPTION);
row2.FIRST_WKDAY_HRLY_RES = row1.FIRST_WKDAY_HRLY_RES;
row2.FIRST_WKEND_HRLY_RES = row1.FIRST_WKEND_HRLY_RES;
row2.FIRST_RES_TYPE = StringUtils.trimToNull(row1.FIRST_RES_TYPE);
row2.DAYS_FROM_JOIN_TO_FIRST_RES = row1.DAYS_FROM_JOIN_TO_FIRST_RES;
row2.FIRST_NPS_COHORT = StringUtils.trimToNull(row1.FIRST_NPS_COHORT);
row2.LAST_NPS_COHORT = StringUtils.trimToNull(row1.LAST_NPS_COHORT);
row2.NPS_SURVEY_CNT = row1.NPS_SURVEY_CNT;
row2.TOTAL_HOURS_1_TO_3MTHS = row1.TOTAL_HOURS_1_TO_3MTHS;
row2.TOTAL_HOURS_4_TO_6MTHS = row1.TOTAL_HOURS_4_TO_6MTHS;
row2.TOTAL_HOURS_7_TO_9MTHS = row1.TOTAL_HOURS_7_TO_9MTHS;
row2.TOTAL_HOURS_10_TO_12MTHS = row1.TOTAL_HOURS_10_TO_12MTHS;
row2.TOTAL_DISTANCE_1_TO_3MTHS = row1.TOTAL_DISTANCE_1_TO_3MTHS;
row2.TOTAL_DISTANCE_4_TO_6MTHS = row1.TOTAL_DISTANCE_4_TO_6MTHS;
row2.TOTAL_DISTANCE_7_TO_9MTHS = row1.TOTAL_DISTANCE_7_TO_9MTHS;
row2.TOTAL_DISTANCE_10_TO_12MTHS = row1.TOTAL_DISTANCE_10_TO_12MTHS;
row2.DISTANCE_UNITS = row1.DISTANCE_UNITS;
row2.NEXT_FEE_DATE = row1.NEXT_FEE_DATE;
row2.NEXT_FEE_CHARGE = row1.NEXT_FEE_CHARGE;
row2.NEXT_FEE_FREQ = row1.NEXT_FEE_FREQ;
row2.FIRST_RES_SEARCH_SOURCE = row1.FIRST_RES_SEARCH_SOURCE;
row2.FIRST_OTHER_RES = row1.FIRST_OTHER_RES;
row2.FIRST_NOSHOW_RES = row1.FIRST_NOSHOW_RES;
row2.FIRST_CANCELLATION_RES = row1.FIRST_CANCELLATION_RES;
row2.LAST_OTHER_RES = row1.LAST_OTHER_RES;
row2.LAST_NOSHOW_RES = row1.LAST_NOSHOW_RES;
row2.LAST_CANCELLATION_RES = row1.LAST_CANCELLATION_RES;
row2.COMPLETED_RES_3MTHS_S = row1.COMPLETED_RES_3MTHS_S;
row2.COMPLETED_RES_6MTHS_S = row1.COMPLETED_RES_6MTHS_S;
row2.COMPLETED_RES_9MTHS_S = row1.COMPLETED_RES_9MTHS_S;
row2.COMPLETED_RES_1YEAR_S = row1.COMPLETED_RES_1YEAR_S;
row2.COMPLETED_RES_6MTHS_WRKDAY_S = row1.COMPLETED_RES_6MTHS_WRKDAY_S;
row2.COMPLETED_RES_1YEAR_WRKDAY_S = row1.COMPLETED_RES_1YEAR_WRKDAY_S;
row2.TOTAL_UP_REVENUE_3MTHS_S = row1.TOTAL_UP_REVENUE_3MTHS_S;
row2.TOTAL_UP_REVENUE_6MTHS_S = row1.TOTAL_UP_REVENUE_6MTHS_S;
row2.TOTAL_UP_REVENUE_9MTHS_S = row1.TOTAL_UP_REVENUE_9MTHS_S;
row2.TOTAL_UP_REVENUE_1YEAR_S = row1.TOTAL_UP_REVENUE_1YEAR_S;
row2.AVG_UP_REVENUE_3MTHS_S = row1.AVG_UP_REVENUE_3MTHS_S;
row2.AVG_UP_REVENUE_6MTHS_S = row1.AVG_UP_REVENUE_6MTHS_S;
row2.AVG_UP_REVENUE_9MTHS_S = row1.AVG_UP_REVENUE_9MTHS_S;
row2.AVG_UP_REVENUE_1YEAR_S = row1.AVG_UP_REVENUE_1YEAR_S;
row2.RES_SEARCH_3MTHS_S = row1.RES_SEARCH_3MTHS_S;
row2.RES_SEARCH_TURNDOWN_3MTHS_S = row1.RES_SEARCH_TURNDOWN_3MTHS_S;
row2.RES_SEARCH_COMPLETIONS_3MTHS_S = row1.RES_SEARCH_COMPLETIONS_3MTHS_S;
row2.NEXT_RES_DATE_S = row1.NEXT_RES_DATE_S;
row2.RES_REFRESH_DATE_S = row1.RES_REFRESH_DATE_S;
row2.CANCELED_RES_1YEAR = row1.CANCELED_RES_1YEAR;
row2.BILLED_NOSHOW_RES_1YEAR = row1.BILLED_NOSHOW_RES_1YEAR;
row2.TOTAL_RES_1YEAR = row1.TOTAL_RES_1YEAR;
row2.AFFILIATE_TYPE = row1.AFFILIATE_TYPE;
row2.ANNIVERSARY_DATE = row1.ANNIVERSARY_DATE;
row2.LAST_RES_RATE_PLAN_KEY = row1.LAST_RES_RATE_PLAN_KEY;
row2.LAST_RES_VEHICLE_CLASS = row1.LAST_RES_VEHICLE_CLASS;
row2.LAST_RES_VEHICLE_ID = row1.LAST_RES_VEHICLE_ID;
row2.ACTIVE_UNI_P = row1.ACTIVE_UNI_P;
row2.CURRENT_MEMBER_P = row1.CURRENT_MEMBER_P;
row2.FIRST_JOIN_ACCOUNT_ID = row1.FIRST_JOIN_ACCOUNT_ID;
row2.LAST_DIGIT_FIRST_ACCOUNT_ID = row1.LAST_DIGIT_FIRST_ACCOUNT_ID;
row2.FIRST_CORPORATE_ID = row1.FIRST_CORPORATE_ID;
row2.CURRENT_SUSPENSION_REASON_ID = row1.CURRENT_SUSPENSION_REASON_ID;
row2.FIRST_APPLICATION_ID = row1.FIRST_APPLICATION_ID;
row2.FIRST_APP_IJD_SESSION_ID = row1.FIRST_APP_IJD_SESSION_ID;
row2.FIRST_APPLICATION_IJD_P = row1.FIRST_APPLICATION_IJD_P;
row2.FIRST_RES_TYPE_DAILY_HOURLY = row1.FIRST_RES_TYPE_DAILY_HOURLY;
row2.FIRST_WKDAY_DAILY_AM_START_RES = row1.FIRST_WKDAY_DAILY_AM_START_RES;
row2.FIRST_WKDAY_DAILY_PM_START_RES = row1.FIRST_WKDAY_DAILY_PM_START_RES;
row2.FIRST_WKEND_DAILY_AM_START_RES = row1.FIRST_WKEND_DAILY_AM_START_RES;
row2.FIRST_WKEND_DAILY_PM_START_RES = row1.FIRST_WKEND_DAILY_PM_START_RES;
row2.FIRST_RES_SOURCE = row1.FIRST_RES_SOURCE;
row2.FIRST_RES_SOURCE_DESC = row1.FIRST_RES_SOURCE_DESC;
row2.FIRST_RES_VEHICLE_ID = row1.FIRST_RES_VEHICLE_ID;
row2.FIRST_RES_ZIPFLEET_ID = row1.FIRST_RES_ZIPFLEET_ID;
row2.FIRST_RES_DATE = row1.FIRST_RES_DATE;
row2.SECOND_RES_DATE = row1.SECOND_RES_DATE;
row2.FIRST_WAIVER_START_DATE = row1.FIRST_WAIVER_START_DATE;
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[207];
                                fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(row2,rowtFileOutputDelimited_1);
                                fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(row2,rowtFileOutputDelimited_1);
                                fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_2(row2,rowtFileOutputDelimited_1);
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */




} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			}
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileCopy_1Process(globalMap);



/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tFileArchive_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		
    	class BytesLimit65535_tFileArchive_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileArchive_1().limitLog4jByte();

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	
	
		String sourceFile_tFileArchive_1 = context.bulkLoadTempPath + "/" + globalMap.get("fileName");
	
    String zipFile_tFileArchive_1 = context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(true);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("gzip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
		zip_tFileArchive_1.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());




/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileArchive_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileDelete_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.bulkLoadTempPath + "/" + globalMap.get("fileName"));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.bulkLoadTempPath + "/" + globalMap.get("fileName"));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRedshiftRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\nCOPY  {{StageSchema}}.{{tableName}}\nFROM 's3://{{s3Bucket}}/{{feedFilePath}}'\nCREDENTIALS 'aws_access_key_id={{s3AccessKey}};aws_secret_access_key={{s3SecretKey}}'\nDATEFORMAT 'auto'\nTIMEFORMAT 'auto'\nEMPTYASNULL\nREMOVEQUOTES\nIGNOREHEADER 0\nESCAPE\nDELIMITER '|'\nMAXERROR AS {{bulkLoadMaxErrors}}\nGZIP\n;\n",
"StageSchema",  StringHandling.DQUOTE(context.Redshift_Staging_Schema),
"tableName", (String)globalMap.get("tableName"),
"feedFilePath", context.bulkLoadPath.replace("/s3/", "") + "/" + globalMap.get("fileName") + ".gz",
"bulkLoadMaxErrors", context.bulkLoadMaxErrors+"",
"s3Bucket", context.s3_bucket,
"s3AccessKey", context.s3_accesskey,
"s3SecretKey", context.s3_secretkey
);
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_2) {
		
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tRedshiftInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class error_rowStruct implements routines.system.IPersistableRow<error_rowStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String line_number;

				public String getLine_number () {
					return this.line_number;
				}
				
			    public String colname;

				public String getColname () {
					return this.colname;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String raw_line;

				public String getRaw_line () {
					return this.raw_line;
				}
				
			    public String raw_field_value;

				public String getRaw_field_value () {
					return this.raw_field_value;
				}
				
			    public String err_reason;

				public String getErr_reason () {
					return this.err_reason;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.filename = readString(dis);
					
					this.line_number = readString(dis);
					
					this.colname = readString(dis);
					
					this.type = readString(dis);
					
					this.position = readString(dis);
					
					this.raw_line = readString(dis);
					
					this.raw_field_value = readString(dis);
					
					this.err_reason = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.line_number,dos);
					
					// String
				
						writeString(this.colname,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.raw_line,dos);
					
					// String
				
						writeString(this.raw_field_value,dos);
					
					// String
				
						writeString(this.err_reason,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filename="+filename);
		sb.append(",line_number="+line_number);
		sb.append(",colname="+colname);
		sb.append(",type="+type);
		sb.append(",position="+position);
		sb.append(",raw_line="+raw_line);
		sb.append(",raw_field_value="+raw_field_value);
		sb.append(",err_reason="+err_reason);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		error_rowStruct error_row = new error_rowStruct();




	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("error_row" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// start part of your Java code
String errorMsg = "";


 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
		        conn_tRedshiftInput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();

		    String dbquery_tRedshiftInput_1 = StringUtils.templateString(
"\n	select filename, line_number, colname, type, position, raw_line, raw_field_value, err_reason\n	from stl_load_errors\n	where session = pg_backend_pid()\n	and filename like '%{{fileName}}%'\n	order by filename, line_number;\n",
"fileName", (String)globalMap.get("fileName")
);
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								error_row.filename = null;
							} else {
	                         		
        	error_row.filename = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 2) {
								error_row.line_number = null;
							} else {
	                         		
        	error_row.line_number = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 3) {
								error_row.colname = null;
							} else {
	                         		
        	error_row.colname = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 3, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 4) {
								error_row.type = null;
							} else {
	                         		
        	error_row.type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 4, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 5) {
								error_row.position = null;
							} else {
	                         		
        	error_row.position = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 5, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 6) {
								error_row.raw_line = null;
							} else {
	                         		
        	error_row.raw_line = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 6, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 7) {
								error_row.raw_field_value = null;
							} else {
	                         		
        	error_row.raw_field_value = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 7, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 8) {
								error_row.err_reason = null;
							} else {
	                         		
        	error_row.err_reason = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 8, false);
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

			//error_row
			//error_row


			
				if(execStat){
					runStat.updateStatOnConnection("error_row"+iterateId,1, 1);
				} 
			

		



// here is the main part of the component,
// a piece of code executed in the row
// loop
errorMsg += 
	error_row.line_number.trim() + "|" +
	error_row.position.trim() + "|" +
	error_row.raw_field_value.trim() + "|" +
	error_row.colname.trim() + "|" +
	error_row.type.trim() + "|" +
	error_row.err_reason.trim() + "\n";

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */



	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());




/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
if(errorMsg.length() > 0) {
	org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger("BulkLoadCSV");
	logger.warn("\n\n******************** Start Loading error report ***********************");
	logger.warn("\n\nLine_Number|Field_Pos|Field_Value|Db_Col_Name|Db_Type|Err_Reason");
	logger.warn(errorMsg);
	logger.warn("\n******************** End Loading error report ***********************\n");
}


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("error_row"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tFileDelete_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		
    	class BytesLimit65535_tFileDelete_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_2().limitLog4jByte();

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz");
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz");
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		
    	class BytesLimit65535_tWarn_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_5().limitLog4jByte();

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 3, "Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_5_WARN_MESSAGES", "Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE"))); 
globalMap.put("tWarn_5_WARN_PRIORITY", 3);
globalMap.put("tWarn_5_WARN_CODE", 42);


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		
    	class BytesLimit65535_tWarn_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_3().limitLog4jByte();

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","No Files to process in Feed folder","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "No Files to process in Feed folder", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_3_WARN_MESSAGES", "No Files to process in Feed folder"); 
globalMap.put("tWarn_3_WARN_PRIORITY", 3);
globalMap.put("tWarn_3_WARN_CODE", 42);


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_MembersExt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_MembersExt) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_2", false);
		start_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_2 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_2().limitLog4jByte();





String dbschema_tRedshiftOutput_2 = null;
	dbschema_tRedshiftOutput_2 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_2 = "job_stats";
String schemaForSearch_tRedshiftOutput_2 = null;
String tableForSearch_tRedshiftOutput_2 = tableName_tRedshiftOutput_2;
    if(dbschema_tRedshiftOutput_2 != null && dbschema_tRedshiftOutput_2.trim().length() > 0) {
    	tableName_tRedshiftOutput_2 = dbschema_tRedshiftOutput_2 + "\".\"" + tableName_tRedshiftOutput_2;
    }

int nb_line_tRedshiftOutput_2 = 0;
int nb_line_update_tRedshiftOutput_2 = 0;
int nb_line_inserted_tRedshiftOutput_2 = 0;
int nb_line_deleted_tRedshiftOutput_2 = 0;
int nb_line_rejected_tRedshiftOutput_2 = 0;

int deletedCount_tRedshiftOutput_2=0;
int updatedCount_tRedshiftOutput_2=0;
int insertedCount_tRedshiftOutput_2=0;
int rejectedCount_tRedshiftOutput_2=0;

java.util.Calendar calendar_tRedshiftOutput_2 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
calendar_tRedshiftOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
long date_tRedshiftOutput_2;

boolean whetherReject_tRedshiftOutput_2 = false;


java.sql.Connection conn_tRedshiftOutput_2 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_2 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_2 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_2 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_2 = decryptedPassword_tRedshiftOutput_2;
    conn_tRedshiftOutput_2 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_2,dbUser_tRedshiftOutput_2,dbPwd_tRedshiftOutput_2);
	
	resourceMap.put("conn_tRedshiftOutput_2", conn_tRedshiftOutput_2);
    conn_tRedshiftOutput_2.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_2 = 10000;
        int commitCounter_tRedshiftOutput_2 = 0;
int count_tRedshiftOutput_2=0;
	
			int rowCounttRedshiftOutput_2 = 0;
			class BufferLine_tRedshiftOutput_2 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_2 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_2 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_2 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_2 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_2 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_2 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_2 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_2 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_2 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_2 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_2 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_2> exInsertColValueListtRedshiftOutput_2 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_2 exInsertColValuetRedshiftOutput_2 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_2 = new StringBuilder();
			for(int i_tRedshiftOutput_2=0;i_tRedshiftOutput_2 < 100;i_tRedshiftOutput_2++){
				 extendInsertValueStmt_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_2!=100-1) extendInsertValueStmt_tRedshiftOutput_2.append(",");
			}

			String insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_2.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);

 



/**
 * [tRedshiftOutput_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_2 = false;
				int countertRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_2 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
									pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_2.setTimestamp(countertRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
								}
							}else{

								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_2++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.project);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.context);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.origin);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.duration);
							

							}

						
						countertRedshiftOutput_2++;
						
				exInsertColValuetRedshiftOutput_2 = new BufferLine_tRedshiftOutput_2();
                    	exInsertColValuetRedshiftOutput_2
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_2.add(exInsertColValuetRedshiftOutput_2);
				rowCounttRedshiftOutput_2++;

                nb_line_tRedshiftOutput_2++;

				if(rowCounttRedshiftOutput_2 == 100){
	                insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	                exInsertColValueListtRedshiftOutput_2.clear();
	                rowCounttRedshiftOutput_2 = 0;
					countertRedshiftOutput_2=1;
				}
                commitCounter_tRedshiftOutput_2++;

                if(commitEvery_tRedshiftOutput_2<=commitCounter_tRedshiftOutput_2) {
                                   conn_tRedshiftOutput_2.commit();
                                   commitCounter_tRedshiftOutput_2=0;
                }

 


	tos_count_tRedshiftOutput_2++;

/**
 * [tRedshiftOutput_2 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	





	    if(rowCounttRedshiftOutput_2!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_2 = new StringBuilder();
	        for(int i_tRedshiftOutput_2=0 ; i_tRedshiftOutput_2 < rowCounttRedshiftOutput_2 ; i_tRedshiftOutput_2++){
				extendInsertValue_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_2 != rowCounttRedshiftOutput_2 - 1) extendInsertValue_tRedshiftOutput_2.append(",");
	        }

				insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_2.toString();
        	pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);
			rowCounttRedshiftOutput_2 = 0;
	        for(BufferLine_tRedshiftOutput_2 bufferLtRedshiftOutput_2 : exInsertColValueListtRedshiftOutput_2){
				int counttRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_2.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_2 = bufferLtRedshiftOutput_2.moment.getTime();
						if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
							pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_2.setTimestamp(counttRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
						}
					}else{

						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.father_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.father_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.root_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.root_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.system_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.system_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.project==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.project);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_repository_id==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_version==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_version);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.context==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.context);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.origin==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.origin);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message_type==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message_type);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.duration==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.duration);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    

	            rowCounttRedshiftOutput_2++;
	        }
	        insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_2 != null) {
                            pstmt_tRedshiftOutput_2.close();
                        }

		if (commitCounter_tRedshiftOutput_2 > 0) {
			
			conn_tRedshiftOutput_2.commit();
			
		}
		
    	conn_tRedshiftOutput_2 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_2", true);
    	
	nb_line_deleted_tRedshiftOutput_2=nb_line_deleted_tRedshiftOutput_2+ deletedCount_tRedshiftOutput_2;
	nb_line_update_tRedshiftOutput_2=nb_line_update_tRedshiftOutput_2 + updatedCount_tRedshiftOutput_2;
	nb_line_inserted_tRedshiftOutput_2=nb_line_inserted_tRedshiftOutput_2 + insertedCount_tRedshiftOutput_2;
	nb_line_rejected_tRedshiftOutput_2=nb_line_rejected_tRedshiftOutput_2 + rejectedCount_tRedshiftOutput_2;
	
        globalMap.put("tRedshiftOutput_2_NB_LINE",nb_line_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_2", true);
end_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());




/**
 * [tRedshiftOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_2")==null){
			if(resourceMap.get("conn_tRedshiftOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_2 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_2");
					
					
            		
					ctn_tRedshiftOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_2) {
					String errorMessage_tRedshiftOutput_2 = "failed to close the connection in tRedshiftOutput_2 :" + sqlEx_tRedshiftOutput_2.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_2);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final StageFeed_MembersExt StageFeed_MembersExtClass = new StageFeed_MembersExt();

        int exitCode = StageFeed_MembersExtClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = StageFeed_MembersExt.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/stagefeed_membersext_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("clearStagingTable", "id_Boolean");
				
             try{
                 context.clearStagingTable=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("clearStagingTable"));
             }catch(NumberFormatException e){
                 context.clearStagingTable=null;
              }
				    context.setContextType("bulkLoadMaxErrors", "id_Long");
				
             try{
                 context.bulkLoadMaxErrors=routines.system.ParserUtils.parseTo_Long (context.getProperty("bulkLoadMaxErrors"));
             }catch(NumberFormatException e){
                 context.bulkLoadMaxErrors=null;
              }
				    context.setContextType("bulkLoadPath", "id_String");
				
                context.bulkLoadPath=(String) context.getProperty("bulkLoadPath");
				    context.setContextType("bulkLoadTempPath", "id_String");
				
                context.bulkLoadTempPath=(String) context.getProperty("bulkLoadTempPath");
				    context.setContextType("s3_accesskey", "id_String");
				
                context.s3_accesskey=(String) context.getProperty("s3_accesskey");
				    context.setContextType("s3_bucket", "id_String");
				
                context.s3_bucket=(String) context.getProperty("s3_bucket");
				    context.setContextType("s3_secretkey", "id_String");
				
                context.s3_secretkey=(String) context.getProperty("s3_secretkey");
				    context.setContextType("bulkLoad", "id_Boolean");
				
             try{
                 context.bulkLoad=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("bulkLoad"));
             }catch(NumberFormatException e){
                 context.bulkLoad=null;
              }
				    context.setContextType("feedArchive", "id_Directory");
				
                context.feedArchive=(String) context.getProperty("feedArchive");
				    context.setContextType("feedError", "id_Directory");
				
                context.feedError=(String) context.getProperty("feedError");
				    context.setContextType("feedInput", "id_Directory");
				
                context.feedInput=(String) context.getProperty("feedInput");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
				    context.setContextType("Redshift_Staging_AdditionalParams", "id_String");
				
                context.Redshift_Staging_AdditionalParams=(String) context.getProperty("Redshift_Staging_AdditionalParams");
				    context.setContextType("Redshift_Staging_Database", "id_String");
				
                context.Redshift_Staging_Database=(String) context.getProperty("Redshift_Staging_Database");
				    context.setContextType("Redshift_Staging_Login", "id_String");
				
                context.Redshift_Staging_Login=(String) context.getProperty("Redshift_Staging_Login");
				    context.setContextType("Redshift_Staging_Password", "id_Password");
				
            		String pwd_Redshift_Staging_Password_value = context.getProperty("Redshift_Staging_Password");
            		context.Redshift_Staging_Password = null;
            		if(pwd_Redshift_Staging_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Staging_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Staging_Password = pwd_Redshift_Staging_Password_value;
            			} else if (!pwd_Redshift_Staging_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Staging_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Staging_Password_value);
            					context.put("Redshift_Staging_Password",context.Redshift_Staging_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Staging_Port", "id_String");
				
                context.Redshift_Staging_Port=(String) context.getProperty("Redshift_Staging_Port");
				    context.setContextType("Redshift_Staging_Schema", "id_String");
				
                context.Redshift_Staging_Schema=(String) context.getProperty("Redshift_Staging_Schema");
				    context.setContextType("Redshift_Staging_Server", "id_String");
				
                context.Redshift_Staging_Server=(String) context.getProperty("Redshift_Staging_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("clearStagingTable")) {
                context.clearStagingTable = (Boolean) parentContextMap.get("clearStagingTable");
            }if (parentContextMap.containsKey("bulkLoadMaxErrors")) {
                context.bulkLoadMaxErrors = (Long) parentContextMap.get("bulkLoadMaxErrors");
            }if (parentContextMap.containsKey("bulkLoadPath")) {
                context.bulkLoadPath = (String) parentContextMap.get("bulkLoadPath");
            }if (parentContextMap.containsKey("bulkLoadTempPath")) {
                context.bulkLoadTempPath = (String) parentContextMap.get("bulkLoadTempPath");
            }if (parentContextMap.containsKey("s3_accesskey")) {
                context.s3_accesskey = (String) parentContextMap.get("s3_accesskey");
            }if (parentContextMap.containsKey("s3_bucket")) {
                context.s3_bucket = (String) parentContextMap.get("s3_bucket");
            }if (parentContextMap.containsKey("s3_secretkey")) {
                context.s3_secretkey = (String) parentContextMap.get("s3_secretkey");
            }if (parentContextMap.containsKey("bulkLoad")) {
                context.bulkLoad = (Boolean) parentContextMap.get("bulkLoad");
            }if (parentContextMap.containsKey("feedArchive")) {
                context.feedArchive = (String) parentContextMap.get("feedArchive");
            }if (parentContextMap.containsKey("feedError")) {
                context.feedError = (String) parentContextMap.get("feedError");
            }if (parentContextMap.containsKey("feedInput")) {
                context.feedInput = (String) parentContextMap.get("feedInput");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }if (parentContextMap.containsKey("Redshift_Staging_AdditionalParams")) {
                context.Redshift_Staging_AdditionalParams = (String) parentContextMap.get("Redshift_Staging_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Staging_Database")) {
                context.Redshift_Staging_Database = (String) parentContextMap.get("Redshift_Staging_Database");
            }if (parentContextMap.containsKey("Redshift_Staging_Login")) {
                context.Redshift_Staging_Login = (String) parentContextMap.get("Redshift_Staging_Login");
            }if (parentContextMap.containsKey("Redshift_Staging_Password")) {
                context.Redshift_Staging_Password = (java.lang.String) parentContextMap.get("Redshift_Staging_Password");
            }if (parentContextMap.containsKey("Redshift_Staging_Port")) {
                context.Redshift_Staging_Port = (String) parentContextMap.get("Redshift_Staging_Port");
            }if (parentContextMap.containsKey("Redshift_Staging_Schema")) {
                context.Redshift_Staging_Schema = (String) parentContextMap.get("Redshift_Staging_Schema");
            }if (parentContextMap.containsKey("Redshift_Staging_Server")) {
                context.Redshift_Staging_Server = (String) parentContextMap.get("Redshift_Staging_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Monitoring_Password");
			parametersToEncrypt.add("Redshift_Staging_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : StageFeed_MembersExt");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_1", globalMap.get("conn_tRedshiftConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1527694 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:44 PM CDT
 ************************************************************************************************/