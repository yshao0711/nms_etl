// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.process_engagement_report_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.ConfigFile;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Process_Engagement_Report Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Process_Engagement_Report implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(environment != null){
				
					this.setProperty("environment", environment.toString());
				
			}
			
			if(sendAlertTo_MissingFeed != null){
				
					this.setProperty("sendAlertTo_MissingFeed", sendAlertTo_MissingFeed.toString());
				
			}
			
			if(sendMailCc_IncompleteApp != null){
				
					this.setProperty("sendMailCc_IncompleteApp", sendMailCc_IncompleteApp.toString());
				
			}
			
			if(sendMailFrom != null){
				
					this.setProperty("sendMailFrom", sendMailFrom.toString());
				
			}
			
			if(sendMailPassword != null){
				
					this.setProperty("sendMailPassword", sendMailPassword.toString());
				
			}
			
			if(sendMailSenderName != null){
				
					this.setProperty("sendMailSenderName", sendMailSenderName.toString());
				
			}
			
			if(sendMailSMTPHost != null){
				
					this.setProperty("sendMailSMTPHost", sendMailSMTPHost.toString());
				
			}
			
			if(sendMailSMTPPort != null){
				
					this.setProperty("sendMailSMTPPort", sendMailSMTPPort.toString());
				
			}
			
			if(sendMailTo_Failed != null){
				
					this.setProperty("sendMailTo_Failed", sendMailTo_Failed.toString());
				
			}
			
			if(sendMailTo_Success != null){
				
					this.setProperty("sendMailTo_Success", sendMailTo_Success.toString());
				
			}
			
			if(sendMailUserName != null){
				
					this.setProperty("sendMailUserName", sendMailUserName.toString());
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
		}

public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String environment;
public String getEnvironment(){
	return this.environment;
}
public String sendAlertTo_MissingFeed;
public String getSendAlertTo_MissingFeed(){
	return this.sendAlertTo_MissingFeed;
}
public String sendMailCc_IncompleteApp;
public String getSendMailCc_IncompleteApp(){
	return this.sendMailCc_IncompleteApp;
}
public String sendMailFrom;
public String getSendMailFrom(){
	return this.sendMailFrom;
}
public java.lang.String sendMailPassword;
public java.lang.String getSendMailPassword(){
	return this.sendMailPassword;
}
public String sendMailSenderName;
public String getSendMailSenderName(){
	return this.sendMailSenderName;
}
public String sendMailSMTPHost;
public String getSendMailSMTPHost(){
	return this.sendMailSMTPHost;
}
public String sendMailSMTPPort;
public String getSendMailSMTPPort(){
	return this.sendMailSMTPPort;
}
public String sendMailTo_Failed;
public String getSendMailTo_Failed(){
	return this.sendMailTo_Failed;
}
public String sendMailTo_Success;
public String getSendMailTo_Success(){
	return this.sendMailTo_Success;
}
public String sendMailUserName;
public String getSendMailUserName(){
	return this.sendMailUserName;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Process_Engagement_Report";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_k2cYoNk5EeeKk4rnegJEBw", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Process_Engagement_Report.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Process_Engagement_Report.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelSheetOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelWorkbookSave_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExcelWorkbookSave_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExcelWorkbookOpen_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExcelWorkbookOpen_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExcelWorkbookSave_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExcelWorkbookOpen_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_stats";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 10000;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_1 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_1 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_1 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 100;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=100-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.project);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.context);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.origin);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.duration);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 100){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_1.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.moment.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.father_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.father_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.root_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.root_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.system_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.system_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.project==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.project);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_repository_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_version==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_version);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.context==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.context);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.origin==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.origin);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.duration==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.duration);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSetGlobalVar_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("RUN_DATE", DateUtils.runDate(context.RunDate));
globalMap.put("startRowNo", 2);
globalMap.put("reportDays", 8);
globalMap.put("currentRowNo", 2);

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRedshiftConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_1", false);
		start_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_1";

	
		int tos_count_tRedshiftConnection_1 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_1().limitLog4jByte();


	
    			String url_tRedshiftConnection_1 = "jdbc:redshift://" + context.Redshift_Marketing_Server + ":" + context.Redshift_Marketing_Port + "/" + context.Redshift_Marketing_Database + "?" + context.Redshift_Marketing_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_1 = context.Redshift_Marketing_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_1 = context.Redshift_Marketing_Password; 
		String dbPwd_tRedshiftConnection_1 = decryptedPassword_tRedshiftConnection_1;
	

	java.sql.Connection conn_tRedshiftConnection_1 = null;
	
					String driverClass_tRedshiftConnection_1 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_1);
		
		conn_tRedshiftConnection_1 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_1,dbUser_tRedshiftConnection_1,dbPwd_tRedshiftConnection_1);

		globalMap.put("conn_tRedshiftConnection_1", conn_tRedshiftConnection_1);
	if (null != conn_tRedshiftConnection_1) {
		
			conn_tRedshiftConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_1",context.Redshift_Marketing_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_1",conn_tRedshiftConnection_1);

 



/**
 * [tRedshiftConnection_1 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 


	tos_count_tRedshiftConnection_1++;

/**
 * [tRedshiftConnection_1 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 

ok_Hash.put("tRedshiftConnection_1", true);
end_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());




/**
 * [tRedshiftConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 



/**
 * [tRedshiftConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_1", false);
		start_Hash.put("tRedshiftClose_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_1";

	
		int tos_count_tRedshiftClose_1 = 0;
		
    	class BytesLimit65535_tRedshiftClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_1().limitLog4jByte();

 



/**
 * [tRedshiftClose_1 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	



	java.sql.Connection conn_tRedshiftClose_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	if(conn_tRedshiftClose_1 != null && !conn_tRedshiftClose_1.isClosed())
	{
        conn_tRedshiftClose_1.close();
	}

 


	tos_count_tRedshiftClose_1++;

/**
 * [tRedshiftClose_1 main ] stop
 */
	
	/**
	 * [tRedshiftClose_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 

ok_Hash.put("tRedshiftClose_1", true);
end_Hash.put("tRedshiftClose_1", System.currentTimeMillis());




/**
 * [tRedshiftClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 



/**
 * [tRedshiftClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\n-- create temp table for mailing info with mailing name\ncreate temp table mailing_info (\n	mailing_id	bigint	encode mostly32,\n	mailing_name varchar(255)	encode text255\n);\ninsert into mailing_info (mailing_id, mailing_name) values \n(142479, 'Auto_Incomplete_App_Info-Location-Review_Daily_NwCst.1st Push'),\n(142480, 'Auto_Incomplete_App_Info-Location-Review_Daily_NwCst.2nd Push'),\n(142481, 'Auto_Incomplete_App_Info-Location-Review_Daily_NwCst.3rd Push'),\n(142485, 'Auto_Incomplete_App_Payment_Daily_NwCst.1st Push'),\n(142486, 'Auto_Incomplete_App_Payment_Daily_NwCst.2nd Push'),\n(142487, 'Auto_Incomplete_App_Payment_Daily_NwCst.3rd Push'),\n(142482, 'Auto_Incomplete_App_Plan_Daily_NwCst.1st Push'),\n(142483, 'Auto_Incomplete_App_Plan_Daily_NwCst.2nd Push'),\n(142484, 'Auto_Incomplete_App_Plan_Daily_NwCst.3rd Push');\n\n-- all delivered users for the past week\ncreate temp table delivered_users as\n-- list all the digits\nwith digit as (\n    select 0 as d union all \n    select 1 union all select 2 union all select 3 union all\n    select 4 union all select 5 union all select 6 union all\n    select 7 union all select 8 union all select 9        \n),\n-- max 999, add more join tables to increase the max\nseq as (\n    select a.d + (10 * b.d) + (100 * c.d) as num \n    from digit a\n    cross join\n    digit b\n    cross join\n    digit c\n    order by 1        \n),\nmailing_dates as (\n	select mailing_id, mailing_name, launch_date\n	from (\n		select (CURRENT_DATE - seq.num)::date as launch_date\n		from seq\n	) dates\n	join mailing_info on 1=1\n	where launch_date BETWEEN {{runDate}} - {{reportDays}} and {{runDate}} - 1\n	order by mailing_id, launch_date asc\n)\nselect DISTINCT\n	md.launch_date,\n	md.mailing_id,\n	md.mailing_name,\n	svsd.message_id,\n	svsd.user_id,\n	svsd.email_address\nfrom mailing_dates md\nleft join {{marketing.schema}}.vw_r_strongview_success_data svsd\non md.mailing_id = svsd.mailing_id\nand md.launch_date = trunc(svsd.data_captured_dt)\n;\n\n-- all last delivered users (no further mailing sent out)\ncreate temp table last_delivered_users as\nselect * from delivered_users where user_id is not null;\n\ndelete from last_delivered_users\nwhere (launch_date, user_id) in (\n	select du.launch_date, du.user_id \n	from last_delivered_users du\n	join (\n		select * from {{marketing.schema}}.vw_r_strongview_success_data where regexp_instr(user_id, '\\\\D') = 0\n	) svsd\n	on du.user_id::BIGINT = svsd.user_id::BIGINT\n	where trunc(svsd.data_captured_dt) > du.launch_date\n	and svsd.mailing_id in (select distinct mailing_id from delivered_users)\n);\n\n-- calculate converted users from those delivered users\ncreate temp table converted_users as\nselect launch_date, mailing_id, message_id, user_id, email_address, sum(up_revenue) as revenue\nfrom (\n	select du.*, decode(sr.up_revenue, null, 0, sr.up_revenue) as up_revenue\n	from last_delivered_users du\n	left join {{marketing.schema}}.vw_r_member_last_application_info app\n	on du.user_id = app.member_id\n	and du.launch_date < app.join_app_submitted_date\n	left join {{marketing.schema}}.s_reservation sr\n	on du.user_id = sr.member_id\n	and sr.start_date > app.join_app_submitted_date\n	where app.join_submitted_app_p = 't'\n)\ngroup by launch_date, mailing_id, message_id, user_id, email_address\n;\n\n-- calculate weekly data\ncreate temp table weekly_engagement_data as\nselect DISTINCT\n	du.mailing_id,\n	du.mailing_name,\n	du.launch_date,\n	du.message_id,\n	du.user_id,\n	du.email_address,\n	svtd1.track_event_typ as event_open,\n	svtd2.track_event_typ as event_click,\n	cu.revenue\nfrom delivered_users du\nleft join {{marketing.schema}}.vw_r_strongview_track_data svtd1\non du.mailing_id = svtd1.mailing_id\nand du.message_id = svtd1.message_id\nand du.user_id = svtd1.user_id\nand du.launch_date < svtd1.data_captured_dt\nand svtd1.track_event_typ = 'open'\nleft join {{marketing.schema}}.vw_r_strongview_track_data svtd2\non du.mailing_id = svtd2.mailing_id\nand du.message_id = svtd2.message_id\nand du.user_id = svtd2.user_id\nand du.launch_date < svtd2.data_captured_dt\nand svtd2.track_event_typ = 'click'\nleft join converted_users cu\non du.launch_date = cu.launch_date\nand du.mailing_id = cu.mailing_id\nand du.user_id = cu.user_id\n;\n\n-- calculate report data\ncreate temp table aggregation_report as\nselect\n	tt_report.mailing_id,\n	tt_report.mailing_name,\n	tt_mailing.subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	case when delivered = 0 then 0\n		else round(unique_opens*1.00/delivered, 4) \n	end as unique_open_pct,\n	unique_clicks,\n	case when delivered = 0 then 0\n		else round(unique_clicks*1.00/delivered, 4) \n	end as unique_click_pct,\n	case when unique_opens = 0 then 0\n		else round(unique_clicks*1.00/unique_opens, 4) \n	end as click_to_open,\n	conversions,\n	case when delivered = 0 then 0\n		else round(conversions*1.00/delivered, 4) \n	end as conversion_rate,\n	revenue\nfrom (\n	select \n		du.mailing_id,\n		du.mailing_name,\n		du.launch_date,\n		decode(tt_delivered.delivered, null, 0, tt_delivered.delivered) as delivered,\n		decode(tt_open.unique_opens, null, 0, tt_open.unique_opens) as unique_opens,\n		decode(tt_click.unique_clicks, null, 0, tt_click.unique_clicks) as unique_clicks,\n		decode(tt_conversion.conversions, null, 0, tt_conversion.conversions) as conversions,\n		decode(tt_conversion.revenue, null, 0, tt_conversion.revenue) as revenue\n	from (\n		select distinct mailing_id, mailing_name, launch_date from delivered_users\n	) du		\n	left join (\n		select mailing_id, launch_date, count(*) as delivered\n		from weekly_engagement_data\n		where user_id is not null\n		group by mailing_id, launch_date\n	) tt_delivered\n	on du.mailing_id = tt_delivered.mailing_id\n	and du.launch_date = tt_delivered.launch_date\n	left join (\n		select mailing_id, launch_date, count(*) as unique_opens\n		from weekly_engagement_data\n		where event_open is not null\n		group by mailing_id, launch_date\n	) tt_open\n	on du.mailing_id = tt_open.mailing_id\n	and du.launch_date = tt_open.launch_date\n	left join (\n		select mailing_id, launch_date, count(*) as unique_clicks\n		from weekly_engagement_data\n		where event_click is not null\n		group by mailing_id, launch_date\n	) tt_click\n	on du.mailing_id = tt_click.mailing_id\n	and du.launch_date = tt_click.launch_date\n	left join (\n		select mailing_id, launch_date, count(*) as conversions, sum(revenue) as revenue\n		from weekly_engagement_data\n		where revenue is not null\n		group by mailing_id, launch_date\n	) tt_conversion\n	on du.mailing_id = tt_conversion.mailing_id\n	and du.launch_date = tt_conversion.launch_date\n) tt_report\njoin (\n	select DISTINCT mailing_id, subject_line from {{marketing.schema}}.vw_r_strongview_mailing_data\n) tt_mailing\non tt_report.mailing_id = tt_mailing.mailing_id\norder by tt_report.mailing_id, launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE")),
"reportDays", globalMap.get("reportDays")+""
);
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_2) {
		
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


int mailingIndex = 0;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRedshiftInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFileExcelSheetOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_1", false);
		start_Hash.put("tFileExcelSheetOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_1 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_1().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_2", false);
		start_Hash.put("tRedshiftInput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_2";

	
		int tos_count_tRedshiftInput_2 = 0;
		
    	class BytesLimit65535_tRedshiftInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_2 = 0;
		    java.sql.Connection conn_tRedshiftInput_2 = null;
		        conn_tRedshiftInput_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_2 = conn_tRedshiftInput_2.createStatement();

		    String dbquery_tRedshiftInput_2 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142479\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_2_QUERY",dbquery_tRedshiftInput_2);

		    java.sql.ResultSet rs_tRedshiftInput_2 = null;
		try{
		    rs_tRedshiftInput_2 = stmt_tRedshiftInput_2.executeQuery(dbquery_tRedshiftInput_2);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_2 = rs_tRedshiftInput_2.getMetaData();
		    int colQtyInRs_tRedshiftInput_2 = rsmd_tRedshiftInput_2.getColumnCount();

		    String tmpContent_tRedshiftInput_2 = null;
		    
		    
		    while (rs_tRedshiftInput_2.next()) {
		        nb_line_tRedshiftInput_2++;
		        
							if(colQtyInRs_tRedshiftInput_2 < 1) {
								row2.MAILING_NAME = null;
							} else {
	                         		
        	row2.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 2) {
								row2.SUBJECT_LINE = null;
							} else {
	                         		
        	row2.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 3) {
								row2.LAUNCH_DATE = null;
							} else {
										
			row2.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 4) {
								row2.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(4) != null) {
                row2.DELIVERED = rs_tRedshiftInput_2.getInt(4);
            } else {
                    row2.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 5) {
								row2.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(5) != null) {
                row2.UNIQUE_OPENS = rs_tRedshiftInput_2.getInt(5);
            } else {
                    row2.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 6) {
								row2.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(6) != null) {
                row2.UNIQUE_OPEN_PCT = rs_tRedshiftInput_2.getDouble(6);
            } else {
                    row2.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 7) {
								row2.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(7) != null) {
                row2.UNIQUE_CLICKS = rs_tRedshiftInput_2.getInt(7);
            } else {
                    row2.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 8) {
								row2.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(8) != null) {
                row2.UNIQUE_CLICK_PCT = rs_tRedshiftInput_2.getDouble(8);
            } else {
                    row2.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 9) {
								row2.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(9) != null) {
                row2.CLICK_TO_OPEN = rs_tRedshiftInput_2.getDouble(9);
            } else {
                    row2.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 10) {
								row2.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(10) != null) {
                row2.CONVERSIONS = rs_tRedshiftInput_2.getInt(10);
            } else {
                    row2.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 11) {
								row2.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(11) != null) {
                row2.CONVERSION_RATE = rs_tRedshiftInput_2.getDouble(11);
            } else {
                    row2.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 12) {
								row2.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(12) != null) {
                row2.REVENUE = rs_tRedshiftInput_2.getDouble(12);
            } else {
                    row2.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_2 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 


	tos_count_tRedshiftInput_2++;

/**
 * [tRedshiftInput_2 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_1 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_1++;

/**
 * [tFileExcelSheetOutput_1 main ] stop
 */



	
	/**
	 * [tRedshiftInput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

	}
}finally{
	stmt_tRedshiftInput_2.close();

}
globalMap.put("tRedshiftInput_2_NB_LINE",nb_line_tRedshiftInput_2);

 

ok_Hash.put("tRedshiftInput_2", true);
end_Hash.put("tRedshiftInput_2", System.currentTimeMillis());




/**
 * [tRedshiftInput_2 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_1 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_1", true);
end_Hash.put("tFileExcelSheetOutput_1", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFixedFlowInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 



/**
 * [tRedshiftInput_2 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_1";

	

 



/**
 * [tFileExcelSheetOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileExcelSheetOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_10", false);
		start_Hash.put("tFileExcelSheetOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_10 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_10().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_10 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row1.newColumn0 = "Total";
    	            	        	            	
    	            		row1.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row1.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row1.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row1.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row1.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row1.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row1.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row1.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row1.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_10 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_10";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_10++;

/**
 * [tFileExcelSheetOutput_10 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_10 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_10";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_10", true);
end_Hash.put("tFileExcelSheetOutput_10", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_10 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_10";

	

 



/**
 * [tFileExcelSheetOutput_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		
    	class BytesLimit65535_tJava_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_3().limitLog4jByte();


int mailingIndex = 1;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRedshiftInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tFileExcelSheetOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_2", false);
		start_Hash.put("tFileExcelSheetOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_2 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_2().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_2 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_3", false);
		start_Hash.put("tRedshiftInput_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_3";

	
		int tos_count_tRedshiftInput_3 = 0;
		
    	class BytesLimit65535_tRedshiftInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_3 = 0;
		    java.sql.Connection conn_tRedshiftInput_3 = null;
		        conn_tRedshiftInput_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_3 = conn_tRedshiftInput_3.createStatement();

		    String dbquery_tRedshiftInput_3 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142480\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_3_QUERY",dbquery_tRedshiftInput_3);

		    java.sql.ResultSet rs_tRedshiftInput_3 = null;
		try{
		    rs_tRedshiftInput_3 = stmt_tRedshiftInput_3.executeQuery(dbquery_tRedshiftInput_3);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_3 = rs_tRedshiftInput_3.getMetaData();
		    int colQtyInRs_tRedshiftInput_3 = rsmd_tRedshiftInput_3.getColumnCount();

		    String tmpContent_tRedshiftInput_3 = null;
		    
		    
		    while (rs_tRedshiftInput_3.next()) {
		        nb_line_tRedshiftInput_3++;
		        
							if(colQtyInRs_tRedshiftInput_3 < 1) {
								row3.MAILING_NAME = null;
							} else {
	                         		
        	row3.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_3, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 2) {
								row3.SUBJECT_LINE = null;
							} else {
	                         		
        	row3.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_3, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 3) {
								row3.LAUNCH_DATE = null;
							} else {
										
			row3.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_3, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 4) {
								row3.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(4) != null) {
                row3.DELIVERED = rs_tRedshiftInput_3.getInt(4);
            } else {
                    row3.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 5) {
								row3.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(5) != null) {
                row3.UNIQUE_OPENS = rs_tRedshiftInput_3.getInt(5);
            } else {
                    row3.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 6) {
								row3.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_3.getObject(6) != null) {
                row3.UNIQUE_OPEN_PCT = rs_tRedshiftInput_3.getDouble(6);
            } else {
                    row3.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 7) {
								row3.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(7) != null) {
                row3.UNIQUE_CLICKS = rs_tRedshiftInput_3.getInt(7);
            } else {
                    row3.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 8) {
								row3.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_3.getObject(8) != null) {
                row3.UNIQUE_CLICK_PCT = rs_tRedshiftInput_3.getDouble(8);
            } else {
                    row3.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 9) {
								row3.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_3.getObject(9) != null) {
                row3.CLICK_TO_OPEN = rs_tRedshiftInput_3.getDouble(9);
            } else {
                    row3.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 10) {
								row3.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(10) != null) {
                row3.CONVERSIONS = rs_tRedshiftInput_3.getInt(10);
            } else {
                    row3.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 11) {
								row3.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_3.getObject(11) != null) {
                row3.CONVERSION_RATE = rs_tRedshiftInput_3.getDouble(11);
            } else {
                    row3.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_3 < 12) {
								row3.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_3.getObject(12) != null) {
                row3.REVENUE = rs_tRedshiftInput_3.getDouble(12);
            } else {
                    row3.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_3 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 


	tos_count_tRedshiftInput_3++;

/**
 * [tRedshiftInput_3 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_2 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_2++;

/**
 * [tFileExcelSheetOutput_2 main ] stop
 */



	
	/**
	 * [tRedshiftInput_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

	}
}finally{
	stmt_tRedshiftInput_3.close();

}
globalMap.put("tRedshiftInput_3_NB_LINE",nb_line_tRedshiftInput_3);

 

ok_Hash.put("tRedshiftInput_3", true);
end_Hash.put("tRedshiftInput_3", System.currentTimeMillis());




/**
 * [tRedshiftInput_3 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_2 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_2", true);
end_Hash.put("tFileExcelSheetOutput_2", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 



/**
 * [tRedshiftInput_3 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_2";

	

 



/**
 * [tFileExcelSheetOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tFileExcelSheetOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_11", false);
		start_Hash.put("tFileExcelSheetOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_11 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_11().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";

	
		int tos_count_tFixedFlowInput_2 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_2().limitLog4jByte();

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row11.newColumn0 = "Total";
    	            	        	            	
    	            		row11.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row11.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row11.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row11.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row11.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row11.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row11.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row11.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row11.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_11 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_11";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_11++;

/**
 * [tFileExcelSheetOutput_11 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_11 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_11";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_11", true);
end_Hash.put("tFileExcelSheetOutput_11", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_11 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";

	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_11";

	

 



/**
 * [tFileExcelSheetOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		
    	class BytesLimit65535_tJava_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_4().limitLog4jByte();


int mailingIndex = 2;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tRedshiftInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tFileExcelSheetOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_3", false);
		start_Hash.put("tFileExcelSheetOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_3 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_3().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_3 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_4", false);
		start_Hash.put("tRedshiftInput_4", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_4";

	
		int tos_count_tRedshiftInput_4 = 0;
		
    	class BytesLimit65535_tRedshiftInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_4 = 0;
		    java.sql.Connection conn_tRedshiftInput_4 = null;
		        conn_tRedshiftInput_4 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_4 = conn_tRedshiftInput_4.createStatement();

		    String dbquery_tRedshiftInput_4 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142481\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_4_QUERY",dbquery_tRedshiftInput_4);

		    java.sql.ResultSet rs_tRedshiftInput_4 = null;
		try{
		    rs_tRedshiftInput_4 = stmt_tRedshiftInput_4.executeQuery(dbquery_tRedshiftInput_4);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_4 = rs_tRedshiftInput_4.getMetaData();
		    int colQtyInRs_tRedshiftInput_4 = rsmd_tRedshiftInput_4.getColumnCount();

		    String tmpContent_tRedshiftInput_4 = null;
		    
		    
		    while (rs_tRedshiftInput_4.next()) {
		        nb_line_tRedshiftInput_4++;
		        
							if(colQtyInRs_tRedshiftInput_4 < 1) {
								row4.MAILING_NAME = null;
							} else {
	                         		
        	row4.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_4, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 2) {
								row4.SUBJECT_LINE = null;
							} else {
	                         		
        	row4.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_4, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 3) {
								row4.LAUNCH_DATE = null;
							} else {
										
			row4.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_4, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 4) {
								row4.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_4.getObject(4) != null) {
                row4.DELIVERED = rs_tRedshiftInput_4.getInt(4);
            } else {
                    row4.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 5) {
								row4.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_4.getObject(5) != null) {
                row4.UNIQUE_OPENS = rs_tRedshiftInput_4.getInt(5);
            } else {
                    row4.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 6) {
								row4.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_4.getObject(6) != null) {
                row4.UNIQUE_OPEN_PCT = rs_tRedshiftInput_4.getDouble(6);
            } else {
                    row4.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 7) {
								row4.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_4.getObject(7) != null) {
                row4.UNIQUE_CLICKS = rs_tRedshiftInput_4.getInt(7);
            } else {
                    row4.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 8) {
								row4.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_4.getObject(8) != null) {
                row4.UNIQUE_CLICK_PCT = rs_tRedshiftInput_4.getDouble(8);
            } else {
                    row4.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 9) {
								row4.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_4.getObject(9) != null) {
                row4.CLICK_TO_OPEN = rs_tRedshiftInput_4.getDouble(9);
            } else {
                    row4.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 10) {
								row4.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_4.getObject(10) != null) {
                row4.CONVERSIONS = rs_tRedshiftInput_4.getInt(10);
            } else {
                    row4.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 11) {
								row4.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_4.getObject(11) != null) {
                row4.CONVERSION_RATE = rs_tRedshiftInput_4.getDouble(11);
            } else {
                    row4.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_4 < 12) {
								row4.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_4.getObject(12) != null) {
                row4.REVENUE = rs_tRedshiftInput_4.getDouble(12);
            } else {
                    row4.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_4 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_4 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_4";

	

 


	tos_count_tRedshiftInput_4++;

/**
 * [tRedshiftInput_4 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_3 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_3";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_3++;

/**
 * [tFileExcelSheetOutput_3 main ] stop
 */



	
	/**
	 * [tRedshiftInput_4 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_4";

	

	}
}finally{
	stmt_tRedshiftInput_4.close();

}
globalMap.put("tRedshiftInput_4_NB_LINE",nb_line_tRedshiftInput_4);

 

ok_Hash.put("tRedshiftInput_4", true);
end_Hash.put("tRedshiftInput_4", System.currentTimeMillis());




/**
 * [tRedshiftInput_4 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_3 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_3";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_3", true);
end_Hash.put("tFileExcelSheetOutput_3", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tFixedFlowInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_4 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_4";

	

 



/**
 * [tRedshiftInput_4 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_3";

	

 



/**
 * [tFileExcelSheetOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tFileExcelSheetOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_12", false);
		start_Hash.put("tFileExcelSheetOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_12 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_12().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_12 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_3().limitLog4jByte();

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row12.newColumn0 = "Total";
    	            	        	            	
    	            		row12.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row12.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row12.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row12.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row12.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row12.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row12.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row12.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row12.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_12 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_12";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_12++;

/**
 * [tFileExcelSheetOutput_12 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_12 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_12";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_12", true);
end_Hash.put("tFileExcelSheetOutput_12", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_12 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_12";

	

 



/**
 * [tFileExcelSheetOutput_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		
    	class BytesLimit65535_tJava_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_5().limitLog4jByte();


int mailingIndex = 3;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tRedshiftInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tFileExcelSheetOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_4", false);
		start_Hash.put("tFileExcelSheetOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_4 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_4().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_4 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_5", false);
		start_Hash.put("tRedshiftInput_5", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_5";

	
		int tos_count_tRedshiftInput_5 = 0;
		
    	class BytesLimit65535_tRedshiftInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_5 = 0;
		    java.sql.Connection conn_tRedshiftInput_5 = null;
		        conn_tRedshiftInput_5 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_5 = conn_tRedshiftInput_5.createStatement();

		    String dbquery_tRedshiftInput_5 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142485\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_5_QUERY",dbquery_tRedshiftInput_5);

		    java.sql.ResultSet rs_tRedshiftInput_5 = null;
		try{
		    rs_tRedshiftInput_5 = stmt_tRedshiftInput_5.executeQuery(dbquery_tRedshiftInput_5);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_5 = rs_tRedshiftInput_5.getMetaData();
		    int colQtyInRs_tRedshiftInput_5 = rsmd_tRedshiftInput_5.getColumnCount();

		    String tmpContent_tRedshiftInput_5 = null;
		    
		    
		    while (rs_tRedshiftInput_5.next()) {
		        nb_line_tRedshiftInput_5++;
		        
							if(colQtyInRs_tRedshiftInput_5 < 1) {
								row5.MAILING_NAME = null;
							} else {
	                         		
        	row5.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_5, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 2) {
								row5.SUBJECT_LINE = null;
							} else {
	                         		
        	row5.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_5, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 3) {
								row5.LAUNCH_DATE = null;
							} else {
										
			row5.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_5, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 4) {
								row5.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_5.getObject(4) != null) {
                row5.DELIVERED = rs_tRedshiftInput_5.getInt(4);
            } else {
                    row5.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 5) {
								row5.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_5.getObject(5) != null) {
                row5.UNIQUE_OPENS = rs_tRedshiftInput_5.getInt(5);
            } else {
                    row5.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 6) {
								row5.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_5.getObject(6) != null) {
                row5.UNIQUE_OPEN_PCT = rs_tRedshiftInput_5.getDouble(6);
            } else {
                    row5.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 7) {
								row5.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_5.getObject(7) != null) {
                row5.UNIQUE_CLICKS = rs_tRedshiftInput_5.getInt(7);
            } else {
                    row5.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 8) {
								row5.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_5.getObject(8) != null) {
                row5.UNIQUE_CLICK_PCT = rs_tRedshiftInput_5.getDouble(8);
            } else {
                    row5.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 9) {
								row5.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_5.getObject(9) != null) {
                row5.CLICK_TO_OPEN = rs_tRedshiftInput_5.getDouble(9);
            } else {
                    row5.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 10) {
								row5.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_5.getObject(10) != null) {
                row5.CONVERSIONS = rs_tRedshiftInput_5.getInt(10);
            } else {
                    row5.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 11) {
								row5.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_5.getObject(11) != null) {
                row5.CONVERSION_RATE = rs_tRedshiftInput_5.getDouble(11);
            } else {
                    row5.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_5 < 12) {
								row5.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_5.getObject(12) != null) {
                row5.REVENUE = rs_tRedshiftInput_5.getDouble(12);
            } else {
                    row5.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_5 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_5 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

 


	tos_count_tRedshiftInput_5++;

/**
 * [tRedshiftInput_5 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_4 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_4";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_4++;

/**
 * [tFileExcelSheetOutput_4 main ] stop
 */



	
	/**
	 * [tRedshiftInput_5 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

	}
}finally{
	stmt_tRedshiftInput_5.close();

}
globalMap.put("tRedshiftInput_5_NB_LINE",nb_line_tRedshiftInput_5);

 

ok_Hash.put("tRedshiftInput_5", true);
end_Hash.put("tRedshiftInput_5", System.currentTimeMillis());




/**
 * [tRedshiftInput_5 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_4 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_4";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_4", true);
end_Hash.put("tFileExcelSheetOutput_4", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tFixedFlowInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_5 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_5";

	

 



/**
 * [tRedshiftInput_5 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_4";

	

 



/**
 * [tFileExcelSheetOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tFileExcelSheetOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_13", false);
		start_Hash.put("tFileExcelSheetOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_13 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_13().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_13 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";

	
		int tos_count_tFixedFlowInput_4 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_4().limitLog4jByte();

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row13.newColumn0 = "Total";
    	            	        	            	
    	            		row13.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row13.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row13.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row13.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row13.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row13.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row13.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row13.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row13.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_13 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_13";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_13++;

/**
 * [tFileExcelSheetOutput_13 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_13 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_13";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_13", true);
end_Hash.put("tFileExcelSheetOutput_13", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_13 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tJava_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_13";

	

 



/**
 * [tFileExcelSheetOutput_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		
    	class BytesLimit65535_tJava_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_6().limitLog4jByte();


int mailingIndex = 4;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tRedshiftInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tFileExcelSheetOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_5", false);
		start_Hash.put("tFileExcelSheetOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_5 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_5().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_5 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_6", false);
		start_Hash.put("tRedshiftInput_6", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_6";

	
		int tos_count_tRedshiftInput_6 = 0;
		
    	class BytesLimit65535_tRedshiftInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_6().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_6 = 0;
		    java.sql.Connection conn_tRedshiftInput_6 = null;
		        conn_tRedshiftInput_6 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_6 = conn_tRedshiftInput_6.createStatement();

		    String dbquery_tRedshiftInput_6 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142486\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_6_QUERY",dbquery_tRedshiftInput_6);

		    java.sql.ResultSet rs_tRedshiftInput_6 = null;
		try{
		    rs_tRedshiftInput_6 = stmt_tRedshiftInput_6.executeQuery(dbquery_tRedshiftInput_6);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_6 = rs_tRedshiftInput_6.getMetaData();
		    int colQtyInRs_tRedshiftInput_6 = rsmd_tRedshiftInput_6.getColumnCount();

		    String tmpContent_tRedshiftInput_6 = null;
		    
		    
		    while (rs_tRedshiftInput_6.next()) {
		        nb_line_tRedshiftInput_6++;
		        
							if(colQtyInRs_tRedshiftInput_6 < 1) {
								row6.MAILING_NAME = null;
							} else {
	                         		
        	row6.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_6, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 2) {
								row6.SUBJECT_LINE = null;
							} else {
	                         		
        	row6.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_6, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 3) {
								row6.LAUNCH_DATE = null;
							} else {
										
			row6.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_6, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 4) {
								row6.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_6.getObject(4) != null) {
                row6.DELIVERED = rs_tRedshiftInput_6.getInt(4);
            } else {
                    row6.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 5) {
								row6.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_6.getObject(5) != null) {
                row6.UNIQUE_OPENS = rs_tRedshiftInput_6.getInt(5);
            } else {
                    row6.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 6) {
								row6.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_6.getObject(6) != null) {
                row6.UNIQUE_OPEN_PCT = rs_tRedshiftInput_6.getDouble(6);
            } else {
                    row6.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 7) {
								row6.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_6.getObject(7) != null) {
                row6.UNIQUE_CLICKS = rs_tRedshiftInput_6.getInt(7);
            } else {
                    row6.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 8) {
								row6.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_6.getObject(8) != null) {
                row6.UNIQUE_CLICK_PCT = rs_tRedshiftInput_6.getDouble(8);
            } else {
                    row6.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 9) {
								row6.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_6.getObject(9) != null) {
                row6.CLICK_TO_OPEN = rs_tRedshiftInput_6.getDouble(9);
            } else {
                    row6.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 10) {
								row6.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_6.getObject(10) != null) {
                row6.CONVERSIONS = rs_tRedshiftInput_6.getInt(10);
            } else {
                    row6.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 11) {
								row6.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_6.getObject(11) != null) {
                row6.CONVERSION_RATE = rs_tRedshiftInput_6.getDouble(11);
            } else {
                    row6.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_6 < 12) {
								row6.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_6.getObject(12) != null) {
                row6.REVENUE = rs_tRedshiftInput_6.getDouble(12);
            } else {
                    row6.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_6 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_6 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_6";

	

 


	tos_count_tRedshiftInput_6++;

/**
 * [tRedshiftInput_6 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_5 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_5";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_5++;

/**
 * [tFileExcelSheetOutput_5 main ] stop
 */



	
	/**
	 * [tRedshiftInput_6 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_6";

	

	}
}finally{
	stmt_tRedshiftInput_6.close();

}
globalMap.put("tRedshiftInput_6_NB_LINE",nb_line_tRedshiftInput_6);

 

ok_Hash.put("tRedshiftInput_6", true);
end_Hash.put("tRedshiftInput_6", System.currentTimeMillis());




/**
 * [tRedshiftInput_6 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_5 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_5";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_5", true);
end_Hash.put("tFileExcelSheetOutput_5", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_5 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tFixedFlowInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_6 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_6";

	

 



/**
 * [tRedshiftInput_6 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_5";

	

 



/**
 * [tFileExcelSheetOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tFileExcelSheetOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_14", false);
		start_Hash.put("tFileExcelSheetOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_14 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_14().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_14 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";

	
		int tos_count_tFixedFlowInput_5 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_5().limitLog4jByte();

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row14.newColumn0 = "Total";
    	            	        	            	
    	            		row14.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row14.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row14.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row14.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row14.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row14.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row14.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row14.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row14.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_14 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_14";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_14++;

/**
 * [tFileExcelSheetOutput_14 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_14 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_14";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_14", true);
end_Hash.put("tFileExcelSheetOutput_14", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_14 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk20", 0, "ok");
								} 
							
							tJava_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";

	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_14";

	

 



/**
 * [tFileExcelSheetOutput_14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";

	
		int tos_count_tJava_7 = 0;
		
    	class BytesLimit65535_tJava_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_7().limitLog4jByte();


int mailingIndex = 5;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());




/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tRedshiftInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";

	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFileExcelSheetOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_6", false);
		start_Hash.put("tFileExcelSheetOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_6 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_6().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_6 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_7", false);
		start_Hash.put("tRedshiftInput_7", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_7";

	
		int tos_count_tRedshiftInput_7 = 0;
		
    	class BytesLimit65535_tRedshiftInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_7().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_7 = 0;
		    java.sql.Connection conn_tRedshiftInput_7 = null;
		        conn_tRedshiftInput_7 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_7 = conn_tRedshiftInput_7.createStatement();

		    String dbquery_tRedshiftInput_7 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142487\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_7_QUERY",dbquery_tRedshiftInput_7);

		    java.sql.ResultSet rs_tRedshiftInput_7 = null;
		try{
		    rs_tRedshiftInput_7 = stmt_tRedshiftInput_7.executeQuery(dbquery_tRedshiftInput_7);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_7 = rs_tRedshiftInput_7.getMetaData();
		    int colQtyInRs_tRedshiftInput_7 = rsmd_tRedshiftInput_7.getColumnCount();

		    String tmpContent_tRedshiftInput_7 = null;
		    
		    
		    while (rs_tRedshiftInput_7.next()) {
		        nb_line_tRedshiftInput_7++;
		        
							if(colQtyInRs_tRedshiftInput_7 < 1) {
								row7.MAILING_NAME = null;
							} else {
	                         		
        	row7.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_7, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 2) {
								row7.SUBJECT_LINE = null;
							} else {
	                         		
        	row7.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_7, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 3) {
								row7.LAUNCH_DATE = null;
							} else {
										
			row7.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_7, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 4) {
								row7.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_7.getObject(4) != null) {
                row7.DELIVERED = rs_tRedshiftInput_7.getInt(4);
            } else {
                    row7.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 5) {
								row7.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_7.getObject(5) != null) {
                row7.UNIQUE_OPENS = rs_tRedshiftInput_7.getInt(5);
            } else {
                    row7.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 6) {
								row7.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_7.getObject(6) != null) {
                row7.UNIQUE_OPEN_PCT = rs_tRedshiftInput_7.getDouble(6);
            } else {
                    row7.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 7) {
								row7.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_7.getObject(7) != null) {
                row7.UNIQUE_CLICKS = rs_tRedshiftInput_7.getInt(7);
            } else {
                    row7.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 8) {
								row7.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_7.getObject(8) != null) {
                row7.UNIQUE_CLICK_PCT = rs_tRedshiftInput_7.getDouble(8);
            } else {
                    row7.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 9) {
								row7.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_7.getObject(9) != null) {
                row7.CLICK_TO_OPEN = rs_tRedshiftInput_7.getDouble(9);
            } else {
                    row7.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 10) {
								row7.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_7.getObject(10) != null) {
                row7.CONVERSIONS = rs_tRedshiftInput_7.getInt(10);
            } else {
                    row7.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 11) {
								row7.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_7.getObject(11) != null) {
                row7.CONVERSION_RATE = rs_tRedshiftInput_7.getDouble(11);
            } else {
                    row7.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_7 < 12) {
								row7.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_7.getObject(12) != null) {
                row7.REVENUE = rs_tRedshiftInput_7.getDouble(12);
            } else {
                    row7.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_7 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_7 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_7";

	

 


	tos_count_tRedshiftInput_7++;

/**
 * [tRedshiftInput_7 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_6 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_6";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_6++;

/**
 * [tFileExcelSheetOutput_6 main ] stop
 */



	
	/**
	 * [tRedshiftInput_7 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_7";

	

	}
}finally{
	stmt_tRedshiftInput_7.close();

}
globalMap.put("tRedshiftInput_7_NB_LINE",nb_line_tRedshiftInput_7);

 

ok_Hash.put("tRedshiftInput_7", true);
end_Hash.put("tRedshiftInput_7", System.currentTimeMillis());




/**
 * [tRedshiftInput_7 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_6 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_6";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_6", true);
end_Hash.put("tFileExcelSheetOutput_6", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tFixedFlowInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_7 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_7";

	

 



/**
 * [tRedshiftInput_7 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_6";

	

 



/**
 * [tFileExcelSheetOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tFileExcelSheetOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_15", false);
		start_Hash.put("tFileExcelSheetOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_15 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_15().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_15 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";

	
		int tos_count_tFixedFlowInput_6 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_6().limitLog4jByte();

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row15.newColumn0 = "Total";
    	            	        	            	
    	            		row15.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row15.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row15.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row15.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row15.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row15.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row15.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row15.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row15.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";

	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_15 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_15";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_15++;

/**
 * [tFileExcelSheetOutput_15 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";

	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_15 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_15";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_15", true);
end_Hash.put("tFileExcelSheetOutput_15", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_15 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tJava_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";

	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_15";

	

 



/**
 * [tFileExcelSheetOutput_15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";

	
		int tos_count_tJava_8 = 0;
		
    	class BytesLimit65535_tJava_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_8().limitLog4jByte();


int mailingIndex = 6;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());




/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
								} 
							
							tRedshiftInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";

	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tFileExcelSheetOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_7", false);
		start_Hash.put("tFileExcelSheetOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_7 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_7().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_7 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_8", false);
		start_Hash.put("tRedshiftInput_8", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_8";

	
		int tos_count_tRedshiftInput_8 = 0;
		
    	class BytesLimit65535_tRedshiftInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_8().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_8 = 0;
		    java.sql.Connection conn_tRedshiftInput_8 = null;
		        conn_tRedshiftInput_8 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_8 = conn_tRedshiftInput_8.createStatement();

		    String dbquery_tRedshiftInput_8 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142482\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_8_QUERY",dbquery_tRedshiftInput_8);

		    java.sql.ResultSet rs_tRedshiftInput_8 = null;
		try{
		    rs_tRedshiftInput_8 = stmt_tRedshiftInput_8.executeQuery(dbquery_tRedshiftInput_8);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_8 = rs_tRedshiftInput_8.getMetaData();
		    int colQtyInRs_tRedshiftInput_8 = rsmd_tRedshiftInput_8.getColumnCount();

		    String tmpContent_tRedshiftInput_8 = null;
		    
		    
		    while (rs_tRedshiftInput_8.next()) {
		        nb_line_tRedshiftInput_8++;
		        
							if(colQtyInRs_tRedshiftInput_8 < 1) {
								row8.MAILING_NAME = null;
							} else {
	                         		
        	row8.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_8, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 2) {
								row8.SUBJECT_LINE = null;
							} else {
	                         		
        	row8.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_8, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 3) {
								row8.LAUNCH_DATE = null;
							} else {
										
			row8.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_8, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 4) {
								row8.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_8.getObject(4) != null) {
                row8.DELIVERED = rs_tRedshiftInput_8.getInt(4);
            } else {
                    row8.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 5) {
								row8.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_8.getObject(5) != null) {
                row8.UNIQUE_OPENS = rs_tRedshiftInput_8.getInt(5);
            } else {
                    row8.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 6) {
								row8.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_8.getObject(6) != null) {
                row8.UNIQUE_OPEN_PCT = rs_tRedshiftInput_8.getDouble(6);
            } else {
                    row8.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 7) {
								row8.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_8.getObject(7) != null) {
                row8.UNIQUE_CLICKS = rs_tRedshiftInput_8.getInt(7);
            } else {
                    row8.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 8) {
								row8.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_8.getObject(8) != null) {
                row8.UNIQUE_CLICK_PCT = rs_tRedshiftInput_8.getDouble(8);
            } else {
                    row8.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 9) {
								row8.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_8.getObject(9) != null) {
                row8.CLICK_TO_OPEN = rs_tRedshiftInput_8.getDouble(9);
            } else {
                    row8.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 10) {
								row8.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_8.getObject(10) != null) {
                row8.CONVERSIONS = rs_tRedshiftInput_8.getInt(10);
            } else {
                    row8.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 11) {
								row8.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_8.getObject(11) != null) {
                row8.CONVERSION_RATE = rs_tRedshiftInput_8.getDouble(11);
            } else {
                    row8.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_8 < 12) {
								row8.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_8.getObject(12) != null) {
                row8.REVENUE = rs_tRedshiftInput_8.getDouble(12);
            } else {
                    row8.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_8 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_8 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_8";

	

 


	tos_count_tRedshiftInput_8++;

/**
 * [tRedshiftInput_8 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_7 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_7";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_7++;

/**
 * [tFileExcelSheetOutput_7 main ] stop
 */



	
	/**
	 * [tRedshiftInput_8 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_8";

	

	}
}finally{
	stmt_tRedshiftInput_8.close();

}
globalMap.put("tRedshiftInput_8_NB_LINE",nb_line_tRedshiftInput_8);

 

ok_Hash.put("tRedshiftInput_8", true);
end_Hash.put("tRedshiftInput_8", System.currentTimeMillis());




/**
 * [tRedshiftInput_8 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_7 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_7";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_7", true);
end_Hash.put("tFileExcelSheetOutput_7", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_7 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk34", 0, "ok");
								} 
							
							tFixedFlowInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_8 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_8";

	

 



/**
 * [tRedshiftInput_8 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_7";

	

 



/**
 * [tFileExcelSheetOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tFileExcelSheetOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_16", false);
		start_Hash.put("tFileExcelSheetOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_16 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_16().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_16 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";

	
		int tos_count_tFixedFlowInput_7 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_7().limitLog4jByte();

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row16.newColumn0 = "Total";
    	            	        	            	
    	            		row16.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row16.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row16.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row16.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row16.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row16.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row16.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row16.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row16.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";

	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_16 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_16++;

/**
 * [tFileExcelSheetOutput_16 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";

	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_16 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_16";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_16", true);
end_Hash.put("tFileExcelSheetOutput_16", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_16 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
								} 
							
							tJava_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";

	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_16";

	

 



/**
 * [tFileExcelSheetOutput_16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	

public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";

	
		int tos_count_tJava_9 = 0;
		
    	class BytesLimit65535_tJava_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_9().limitLog4jByte();


int mailingIndex = 7;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());




/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk36", 0, "ok");
								} 
							
							tRedshiftInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";

	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tFileExcelSheetOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_8", false);
		start_Hash.put("tFileExcelSheetOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_8 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_8().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_8 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_9", false);
		start_Hash.put("tRedshiftInput_9", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_9";

	
		int tos_count_tRedshiftInput_9 = 0;
		
    	class BytesLimit65535_tRedshiftInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_9().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_9 = 0;
		    java.sql.Connection conn_tRedshiftInput_9 = null;
		        conn_tRedshiftInput_9 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_9 = conn_tRedshiftInput_9.createStatement();

		    String dbquery_tRedshiftInput_9 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142483\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_9_QUERY",dbquery_tRedshiftInput_9);

		    java.sql.ResultSet rs_tRedshiftInput_9 = null;
		try{
		    rs_tRedshiftInput_9 = stmt_tRedshiftInput_9.executeQuery(dbquery_tRedshiftInput_9);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_9 = rs_tRedshiftInput_9.getMetaData();
		    int colQtyInRs_tRedshiftInput_9 = rsmd_tRedshiftInput_9.getColumnCount();

		    String tmpContent_tRedshiftInput_9 = null;
		    
		    
		    while (rs_tRedshiftInput_9.next()) {
		        nb_line_tRedshiftInput_9++;
		        
							if(colQtyInRs_tRedshiftInput_9 < 1) {
								row9.MAILING_NAME = null;
							} else {
	                         		
        	row9.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_9, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 2) {
								row9.SUBJECT_LINE = null;
							} else {
	                         		
        	row9.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_9, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 3) {
								row9.LAUNCH_DATE = null;
							} else {
										
			row9.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_9, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 4) {
								row9.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_9.getObject(4) != null) {
                row9.DELIVERED = rs_tRedshiftInput_9.getInt(4);
            } else {
                    row9.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 5) {
								row9.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_9.getObject(5) != null) {
                row9.UNIQUE_OPENS = rs_tRedshiftInput_9.getInt(5);
            } else {
                    row9.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 6) {
								row9.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_9.getObject(6) != null) {
                row9.UNIQUE_OPEN_PCT = rs_tRedshiftInput_9.getDouble(6);
            } else {
                    row9.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 7) {
								row9.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_9.getObject(7) != null) {
                row9.UNIQUE_CLICKS = rs_tRedshiftInput_9.getInt(7);
            } else {
                    row9.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 8) {
								row9.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_9.getObject(8) != null) {
                row9.UNIQUE_CLICK_PCT = rs_tRedshiftInput_9.getDouble(8);
            } else {
                    row9.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 9) {
								row9.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_9.getObject(9) != null) {
                row9.CLICK_TO_OPEN = rs_tRedshiftInput_9.getDouble(9);
            } else {
                    row9.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 10) {
								row9.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_9.getObject(10) != null) {
                row9.CONVERSIONS = rs_tRedshiftInput_9.getInt(10);
            } else {
                    row9.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 11) {
								row9.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_9.getObject(11) != null) {
                row9.CONVERSION_RATE = rs_tRedshiftInput_9.getDouble(11);
            } else {
                    row9.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_9 < 12) {
								row9.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_9.getObject(12) != null) {
                row9.REVENUE = rs_tRedshiftInput_9.getDouble(12);
            } else {
                    row9.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_9 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_9 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_9";

	

 


	tos_count_tRedshiftInput_9++;

/**
 * [tRedshiftInput_9 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_8 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_8";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_8++;

/**
 * [tFileExcelSheetOutput_8 main ] stop
 */



	
	/**
	 * [tRedshiftInput_9 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_9";

	

	}
}finally{
	stmt_tRedshiftInput_9.close();

}
globalMap.put("tRedshiftInput_9_NB_LINE",nb_line_tRedshiftInput_9);

 

ok_Hash.put("tRedshiftInput_9", true);
end_Hash.put("tRedshiftInput_9", System.currentTimeMillis());




/**
 * [tRedshiftInput_9 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_8 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_8";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_8", true);
end_Hash.put("tFileExcelSheetOutput_8", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_8 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk38", 0, "ok");
								} 
							
							tFixedFlowInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_9 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_9";

	

 



/**
 * [tRedshiftInput_9 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_8";

	

 



/**
 * [tFileExcelSheetOutput_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tFileExcelSheetOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_17", false);
		start_Hash.put("tFileExcelSheetOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_17 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_17().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_17 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";

	
		int tos_count_tFixedFlowInput_8 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_8().limitLog4jByte();

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row17.newColumn0 = "Total";
    	            	        	            	
    	            		row17.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row17.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row17.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row17.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row17.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row17.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row17.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row17.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row17.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";

	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_17 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_17";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_17++;

/**
 * [tFileExcelSheetOutput_17 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";

	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_17 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_17";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_17", true);
end_Hash.put("tFileExcelSheetOutput_17", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_17 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk37", 0, "ok");
								} 
							
							tJava_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";

	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_17";

	

 



/**
 * [tFileExcelSheetOutput_17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	

public void tJava_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";

	
		int tos_count_tJava_10 = 0;
		
    	class BytesLimit65535_tJava_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_10().limitLog4jByte();


int mailingIndex = 8;
int currentRowNo = (Integer)globalMap.get("startRowNo") + ((Integer)globalMap.get("reportDays") + 3) * mailingIndex;
globalMap.put("currentRowNo", currentRowNo);
 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());




/**
 * [tJava_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk39", 0, "ok");
								} 
							
							tRedshiftInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";

	

 



/**
 * [tJava_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String MAILING_NAME;

				public String getMAILING_NAME () {
					return this.MAILING_NAME;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public java.util.Date LAUNCH_DATE;

				public java.util.Date getLAUNCH_DATE () {
					return this.LAUNCH_DATE;
				}
				
			    public Integer DELIVERED;

				public Integer getDELIVERED () {
					return this.DELIVERED;
				}
				
			    public Integer UNIQUE_OPENS;

				public Integer getUNIQUE_OPENS () {
					return this.UNIQUE_OPENS;
				}
				
			    public Double UNIQUE_OPEN_PCT;

				public Double getUNIQUE_OPEN_PCT () {
					return this.UNIQUE_OPEN_PCT;
				}
				
			    public Integer UNIQUE_CLICKS;

				public Integer getUNIQUE_CLICKS () {
					return this.UNIQUE_CLICKS;
				}
				
			    public Double UNIQUE_CLICK_PCT;

				public Double getUNIQUE_CLICK_PCT () {
					return this.UNIQUE_CLICK_PCT;
				}
				
			    public Double CLICK_TO_OPEN;

				public Double getCLICK_TO_OPEN () {
					return this.CLICK_TO_OPEN;
				}
				
			    public Integer CONVERSIONS;

				public Integer getCONVERSIONS () {
					return this.CONVERSIONS;
				}
				
			    public Double CONVERSION_RATE;

				public Double getCONVERSION_RATE () {
					return this.CONVERSION_RATE;
				}
				
			    public Double REVENUE;

				public Double getREVENUE () {
					return this.REVENUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.MAILING_NAME = readString(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
					this.LAUNCH_DATE = readDate(dis);
					
						this.DELIVERED = readInteger(dis);
					
						this.UNIQUE_OPENS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_OPEN_PCT = null;
           				} else {
           			    	this.UNIQUE_OPEN_PCT = dis.readDouble();
           				}
					
						this.UNIQUE_CLICKS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIQUE_CLICK_PCT = null;
           				} else {
           			    	this.UNIQUE_CLICK_PCT = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CLICK_TO_OPEN = null;
           				} else {
           			    	this.CLICK_TO_OPEN = dis.readDouble();
           				}
					
						this.CONVERSIONS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CONVERSION_RATE = null;
           				} else {
           			    	this.CONVERSION_RATE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.REVENUE = null;
           				} else {
           			    	this.REVENUE = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MAILING_NAME,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// java.util.Date
				
						writeDate(this.LAUNCH_DATE,dos);
					
					// Integer
				
						writeInteger(this.DELIVERED,dos);
					
					// Integer
				
						writeInteger(this.UNIQUE_OPENS,dos);
					
					// Double
				
						if(this.UNIQUE_OPEN_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_OPEN_PCT);
		            	}
					
					// Integer
				
						writeInteger(this.UNIQUE_CLICKS,dos);
					
					// Double
				
						if(this.UNIQUE_CLICK_PCT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIQUE_CLICK_PCT);
		            	}
					
					// Double
				
						if(this.CLICK_TO_OPEN == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CLICK_TO_OPEN);
		            	}
					
					// Integer
				
						writeInteger(this.CONVERSIONS,dos);
					
					// Double
				
						if(this.CONVERSION_RATE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CONVERSION_RATE);
		            	}
					
					// Double
				
						if(this.REVENUE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.REVENUE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MAILING_NAME="+MAILING_NAME);
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",LAUNCH_DATE="+String.valueOf(LAUNCH_DATE));
		sb.append(",DELIVERED="+String.valueOf(DELIVERED));
		sb.append(",UNIQUE_OPENS="+String.valueOf(UNIQUE_OPENS));
		sb.append(",UNIQUE_OPEN_PCT="+String.valueOf(UNIQUE_OPEN_PCT));
		sb.append(",UNIQUE_CLICKS="+String.valueOf(UNIQUE_CLICKS));
		sb.append(",UNIQUE_CLICK_PCT="+String.valueOf(UNIQUE_CLICK_PCT));
		sb.append(",CLICK_TO_OPEN="+String.valueOf(CLICK_TO_OPEN));
		sb.append(",CONVERSIONS="+String.valueOf(CONVERSIONS));
		sb.append(",CONVERSION_RATE="+String.valueOf(CONVERSION_RATE));
		sb.append(",REVENUE="+String.valueOf(REVENUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tFileExcelSheetOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_9", false);
		start_Hash.put("tFileExcelSheetOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_9 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_9().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_9 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_10", false);
		start_Hash.put("tRedshiftInput_10", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_10";

	
		int tos_count_tRedshiftInput_10 = 0;
		
    	class BytesLimit65535_tRedshiftInput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_10().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_10 = 0;
		    java.sql.Connection conn_tRedshiftInput_10 = null;
		        conn_tRedshiftInput_10 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_10 = conn_tRedshiftInput_10.createStatement();

		    String dbquery_tRedshiftInput_10 = StringUtils.templateString(
"\nselect\n	mailing_name,\n	subject_line,\n	launch_date,\n	delivered,\n	unique_opens,\n	unique_open_pct,\n	unique_clicks,\n	unique_click_pct,\n	click_to_open,\n	conversions,\n	conversion_rate,\n	revenue\nfrom aggregation_report\nwhere mailing_id=142484\norder by launch_date\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
);
			

                       globalMap.put("tRedshiftInput_10_QUERY",dbquery_tRedshiftInput_10);

		    java.sql.ResultSet rs_tRedshiftInput_10 = null;
		try{
		    rs_tRedshiftInput_10 = stmt_tRedshiftInput_10.executeQuery(dbquery_tRedshiftInput_10);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_10 = rs_tRedshiftInput_10.getMetaData();
		    int colQtyInRs_tRedshiftInput_10 = rsmd_tRedshiftInput_10.getColumnCount();

		    String tmpContent_tRedshiftInput_10 = null;
		    
		    
		    while (rs_tRedshiftInput_10.next()) {
		        nb_line_tRedshiftInput_10++;
		        
							if(colQtyInRs_tRedshiftInput_10 < 1) {
								row10.MAILING_NAME = null;
							} else {
	                         		
        	row10.MAILING_NAME = routines.system.JDBCUtil.getString(rs_tRedshiftInput_10, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 2) {
								row10.SUBJECT_LINE = null;
							} else {
	                         		
        	row10.SUBJECT_LINE = routines.system.JDBCUtil.getString(rs_tRedshiftInput_10, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 3) {
								row10.LAUNCH_DATE = null;
							} else {
										
			row10.LAUNCH_DATE = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_10, 3);
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 4) {
								row10.DELIVERED = null;
							} else {
		                          
            if(rs_tRedshiftInput_10.getObject(4) != null) {
                row10.DELIVERED = rs_tRedshiftInput_10.getInt(4);
            } else {
                    row10.DELIVERED = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 5) {
								row10.UNIQUE_OPENS = null;
							} else {
		                          
            if(rs_tRedshiftInput_10.getObject(5) != null) {
                row10.UNIQUE_OPENS = rs_tRedshiftInput_10.getInt(5);
            } else {
                    row10.UNIQUE_OPENS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 6) {
								row10.UNIQUE_OPEN_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_10.getObject(6) != null) {
                row10.UNIQUE_OPEN_PCT = rs_tRedshiftInput_10.getDouble(6);
            } else {
                    row10.UNIQUE_OPEN_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 7) {
								row10.UNIQUE_CLICKS = null;
							} else {
		                          
            if(rs_tRedshiftInput_10.getObject(7) != null) {
                row10.UNIQUE_CLICKS = rs_tRedshiftInput_10.getInt(7);
            } else {
                    row10.UNIQUE_CLICKS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 8) {
								row10.UNIQUE_CLICK_PCT = null;
							} else {
	                         		
            if(rs_tRedshiftInput_10.getObject(8) != null) {
                row10.UNIQUE_CLICK_PCT = rs_tRedshiftInput_10.getDouble(8);
            } else {
                    row10.UNIQUE_CLICK_PCT = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 9) {
								row10.CLICK_TO_OPEN = null;
							} else {
	                         		
            if(rs_tRedshiftInput_10.getObject(9) != null) {
                row10.CLICK_TO_OPEN = rs_tRedshiftInput_10.getDouble(9);
            } else {
                    row10.CLICK_TO_OPEN = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 10) {
								row10.CONVERSIONS = null;
							} else {
		                          
            if(rs_tRedshiftInput_10.getObject(10) != null) {
                row10.CONVERSIONS = rs_tRedshiftInput_10.getInt(10);
            } else {
                    row10.CONVERSIONS = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 11) {
								row10.CONVERSION_RATE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_10.getObject(11) != null) {
                row10.CONVERSION_RATE = rs_tRedshiftInput_10.getDouble(11);
            } else {
                    row10.CONVERSION_RATE = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_10 < 12) {
								row10.REVENUE = null;
							} else {
	                         		
            if(rs_tRedshiftInput_10.getObject(12) != null) {
                row10.REVENUE = rs_tRedshiftInput_10.getDouble(12);
            } else {
                    row10.REVENUE = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_10 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_10 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_10";

	

 


	tos_count_tRedshiftInput_10++;

/**
 * [tRedshiftInput_10 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_9 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_9";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_9++;

/**
 * [tFileExcelSheetOutput_9 main ] stop
 */



	
	/**
	 * [tRedshiftInput_10 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_10";

	

	}
}finally{
	stmt_tRedshiftInput_10.close();

}
globalMap.put("tRedshiftInput_10_NB_LINE",nb_line_tRedshiftInput_10);

 

ok_Hash.put("tRedshiftInput_10", true);
end_Hash.put("tRedshiftInput_10", System.currentTimeMillis());




/**
 * [tRedshiftInput_10 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_9 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_9";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_9", true);
end_Hash.put("tFileExcelSheetOutput_9", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_9 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk40", 0, "ok");
								} 
							
							tFixedFlowInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_10 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_10";

	

 



/**
 * [tRedshiftInput_10 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_9";

	

 



/**
 * [tFileExcelSheetOutput_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[0];

	
			    public String newColumn0;

				public String getNewColumn0 () {
					return this.newColumn0;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Process_Engagement_Report, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Process_Engagement_Report) {

        	try {

        		int length = 0;
		
					this.newColumn0 = readString(dis);
					
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn0,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn0="+newColumn0);
		sb.append(",newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tFileExcelSheetOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelSheetOutput_18", false);
		start_Hash.put("tFileExcelSheetOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelSheetOutput_18";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileExcelSheetOutput_18 = 0;
		
    	class BytesLimit65535_tFileExcelSheetOutput_18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelSheetOutput_18().limitLog4jByte();

 



/**
 * [tFileExcelSheetOutput_18 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_9", false);
		start_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_9";

	
		int tos_count_tFixedFlowInput_9 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_9().limitLog4jByte();

	    for (int i_tFixedFlowInput_9 = 0 ; i_tFixedFlowInput_9 < 1 ; i_tFixedFlowInput_9++) {
	                	            	
    	            		row18.newColumn0 = "Total";
    	            	        	            	
    	            		row18.newColumn = "=SUM(D" + globalMap.get("currentRowNo") + ":D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row18.newColumn1 = "=SUM(E" + globalMap.get("currentRowNo") + ":E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row18.newColumn2 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row18.newColumn3 = "=SUM(G" + globalMap.get("currentRowNo") + ":G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row18.newColumn4 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row18.newColumn5 = "=IF(E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,G" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/E" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row18.newColumn6 = "=SUM(J" + globalMap.get("currentRowNo") + ":J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	        	            	
    	            		row18.newColumn7 = "=IF(D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "=0,0,J" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + "/D" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")) + ")";
    	            	        	            	
    	            		row18.newColumn8 = "=SUM(L" + globalMap.get("currentRowNo") + ":L" + ((Integer)globalMap.get("currentRowNo")+(Integer)globalMap.get("reportDays")-1) + ")";
    	            	
 



/**
 * [tFixedFlowInput_9 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_9 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";

	

 


	tos_count_tFixedFlowInput_9++;

/**
 * [tFixedFlowInput_9 main ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_18 main ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_18";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		

 


	tos_count_tFileExcelSheetOutput_18++;

/**
 * [tFileExcelSheetOutput_18 main ] stop
 */



	
	/**
	 * [tFixedFlowInput_9 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";

	

        }
        globalMap.put("tFixedFlowInput_9_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_9", true);
end_Hash.put("tFixedFlowInput_9", System.currentTimeMillis());




/**
 * [tFixedFlowInput_9 end ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_18 end ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_18";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileExcelSheetOutput_18", true);
end_Hash.put("tFileExcelSheetOutput_18", System.currentTimeMillis());




/**
 * [tFileExcelSheetOutput_18 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk41", 0, "ok");
								} 
							
							tFileExcelWorkbookSave_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_9 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_9";

	

 



/**
 * [tFixedFlowInput_9 finally ] stop
 */

	
	/**
	 * [tFileExcelSheetOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelSheetOutput_18";

	

 



/**
 * [tFileExcelSheetOutput_18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_9_SUBPROCESS_STATE", 1);
	}
	

public void tFileExcelWorkbookSave_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExcelWorkbookSave_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExcelWorkbookSave_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelWorkbookSave_1", false);
		start_Hash.put("tFileExcelWorkbookSave_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelWorkbookSave_1";

	
		int tos_count_tFileExcelWorkbookSave_1 = 0;
		
    	class BytesLimit65535_tFileExcelWorkbookSave_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelWorkbookSave_1().limitLog4jByte();

 



/**
 * [tFileExcelWorkbookSave_1 begin ] stop
 */
	
	/**
	 * [tFileExcelWorkbookSave_1 main ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookSave_1";

	

 


	tos_count_tFileExcelWorkbookSave_1++;

/**
 * [tFileExcelWorkbookSave_1 main ] stop
 */
	
	/**
	 * [tFileExcelWorkbookSave_1 end ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookSave_1";

	

 

ok_Hash.put("tFileExcelWorkbookSave_1", true);
end_Hash.put("tFileExcelWorkbookSave_1", System.currentTimeMillis());




/**
 * [tFileExcelWorkbookSave_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileExcelWorkbookSave_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tSendMail_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExcelWorkbookSave_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookSave_1";

	

 



/**
 * [tFileExcelWorkbookSave_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExcelWorkbookSave_1_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		
    	class BytesLimit65535_tSendMail_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSendMail_1().limitLog4jByte();

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = context.sendMailSMTPHost;
        String smtpPort_tSendMail_1 = context.sendMailSMTPPort;
	String from_tSendMail_1 = (context.sendMailFrom);
    String to_tSendMail_1 = (context.sendMailTo_Success).replace(";",",");
    String cc_tSendMail_1 = ((context.sendMailCc_IncompleteApp)==null || "".equals(context.sendMailCc_IncompleteApp))?null:(context.sendMailCc_IncompleteApp).replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Weekly Incomplete Applications Email Stats - " + context.environment + " - " + TalendDate.formatDate("yyyy-MM-dd", DateUtils.runDate(context.RunDate)));
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();
		attachments_tSendMail_1.add("/s3/engagement_report/engagement_report_" + TalendDate.formatDate("yyyy_MM_dd", DateUtils.runDate(context.RunDate)) + ".xlsx");
		contentTransferEncoding_tSendMail_1.add("DEFAULT");	

	String message_tSendMail_1 = (("Please find attached the weekly Incomplete Applications email engagement report generated automatically from the Marketing DB.") == null || "".equals("Please find attached the weekly Incomplete Applications email engagement report generated automatically from the Marketing DB.")) ? "\"\"" : ("Please find attached the weekly Incomplete Applications email engagement report generated automatically from the Marketing DB.") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");
		props_tSendMail_1.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_1 = context.sendMailPassword; 
				
				
				return new javax.mail.PasswordAuthentication(context.sendMailUserName, decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, context.sendMailSenderName));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "plain");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
			props_tSendMail_1.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExcelWorkbookOpen_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExcelWorkbookOpen_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExcelWorkbookOpen_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExcelWorkbookOpen_1", false);
		start_Hash.put("tFileExcelWorkbookOpen_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExcelWorkbookOpen_1";

	
		int tos_count_tFileExcelWorkbookOpen_1 = 0;
		
    	class BytesLimit65535_tFileExcelWorkbookOpen_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExcelWorkbookOpen_1().limitLog4jByte();

 



/**
 * [tFileExcelWorkbookOpen_1 begin ] stop
 */
	
	/**
	 * [tFileExcelWorkbookOpen_1 main ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookOpen_1";

	

 


	tos_count_tFileExcelWorkbookOpen_1++;

/**
 * [tFileExcelWorkbookOpen_1 main ] stop
 */
	
	/**
	 * [tFileExcelWorkbookOpen_1 end ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookOpen_1";

	

 

ok_Hash.put("tFileExcelWorkbookOpen_1", true);
end_Hash.put("tFileExcelWorkbookOpen_1", System.currentTimeMillis());




/**
 * [tFileExcelWorkbookOpen_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileExcelWorkbookOpen_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRedshiftRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExcelWorkbookOpen_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExcelWorkbookOpen_1";

	

 



/**
 * [tFileExcelWorkbookOpen_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExcelWorkbookOpen_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Process_Engagement_Report Process_Engagement_ReportClass = new Process_Engagement_Report();

        int exitCode = Process_Engagement_ReportClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Process_Engagement_Report.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/process_engagement_report_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("environment", "id_String");
				
                context.environment=(String) context.getProperty("environment");
				    context.setContextType("sendAlertTo_MissingFeed", "id_String");
				
                context.sendAlertTo_MissingFeed=(String) context.getProperty("sendAlertTo_MissingFeed");
				    context.setContextType("sendMailCc_IncompleteApp", "id_String");
				
                context.sendMailCc_IncompleteApp=(String) context.getProperty("sendMailCc_IncompleteApp");
				    context.setContextType("sendMailFrom", "id_String");
				
                context.sendMailFrom=(String) context.getProperty("sendMailFrom");
				    context.setContextType("sendMailPassword", "id_Password");
				
            		String pwd_sendMailPassword_value = context.getProperty("sendMailPassword");
            		context.sendMailPassword = null;
            		if(pwd_sendMailPassword_value!=null) {
            			if(context_param.containsKey("sendMailPassword")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.sendMailPassword = pwd_sendMailPassword_value;
            			} else if (!pwd_sendMailPassword_value.isEmpty()) {
            				try {
            					context.sendMailPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sendMailPassword_value);
            					context.put("sendMailPassword",context.sendMailPassword);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("sendMailSenderName", "id_String");
				
                context.sendMailSenderName=(String) context.getProperty("sendMailSenderName");
				    context.setContextType("sendMailSMTPHost", "id_String");
				
                context.sendMailSMTPHost=(String) context.getProperty("sendMailSMTPHost");
				    context.setContextType("sendMailSMTPPort", "id_String");
				
                context.sendMailSMTPPort=(String) context.getProperty("sendMailSMTPPort");
				    context.setContextType("sendMailTo_Failed", "id_String");
				
                context.sendMailTo_Failed=(String) context.getProperty("sendMailTo_Failed");
				    context.setContextType("sendMailTo_Success", "id_String");
				
                context.sendMailTo_Success=(String) context.getProperty("sendMailTo_Success");
				    context.setContextType("sendMailUserName", "id_String");
				
                context.sendMailUserName=(String) context.getProperty("sendMailUserName");
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("environment")) {
                context.environment = (String) parentContextMap.get("environment");
            }if (parentContextMap.containsKey("sendAlertTo_MissingFeed")) {
                context.sendAlertTo_MissingFeed = (String) parentContextMap.get("sendAlertTo_MissingFeed");
            }if (parentContextMap.containsKey("sendMailCc_IncompleteApp")) {
                context.sendMailCc_IncompleteApp = (String) parentContextMap.get("sendMailCc_IncompleteApp");
            }if (parentContextMap.containsKey("sendMailFrom")) {
                context.sendMailFrom = (String) parentContextMap.get("sendMailFrom");
            }if (parentContextMap.containsKey("sendMailPassword")) {
                context.sendMailPassword = (java.lang.String) parentContextMap.get("sendMailPassword");
            }if (parentContextMap.containsKey("sendMailSenderName")) {
                context.sendMailSenderName = (String) parentContextMap.get("sendMailSenderName");
            }if (parentContextMap.containsKey("sendMailSMTPHost")) {
                context.sendMailSMTPHost = (String) parentContextMap.get("sendMailSMTPHost");
            }if (parentContextMap.containsKey("sendMailSMTPPort")) {
                context.sendMailSMTPPort = (String) parentContextMap.get("sendMailSMTPPort");
            }if (parentContextMap.containsKey("sendMailTo_Failed")) {
                context.sendMailTo_Failed = (String) parentContextMap.get("sendMailTo_Failed");
            }if (parentContextMap.containsKey("sendMailTo_Success")) {
                context.sendMailTo_Success = (String) parentContextMap.get("sendMailTo_Success");
            }if (parentContextMap.containsKey("sendMailUserName")) {
                context.sendMailUserName = (String) parentContextMap.get("sendMailUserName");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("sendMailPassword");
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Process_Engagement_Report");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_1", globalMap.get("conn_tRedshiftConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     469984 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:39 PM CDT
 ************************************************************************************************/