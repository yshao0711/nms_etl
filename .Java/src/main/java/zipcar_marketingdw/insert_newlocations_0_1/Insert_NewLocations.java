// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.insert_newlocations_0_1;

import routines.Logging;
import routines.LocationUtils;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.DataUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Insert_NewLocations Purpose: Loads new members<br>
 * Description: Inserts new member records. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status DEV
 */
public class Insert_NewLocations implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
		}

public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Insert_NewLocations";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_i6DyUAgxEeekqfzVNGsKXg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Insert_NewLocations.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Insert_NewLocations.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Summary");
Logging.componentName(jobName, "tWarn_2", "Log_NewMembers");
Logging.componentName(jobName, "tWarn_3", "Log_RejectedInvalidFields");
Logging.componentName(jobName, "tWarn_4", "Log_RejectedLocation");

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSetGlobalVar_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("CURRENT_DATE", DateUtils.runDate(context.RunDate));
globalMap.put("ACTIVE_END_DATE", TalendDate.parseDate("yyyy-MM-dd","3199-12-31") );
globalMap.put("Location_New_Processed", new java.util.concurrent.atomic.AtomicInteger(0) );
globalMap.put("Location_New_Rejected", new java.util.concurrent.atomic.AtomicInteger(0) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRedshiftConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_2", false);
		start_Hash.put("tRedshiftConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_2";

	
		int tos_count_tRedshiftConnection_2 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_2().limitLog4jByte();


	
    			String url_tRedshiftConnection_2 = "jdbc:redshift://" + context.Redshift_Marketing_Server + ":" + context.Redshift_Marketing_Port + "/" + context.Redshift_Marketing_Database + "?" + context.Redshift_Marketing_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_2 = context.Redshift_Marketing_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_2 = context.Redshift_Marketing_Password; 
		String dbPwd_tRedshiftConnection_2 = decryptedPassword_tRedshiftConnection_2;
	

	java.sql.Connection conn_tRedshiftConnection_2 = null;
	
					String driverClass_tRedshiftConnection_2 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_2);
		
		conn_tRedshiftConnection_2 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_2,dbUser_tRedshiftConnection_2,dbPwd_tRedshiftConnection_2);

		globalMap.put("conn_tRedshiftConnection_2", conn_tRedshiftConnection_2);
	if (null != conn_tRedshiftConnection_2) {
		
			conn_tRedshiftConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_2",context.Redshift_Marketing_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_2",conn_tRedshiftConnection_2);

 



/**
 * [tRedshiftConnection_2 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 


	tos_count_tRedshiftConnection_2++;

/**
 * [tRedshiftConnection_2 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 

ok_Hash.put("tRedshiftConnection_2", true);
end_Hash.put("tRedshiftConnection_2", System.currentTimeMillis());




/**
 * [tRedshiftConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_2";

	

 



/**
 * [tRedshiftConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_2", false);
		start_Hash.put("tRedshiftClose_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_2";

	
		int tos_count_tRedshiftClose_2 = 0;
		
    	class BytesLimit65535_tRedshiftClose_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_2().limitLog4jByte();

 



/**
 * [tRedshiftClose_2 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	



	java.sql.Connection conn_tRedshiftClose_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
	if(conn_tRedshiftClose_2 != null && !conn_tRedshiftClose_2.isClosed())
	{
        conn_tRedshiftClose_2.close();
	}

 


	tos_count_tRedshiftClose_2++;

/**
 * [tRedshiftClose_2 main ] stop
 */
	
	/**
	 * [tRedshiftClose_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	

 

ok_Hash.put("tRedshiftClose_2", true);
end_Hash.put("tRedshiftClose_2", System.currentTimeMillis());




/**
 * [tRedshiftClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_2";

	

 



/**
 * [tRedshiftClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class new_rowsStruct implements routines.system.IPersistableRow<new_rowsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.location_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final new_rowsStruct other = (new_rowsStruct) obj;
		
						if (this.location_id != other.location_id)
							return false;
					

		return true;
    }

	public void copyDataTo(new_rowsStruct other) {

		other.location_id = this.location_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.address_id = this.address_id;
	            other.address_type = this.address_type;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.postal_code = this.postal_code;
	            other.region_name = this.region_name;
	            other.country_iso = this.country_iso;
	            other.is_active = this.is_active;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.is_new_platform = this.is_new_platform;
	            
	}

	public void copyKeysDataTo(new_rowsStruct other) {

		other.location_id = this.location_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(new_rowsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.location_id, other.location_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class inserted_locationsStruct implements routines.system.IPersistableRow<inserted_locationsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.location_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final inserted_locationsStruct other = (inserted_locationsStruct) obj;
		
						if (this.location_id != other.location_id)
							return false;
					

		return true;
    }

	public void copyDataTo(inserted_locationsStruct other) {

		other.location_id = this.location_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.address_id = this.address_id;
	            other.address_type = this.address_type;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.postal_code = this.postal_code;
	            other.region_name = this.region_name;
	            other.country_iso = this.country_iso;
	            other.is_active = this.is_active;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.is_new_platform = this.is_new_platform;
	            
	}

	public void copyKeysDataTo(inserted_locationsStruct other) {

		other.location_id = this.location_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(inserted_locationsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.location_id, other.location_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class active_new_locationsStruct implements routines.system.IPersistableRow<active_new_locationsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public Boolean is_active;

				public Boolean getIs_active () {
					return this.is_active;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.location_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final active_new_locationsStruct other = (active_new_locationsStruct) obj;
		
						if (this.location_id != other.location_id)
							return false;
					

		return true;
    }

	public void copyDataTo(active_new_locationsStruct other) {

		other.location_id = this.location_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.address_id = this.address_id;
	            other.address_type = this.address_type;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.postal_code = this.postal_code;
	            other.region_name = this.region_name;
	            other.country_iso = this.country_iso;
	            other.is_active = this.is_active;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.is_new_platform = this.is_new_platform;
	            
	}

	public void copyKeysDataTo(active_new_locationsStruct other) {

		other.location_id = this.location_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_active = null;
           				} else {
           			    	this.is_active = dis.readBoolean();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// Boolean
				
						if(this.is_active == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_active);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+String.valueOf(is_active));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(active_new_locationsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.location_id, other.location_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class location_valid_fieldsStruct implements routines.system.IPersistableRow<location_valid_fieldsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];

	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public String is_active;

				public String getIs_active () {
					return this.is_active;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
					this.is_active = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// String
				
						writeString(this.is_active,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+is_active);
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(location_valid_fieldsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class location_invalid_fieldsStruct implements routines.system.IPersistableRow<location_invalid_fieldsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public String is_active;

				public String getIs_active () {
					return this.is_active;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.location_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final location_invalid_fieldsStruct other = (location_invalid_fieldsStruct) obj;
		
						if (this.location_id != other.location_id)
							return false;
					

		return true;
    }

	public void copyDataTo(location_invalid_fieldsStruct other) {

		other.location_id = this.location_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.address_id = this.address_id;
	            other.address_type = this.address_type;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.postal_code = this.postal_code;
	            other.region_name = this.region_name;
	            other.country_iso = this.country_iso;
	            other.is_active = this.is_active;
	            other.is_new_platform = this.is_new_platform;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(location_invalid_fieldsStruct other) {

		other.location_id = this.location_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
					this.is_active = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// String
				
						writeString(this.is_active,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+is_active);
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(location_invalid_fieldsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.location_id, other.location_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class new_location_dataStruct implements routines.system.IPersistableRow<new_location_dataStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long location_id;

				public long getLocation_id () {
					return this.location_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public Long address_id;

				public Long getAddress_id () {
					return this.address_id;
				}
				
			    public String address_type;

				public String getAddress_type () {
					return this.address_type;
				}
				
			    public Double latitude;

				public Double getLatitude () {
					return this.latitude;
				}
				
			    public Double longitude;

				public Double getLongitude () {
					return this.longitude;
				}
				
			    public String postal_code;

				public String getPostal_code () {
					return this.postal_code;
				}
				
			    public String region_name;

				public String getRegion_name () {
					return this.region_name;
				}
				
			    public String country_iso;

				public String getCountry_iso () {
					return this.country_iso;
				}
				
			    public String is_active;

				public String getIs_active () {
					return this.is_active;
				}
				
			    public Boolean is_new_platform;

				public Boolean getIs_new_platform () {
					return this.is_new_platform;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.location_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final new_location_dataStruct other = (new_location_dataStruct) obj;
		
						if (this.location_id != other.location_id)
							return false;
					

		return true;
    }

	public void copyDataTo(new_location_dataStruct other) {

		other.location_id = this.location_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.address_id = this.address_id;
	            other.address_type = this.address_type;
	            other.latitude = this.latitude;
	            other.longitude = this.longitude;
	            other.postal_code = this.postal_code;
	            other.region_name = this.region_name;
	            other.country_iso = this.country_iso;
	            other.is_active = this.is_active;
	            other.is_new_platform = this.is_new_platform;
	            
	}

	public void copyKeysDataTo(new_location_dataStruct other) {

		other.location_id = this.location_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
			        this.location_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.address_id = null;
           				} else {
           			    	this.address_id = dis.readLong();
           				}
					
					this.address_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.latitude = null;
           				} else {
           			    	this.latitude = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.longitude = null;
           				} else {
           			    	this.longitude = dis.readDouble();
           				}
					
					this.postal_code = readString(dis);
					
					this.region_name = readString(dis);
					
					this.country_iso = readString(dis);
					
					this.is_active = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_new_platform = null;
           				} else {
           			    	this.is_new_platform = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.location_id);
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// Long
				
						if(this.address_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.address_id);
		            	}
					
					// String
				
						writeString(this.address_type,dos);
					
					// Double
				
						if(this.latitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.latitude);
		            	}
					
					// Double
				
						if(this.longitude == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.longitude);
		            	}
					
					// String
				
						writeString(this.postal_code,dos);
					
					// String
				
						writeString(this.region_name,dos);
					
					// String
				
						writeString(this.country_iso,dos);
					
					// String
				
						writeString(this.is_active,dos);
					
					// Boolean
				
						if(this.is_new_platform == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_new_platform);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("location_id="+String.valueOf(location_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",address_id="+String.valueOf(address_id));
		sb.append(",address_type="+address_type);
		sb.append(",latitude="+String.valueOf(latitude));
		sb.append(",longitude="+String.valueOf(longitude));
		sb.append(",postal_code="+postal_code);
		sb.append(",region_name="+region_name);
		sb.append(",country_iso="+country_iso);
		sb.append(",is_active="+is_active);
		sb.append(",is_new_platform="+String.valueOf(is_new_platform));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(new_location_dataStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.location_id, other.location_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		new_location_dataStruct new_location_data = new new_location_dataStruct();
location_valid_fieldsStruct location_valid_fields = new location_valid_fieldsStruct();
active_new_locationsStruct active_new_locations = new active_new_locationsStruct();
inserted_locationsStruct inserted_locations = new inserted_locationsStruct();
new_rowsStruct new_rows = new new_rowsStruct();
location_invalid_fieldsStruct location_invalid_fields = new location_invalid_fieldsStruct();








	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("new_rows" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_2 = 0;
		
    	class BytesLimit65535_tWarn_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_2().limitLog4jByte();

 



/**
 * [tWarn_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("inserted_locations" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("active_new_locations" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = (String)globalMap.get("schema_" + "tRedshiftConnection_2");
	
String tableName_tRedshiftOutput_1 = "d_location";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;
	conn_tRedshiftOutput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_2");
	
	
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						long location_id;
						
	            		public BufferLine_tRedshiftOutput_1 c0(long location_id){
							this.location_id = location_id;
							return this;
						}				
						Long zipfleet_id;
						
	            		public BufferLine_tRedshiftOutput_1 c1(Long zipfleet_id){
							this.zipfleet_id = zipfleet_id;
							return this;
						}				
						Long address_id;
						
	            		public BufferLine_tRedshiftOutput_1 c2(Long address_id){
							this.address_id = address_id;
							return this;
						}				
						String address_type;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String address_type){
							this.address_type = address_type;
							return this;
						}				
						Double latitude;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Double latitude){
							this.latitude = latitude;
							return this;
						}				
						Double longitude;
						
	            		public BufferLine_tRedshiftOutput_1 c5(Double longitude){
							this.longitude = longitude;
							return this;
						}				
						String postal_code;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String postal_code){
							this.postal_code = postal_code;
							return this;
						}				
						String region_name;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String region_name){
							this.region_name = region_name;
							return this;
						}				
						String country_iso;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String country_iso){
							this.country_iso = country_iso;
							return this;
						}				
						Boolean is_active;
						
	            		public BufferLine_tRedshiftOutput_1 c9(Boolean is_active){
							this.is_active = is_active;
							return this;
						}				
						java.util.Date start_date;
						
	            		public BufferLine_tRedshiftOutput_1 c10(java.util.Date start_date){
							this.start_date = start_date;
							return this;
						}				
						java.util.Date end_date;
						
	            		public BufferLine_tRedshiftOutput_1 c11(java.util.Date end_date){
							this.end_date = end_date;
							return this;
						}				
						Boolean is_new_platform;
						
	            		public BufferLine_tRedshiftOutput_1 c12(Boolean is_new_platform){
							this.is_new_platform = is_new_platform;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 2000;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=2000-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"location_id\",\"zipfleet_id\",\"address_id\",\"address_type\",\"latitude\",\"longitude\",\"postal_code\",\"region_name\",\"country_iso\",\"is_active\",\"start_date\",\"end_date\",\"is_new_platform\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("location_valid_fields" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	java.util.Date currentDate;
	java.util.Date endDate;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
active_new_locationsStruct active_new_locations_tmp = new active_new_locationsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */




	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("location_invalid_fields" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_4 = 0;
		
    	class BytesLimit65535_tWarn_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_4().limitLog4jByte();

 



/**
 * [tWarn_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("new_location_data" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
				String driverClass_tRedshiftInput_1 = "com.amazon.redshift.jdbc41.Driver";
			    java.lang.Class.forName(driverClass_tRedshiftInput_1);
			   	String dbUser_tRedshiftInput_1 = context.Redshift_Marketing_Login;
			   	
        		
        		
        		
	final String decryptedPassword_tRedshiftInput_1 = context.Redshift_Marketing_Password; 
			   	
		        String dbPwd_tRedshiftInput_1 = decryptedPassword_tRedshiftInput_1;
		        
				
			if (0 > 0) {
				java.io.Writer output_tRedshiftInput_1 = new java.io.FileWriter("/Volumes/Development/Clients/Zipcar/workspace/redshift-jdbc.log", true);
				java.sql.DriverManager.setLogWriter(new java.io.PrintWriter(output_tRedshiftInput_1,true));
			}
			
			StringBuilder sbuilder_tRedshiftInput_1 = new StringBuilder();
			sbuilder_tRedshiftInput_1.append("jdbc:redshift://").append(context.Redshift_Marketing_Server).append(":").append(context.Redshift_Marketing_Port).append("/").append(context.Redshift_Marketing_Database).append("?loglevel=").append(0);
			
        		sbuilder_tRedshiftInput_1.append("&").append(context.Redshift_Marketing_AdditionalParams);
        	
            String url_tRedshiftInput_1 = sbuilder_tRedshiftInput_1.toString();
				
				conn_tRedshiftInput_1 = java.sql.DriverManager.getConnection(url_tRedshiftInput_1,dbUser_tRedshiftInput_1,dbPwd_tRedshiftInput_1);
		        
				conn_tRedshiftInput_1.setAutoCommit(false);
			
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();
                stmt_tRedshiftInput_1.setFetchSize(3000);

		    String dbquery_tRedshiftInput_1 = StringUtils.templateString(
"\nWITH all_locations as (\n    SELECT * from {{marketing.schema}}.r_location\n    WHERE\n        imported_date <= {{rundate}}\n), new_locations as (\n    SELECT t1.* from all_locations t1\n    LEFT JOIN all_locations t2 ON\n        t1.location_id = t2.location_id\n        AND t1.imported_date < t2.imported_date\n    WHERE\n        t2.imported_date is NULL\n        AND (t1.location_id, false) NOT IN \n		(SELECT location_id, is_new_platform from {{marketing.schema}}.d_location where end_date = '3199-12-31')\n), location_addresses as (\n    SELECT ra.* FROM new_locations lo\n    JOIN {{marketing.schema}}.r_address ra ON\n        ra.address_id = lo.address_id\n        AND (ra.member_id IS NULL AND ra.account_id IS NULL)\n    WHERE\n        ra.imported_date <= {{rundate}}\n), new_addresses as (\n    SELECT t1.* from location_addresses t1\n    LEFT JOIN location_addresses t2 ON\n        t1.address_id = t2.address_id\n        AND t1.imported_date < t2.imported_date\n    WHERE\n        t2.imported_date is NULL\n)\nSELECT DISTINCT \n    lo.location_id,\n    lo.zipfleet_id,\n    lo.address_id,\n    ra.address_type,\n    ra.latitude,\n    ra.longitude,\n    ra.postal_code,\n    ra.region_name,\n    iso.country_id AS country_iso, \n    online_p AS is_active,\n    FALSE AS is_new_platform\nFROM new_locations lo\nLEFT JOIN new_addresses ra ON \n    ra.address_id = lo.address_id\nLEFT JOIN {{marketing.schema}}.l_iso_country AS iso ON \n    lower(ra.country_name) = lower(iso.name)\n    OR lower(ra.country_name) = lower(iso.aliases)\nWHERE \n    (lo.imported_date = {{rundate}} OR ra.imported_date = {{rundate}})\n\nUNION ALL (\n\nWITH all_locations_np AS (\n	SELECT * from {{marketing.schema}}.r_location_np\n    WHERE imported_date <= {{rundate}}\n)\n,new_locations_np AS (\n	SELECT t1.* from all_locations_np t1\n    LEFT JOIN all_locations_np t2 ON\n        t1.location_id = t2.location_id\n        AND t1.imported_date < t2.imported_date\n    WHERE\n        t2.imported_date is NULL\n    AND (t1.location_id, true) NOT IN \n    	(SELECT location_id, is_new_platform from {{marketing.schema}}.d_location where end_date = '3199-12-31')\n),\nnp_location_country as (\n   select\n      location_id,\n      case\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0 and regexp_instr(address,'France') > 0) then 'FR'\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0 and regexp_instr(address,'Germany') > 0) then 'DE'\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0 and regexp_instr(address,'Spain') > 0) then 'ES'\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0 and regexp_instr(address,'Turkey') > 0) then 'TR'\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0 and regexp_instr(address,'Taiwan') > 0) then 'TW'\n         when (regexp_instr(address,'\\\\d{3}', 5) > 0 and regexp_instr(address,'Taiwan') > 0) then 'TW'\n         when (regexp_instr(address,'\\\\d{4}', 5) > 0 and regexp_instr(address,'Australia') > 0) then 'AU'\n         when (regexp_instr(address,'\\\\d{4}', 5) > 0 and regexp_instr(address,'Austria') > 0) then 'AT'\n         when (regexp_instr(address,'[A-Za-z]\\\\d[A-Za-z]', 5) > 0) then 'CA'\n         when (regexp_instr(address,'\\\\d{5}', 5) > 0) then 'US'\n         when (regexp_instr(address,'(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))', 5) > 0 and regexp_instr(address,'United Kingdom') > 0) then 'GB'\n      end as country_iso\n   from new_locations_np\n)\n,np_location_postalcode_country as (\n   select\n      l.location_id,\n      address,\n      case\n         when lc.country_iso in ('US', 'FR', 'DE', 'ES', 'TR') then regexp_substr(address,'\\\\d{5}', 5)\n         when lc.country_iso in ('AU', 'AT') then regexp_substr(address,'\\\\d{4}', 5)\n         when lc.country_iso = 'TW' then nvl(regexp_substr(address,'\\\\d{5}', 5), regexp_substr(address,'\\\\d{3}', 5))\n         when lc.country_iso = 'CA' then regexp_substr(address,'[A-Za-z]\\\\d[A-Za-z]', 5)\n         when lc.country_iso = 'GB' then regexp_substr(address,'(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))', 5)\n      end as postal_code,\n      lc.country_iso\n   from new_locations_np l\n   left join np_location_country lc\n   on l.location_id = lc.location_id\n)\nSELECT \n	l.location_id,\n	NULL::BIGINT AS zipfleet_id,\n	NULL::BIGINT AS address_id,\n	NULL AS address_type,\n	l.latitude,\n	l.longitude,\n	NVL(lpc.postal_code, dl.postal_code) AS postal_code,\n	NULL AS region_name,\n	NVL(lpc.country_iso, dl.country_iso) AS country_iso,\n	active_p AS is_active,\n	TRUE AS is_new_platform\nFROM new_locations_np l\nleft join np_location_postalcode_country lpc\non l.location_id = lpc.location_id\nleft join {{marketing.schema}}.d_location dl\non l.legacy_location_id = dl.location_id\nand dl.is_new_platform = false\nand dl.end_date = '3199-12-31'\nWHERE imported_date = {{rundate}}\n);\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"rundate", DateUtils.dateToSqlStr((Date) globalMap.get("CURRENT_DATE"))
)
;
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								new_location_data.location_id = 0;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(1) != null) {
                new_location_data.location_id = rs_tRedshiftInput_1.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 2) {
								new_location_data.zipfleet_id = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(2) != null) {
                new_location_data.zipfleet_id = rs_tRedshiftInput_1.getLong(2);
            } else {
                    new_location_data.zipfleet_id = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 3) {
								new_location_data.address_id = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(3) != null) {
                new_location_data.address_id = rs_tRedshiftInput_1.getLong(3);
            } else {
                    new_location_data.address_id = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 4) {
								new_location_data.address_type = null;
							} else {
	                         		
        	new_location_data.address_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 4, true);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 5) {
								new_location_data.latitude = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(5) != null) {
                new_location_data.latitude = rs_tRedshiftInput_1.getDouble(5);
            } else {
                    new_location_data.latitude = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 6) {
								new_location_data.longitude = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(6) != null) {
                new_location_data.longitude = rs_tRedshiftInput_1.getDouble(6);
            } else {
                    new_location_data.longitude = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 7) {
								new_location_data.postal_code = null;
							} else {
	                         		
        	new_location_data.postal_code = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 7, true);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 8) {
								new_location_data.region_name = null;
							} else {
	                         		
        	new_location_data.region_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 8, true);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 9) {
								new_location_data.country_iso = null;
							} else {
	                         		
        	new_location_data.country_iso = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 9, true);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 10) {
								new_location_data.is_active = null;
							} else {
	                         		
        	new_location_data.is_active = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 10, true);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 11) {
								new_location_data.is_new_platform = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(11) != null) {
                new_location_data.is_new_platform = rs_tRedshiftInput_1.getBoolean(11);
            } else {
                    new_location_data.is_new_platform = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//new_location_data
			//new_location_data


			
				if(execStat){
					runStat.updateStatOnConnection("new_location_data"+iterateId,1, 1);
				} 
			

		

          location_invalid_fields = null;
          location_valid_fields = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
	        ope_tFilterRow_1.matches((new_location_data.latitude != null)
	                       , "latitude!=null failed");
	        ope_tFilterRow_1.matches((new_location_data.longitude != null)
	                       , "longitude!=null failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(location_valid_fields == null){ 
                location_valid_fields = new location_valid_fieldsStruct();
              }
               location_valid_fields.location_id = new_location_data.location_id;
               location_valid_fields.zipfleet_id = new_location_data.zipfleet_id;
               location_valid_fields.address_id = new_location_data.address_id;
               location_valid_fields.address_type = new_location_data.address_type;
               location_valid_fields.latitude = new_location_data.latitude;
               location_valid_fields.longitude = new_location_data.longitude;
               location_valid_fields.postal_code = new_location_data.postal_code;
               location_valid_fields.region_name = new_location_data.region_name;
               location_valid_fields.country_iso = new_location_data.country_iso;
               location_valid_fields.is_active = new_location_data.is_active;
               location_valid_fields.is_new_platform = new_location_data.is_new_platform;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (location_invalid_fields == null){
              location_invalid_fields = new location_invalid_fieldsStruct();
            }
                location_invalid_fields.location_id = new_location_data.location_id;
                location_invalid_fields.zipfleet_id = new_location_data.zipfleet_id;
                location_invalid_fields.address_id = new_location_data.address_id;
                location_invalid_fields.address_type = new_location_data.address_type;
                location_invalid_fields.latitude = new_location_data.latitude;
                location_invalid_fields.longitude = new_location_data.longitude;
                location_invalid_fields.postal_code = new_location_data.postal_code;
                location_invalid_fields.region_name = new_location_data.region_name;
                location_invalid_fields.country_iso = new_location_data.country_iso;
                location_invalid_fields.is_active = new_location_data.is_active;
                location_invalid_fields.is_new_platform = new_location_data.is_new_platform;
	            location_invalid_fields.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "location_valid_fields"
if(location_valid_fields != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//location_valid_fields
			//location_valid_fields


			
				if(execStat){
					runStat.updateStatOnConnection("location_valid_fields"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.currentDate = (Date) globalMap.get("CURRENT_DATE");
Var.endDate = (Date) globalMap.get("ACTIVE_END_DATE");// ###############################
        // ###############################
        // # Output tables

active_new_locations = null;


// # Output table : 'active_new_locations'
active_new_locations_tmp.location_id = location_valid_fields.location_id ;
active_new_locations_tmp.zipfleet_id = location_valid_fields.zipfleet_id ;
active_new_locations_tmp.address_id = location_valid_fields.address_id ;
active_new_locations_tmp.address_type = StringUtils.trimToNull(location_valid_fields.address_type) ;
active_new_locations_tmp.latitude = location_valid_fields.latitude ;
active_new_locations_tmp.longitude = location_valid_fields.longitude ;
active_new_locations_tmp.postal_code = LocationUtils.basePostalCode(location_valid_fields.postal_code, location_valid_fields.country_iso) ;
active_new_locations_tmp.region_name = StringUtils.trimToNull(location_valid_fields.region_name) ;
active_new_locations_tmp.country_iso = StringUtils.trimToNull(location_valid_fields.country_iso) ;
active_new_locations_tmp.is_active = BooleanUtils.isTrue(location_valid_fields.is_active) ;
active_new_locations_tmp.start_date = Var.currentDate ;
active_new_locations_tmp.end_date = Var.endDate ;
active_new_locations_tmp.is_new_platform = location_valid_fields.is_new_platform ;
active_new_locations = active_new_locations_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "active_new_locations"
if(active_new_locations != null) { 



	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//active_new_locations
			//active_new_locations


			
				if(execStat){
					runStat.updateStatOnConnection("active_new_locations"+iterateId,1, 1);
				} 
			

		



            inserted_locations = null;
        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(13
					)
				+ 1;

						
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,active_new_locations.location_id);
							
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.zipfleet_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,active_new_locations.zipfleet_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.address_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,active_new_locations.address_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.address_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,active_new_locations.address_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.latitude==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,active_new_locations.latitude);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.longitude==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,active_new_locations.longitude);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.postal_code==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,active_new_locations.postal_code);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.region_name==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,active_new_locations.region_name);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.country_iso==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,active_new_locations.country_iso);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.is_active==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.BOOLEAN);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setBoolean(countertRedshiftOutput_1,active_new_locations.is_active);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.start_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = active_new_locations.start_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.end_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = active_new_locations.end_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(active_new_locations.is_new_platform==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.BOOLEAN);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setBoolean(countertRedshiftOutput_1,active_new_locations.is_new_platform);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(active_new_locations.location_id)
                        .c1(active_new_locations.zipfleet_id)
                        .c2(active_new_locations.address_id)
                        .c3(active_new_locations.address_type)
                        .c4(active_new_locations.latitude)
                        .c5(active_new_locations.longitude)
                        .c6(active_new_locations.postal_code)
                        .c7(active_new_locations.region_name)
                        .c8(active_new_locations.country_iso)
                        .c9(active_new_locations.is_active)
                        .c10(active_new_locations.start_date)
                        .c11(active_new_locations.end_date)
                        .c12(active_new_locations.is_new_platform)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 2000){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
            if(!whetherReject_tRedshiftOutput_1) {
                            inserted_locations = new inserted_locationsStruct();
                                inserted_locations.location_id = active_new_locations.location_id;
                                inserted_locations.zipfleet_id = active_new_locations.zipfleet_id;
                                inserted_locations.address_id = active_new_locations.address_id;
                                inserted_locations.address_type = active_new_locations.address_type;
                                inserted_locations.latitude = active_new_locations.latitude;
                                inserted_locations.longitude = active_new_locations.longitude;
                                inserted_locations.postal_code = active_new_locations.postal_code;
                                inserted_locations.region_name = active_new_locations.region_name;
                                inserted_locations.country_iso = active_new_locations.country_iso;
                                inserted_locations.is_active = active_new_locations.is_active;
                                inserted_locations.start_date = active_new_locations.start_date;
                                inserted_locations.end_date = active_new_locations.end_date;
                                inserted_locations.is_new_platform = active_new_locations.is_new_platform;
            }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */
// Start of branch "inserted_locations"
if(inserted_locations != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//inserted_locations
			//inserted_locations


			
				if(execStat){
					runStat.updateStatOnConnection("inserted_locations"+iterateId,1, 1);
				} 
			

		

          new_rows = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
      ope_tFilterRow_2.matches((// Log Every X Records
((java.util.concurrent.atomic.AtomicInteger) globalMap.get("Location_New_Processed")).incrementAndGet() % Logging.PROGRESS_ROW_COUNT == 0
			), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(new_rows == null){ 
                new_rows = new new_rowsStruct();
              }
               new_rows.location_id = inserted_locations.location_id;
               new_rows.zipfleet_id = inserted_locations.zipfleet_id;
               new_rows.address_id = inserted_locations.address_id;
               new_rows.address_type = inserted_locations.address_type;
               new_rows.latitude = inserted_locations.latitude;
               new_rows.longitude = inserted_locations.longitude;
               new_rows.postal_code = inserted_locations.postal_code;
               new_rows.region_name = inserted_locations.region_name;
               new_rows.country_iso = inserted_locations.country_iso;
               new_rows.is_active = inserted_locations.is_active;
               new_rows.start_date = inserted_locations.start_date;
               new_rows.end_date = inserted_locations.end_date;
               new_rows.is_new_platform = inserted_locations.is_new_platform;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
// Start of branch "new_rows"
if(new_rows != null) { 



	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			//new_rows
			//new_rows


			
				if(execStat){
					runStat.updateStatOnConnection("new_rows"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "TRACE","","Rows inserted (d_location): " + globalMap.get("Location_New_Processed"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 1, "Rows inserted (d_location): " + globalMap.get("Location_New_Processed"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_2_WARN_MESSAGES", "Rows inserted (d_location): " + globalMap.get("Location_New_Processed")); 
globalMap.put("tWarn_2_WARN_PRIORITY", 1);
globalMap.put("tWarn_2_WARN_CODE", 42);


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */

} // End of branch "new_rows"





} // End of branch "inserted_locations"





} // End of branch "active_new_locations"





} // End of branch "location_valid_fields"




// Start of branch "location_invalid_fields"
if(location_invalid_fields != null) { 



	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			//location_invalid_fields
			//location_invalid_fields


			
				if(execStat){
					runStat.updateStatOnConnection("location_invalid_fields"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "WARN","","Rejected Location Id: " +location_invalid_fields.location_id  + ", Error: " + location_invalid_fields.errorMessage,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 4, "Rejected Location Id: " +location_invalid_fields.location_id  + ", Error: " + location_invalid_fields.errorMessage, 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_4_WARN_MESSAGES", "Rejected Location Id: " +location_invalid_fields.location_id  + ", Error: " + location_invalid_fields.errorMessage); 
globalMap.put("tWarn_4_WARN_PRIORITY", 4);
globalMap.put("tWarn_4_WARN_CODE", 42);


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */

} // End of branch "location_invalid_fields"







	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

		if(conn_tRedshiftInput_1 != null && !conn_tRedshiftInput_1.isClosed()) {
			
			conn_tRedshiftInput_1.commit();
			
			
			conn_tRedshiftInput_1.close();
			
		}
}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());




/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("new_location_data"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("location_valid_fields"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"location_id\",\"zipfleet_id\",\"address_id\",\"address_type\",\"latitude\",\"longitude\",\"postal_code\",\"region_name\",\"country_iso\",\"is_active\",\"start_date\",\"end_date\",\"is_new_platform\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(13
					)
				+ 1;
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.location_id);
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.zipfleet_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.zipfleet_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.address_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.address_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.address_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.address_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.latitude==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.latitude);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.longitude==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.longitude);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.postal_code==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.postal_code);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.region_name==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.region_name);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.country_iso==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.country_iso);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.is_active==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.BOOLEAN);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setBoolean(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.is_active);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.start_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.start_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.end_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.end_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.is_new_platform==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.BOOLEAN);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setBoolean(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.is_new_platform);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("active_new_locations"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("inserted_locations"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("new_rows"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */













	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("location_invalid_fields"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */













	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","New Locations Inserted: " + ((java.util.concurrent.atomic.AtomicInteger) globalMap.get("Location_New_Processed")).get(),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "New Locations Inserted: " + ((java.util.concurrent.atomic.AtomicInteger) globalMap.get("Location_New_Processed")).get(), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "New Locations Inserted: " + ((java.util.concurrent.atomic.AtomicInteger) globalMap.get("Location_New_Processed")).get()); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tWarn_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		
    	class BytesLimit65535_tWarn_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_3().limitLog4jByte();

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Rejected Locations Invalid Fields: " + DataUtils.coalesce( ((Integer)globalMap.get("tFilterRow_1_NB_LINE_REJECT")), 0),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "Rejected Locations Invalid Fields: " + DataUtils.coalesce( ((Integer)globalMap.get("tFilterRow_1_NB_LINE_REJECT")), 0), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_3_WARN_MESSAGES", "Rejected Locations Invalid Fields: " + DataUtils.coalesce( ((Integer)globalMap.get("tFilterRow_1_NB_LINE_REJECT")), 0)); 
globalMap.put("tWarn_3_WARN_PRIORITY", 3);
globalMap.put("tWarn_3_WARN_CODE", 42);


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Insert_NewLocations, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Insert_NewLocations) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_2", false);
		start_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_2 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_2().limitLog4jByte();





String dbschema_tRedshiftOutput_2 = null;
	dbschema_tRedshiftOutput_2 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_2 = "job_stats";
String schemaForSearch_tRedshiftOutput_2 = null;
String tableForSearch_tRedshiftOutput_2 = tableName_tRedshiftOutput_2;
    if(dbschema_tRedshiftOutput_2 != null && dbschema_tRedshiftOutput_2.trim().length() > 0) {
    	tableName_tRedshiftOutput_2 = dbschema_tRedshiftOutput_2 + "\".\"" + tableName_tRedshiftOutput_2;
    }

int nb_line_tRedshiftOutput_2 = 0;
int nb_line_update_tRedshiftOutput_2 = 0;
int nb_line_inserted_tRedshiftOutput_2 = 0;
int nb_line_deleted_tRedshiftOutput_2 = 0;
int nb_line_rejected_tRedshiftOutput_2 = 0;

int deletedCount_tRedshiftOutput_2=0;
int updatedCount_tRedshiftOutput_2=0;
int insertedCount_tRedshiftOutput_2=0;
int rejectedCount_tRedshiftOutput_2=0;

java.util.Calendar calendar_tRedshiftOutput_2 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
calendar_tRedshiftOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
long date_tRedshiftOutput_2;

boolean whetherReject_tRedshiftOutput_2 = false;


java.sql.Connection conn_tRedshiftOutput_2 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_2 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_2 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_2 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_2 = decryptedPassword_tRedshiftOutput_2;
    conn_tRedshiftOutput_2 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_2,dbUser_tRedshiftOutput_2,dbPwd_tRedshiftOutput_2);
	
	resourceMap.put("conn_tRedshiftOutput_2", conn_tRedshiftOutput_2);
    conn_tRedshiftOutput_2.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_2 = 10000;
        int commitCounter_tRedshiftOutput_2 = 0;
int count_tRedshiftOutput_2=0;
	
			int rowCounttRedshiftOutput_2 = 0;
			class BufferLine_tRedshiftOutput_2 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_2 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_2 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_2 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_2 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_2 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_2 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_2 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_2 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_2 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_2 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_2 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_2> exInsertColValueListtRedshiftOutput_2 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_2 exInsertColValuetRedshiftOutput_2 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_2 = new StringBuilder();
			for(int i_tRedshiftOutput_2=0;i_tRedshiftOutput_2 < 100;i_tRedshiftOutput_2++){
				 extendInsertValueStmt_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_2!=100-1) extendInsertValueStmt_tRedshiftOutput_2.append(",");
			}

			String insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_2.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);

 



/**
 * [tRedshiftOutput_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_2 = false;
				int countertRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_2 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
									pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_2.setTimestamp(countertRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
								}
							}else{

								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_2++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.project);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.context);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.origin);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.duration);
							

							}

						
						countertRedshiftOutput_2++;
						
				exInsertColValuetRedshiftOutput_2 = new BufferLine_tRedshiftOutput_2();
                    	exInsertColValuetRedshiftOutput_2
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_2.add(exInsertColValuetRedshiftOutput_2);
				rowCounttRedshiftOutput_2++;

                nb_line_tRedshiftOutput_2++;

				if(rowCounttRedshiftOutput_2 == 100){
	                insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	                exInsertColValueListtRedshiftOutput_2.clear();
	                rowCounttRedshiftOutput_2 = 0;
					countertRedshiftOutput_2=1;
				}
                commitCounter_tRedshiftOutput_2++;

                if(commitEvery_tRedshiftOutput_2<=commitCounter_tRedshiftOutput_2) {
                                   conn_tRedshiftOutput_2.commit();
                                   commitCounter_tRedshiftOutput_2=0;
                }

 


	tos_count_tRedshiftOutput_2++;

/**
 * [tRedshiftOutput_2 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	





	    if(rowCounttRedshiftOutput_2!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_2 = new StringBuilder();
	        for(int i_tRedshiftOutput_2=0 ; i_tRedshiftOutput_2 < rowCounttRedshiftOutput_2 ; i_tRedshiftOutput_2++){
				extendInsertValue_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_2 != rowCounttRedshiftOutput_2 - 1) extendInsertValue_tRedshiftOutput_2.append(",");
	        }

				insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_2.toString();
        	pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);
			rowCounttRedshiftOutput_2 = 0;
	        for(BufferLine_tRedshiftOutput_2 bufferLtRedshiftOutput_2 : exInsertColValueListtRedshiftOutput_2){
				int counttRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_2.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_2 = bufferLtRedshiftOutput_2.moment.getTime();
						if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
							pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_2.setTimestamp(counttRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
						}
					}else{

						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.father_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.father_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.root_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.root_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.system_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.system_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.project==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.project);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_repository_id==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_version==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_version);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.context==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.context);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.origin==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.origin);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message_type==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message_type);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.duration==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.duration);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    

	            rowCounttRedshiftOutput_2++;
	        }
	        insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_2 != null) {
                            pstmt_tRedshiftOutput_2.close();
                        }

		if (commitCounter_tRedshiftOutput_2 > 0) {
			
			conn_tRedshiftOutput_2.commit();
			
		}
		
    	conn_tRedshiftOutput_2 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_2", true);
    	
	nb_line_deleted_tRedshiftOutput_2=nb_line_deleted_tRedshiftOutput_2+ deletedCount_tRedshiftOutput_2;
	nb_line_update_tRedshiftOutput_2=nb_line_update_tRedshiftOutput_2 + updatedCount_tRedshiftOutput_2;
	nb_line_inserted_tRedshiftOutput_2=nb_line_inserted_tRedshiftOutput_2 + insertedCount_tRedshiftOutput_2;
	nb_line_rejected_tRedshiftOutput_2=nb_line_rejected_tRedshiftOutput_2 + rejectedCount_tRedshiftOutput_2;
	
        globalMap.put("tRedshiftOutput_2_NB_LINE",nb_line_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_2", true);
end_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());




/**
 * [tRedshiftOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_2")==null){
			if(resourceMap.get("conn_tRedshiftOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_2 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_2");
					
					
            		
					ctn_tRedshiftOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_2) {
					String errorMessage_tRedshiftOutput_2 = "failed to close the connection in tRedshiftOutput_2 :" + sqlEx_tRedshiftOutput_2.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_2);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Insert_NewLocations Insert_NewLocationsClass = new Insert_NewLocations();

        int exitCode = Insert_NewLocationsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Insert_NewLocations.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/insert_newlocations_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRedshiftInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRedshiftInput_1) {
globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", -1);

e_tRedshiftInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Insert_NewLocations");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_2", globalMap.get("conn_tRedshiftConnection_2"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     226617 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:54 PM CDT
 ************************************************************************************************/