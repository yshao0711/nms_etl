// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.processdailyfeeds_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.ConfigFile;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaFlex_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ProcessDailyFeeds Purpose: Executes the daily Feeds<br>
 * Description: Master job that runs daily to handle incoming feed files, transfers them to the staging area, and performs the ETL into the Fact and Dimension tables. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class ProcessDailyFeeds implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(SubJobs != null){
				
					this.setProperty("SubJobs", SubJobs.toString());
				
			}
			
			if(bulkLoadMaxErrors != null){
				
					this.setProperty("bulkLoadMaxErrors", bulkLoadMaxErrors.toString());
				
			}
			
			if(bulkLoadTempPath != null){
				
					this.setProperty("bulkLoadTempPath", bulkLoadTempPath.toString());
				
			}
			
			if(s3_accesskey != null){
				
					this.setProperty("s3_accesskey", s3_accesskey.toString());
				
			}
			
			if(s3_bucket != null){
				
					this.setProperty("s3_bucket", s3_bucket.toString());
				
			}
			
			if(s3_secretkey != null){
				
					this.setProperty("s3_secretkey", s3_secretkey.toString());
				
			}
			
			if(bulkLoad != null){
				
					this.setProperty("bulkLoad", bulkLoad.toString());
				
			}
			
			if(feedArchive != null){
				
					this.setProperty("feedArchive", feedArchive.toString());
				
			}
			
			if(feedError != null){
				
					this.setProperty("feedError", feedError.toString());
				
			}
			
			if(feedInput != null){
				
					this.setProperty("feedInput", feedInput.toString());
				
			}
			
			if(feedSettleTime != null){
				
					this.setProperty("feedSettleTime", feedSettleTime.toString());
				
			}
			
			if(AlertRepeatDuration != null){
				
					this.setProperty("AlertRepeatDuration", AlertRepeatDuration.toString());
				
			}
			
			if(clearStagingTable != null){
				
					this.setProperty("clearStagingTable", clearStagingTable.toString());
				
			}
			
			if(MemberWeeksOffset != null){
				
					this.setProperty("MemberWeeksOffset", MemberWeeksOffset.toString());
				
			}
			
			if(MetroMedianEndDate != null){
				
					String pattern_MetroMedianEndDate = "yyyy-MM-dd HH:mm:ss";
					String value_MetroMedianEndDate = "2016-12-31 00:00:00";
					String[] parts_MetroMedianEndDate = value_MetroMedianEndDate.split(";");
					if(parts_MetroMedianEndDate.length > 1){
						pattern_MetroMedianEndDate = parts_MetroMedianEndDate[0];
						this.setProperty("MetroMedianEndDate", pattern_MetroMedianEndDate + ";" + FormatterUtils.format_Date(MetroMedianEndDate, pattern_MetroMedianEndDate));
					}else{
						this.setProperty("MetroMedianEndDate", FormatterUtils.format_Date(MetroMedianEndDate, pattern_MetroMedianEndDate));
					}
				
			}
			
			if(MetroMedianStartDate != null){
				
					String pattern_MetroMedianStartDate = "yyyy-MM-dd HH:mm:ss";
					String value_MetroMedianStartDate = "2016-01-01 00:00:00";
					String[] parts_MetroMedianStartDate = value_MetroMedianStartDate.split(";");
					if(parts_MetroMedianStartDate.length > 1){
						pattern_MetroMedianStartDate = parts_MetroMedianStartDate[0];
						this.setProperty("MetroMedianStartDate", pattern_MetroMedianStartDate + ";" + FormatterUtils.format_Date(MetroMedianStartDate, pattern_MetroMedianStartDate));
					}else{
						this.setProperty("MetroMedianStartDate", FormatterUtils.format_Date(MetroMedianStartDate, pattern_MetroMedianStartDate));
					}
				
			}
			
			if(RfmWeeksOffset != null){
				
					this.setProperty("RfmWeeksOffset", RfmWeeksOffset.toString());
				
			}
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(RunDate_NoCheck != null){
				
					this.setProperty("RunDate_NoCheck", RunDate_NoCheck.toString());
				
			}
			
			if(WaitForInboundFeeds != null){
				
					this.setProperty("WaitForInboundFeeds", WaitForInboundFeeds.toString());
				
			}
			
			if(WeeklyJobsDay != null){
				
					this.setProperty("WeeklyJobsDay", WeeklyJobsDay.toString());
				
			}
			
			if(environment != null){
				
					this.setProperty("environment", environment.toString());
				
			}
			
			if(sendAlertTo_MissingFeed != null){
				
					this.setProperty("sendAlertTo_MissingFeed", sendAlertTo_MissingFeed.toString());
				
			}
			
			if(sendMailFrom != null){
				
					this.setProperty("sendMailFrom", sendMailFrom.toString());
				
			}
			
			if(sendMailPassword != null){
				
					this.setProperty("sendMailPassword", sendMailPassword.toString());
				
			}
			
			if(sendMailSenderName != null){
				
					this.setProperty("sendMailSenderName", sendMailSenderName.toString());
				
			}
			
			if(sendMailSMTPHost != null){
				
					this.setProperty("sendMailSMTPHost", sendMailSMTPHost.toString());
				
			}
			
			if(sendMailSMTPPort != null){
				
					this.setProperty("sendMailSMTPPort", sendMailSMTPPort.toString());
				
			}
			
			if(sendMailTo_Failed != null){
				
					this.setProperty("sendMailTo_Failed", sendMailTo_Failed.toString());
				
			}
			
			if(sendMailTo_Success != null){
				
					this.setProperty("sendMailTo_Success", sendMailTo_Success.toString());
				
			}
			
			if(sendMailUserName != null){
				
					this.setProperty("sendMailUserName", sendMailUserName.toString());
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
			if(Redshift_Staging_AdditionalParams != null){
				
					this.setProperty("Redshift_Staging_AdditionalParams", Redshift_Staging_AdditionalParams.toString());
				
			}
			
			if(Redshift_Staging_Database != null){
				
					this.setProperty("Redshift_Staging_Database", Redshift_Staging_Database.toString());
				
			}
			
			if(Redshift_Staging_Login != null){
				
					this.setProperty("Redshift_Staging_Login", Redshift_Staging_Login.toString());
				
			}
			
			if(Redshift_Staging_Password != null){
				
					this.setProperty("Redshift_Staging_Password", Redshift_Staging_Password.toString());
				
			}
			
			if(Redshift_Staging_Port != null){
				
					this.setProperty("Redshift_Staging_Port", Redshift_Staging_Port.toString());
				
			}
			
			if(Redshift_Staging_Schema != null){
				
					this.setProperty("Redshift_Staging_Schema", Redshift_Staging_Schema.toString());
				
			}
			
			if(Redshift_Staging_Server != null){
				
					this.setProperty("Redshift_Staging_Server", Redshift_Staging_Server.toString());
				
			}
			
			if(ProcessMode != null){
				
					this.setProperty("ProcessMode", ProcessMode.toString());
				
			}
			
		}

public String SubJobs;
public String getSubJobs(){
	return this.SubJobs;
}
public Long bulkLoadMaxErrors;
public Long getBulkLoadMaxErrors(){
	return this.bulkLoadMaxErrors;
}
public String bulkLoadTempPath;
public String getBulkLoadTempPath(){
	return this.bulkLoadTempPath;
}
public String s3_accesskey;
public String getS3_accesskey(){
	return this.s3_accesskey;
}
public String s3_bucket;
public String getS3_bucket(){
	return this.s3_bucket;
}
public String s3_secretkey;
public String getS3_secretkey(){
	return this.s3_secretkey;
}
public Boolean bulkLoad;
public Boolean getBulkLoad(){
	return this.bulkLoad;
}
		public String feedArchive;
		public String getFeedArchive(){
			return this.feedArchive;
		}
		
		public String feedError;
		public String getFeedError(){
			return this.feedError;
		}
		
		public String feedInput;
		public String getFeedInput(){
			return this.feedInput;
		}
		
public Integer feedSettleTime;
public Integer getFeedSettleTime(){
	return this.feedSettleTime;
}
public Long AlertRepeatDuration;
public Long getAlertRepeatDuration(){
	return this.AlertRepeatDuration;
}
public Boolean clearStagingTable;
public Boolean getClearStagingTable(){
	return this.clearStagingTable;
}
public Integer MemberWeeksOffset;
public Integer getMemberWeeksOffset(){
	return this.MemberWeeksOffset;
}
public java.util.Date MetroMedianEndDate;
public java.util.Date getMetroMedianEndDate(){
	return this.MetroMedianEndDate;
}
public java.util.Date MetroMedianStartDate;
public java.util.Date getMetroMedianStartDate(){
	return this.MetroMedianStartDate;
}
public Integer RfmWeeksOffset;
public Integer getRfmWeeksOffset(){
	return this.RfmWeeksOffset;
}
public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public Boolean RunDate_NoCheck;
public Boolean getRunDate_NoCheck(){
	return this.RunDate_NoCheck;
}
public Boolean WaitForInboundFeeds;
public Boolean getWaitForInboundFeeds(){
	return this.WaitForInboundFeeds;
}
public String WeeklyJobsDay;
public String getWeeklyJobsDay(){
	return this.WeeklyJobsDay;
}
public String environment;
public String getEnvironment(){
	return this.environment;
}
public String sendAlertTo_MissingFeed;
public String getSendAlertTo_MissingFeed(){
	return this.sendAlertTo_MissingFeed;
}
public String sendMailFrom;
public String getSendMailFrom(){
	return this.sendMailFrom;
}
public java.lang.String sendMailPassword;
public java.lang.String getSendMailPassword(){
	return this.sendMailPassword;
}
public String sendMailSenderName;
public String getSendMailSenderName(){
	return this.sendMailSenderName;
}
public String sendMailSMTPHost;
public String getSendMailSMTPHost(){
	return this.sendMailSMTPHost;
}
public String sendMailSMTPPort;
public String getSendMailSMTPPort(){
	return this.sendMailSMTPPort;
}
public String sendMailTo_Failed;
public String getSendMailTo_Failed(){
	return this.sendMailTo_Failed;
}
public String sendMailTo_Success;
public String getSendMailTo_Success(){
	return this.sendMailTo_Success;
}
public String sendMailUserName;
public String getSendMailUserName(){
	return this.sendMailUserName;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
public String Redshift_Staging_AdditionalParams;
public String getRedshift_Staging_AdditionalParams(){
	return this.Redshift_Staging_AdditionalParams;
}
public String Redshift_Staging_Database;
public String getRedshift_Staging_Database(){
	return this.Redshift_Staging_Database;
}
public String Redshift_Staging_Login;
public String getRedshift_Staging_Login(){
	return this.Redshift_Staging_Login;
}
public java.lang.String Redshift_Staging_Password;
public java.lang.String getRedshift_Staging_Password(){
	return this.Redshift_Staging_Password;
}
public String Redshift_Staging_Port;
public String getRedshift_Staging_Port(){
	return this.Redshift_Staging_Port;
}
public String Redshift_Staging_Schema;
public String getRedshift_Staging_Schema(){
	return this.Redshift_Staging_Schema;
}
public String Redshift_Staging_Server;
public String getRedshift_Staging_Server(){
	return this.Redshift_Staging_Server;
}
public String ProcessMode;
public String getProcessMode(){
	return this.ProcessMode;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ProcessDailyFeeds";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_JLJmQNNOEeaEQIH4pMYC_Q", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ProcessDailyFeeds.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ProcessDailyFeeds.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();



 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (context.SubJobs == null || context.SubJobs.trim().isEmpty()) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				
    			tRunJob_4Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
    	class BytesLimit65535_tRunJob_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_4().limitLog4jByte();


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_4.put("SubJobs", context.SubJobs);
			paraList_tRunJob_4.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_4.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_4.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_4.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_4.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_4.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_4.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_4.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_4.put("feedArchive", context.feedArchive);
			paraList_tRunJob_4.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_4.put("feedError", context.feedError);
			paraList_tRunJob_4.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_4.put("feedInput", context.feedInput);
			paraList_tRunJob_4.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_4.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_4.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_4.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_4.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_4.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_4.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_4.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_4.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_4.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_4.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_4.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_4.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_4.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_4.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_4.put("RunDate", context.RunDate);
			paraList_tRunJob_4.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_4.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_4.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_4.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_4.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_4.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_4.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("environment", context.environment);
			paraList_tRunJob_4.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_4.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_4.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_4.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_4.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_4.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_4.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_4.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_4.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_4.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_4.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_4 = context.propertyNames();
		while (propertyNames_tRunJob_4.hasMoreElements()) {
			String key_tRunJob_4 = (String) propertyNames_tRunJob_4.nextElement();
			Object value_tRunJob_4 = (Object) context.get(key_tRunJob_4);
			if(value_tRunJob_4!=null) {  
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + value_tRunJob_4);
			} else {
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_4 = null;

	
	
		zipcar_marketingdw.post_process_subjobs_0_1.Post_Process_Subjobs childJob_tRunJob_4 = new zipcar_marketingdw.post_process_subjobs_0_1.Post_Process_Subjobs();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_4.getErrorCode());
			
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_4.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Processing Daily Feeds Completed","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Processing Daily Feeds Completed", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Processing Daily Feeds Completed"); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRunJob_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		
    	class BytesLimit65535_tRunJob_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_5().limitLog4jByte();


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_5.put("SubJobs", context.SubJobs);
			paraList_tRunJob_5.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_5.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_5.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_5.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_5.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_5.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_5.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_5.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_5.put("feedArchive", context.feedArchive);
			paraList_tRunJob_5.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_5.put("feedError", context.feedError);
			paraList_tRunJob_5.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_5.put("feedInput", context.feedInput);
			paraList_tRunJob_5.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_5.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_5.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_5.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_5.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_5.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_5.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_5.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_5.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_5.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_5.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_5.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_5.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_5.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_5.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_5.put("RunDate", context.RunDate);
			paraList_tRunJob_5.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_5.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_5.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_5.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_5.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_5.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_5.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("environment", context.environment);
			paraList_tRunJob_5.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_5.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_5.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_5.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_5.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_5.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_5.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_5.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_5.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_5.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_5.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_5 = context.propertyNames();
		while (propertyNames_tRunJob_5.hasMoreElements()) {
			String key_tRunJob_5 = (String) propertyNames_tRunJob_5.nextElement();
			Object value_tRunJob_5 = (Object) context.get(key_tRunJob_5);
			if(value_tRunJob_5!=null) {  
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + value_tRunJob_5);
			} else {
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_5 = null;

	
		obj_tRunJob_5 = getErrorCode();
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param errorCode=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param errorCode=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("errorCode", obj_tRunJob_5);
	
		obj_tRunJob_5 = getStatus();
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param status=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param status=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("status", obj_tRunJob_5);
	
		obj_tRunJob_5 =  jobName + " - " + TalendDate.formatDate("yyyy-MM-dd", DateUtils.runDate(context.RunDate));;
		if(obj_tRunJob_5!=null) {
			paraList_tRunJob_5.add("--context_param emailSubject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_5));
		} else {
			paraList_tRunJob_5.add("--context_param emailSubject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_5.put("emailSubject", obj_tRunJob_5);
	
	
		zipcar_marketingdw.task_sendjobnotification_0_1.Task_SendJobNotification childJob_tRunJob_5 = new zipcar_marketingdw.task_sendjobnotification_0_1.Task_SendJobNotification();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_5.getErrorCode());
			
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_5.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "");
Logging.componentName(jobName, "tWarn_2", "");
Logging.componentName(jobName, "tWarn_3", "");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tSetGlobalVar_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("CurrentDayOfWeek", DateUtils.dayOfWeek(DateUtils.runDate(context.RunDate, context.RunDate_NoCheck, context_param)));
globalMap.put("WeeklyJobsDay", java.time.DayOfWeek.valueOf(context.WeeklyJobsDay.toUpperCase()));

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJavaFlex_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class external_configStruct implements routines.system.IPersistableRow<external_configStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(external_configStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		external_configStruct external_config = new external_configStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("external_config" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// Load the config file and send its properties to the Context Loader
java.util.Map<String, String> externalConfig = ConfigFile.loadConfig(jobName, context_param);
for(String key: externalConfig.keySet()) {


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// loop
external_config.key = key;
external_config.value = externalConfig.get(key);

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//external_config
			//external_config


			
				if(execStat){
					runStat.updateStatOnConnection("external_config"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (external_config.key != null){
                          tmp_key_tContextLoad_1 = external_config.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          external_config.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(external_config.key != null) {
                    key_tContextLoad_1 =
                        external_config.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(external_config.value != null) {
                    value_tContextLoad_1 =
                        external_config.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ("sendMailPassword".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Marketing_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Monitoring_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Staging_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "SubJobs".equals(key_tContextLoad_1))
        {
           context.SubJobs=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "bulkLoadMaxErrors".equals(key_tContextLoad_1))
        {

               context.bulkLoadMaxErrors=Long.parseLong(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "bulkLoadTempPath".equals(key_tContextLoad_1))
        {
           context.bulkLoadTempPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "s3_accesskey".equals(key_tContextLoad_1))
        {
           context.s3_accesskey=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "s3_bucket".equals(key_tContextLoad_1))
        {
           context.s3_bucket=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "s3_secretkey".equals(key_tContextLoad_1))
        {
           context.s3_secretkey=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "bulkLoad".equals(key_tContextLoad_1))
        {

               context.bulkLoad=Boolean.parseBoolean(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "feedArchive".equals(key_tContextLoad_1))
        {
           context.feedArchive=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "feedError".equals(key_tContextLoad_1))
        {
           context.feedError=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "feedInput".equals(key_tContextLoad_1))
        {
           context.feedInput=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "feedSettleTime".equals(key_tContextLoad_1))
        {

                context.feedSettleTime=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "AlertRepeatDuration".equals(key_tContextLoad_1))
        {

               context.AlertRepeatDuration=Long.parseLong(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "clearStagingTable".equals(key_tContextLoad_1))
        {

               context.clearStagingTable=Boolean.parseBoolean(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "MemberWeeksOffset".equals(key_tContextLoad_1))
        {

                context.MemberWeeksOffset=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "MetroMedianEndDate".equals(key_tContextLoad_1))
        {
                String context_MetroMedianEndDate_value = context.getProperty("MetroMedianEndDate");
                if(context_MetroMedianEndDate_value==null)
                    context_MetroMedianEndDate_value = "";
                int context_MetroMedianEndDate_pos = context_MetroMedianEndDate_value.indexOf(";");
                String context_MetroMedianEndDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_MetroMedianEndDate_pos > -1){
                    context_MetroMedianEndDate_pattern = context_MetroMedianEndDate_value.substring(0, context_MetroMedianEndDate_pos);
                }
                context.MetroMedianEndDate=(java.util.Date)(new java.text.SimpleDateFormat(context_MetroMedianEndDate_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "MetroMedianStartDate".equals(key_tContextLoad_1))
        {
                String context_MetroMedianStartDate_value = context.getProperty("MetroMedianStartDate");
                if(context_MetroMedianStartDate_value==null)
                    context_MetroMedianStartDate_value = "";
                int context_MetroMedianStartDate_pos = context_MetroMedianStartDate_value.indexOf(";");
                String context_MetroMedianStartDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_MetroMedianStartDate_pos > -1){
                    context_MetroMedianStartDate_pattern = context_MetroMedianStartDate_value.substring(0, context_MetroMedianStartDate_pos);
                }
                context.MetroMedianStartDate=(java.util.Date)(new java.text.SimpleDateFormat(context_MetroMedianStartDate_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "RfmWeeksOffset".equals(key_tContextLoad_1))
        {

                context.RfmWeeksOffset=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "RunDate".equals(key_tContextLoad_1))
        {
                String context_RunDate_value = context.getProperty("RunDate");
                if(context_RunDate_value==null)
                    context_RunDate_value = "";
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                }
                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "RunDate_NoCheck".equals(key_tContextLoad_1))
        {

               context.RunDate_NoCheck=Boolean.parseBoolean(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "WaitForInboundFeeds".equals(key_tContextLoad_1))
        {

               context.WaitForInboundFeeds=Boolean.parseBoolean(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "WeeklyJobsDay".equals(key_tContextLoad_1))
        {
           context.WeeklyJobsDay=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "environment".equals(key_tContextLoad_1))
        {
           context.environment=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendAlertTo_MissingFeed".equals(key_tContextLoad_1))
        {
           context.sendAlertTo_MissingFeed=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailFrom".equals(key_tContextLoad_1))
        {
           context.sendMailFrom=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailPassword".equals(key_tContextLoad_1))
        {
           context.sendMailPassword=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailSenderName".equals(key_tContextLoad_1))
        {
           context.sendMailSenderName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailSMTPHost".equals(key_tContextLoad_1))
        {
           context.sendMailSMTPHost=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailSMTPPort".equals(key_tContextLoad_1))
        {
           context.sendMailSMTPPort=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailTo_Failed".equals(key_tContextLoad_1))
        {
           context.sendMailTo_Failed=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailTo_Success".equals(key_tContextLoad_1))
        {
           context.sendMailTo_Success=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "sendMailUserName".equals(key_tContextLoad_1))
        {
           context.sendMailUserName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Staging_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Staging_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ProcessMode".equals(key_tContextLoad_1))
        {
           context.ProcessMode=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */



	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("sendMailPassword");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Marketing_Password");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Monitoring_Password");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Staging_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("external_config"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("SubJobs", context.SubJobs);
			paraList_tRunJob_2.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_2.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_2.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_2.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_2.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_2.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_2.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_2.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("feedArchive", context.feedArchive);
			paraList_tRunJob_2.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_2.put("feedError", context.feedError);
			paraList_tRunJob_2.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_2.put("feedInput", context.feedInput);
			paraList_tRunJob_2.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_2.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_2.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_2.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_2.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_2.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_2.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_2.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_2.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_2.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_2.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_2.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_2.put("RunDate", context.RunDate);
			paraList_tRunJob_2.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_2.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_2.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_2.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("environment", context.environment);
			paraList_tRunJob_2.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_2.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_2.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_2.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_2.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_2.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_2.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_2.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_2.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_2.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_2.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = getClass().getName();
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param currentRunningJob=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param currentRunningJob=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("currentRunningJob", obj_tRunJob_2);
	
	
		zipcar_marketingdw.task_checkjobrunning_0_1.Task_CheckJobRunning childJob_tRunJob_2 = new zipcar_marketingdw.task_checkjobrunning_0_1.Task_CheckJobRunning();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_2.getErrorCode());
			
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tRunJob_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		
    	class BytesLimit65535_tRunJob_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_6().limitLog4jByte();


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_6.put("SubJobs", context.SubJobs);
			paraList_tRunJob_6.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_6.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_6.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_6.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_6.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_6.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_6.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_6.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_6.put("feedArchive", context.feedArchive);
			paraList_tRunJob_6.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_6.put("feedError", context.feedError);
			paraList_tRunJob_6.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_6.put("feedInput", context.feedInput);
			paraList_tRunJob_6.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_6.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_6.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_6.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_6.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_6.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_6.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_6.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_6.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_6.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_6.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_6.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_6.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_6.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_6.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_6.put("RunDate", context.RunDate);
			paraList_tRunJob_6.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_6.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_6.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_6.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_6.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_6.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_6.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("environment", context.environment);
			paraList_tRunJob_6.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_6.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_6.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_6.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_6.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_6.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_6.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_6.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_6.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_6.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_6.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_6 = context.propertyNames();
		while (propertyNames_tRunJob_6.hasMoreElements()) {
			String key_tRunJob_6 = (String) propertyNames_tRunJob_6.nextElement();
			Object value_tRunJob_6 = (Object) context.get(key_tRunJob_6);
			if(value_tRunJob_6!=null) {  
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + value_tRunJob_6);
			} else {
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_6 = null;

	
	
		zipcar_marketingdw.task_initjobmonitoring_0_1.Task_InitJobMonitoring childJob_tRunJob_6 = new zipcar_marketingdw.task_initjobmonitoring_0_1.Task_InitJobMonitoring();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_6.getErrorCode());
			
	            
	    	if(childJob_tRunJob_6.getErrorCode() == null){
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
		    }
		    if (childJob_tRunJob_6.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_6.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_ProcessDailyFeeds, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessDailyFeeds) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_stats";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 10000;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_1 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_1 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_1 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 100;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=100-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.project);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.context);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.origin);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.duration);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 100){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_1.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.moment.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.father_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.father_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.root_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.root_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.system_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.system_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.project==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.project);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_repository_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_version==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_version);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.context==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.context);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.origin==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.origin);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.duration==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.duration);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		
    	class BytesLimit65535_tWarn_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_2().limitLog4jByte();

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","",( context.SubJobs == null || context.SubJobs.trim().isEmpty() ) ? "Processing Daily Activity - Mode: " + context.ProcessMode : "Executing Tasks: " + context.SubJobs.trim(),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, ( context.SubJobs == null || context.SubJobs.trim().isEmpty() ) ? "Processing Daily Activity - Mode: " + context.ProcessMode : "Executing Tasks: " + context.SubJobs.trim(), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_2_WARN_MESSAGES", ( context.SubJobs == null || context.SubJobs.trim().isEmpty() ) ? "Processing Daily Activity - Mode: " + context.ProcessMode : "Executing Tasks: " + context.SubJobs.trim()); 
globalMap.put("tWarn_2_WARN_PRIORITY", 3);
globalMap.put("tWarn_2_WARN_CODE", 42);


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());

   			if (context.SubJobs != null && !context.SubJobs.trim().isEmpty()) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tJavaFlex_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if ((context.SubJobs == null || context.SubJobs.trim().isEmpty()) && 
(context.ProcessMode.equalsIgnoreCase("standard") || context.ProcessMode.equalsIgnoreCase("daily"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tRunJob_17Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if ((context.SubJobs == null || context.SubJobs.trim().isEmpty()) &&
context.ProcessMode.equalsIgnoreCase("weekly") &&
globalMap.get("WeeklyJobsDay").equals(globalMap.get("CurrentDayOfWeek"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tRunJob_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}
   			if ((context.SubJobs == null || context.SubJobs.trim().isEmpty()) &&
context.ProcessMode.equalsIgnoreCase("monthly") &&
DateUtils.isFirstDayOfMonth(context.RunDate)) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				
    			tRunJob_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}



/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	

public void tJavaFlex_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJavaFlex_2 begin ] start
	 */

				
			int NB_ITERATE_tWarn_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_2", false);
		start_Hash.put("tJavaFlex_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_2";

	
		int tos_count_tJavaFlex_2 = 0;
		
    	class BytesLimit65535_tJavaFlex_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_2().limitLog4jByte();


// start part of your Java code
String[] tasks = context.SubJobs.split(",");      
for(String nextTask: tasks) {



 



/**
 * [tJavaFlex_2 begin ] stop
 */
	
	/**
	 * [tJavaFlex_2 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	



// here is the main part of the component,
// a piece of code executed in the row
// loop
	nextTask = nextTask.trim();

 


	tos_count_tJavaFlex_2++;

/**
 * [tJavaFlex_2 main ] stop
 */
	NB_ITERATE_tWarn_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("iterate2", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tWarn_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tWarn_3 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		
    	class BytesLimit65535_tWarn_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_3().limitLog4jByte();

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","Running Task: " + nextTask,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "Running Task: " + nextTask, 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_3_WARN_MESSAGES", "Running Task: " + nextTask); 
globalMap.put("tWarn_3_WARN_PRIORITY", 3);
globalMap.put("tWarn_3_WARN_CODE", 42);


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	NB_ITERATE_tRunJob_10++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tRunJob_10);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_10";

	
		int tos_count_tRunJob_10 = 0;
		
    	class BytesLimit65535_tRunJob_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_10().limitLog4jByte();
class DealChildJobLibrary_tRunJob_10 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new ObjectInputStream(new java.io.FileInputStream(crcMapPath));
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_10 dealChildJobLibrary_tRunJob_10 = new DealChildJobLibrary_tRunJob_10();

		//For different jobs, job name must be different, but classpath and JVM arguments are possbilely different
		java.util.Map<String,List<String>> childJob_commandLine_Mapper_tRunJob_10 = new java.util.HashMap<String,List<String>>();
		java.util.List<String> childJob_commandLine_tRunJob_10 = null;
		String classpathSeparator_tRunJob_10 = System.getProperty("path.separator");
		
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms2G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx4G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-XX:+UseConcMarkSweepGC".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/commons-collections4-4.1.jar;../lib/dom4j-1.6.1.jar;../lib/geronimo-stax-api_1.0_spec-1.0.1.jar;../lib/log4j-1.2.15.jar;../lib/log4j-1.2.16.jar;../lib/poi-3.16-20170419_modified_talend.jar;../lib/poi-ooxml-3.16-20170419_modified_talend.jar;../lib/poi-ooxml-schemas-3.16-20170419.jar;../lib/poi-scratchpad-3.16-20170419.jar;../lib/xmlbeans-2.6.0.jar;load_campaign_data_0_1.jar;task_deduptablerecords_0_1.jar;task_getschemamapping_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.load_campaign_data_0_1.Load_Campaign_Data".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=dev".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Load_Campaign_Data",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/activation.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mail-1.4.jar;data_consistency_monitor_0_1.jar;task_monitor_unmapped_postal_codes_0_1.jar;task_monitor_suspended_members_0_1.jar;task_monitor_reservation_counts_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.data_consistency_monitor_0_1.Data_Consistency_Monitor".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=dev".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Data_Consistency_Monitor",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/activation.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mail-1.4.jar;../lib/talend_file_enhanced_20070724.jar;process_engagement_report_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_engagement_report_0_1.Process_Engagement_Report".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=dev".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Engagement_Report",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms4G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx8G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Duser.timezone=UTC".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-XX:+UseConcMarkSweepGC".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/checkArchive.jar;../lib/commons-compress-1.10.jar;../lib/dom4j-1.6.1.jar;../lib/filecopy.jar;../lib/jakarta-oro-2.0.8.jar;../lib/log4j-1.2.16.jar;../lib/talend_file_enhanced_20070724.jar;../lib/talendcsv.jar;../lib/talendzip.jar;../lib/zip4j_1.3.1.jar;loadfeedsintostaging_0_1.jar;stagefeed_waivers_0_1.jar;stagefeed_memberattritionreasons_0_1.jar;stagefeed_exchangerates_0_1.jar;stagefeed_accountadmins_0_1.jar;stagefeed_strongviewdevicedata_0_1.jar;stagefeed_strongviewtrackdata_0_1.jar;stagefeed_memberlastregistrationsess_0_1.jar;stagefeed_applicationsfinal_0_1.jar;stagefeed_wexfueldata_0_1.jar;stagefeed_memberrejoinhistory_0_1.jar;stagefeed_rateplans_0_1.jar;task_clearexpungedmembersfromfeeds_0_1.jar;stagefeed_corporateapplications_0_1.jar;stagefeed_strongviewsuccessdata_0_1.jar;stagefeed_accountaffiliates_0_1.jar;stagefeed_reservations_np_0_1.jar;stagefeed_member_0_1.jar;stagefeed_communities_np_0_1.jar;stagefeed_registrationsessionhistories_0_1.jar;stagefeed_couponclaims_0_1.jar;stagefeed_coupons_0_1.jar;stagefeed_accountrateplanmap_0_1.jar;stagefeed_credits_0_1.jar;stagefeed_memberjoininfo_0_1.jar;stagefeed_strongviewmailingdata_0_1.jar;stagefeed_transactions_0_1.jar;stagefeed_zipfleets_0_1.jar;stagefeed_accounts_0_1.jar;stagefeed_strongviewprogramfiles_0_1.jar;stagefeed_affiliates_0_1.jar;stagefeed_locations_np_0_1.jar;stagefeed_strongviewprogexportdata_0_1.jar;stagefeed_vehicles_np_0_1.jar;stagefeed_vehicles_0_1.jar;stagefeed_strongviewaggdata_0_1.jar;stagefeed_strongviewconvdata_0_1.jar;stagefeed_addresses_0_1.jar;stagefeed_locations_0_1.jar;stagefeed_reservations_0_1.jar;stagefeed_zones_0_1.jar;stagefeed_registrationsessions_0_1.jar;stagefeed_memberlastapplicationinfo_0_1.jar;stagefeed_membersext_0_1.jar;stagefeed_memberleftinfo_0_1.jar;stagefeed_strongviewdownloadfiles_0_1.jar;stagefeed_waiverplans_0_1.jar;stagefeed_supersededreservations_0_1.jar;stagefeed_accountmembermap_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.loadfeedsintostaging_0_1.LoadFeedsIntoStaging".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("LoadFeedsIntoStaging",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_location_segments_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_location_segments_0_1.Process_Location_Segments".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Location_Segments",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_update_member_location_distance_0_1.jar;insert_newmemberlocationdistance_0_1.jar;update_existingmemberlocationdistance_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_update_member_location_distance_0_1.Process_Update_Member_Location_Distance".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Update_Member_Location_Distance",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/activation.jar;../lib/commons-io-2.4.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mail-1.4.jar;process_daily_redemption_0_1.jar;task_sendjobnotification_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_daily_redemption_0_1.Process_Daily_Redemption".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=dev".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Daily_Redemption",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_rfm_member_data_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_rfm_member_data_0_1.Process_RFM_Member_Data".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_RFM_Member_Data",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms4G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx8G".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-XX:+UseConcMarkSweepGC".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/activation.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/mail-1.4.jar;processallstagingtables_0_1.jar;processstaging_accountmembermap_0_1.jar;processstaging_affiliates_0_1.jar;processstaging_strongviewaggdata_0_1.jar;processstaging_membersext_0_1.jar;processstaging_strongviewdevicedata_0_1.jar;processstaging_strongviewconvdata_0_1.jar;processstaging_memberrejoinhistory_0_1.jar;processstaging_reservations_0_1.jar;processstaging_memberlastapplicationinfo_0_1.jar;processstaging_waivers_0_1.jar;processstaging_accountrateplanmap_0_1.jar;processstaging_transactions_0_1.jar;processstaging_couponclaims_0_1.jar;processstaging_communities_np_0_1.jar;processstaging_coupons_0_1.jar;processstaging_strongviewtrackdata_0_1.jar;processstaging_strongviewmailingdata_0_1.jar;processstaging_zipfleets_0_1.jar;processstaging_memberlastregistrationsess_0_1.jar;processstaging_addresses_0_1.jar;processstaging_locations_0_1.jar;processstaging_wexfueldata_0_1.jar;processstaging_accounts_0_1.jar;processstaging_strongviewsuccessdata_0_1.jar;processstaging_rateplans_0_1.jar;processstaging_waiverplans_0_1.jar;processstaging_reservations_np_0_1.jar;processstaging_locations_np_0_1.jar;processstaging_registrationsessionhistories_0_1.jar;processstaging_strongviewprogramfiles_0_1.jar;processstaging_memberjoininfo_0_1.jar;processstaging_member_0_1.jar;task_cleardailyhistorical_0_1.jar;processstaging_vehicles_0_1.jar;processstaging_exchangerates_0_1.jar;processstaging_membeattritionreasons_0_1.jar;processstaging_applicationsfinal_0_1.jar;processstaging_accountaffiliates_0_1.jar;processstaging_accountadmins_0_1.jar;processstaging_strongviewdownloadfiles_0_1.jar;processstaging_supersededreservations_0_1.jar;processstaging_zones_0_1.jar;processstaging_memberleftinfo_0_1.jar;processstaging_registrationsessions_0_1.jar;processstaging_corporateapplications_0_1.jar;processstaging_vehicles_np_0_1.jar;processstaging_credits_0_1.jar;processstaging_strongviewprogexportdata_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.processallstagingtables_0_1.ProcessAllStagingTables".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("ProcessAllStagingTables",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_update_location_data_0_1.jar;update_existinglocations_0_1.jar;insert_newlocations_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_update_location_data_0_1.Process_Update_Location_Data".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Update_Location_Data",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_update_member_activity_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_update_member_activity_0_1.Process_Update_Member_Activity".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Update_Member_Activity",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;../lib/talendcsv.jar;process_update_member_data_0_1.jar;update_memberisemployee_0_1.jar;insert_newmembers_0_1.jar;update_existingmembers_0_1.jar;task_deduptablerecords_0_1.jar;update_memberflags_0_1.jar;update_zipfleetid_0_1.jar;update_memberphoneinfo_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_update_member_data_0_1.Process_Update_Member_Data".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Update_Member_Data",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;update_membersummarytable_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.update_membersummarytable_0_1.Update_MemberSummaryTable".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Update_MemberSummaryTable",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;process_member_performance_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.process_member_performance_0_1.Process_Member_Performance".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Process_Member_Performance",childJob_commandLine_tRunJob_10);	
			
				childJob_commandLine_tRunJob_10 = new java.util.ArrayList<String>();
				
				    childJob_commandLine_tRunJob_10.add("java");
				    
				    		childJob_commandLine_tRunJob_10.add("-Xms256M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-Xmx1024M".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("-cp".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add(dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(".;../lib/routines.jar;../lib/RedshiftJDBC41-1.2.1.1001.jar;../lib/dom4j-1.6.1.jar;../lib/log4j-1.2.16.jar;task_metromediandistance_0_1.jar;").replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("zipcar_marketingdw.task_metromediandistance_0_1.Task_MetroMedianDistance".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_pid="+pid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--root_pid="+rootPid.replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--father_node=tRunJob_10".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("--context=external".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				    		childJob_commandLine_tRunJob_10.add("%*".replaceAll(";",classpathSeparator_tRunJob_10));
				    
				childJob_commandLine_Mapper_tRunJob_10.put("Task_MetroMedianDistance",childJob_commandLine_tRunJob_10);	
			

 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
		if(childJob_commandLine_Mapper_tRunJob_10.get(nextTask)==null){
			throw new RuntimeException("The child job named "+nextTask+" is not in the job list.");
		}
		paraList_tRunJob_10.addAll(childJob_commandLine_Mapper_tRunJob_10.get(nextTask));
	
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_10.put("SubJobs", context.SubJobs);
			paraList_tRunJob_10.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_10.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_10.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_10.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_10.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_10.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_10.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_10.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_10.put("feedArchive", context.feedArchive);
			paraList_tRunJob_10.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_10.put("feedError", context.feedError);
			paraList_tRunJob_10.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_10.put("feedInput", context.feedInput);
			paraList_tRunJob_10.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_10.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_10.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_10.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_10.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_10.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_10.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_10.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_10.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_10.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_10.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_10.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_10.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_10.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_10.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_10.put("RunDate", context.RunDate);
			paraList_tRunJob_10.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_10.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_10.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_10.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_10.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_10.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_10.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("environment", context.environment);
			paraList_tRunJob_10.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_10.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_10.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_10.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_10.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_10.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_10.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_10.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_10.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_10.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_10.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_10 = context.propertyNames();
		while (propertyNames_tRunJob_10.hasMoreElements()) {
			String key_tRunJob_10 = (String) propertyNames_tRunJob_10.nextElement();
			Object value_tRunJob_10 = (Object) context.get(key_tRunJob_10);
			if(value_tRunJob_10!=null) {  
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + value_tRunJob_10);
			} else {
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_10 = null;

	
	
		Runtime runtime_tRunJob_10 = Runtime.getRuntime();
		final Process ps_tRunJob_10;
		ps_tRunJob_10 = runtime_tRunJob_10.exec((String[])paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));

		Thread normal_tRunJob_10 = new Thread() {
			public void run() {
				try {
					java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tRunJob_10.getInputStream()));
					String line = "";
					try {
						while((line = reader.readLine()) != null) {
						System.out.println(line);
						}
					} finally {
					reader.close();
					}
				} catch(java.io.IOException ioe) {
					
					ioe.printStackTrace();
				}
	    	}
  		};
		
		normal_tRunJob_10.start();
		

		final StringBuffer errorMsg_tRunJob_10 = new StringBuffer();
		Thread error_tRunJob_10 = new Thread() {
			public void run() {
				try {
					java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(ps_tRunJob_10.getErrorStream()));
					String line = "";
        			try {
          				while((line = reader.readLine()) != null) {
            				errorMsg_tRunJob_10.append(line).append("\n");
          				}
        			} finally {
          				reader.close();
        			}
      			} catch(java.io.IOException ioe) {
					
			        ioe.printStackTrace();
      			}
    		}
		};
		error_tRunJob_10.start();

		//0 indicates normal termination	
		int result_tRunJob_10 = ps_tRunJob_10.waitFor();
		normal_tRunJob_10.join(10000);
		error_tRunJob_10.join(10000);
  
		globalMap.put("tRunJob_10_CHILD_RETURN_CODE",result_tRunJob_10);
		if(result_tRunJob_10 != 0){
   			globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_10.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_10 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_10.toString());
			
  		}

		
 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());




/**
 * [tRunJob_10 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tRunJob_10);
						}				
					




	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tWarn_3);
						}				
					




	
	/**
	 * [tJavaFlex_2 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	


// end of the component, outside/closing the loop
}

 

ok_Hash.put("tJavaFlex_2", true);
end_Hash.put("tJavaFlex_2", System.currentTimeMillis());




/**
 * [tJavaFlex_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 finally ] stop
 */

	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */

	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_17", false);
		start_Hash.put("tRunJob_17", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_17";

	
		int tos_count_tRunJob_17 = 0;
		
    	class BytesLimit65535_tRunJob_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_17().limitLog4jByte();


 



/**
 * [tRunJob_17 begin ] stop
 */
	
	/**
	 * [tRunJob_17 main ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	
	java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_17.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_17.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_17.add("--father_node=tRunJob_17");
	      			
	        			paraList_tRunJob_17.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_17.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null){
		paraList_tRunJob_17.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_17.put("SubJobs", context.SubJobs);
			paraList_tRunJob_17.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_17.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_17.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_17.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_17.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_17.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_17.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_17.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_17.put("feedArchive", context.feedArchive);
			paraList_tRunJob_17.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_17.put("feedError", context.feedError);
			paraList_tRunJob_17.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_17.put("feedInput", context.feedInput);
			paraList_tRunJob_17.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_17.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_17.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_17.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_17.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_17.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_17.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_17.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_17.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_17.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_17.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_17.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_17.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_17.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_17.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_17.put("RunDate", context.RunDate);
			paraList_tRunJob_17.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_17.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_17.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_17.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_17.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_17.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_17.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("environment", context.environment);
			paraList_tRunJob_17.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_17.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_17.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_17.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_17.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_17.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_17.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_17.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_17.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_17.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_17.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_17 = context.propertyNames();
		while (propertyNames_tRunJob_17.hasMoreElements()) {
			String key_tRunJob_17 = (String) propertyNames_tRunJob_17.nextElement();
			Object value_tRunJob_17 = (Object) context.get(key_tRunJob_17);
			if(value_tRunJob_17!=null) {  
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + value_tRunJob_17);
			} else {
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_17 = null;

	
	
		zipcar_marketingdw.subjobs_daily_0_1.Subjobs_Daily childJob_tRunJob_17 = new zipcar_marketingdw.subjobs_daily_0_1.Subjobs_Daily();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_17) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_17 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_17 : talendDataSources_tRunJob_17
			        .entrySet()) {
	            dataSources_tRunJob_17.put(talendDataSourceEntry_tRunJob_17.getKey(),
	                    talendDataSourceEntry_tRunJob_17.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_17.setDataSources(dataSources_tRunJob_17);
	    }
		  
			childJob_tRunJob_17.parentContextMap = parentContextMap_tRunJob_17;
		  
		
		String[][] childReturn_tRunJob_17 = childJob_tRunJob_17.runJob((String[]) paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_17.getErrorCode());
			
	            
	    	if(childJob_tRunJob_17.getErrorCode() == null){
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getStatus() != null && ("failure").equals(childJob_tRunJob_17.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getErrorCode());
		    }
		    if (childJob_tRunJob_17.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_17.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_17.getErrorCode() != null || ("failure").equals(childJob_tRunJob_17.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_17.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_17++;

/**
 * [tRunJob_17 main ] stop
 */
	
	/**
	 * [tRunJob_17 end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 

ok_Hash.put("tRunJob_17", true);
end_Hash.put("tRunJob_17", System.currentTimeMillis());

   			if (context.ProcessMode.equalsIgnoreCase("standard") &&
globalMap.get("WeeklyJobsDay").equals(globalMap.get("CurrentDayOfWeek"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				
    			tRunJob_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}
   			if (context.ProcessMode.equalsIgnoreCase("standard") &&
DateUtils.isFirstDayOfMonth(context.RunDate)) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				
    			tRunJob_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}



/**
 * [tRunJob_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_17 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("SubJobs", context.SubJobs);
			paraList_tRunJob_1.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_1.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_1.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_1.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_1.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_1.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_1.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("feedArchive", context.feedArchive);
			paraList_tRunJob_1.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_1.put("feedError", context.feedError);
			paraList_tRunJob_1.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_1.put("feedInput", context.feedInput);
			paraList_tRunJob_1.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_1.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_1.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_1.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_1.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_1.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_1.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_1.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_1.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_1.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_1.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_1.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_1.put("RunDate", context.RunDate);
			paraList_tRunJob_1.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_1.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_1.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_1.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("environment", context.environment);
			paraList_tRunJob_1.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_1.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_1.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_1.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_1.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_1.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_1.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_1.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_1.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_1.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_1.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		zipcar_marketingdw.subjobs_weekly_0_1.Subjobs_Weekly childJob_tRunJob_1 = new zipcar_marketingdw.subjobs_weekly_0_1.Subjobs_Weekly();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
			
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_3.put("SubJobs", context.SubJobs);
			paraList_tRunJob_3.add("--context_type " + "SubJobs" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("bulkLoadMaxErrors", context.bulkLoadMaxErrors);
			paraList_tRunJob_3.add("--context_type " + "bulkLoadMaxErrors" + "=" + "id_Long");
		
			parentContextMap_tRunJob_3.put("bulkLoadTempPath", context.bulkLoadTempPath);
			paraList_tRunJob_3.add("--context_type " + "bulkLoadTempPath" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("s3_accesskey", context.s3_accesskey);
			paraList_tRunJob_3.add("--context_type " + "s3_accesskey" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("s3_bucket", context.s3_bucket);
			paraList_tRunJob_3.add("--context_type " + "s3_bucket" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("s3_secretkey", context.s3_secretkey);
			paraList_tRunJob_3.add("--context_type " + "s3_secretkey" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("bulkLoad", context.bulkLoad);
			paraList_tRunJob_3.add("--context_type " + "bulkLoad" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_3.put("feedArchive", context.feedArchive);
			paraList_tRunJob_3.add("--context_type " + "feedArchive" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_3.put("feedError", context.feedError);
			paraList_tRunJob_3.add("--context_type " + "feedError" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_3.put("feedInput", context.feedInput);
			paraList_tRunJob_3.add("--context_type " + "feedInput" + "=" + "id_Directory");
		
			parentContextMap_tRunJob_3.put("feedSettleTime", context.feedSettleTime);
			paraList_tRunJob_3.add("--context_type " + "feedSettleTime" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_3.put("AlertRepeatDuration", context.AlertRepeatDuration);
			paraList_tRunJob_3.add("--context_type " + "AlertRepeatDuration" + "=" + "id_Long");
		
			parentContextMap_tRunJob_3.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_3.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_3.put("MemberWeeksOffset", context.MemberWeeksOffset);
			paraList_tRunJob_3.add("--context_type " + "MemberWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_3.put("MetroMedianEndDate", context.MetroMedianEndDate);
			paraList_tRunJob_3.add("--context_type " + "MetroMedianEndDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_3.put("MetroMedianStartDate", context.MetroMedianStartDate);
			paraList_tRunJob_3.add("--context_type " + "MetroMedianStartDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_3.put("RfmWeeksOffset", context.RfmWeeksOffset);
			paraList_tRunJob_3.add("--context_type " + "RfmWeeksOffset" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_3.put("RunDate", context.RunDate);
			paraList_tRunJob_3.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_3.put("RunDate_NoCheck", context.RunDate_NoCheck);
			paraList_tRunJob_3.add("--context_type " + "RunDate_NoCheck" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_3.put("WaitForInboundFeeds", context.WaitForInboundFeeds);
			paraList_tRunJob_3.add("--context_type " + "WaitForInboundFeeds" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_3.put("WeeklyJobsDay", context.WeeklyJobsDay);
			paraList_tRunJob_3.add("--context_type " + "WeeklyJobsDay" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("environment", context.environment);
			paraList_tRunJob_3.add("--context_type " + "environment" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendAlertTo_MissingFeed", context.sendAlertTo_MissingFeed);
			paraList_tRunJob_3.add("--context_type " + "sendAlertTo_MissingFeed" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailFrom", context.sendMailFrom);
			paraList_tRunJob_3.add("--context_type " + "sendMailFrom" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailPassword", context.sendMailPassword);
			paraList_tRunJob_3.add("--context_type " + "sendMailPassword" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("sendMailSenderName", context.sendMailSenderName);
			paraList_tRunJob_3.add("--context_type " + "sendMailSenderName" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailSMTPHost", context.sendMailSMTPHost);
			paraList_tRunJob_3.add("--context_type " + "sendMailSMTPHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailSMTPPort", context.sendMailSMTPPort);
			paraList_tRunJob_3.add("--context_type " + "sendMailSMTPPort" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailTo_Failed", context.sendMailTo_Failed);
			paraList_tRunJob_3.add("--context_type " + "sendMailTo_Failed" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailTo_Success", context.sendMailTo_Success);
			paraList_tRunJob_3.add("--context_type " + "sendMailTo_Success" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("sendMailUserName", context.sendMailUserName);
			paraList_tRunJob_3.add("--context_type " + "sendMailUserName" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("ProcessMode", context.ProcessMode);
			paraList_tRunJob_3.add("--context_type " + "ProcessMode" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
		while (propertyNames_tRunJob_3.hasMoreElements()) {
			String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
			Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);
			if(value_tRunJob_3!=null) {  
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			} else {
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_3 = null;

	
	
		zipcar_marketingdw.subjobs_monthly_0_1.Subjobs_Monthly childJob_tRunJob_3 = new zipcar_marketingdw.subjobs_monthly_0_1.Subjobs_Monthly();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_3.getErrorCode());
			
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ProcessDailyFeeds ProcessDailyFeedsClass = new ProcessDailyFeeds();

        int exitCode = ProcessDailyFeedsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ProcessDailyFeeds.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/processdailyfeeds_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("SubJobs", "id_String");
				
                context.SubJobs=(String) context.getProperty("SubJobs");
				    context.setContextType("bulkLoadMaxErrors", "id_Long");
				
             try{
                 context.bulkLoadMaxErrors=routines.system.ParserUtils.parseTo_Long (context.getProperty("bulkLoadMaxErrors"));
             }catch(NumberFormatException e){
                 context.bulkLoadMaxErrors=null;
              }
				    context.setContextType("bulkLoadTempPath", "id_String");
				
                context.bulkLoadTempPath=(String) context.getProperty("bulkLoadTempPath");
				    context.setContextType("s3_accesskey", "id_String");
				
                context.s3_accesskey=(String) context.getProperty("s3_accesskey");
				    context.setContextType("s3_bucket", "id_String");
				
                context.s3_bucket=(String) context.getProperty("s3_bucket");
				    context.setContextType("s3_secretkey", "id_String");
				
                context.s3_secretkey=(String) context.getProperty("s3_secretkey");
				    context.setContextType("bulkLoad", "id_Boolean");
				
             try{
                 context.bulkLoad=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("bulkLoad"));
             }catch(NumberFormatException e){
                 context.bulkLoad=null;
              }
				    context.setContextType("feedArchive", "id_Directory");
				
                context.feedArchive=(String) context.getProperty("feedArchive");
				    context.setContextType("feedError", "id_Directory");
				
                context.feedError=(String) context.getProperty("feedError");
				    context.setContextType("feedInput", "id_Directory");
				
                context.feedInput=(String) context.getProperty("feedInput");
				    context.setContextType("feedSettleTime", "id_Integer");
				
             try{
                 context.feedSettleTime=routines.system.ParserUtils.parseTo_Integer (context.getProperty("feedSettleTime"));
             }catch(NumberFormatException e){
                 context.feedSettleTime=null;
              }
				    context.setContextType("AlertRepeatDuration", "id_Long");
				
             try{
                 context.AlertRepeatDuration=routines.system.ParserUtils.parseTo_Long (context.getProperty("AlertRepeatDuration"));
             }catch(NumberFormatException e){
                 context.AlertRepeatDuration=null;
              }
				    context.setContextType("clearStagingTable", "id_Boolean");
				
             try{
                 context.clearStagingTable=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("clearStagingTable"));
             }catch(NumberFormatException e){
                 context.clearStagingTable=null;
              }
				    context.setContextType("MemberWeeksOffset", "id_Integer");
				
             try{
                 context.MemberWeeksOffset=routines.system.ParserUtils.parseTo_Integer (context.getProperty("MemberWeeksOffset"));
             }catch(NumberFormatException e){
                 context.MemberWeeksOffset=null;
              }
				    context.setContextType("MetroMedianEndDate", "id_Date");
				
            try{
                String context_MetroMedianEndDate_value = context.getProperty("MetroMedianEndDate");
                if (context_MetroMedianEndDate_value == null){
                    context_MetroMedianEndDate_value = "";
                }
                int context_MetroMedianEndDate_pos = context_MetroMedianEndDate_value.indexOf(";");
                String context_MetroMedianEndDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_MetroMedianEndDate_pos > -1){
                    context_MetroMedianEndDate_pattern = context_MetroMedianEndDate_value.substring(0, context_MetroMedianEndDate_pos);
                    context_MetroMedianEndDate_value = context_MetroMedianEndDate_value.substring(context_MetroMedianEndDate_pos + 1);
                }

                context.MetroMedianEndDate=(java.util.Date)(new java.text.SimpleDateFormat(context_MetroMedianEndDate_pattern).parse(context_MetroMedianEndDate_value));

            }catch(ParseException e)
            {
                context.MetroMedianEndDate=null;
            }
				    context.setContextType("MetroMedianStartDate", "id_Date");
				
            try{
                String context_MetroMedianStartDate_value = context.getProperty("MetroMedianStartDate");
                if (context_MetroMedianStartDate_value == null){
                    context_MetroMedianStartDate_value = "";
                }
                int context_MetroMedianStartDate_pos = context_MetroMedianStartDate_value.indexOf(";");
                String context_MetroMedianStartDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_MetroMedianStartDate_pos > -1){
                    context_MetroMedianStartDate_pattern = context_MetroMedianStartDate_value.substring(0, context_MetroMedianStartDate_pos);
                    context_MetroMedianStartDate_value = context_MetroMedianStartDate_value.substring(context_MetroMedianStartDate_pos + 1);
                }

                context.MetroMedianStartDate=(java.util.Date)(new java.text.SimpleDateFormat(context_MetroMedianStartDate_pattern).parse(context_MetroMedianStartDate_value));

            }catch(ParseException e)
            {
                context.MetroMedianStartDate=null;
            }
				    context.setContextType("RfmWeeksOffset", "id_Integer");
				
             try{
                 context.RfmWeeksOffset=routines.system.ParserUtils.parseTo_Integer (context.getProperty("RfmWeeksOffset"));
             }catch(NumberFormatException e){
                 context.RfmWeeksOffset=null;
              }
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("RunDate_NoCheck", "id_Boolean");
				
             try{
                 context.RunDate_NoCheck=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("RunDate_NoCheck"));
             }catch(NumberFormatException e){
                 context.RunDate_NoCheck=null;
              }
				    context.setContextType("WaitForInboundFeeds", "id_Boolean");
				
             try{
                 context.WaitForInboundFeeds=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("WaitForInboundFeeds"));
             }catch(NumberFormatException e){
                 context.WaitForInboundFeeds=null;
              }
				    context.setContextType("WeeklyJobsDay", "id_String");
				
                context.WeeklyJobsDay=(String) context.getProperty("WeeklyJobsDay");
				    context.setContextType("environment", "id_String");
				
                context.environment=(String) context.getProperty("environment");
				    context.setContextType("sendAlertTo_MissingFeed", "id_String");
				
                context.sendAlertTo_MissingFeed=(String) context.getProperty("sendAlertTo_MissingFeed");
				    context.setContextType("sendMailFrom", "id_String");
				
                context.sendMailFrom=(String) context.getProperty("sendMailFrom");
				    context.setContextType("sendMailPassword", "id_Password");
				
            		String pwd_sendMailPassword_value = context.getProperty("sendMailPassword");
            		context.sendMailPassword = null;
            		if(pwd_sendMailPassword_value!=null) {
            			if(context_param.containsKey("sendMailPassword")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.sendMailPassword = pwd_sendMailPassword_value;
            			} else if (!pwd_sendMailPassword_value.isEmpty()) {
            				try {
            					context.sendMailPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_sendMailPassword_value);
            					context.put("sendMailPassword",context.sendMailPassword);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("sendMailSenderName", "id_String");
				
                context.sendMailSenderName=(String) context.getProperty("sendMailSenderName");
				    context.setContextType("sendMailSMTPHost", "id_String");
				
                context.sendMailSMTPHost=(String) context.getProperty("sendMailSMTPHost");
				    context.setContextType("sendMailSMTPPort", "id_String");
				
                context.sendMailSMTPPort=(String) context.getProperty("sendMailSMTPPort");
				    context.setContextType("sendMailTo_Failed", "id_String");
				
                context.sendMailTo_Failed=(String) context.getProperty("sendMailTo_Failed");
				    context.setContextType("sendMailTo_Success", "id_String");
				
                context.sendMailTo_Success=(String) context.getProperty("sendMailTo_Success");
				    context.setContextType("sendMailUserName", "id_String");
				
                context.sendMailUserName=(String) context.getProperty("sendMailUserName");
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
				    context.setContextType("Redshift_Staging_AdditionalParams", "id_String");
				
                context.Redshift_Staging_AdditionalParams=(String) context.getProperty("Redshift_Staging_AdditionalParams");
				    context.setContextType("Redshift_Staging_Database", "id_String");
				
                context.Redshift_Staging_Database=(String) context.getProperty("Redshift_Staging_Database");
				    context.setContextType("Redshift_Staging_Login", "id_String");
				
                context.Redshift_Staging_Login=(String) context.getProperty("Redshift_Staging_Login");
				    context.setContextType("Redshift_Staging_Password", "id_Password");
				
            		String pwd_Redshift_Staging_Password_value = context.getProperty("Redshift_Staging_Password");
            		context.Redshift_Staging_Password = null;
            		if(pwd_Redshift_Staging_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Staging_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Staging_Password = pwd_Redshift_Staging_Password_value;
            			} else if (!pwd_Redshift_Staging_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Staging_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Staging_Password_value);
            					context.put("Redshift_Staging_Password",context.Redshift_Staging_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Staging_Port", "id_String");
				
                context.Redshift_Staging_Port=(String) context.getProperty("Redshift_Staging_Port");
				    context.setContextType("Redshift_Staging_Schema", "id_String");
				
                context.Redshift_Staging_Schema=(String) context.getProperty("Redshift_Staging_Schema");
				    context.setContextType("Redshift_Staging_Server", "id_String");
				
                context.Redshift_Staging_Server=(String) context.getProperty("Redshift_Staging_Server");
				    context.setContextType("ProcessMode", "id_String");
				
                context.ProcessMode=(String) context.getProperty("ProcessMode");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("SubJobs")) {
                context.SubJobs = (String) parentContextMap.get("SubJobs");
            }if (parentContextMap.containsKey("bulkLoadMaxErrors")) {
                context.bulkLoadMaxErrors = (Long) parentContextMap.get("bulkLoadMaxErrors");
            }if (parentContextMap.containsKey("bulkLoadTempPath")) {
                context.bulkLoadTempPath = (String) parentContextMap.get("bulkLoadTempPath");
            }if (parentContextMap.containsKey("s3_accesskey")) {
                context.s3_accesskey = (String) parentContextMap.get("s3_accesskey");
            }if (parentContextMap.containsKey("s3_bucket")) {
                context.s3_bucket = (String) parentContextMap.get("s3_bucket");
            }if (parentContextMap.containsKey("s3_secretkey")) {
                context.s3_secretkey = (String) parentContextMap.get("s3_secretkey");
            }if (parentContextMap.containsKey("bulkLoad")) {
                context.bulkLoad = (Boolean) parentContextMap.get("bulkLoad");
            }if (parentContextMap.containsKey("feedArchive")) {
                context.feedArchive = (String) parentContextMap.get("feedArchive");
            }if (parentContextMap.containsKey("feedError")) {
                context.feedError = (String) parentContextMap.get("feedError");
            }if (parentContextMap.containsKey("feedInput")) {
                context.feedInput = (String) parentContextMap.get("feedInput");
            }if (parentContextMap.containsKey("feedSettleTime")) {
                context.feedSettleTime = (Integer) parentContextMap.get("feedSettleTime");
            }if (parentContextMap.containsKey("AlertRepeatDuration")) {
                context.AlertRepeatDuration = (Long) parentContextMap.get("AlertRepeatDuration");
            }if (parentContextMap.containsKey("clearStagingTable")) {
                context.clearStagingTable = (Boolean) parentContextMap.get("clearStagingTable");
            }if (parentContextMap.containsKey("MemberWeeksOffset")) {
                context.MemberWeeksOffset = (Integer) parentContextMap.get("MemberWeeksOffset");
            }if (parentContextMap.containsKey("MetroMedianEndDate")) {
                context.MetroMedianEndDate = (java.util.Date) parentContextMap.get("MetroMedianEndDate");
            }if (parentContextMap.containsKey("MetroMedianStartDate")) {
                context.MetroMedianStartDate = (java.util.Date) parentContextMap.get("MetroMedianStartDate");
            }if (parentContextMap.containsKey("RfmWeeksOffset")) {
                context.RfmWeeksOffset = (Integer) parentContextMap.get("RfmWeeksOffset");
            }if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("RunDate_NoCheck")) {
                context.RunDate_NoCheck = (Boolean) parentContextMap.get("RunDate_NoCheck");
            }if (parentContextMap.containsKey("WaitForInboundFeeds")) {
                context.WaitForInboundFeeds = (Boolean) parentContextMap.get("WaitForInboundFeeds");
            }if (parentContextMap.containsKey("WeeklyJobsDay")) {
                context.WeeklyJobsDay = (String) parentContextMap.get("WeeklyJobsDay");
            }if (parentContextMap.containsKey("environment")) {
                context.environment = (String) parentContextMap.get("environment");
            }if (parentContextMap.containsKey("sendAlertTo_MissingFeed")) {
                context.sendAlertTo_MissingFeed = (String) parentContextMap.get("sendAlertTo_MissingFeed");
            }if (parentContextMap.containsKey("sendMailFrom")) {
                context.sendMailFrom = (String) parentContextMap.get("sendMailFrom");
            }if (parentContextMap.containsKey("sendMailPassword")) {
                context.sendMailPassword = (java.lang.String) parentContextMap.get("sendMailPassword");
            }if (parentContextMap.containsKey("sendMailSenderName")) {
                context.sendMailSenderName = (String) parentContextMap.get("sendMailSenderName");
            }if (parentContextMap.containsKey("sendMailSMTPHost")) {
                context.sendMailSMTPHost = (String) parentContextMap.get("sendMailSMTPHost");
            }if (parentContextMap.containsKey("sendMailSMTPPort")) {
                context.sendMailSMTPPort = (String) parentContextMap.get("sendMailSMTPPort");
            }if (parentContextMap.containsKey("sendMailTo_Failed")) {
                context.sendMailTo_Failed = (String) parentContextMap.get("sendMailTo_Failed");
            }if (parentContextMap.containsKey("sendMailTo_Success")) {
                context.sendMailTo_Success = (String) parentContextMap.get("sendMailTo_Success");
            }if (parentContextMap.containsKey("sendMailUserName")) {
                context.sendMailUserName = (String) parentContextMap.get("sendMailUserName");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }if (parentContextMap.containsKey("Redshift_Staging_AdditionalParams")) {
                context.Redshift_Staging_AdditionalParams = (String) parentContextMap.get("Redshift_Staging_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Staging_Database")) {
                context.Redshift_Staging_Database = (String) parentContextMap.get("Redshift_Staging_Database");
            }if (parentContextMap.containsKey("Redshift_Staging_Login")) {
                context.Redshift_Staging_Login = (String) parentContextMap.get("Redshift_Staging_Login");
            }if (parentContextMap.containsKey("Redshift_Staging_Password")) {
                context.Redshift_Staging_Password = (java.lang.String) parentContextMap.get("Redshift_Staging_Password");
            }if (parentContextMap.containsKey("Redshift_Staging_Port")) {
                context.Redshift_Staging_Port = (String) parentContextMap.get("Redshift_Staging_Port");
            }if (parentContextMap.containsKey("Redshift_Staging_Schema")) {
                context.Redshift_Staging_Schema = (String) parentContextMap.get("Redshift_Staging_Schema");
            }if (parentContextMap.containsKey("Redshift_Staging_Server")) {
                context.Redshift_Staging_Server = (String) parentContextMap.get("Redshift_Staging_Server");
            }if (parentContextMap.containsKey("ProcessMode")) {
                context.ProcessMode = (String) parentContextMap.get("ProcessMode");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("sendMailPassword");
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
			parametersToEncrypt.add("Redshift_Staging_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tWarn_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tWarn_2) {
globalMap.put("tWarn_2_SUBPROCESS_STATE", -1);

e_tWarn_2.printStackTrace();

}catch (java.lang.Error e_tWarn_2) {
globalMap.put("tWarn_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tWarn_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ProcessDailyFeeds");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     329802 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:57 PM CDT
 ************************************************************************************************/