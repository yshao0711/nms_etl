// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.load_campaign_data_0_1;

import routines.LocationUtils;
import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.NotificationUtils;
import routines.ConfigFile;
import routines.RFMUtils;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.JobGlobals;
import routines.DataUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	import java.util.*;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaFlex_2
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaFlex_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Load_Campaign_Data Purpose: Load campaign data from Excel into DB<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class Load_Campaign_Data implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(CampaignExcelFile != null){
				
					this.setProperty("CampaignExcelFile", CampaignExcelFile.toString());
				
			}
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
		}

		public String CampaignExcelFile;
		public String getCampaignExcelFile(){
			return this.CampaignExcelFile;
		}
		
public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Load_Campaign_Data";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_OS9hgGWyEeeEP89hlAW45g", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Load_Campaign_Data.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Load_Campaign_Data.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Log_Complete");
Logging.componentName(jobName, "tWarn_2", "Log_CampaignID");
Logging.componentName(jobName, "tWarn_4", "Log_MailingList");
Logging.componentName(jobName, "tWarn_6", "Log_ControlList");
Logging.componentName(jobName, "tWarn_5", "Log_CampaignInstances");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tSetGlobalVar_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("RUN_DATE", DateUtils.runDate(context.RunDate));
globalMap.put("campaign_field_map", new HashMap<String, String>());
globalMap.put("mailing_field_map", new HashMap<String, String>());
globalMap.put("control_field_map", new HashMap<String, String>());
globalMap.put("mailing_list_processed", new java.util.concurrent.atomic.AtomicInteger(0) );
globalMap.put("control_list_processed", new java.util.concurrent.atomic.AtomicInteger(0) );
globalMap.put("campaign_instance_processed", new java.util.concurrent.atomic.AtomicInteger(0) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJavaFlex_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class external_configStruct implements routines.system.IPersistableRow<external_configStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(external_configStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		external_configStruct external_config = new external_configStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("external_config" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// Load the config file and send its properties to the Context Loader
java.util.Map<String, String> externalConfig = ConfigFile.loadConfig(ConfigFile.JOB_PROC_DAILY_FEEDS, context_param);
for(String key: externalConfig.keySet()) {


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// loop
external_config.key = key;
external_config.value = externalConfig.get(key);

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//external_config
			//external_config


			
				if(execStat){
					runStat.updateStatOnConnection("external_config"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (external_config.key != null){
                          tmp_key_tContextLoad_1 = external_config.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          external_config.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(external_config.key != null) {
                    key_tContextLoad_1 =
                        external_config.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(external_config.value != null) {
                    value_tContextLoad_1 =
                        external_config.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ("Redshift_Marketing_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Monitoring_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "CampaignExcelFile".equals(key_tContextLoad_1))
        {
           context.CampaignExcelFile=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "RunDate".equals(key_tContextLoad_1))
        {
                String context_RunDate_value = context.getProperty("RunDate");
                if(context_RunDate_value==null)
                    context_RunDate_value = "";
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                }
                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Server=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */



	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("Redshift_Marketing_Password");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Monitoring_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("external_config"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tRedshiftConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_1", false);
		start_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_1";

	
		int tos_count_tRedshiftConnection_1 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_1().limitLog4jByte();


	
    			String url_tRedshiftConnection_1 = "jdbc:redshift://" + context.Redshift_Marketing_Server + ":" + context.Redshift_Marketing_Port + "/" + context.Redshift_Marketing_Database + "?" + context.Redshift_Marketing_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_1 = context.Redshift_Marketing_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_1 = context.Redshift_Marketing_Password; 
		String dbPwd_tRedshiftConnection_1 = decryptedPassword_tRedshiftConnection_1;
	

	java.sql.Connection conn_tRedshiftConnection_1 = null;
	
					String driverClass_tRedshiftConnection_1 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_1);
		
		conn_tRedshiftConnection_1 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_1,dbUser_tRedshiftConnection_1,dbPwd_tRedshiftConnection_1);

		globalMap.put("conn_tRedshiftConnection_1", conn_tRedshiftConnection_1);
	if (null != conn_tRedshiftConnection_1) {
		
			conn_tRedshiftConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_1",context.Redshift_Marketing_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_1",conn_tRedshiftConnection_1);

 



/**
 * [tRedshiftConnection_1 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 


	tos_count_tRedshiftConnection_1++;

/**
 * [tRedshiftConnection_1 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 

ok_Hash.put("tRedshiftConnection_1", true);
end_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());




/**
 * [tRedshiftConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tFileExist_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 



/**
 * [tRedshiftConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		
    	class BytesLimit65535_tFileExist_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileExist_1().limitLog4jByte();

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.CampaignExcelFile);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.CampaignExcelFile);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tDie_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		
    	class BytesLimit65535_tDie_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDie_2().limitLog4jByte();

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	


				tLogCatcher_1.addMessage("tDie", "tDie_2", 5, "Campaign Excel File Does Not Exists!", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Campaign Excel File Does Not Exists!");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Campaign Excel File Does Not Exists!");
	globalMap.put("tDie_2_DIE_MESSAGES", "Campaign Excel File Does Not Exists!");
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	
	System.exit(4);

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_1", false);
		start_Hash.put("tRedshiftClose_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_1";

	
		int tos_count_tRedshiftClose_1 = 0;
		
    	class BytesLimit65535_tRedshiftClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_1().limitLog4jByte();

 



/**
 * [tRedshiftClose_1 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	



	java.sql.Connection conn_tRedshiftClose_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	if(conn_tRedshiftClose_1 != null && !conn_tRedshiftClose_1.isClosed())
	{
        conn_tRedshiftClose_1.close();
	}

 


	tos_count_tRedshiftClose_1++;

/**
 * [tRedshiftClose_1 main ] stop
 */
	
	/**
	 * [tRedshiftClose_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 

ok_Hash.put("tRedshiftClose_1", true);
end_Hash.put("tRedshiftClose_1", System.currentTimeMillis());




/**
 * [tRedshiftClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 



/**
 * [tRedshiftClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\nDROP TABLE IF EXISTS {{marketing.schema}}.temp_campaign_info;\nCREATE TABLE {{marketing.schema}}.temp_campaign_info AS\nSELECT \n	lc.campaign_name,\n	lcp.name as campaign_provider_name,\n	lct.campaign_type,\n	lci.campaign_desc,\n	lci.campaign_date,\n	lci.subject_line,\n	lci.mailing_id,\n    lci.activity_start_date,\n    lci.activity_end_date,\n    lci.list_generated_date,\n	lci.driving_credit,\n	lci.driving_credit_currency,\n	lci.reservations\nFROM {{marketing.schema}}.l_campaign lc\nJOIN {{marketing.schema}}.l_campaign_instance lci\nON lc.campaign_id = lci.campaign_id\nJOIN {{marketing.schema}}.l_campaign_type lct\nON lc.campaign_type_id = lct.campaign_type_id\nJOIN {{marketing.schema}}.l_campaign_provider lcp\nON lc.campaign_provider_id = lcp.campaign_provider_id\nLIMIT 1\n;\n\nTRUNCATE {{marketing.schema}}.temp_campaign_info;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"rundate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE"))
)
;
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_2) {
		
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("CampaignExcelFile", context.CampaignExcelFile);
			paraList_tRunJob_2.add("--context_type " + "CampaignExcelFile" + "=" + "id_File");
		
			parentContextMap_tRunJob_2.put("RunDate", context.RunDate);
			paraList_tRunJob_2.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = "campaign";
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ExcelSheetName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ExcelSheetName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ExcelSheetName", obj_tRunJob_2);
	
		obj_tRunJob_2 = (Map)globalMap.get("campaign_field_map");
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param FieldMap=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param FieldMap=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("FieldMap", obj_tRunJob_2);
	
	
		zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping childJob_tRunJob_2 = new zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputExcel_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String CAMPAIGN_NAME;

				public String getCAMPAIGN_NAME () {
					return this.CAMPAIGN_NAME;
				}
				
			    public String CAMPAIGN_PROVIDER_NAME;

				public String getCAMPAIGN_PROVIDER_NAME () {
					return this.CAMPAIGN_PROVIDER_NAME;
				}
				
			    public String CAMPAIGN_TYPE;

				public String getCAMPAIGN_TYPE () {
					return this.CAMPAIGN_TYPE;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public java.util.Date CAMPAIGN_DATE;

				public java.util.Date getCAMPAIGN_DATE () {
					return this.CAMPAIGN_DATE;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public java.util.Date ACTIVITY_START_DATE;

				public java.util.Date getACTIVITY_START_DATE () {
					return this.ACTIVITY_START_DATE;
				}
				
			    public java.util.Date ACTIVITY_END_DATE;

				public java.util.Date getACTIVITY_END_DATE () {
					return this.ACTIVITY_END_DATE;
				}
				
			    public java.util.Date LIST_GENERATED_DATE;

				public java.util.Date getLIST_GENERATED_DATE () {
					return this.LIST_GENERATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				
			    public Integer RESERVATIONS;

				public Integer getRESERVATIONS () {
					return this.RESERVATIONS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.CAMPAIGN_NAME = readString(dis);
					
					this.CAMPAIGN_PROVIDER_NAME = readString(dis);
					
					this.CAMPAIGN_TYPE = readString(dis);
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.CAMPAIGN_DATE = readDate(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.ACTIVITY_START_DATE = readDate(dis);
					
					this.ACTIVITY_END_DATE = readDate(dis);
					
					this.LIST_GENERATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
						this.RESERVATIONS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CAMPAIGN_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_PROVIDER_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_TYPE,dos);
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// java.util.Date
				
						writeDate(this.CAMPAIGN_DATE,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_END_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LIST_GENERATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
					// Integer
				
						writeInteger(this.RESERVATIONS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CAMPAIGN_NAME="+CAMPAIGN_NAME);
		sb.append(",CAMPAIGN_PROVIDER_NAME="+CAMPAIGN_PROVIDER_NAME);
		sb.append(",CAMPAIGN_TYPE="+CAMPAIGN_TYPE);
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",CAMPAIGN_DATE="+String.valueOf(CAMPAIGN_DATE));
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",ACTIVITY_START_DATE="+String.valueOf(ACTIVITY_START_DATE));
		sb.append(",ACTIVITY_END_DATE="+String.valueOf(ACTIVITY_END_DATE));
		sb.append(",LIST_GENERATED_DATE="+String.valueOf(LIST_GENERATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
		sb.append(",RESERVATIONS="+String.valueOf(RESERVATIONS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String CAMPAIGN_NAME;

				public String getCAMPAIGN_NAME () {
					return this.CAMPAIGN_NAME;
				}
				
			    public String CAMPAIGN_PROVIDER_NAME;

				public String getCAMPAIGN_PROVIDER_NAME () {
					return this.CAMPAIGN_PROVIDER_NAME;
				}
				
			    public String CAMPAIGN_TYPE;

				public String getCAMPAIGN_TYPE () {
					return this.CAMPAIGN_TYPE;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public java.util.Date CAMPAIGN_DATE;

				public java.util.Date getCAMPAIGN_DATE () {
					return this.CAMPAIGN_DATE;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public java.util.Date ACTIVITY_START_DATE;

				public java.util.Date getACTIVITY_START_DATE () {
					return this.ACTIVITY_START_DATE;
				}
				
			    public java.util.Date ACTIVITY_END_DATE;

				public java.util.Date getACTIVITY_END_DATE () {
					return this.ACTIVITY_END_DATE;
				}
				
			    public java.util.Date LIST_GENERATED_DATE;

				public java.util.Date getLIST_GENERATED_DATE () {
					return this.LIST_GENERATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				
			    public Integer RESERVATIONS;

				public Integer getRESERVATIONS () {
					return this.RESERVATIONS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.CAMPAIGN_NAME = readString(dis);
					
					this.CAMPAIGN_PROVIDER_NAME = readString(dis);
					
					this.CAMPAIGN_TYPE = readString(dis);
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.CAMPAIGN_DATE = readDate(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.ACTIVITY_START_DATE = readDate(dis);
					
					this.ACTIVITY_END_DATE = readDate(dis);
					
					this.LIST_GENERATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
						this.RESERVATIONS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CAMPAIGN_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_PROVIDER_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_TYPE,dos);
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// java.util.Date
				
						writeDate(this.CAMPAIGN_DATE,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_END_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LIST_GENERATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
					// Integer
				
						writeInteger(this.RESERVATIONS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CAMPAIGN_NAME="+CAMPAIGN_NAME);
		sb.append(",CAMPAIGN_PROVIDER_NAME="+CAMPAIGN_PROVIDER_NAME);
		sb.append(",CAMPAIGN_TYPE="+CAMPAIGN_TYPE);
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",CAMPAIGN_DATE="+String.valueOf(CAMPAIGN_DATE));
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",ACTIVITY_START_DATE="+String.valueOf(ACTIVITY_START_DATE));
		sb.append(",ACTIVITY_END_DATE="+String.valueOf(ACTIVITY_END_DATE));
		sb.append(",LIST_GENERATED_DATE="+String.valueOf(LIST_GENERATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
		sb.append(",RESERVATIONS="+String.valueOf(RESERVATIONS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String CAMPAIGN_NAME;

				public String getCAMPAIGN_NAME () {
					return this.CAMPAIGN_NAME;
				}
				
			    public String CAMPAIGN_PROVIDER_NAME;

				public String getCAMPAIGN_PROVIDER_NAME () {
					return this.CAMPAIGN_PROVIDER_NAME;
				}
				
			    public String CAMPAIGN_TYPE;

				public String getCAMPAIGN_TYPE () {
					return this.CAMPAIGN_TYPE;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public java.util.Date CAMPAIGN_DATE;

				public java.util.Date getCAMPAIGN_DATE () {
					return this.CAMPAIGN_DATE;
				}
				
			    public String SUBJECT_LINE;

				public String getSUBJECT_LINE () {
					return this.SUBJECT_LINE;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public java.util.Date ACTIVITY_START_DATE;

				public java.util.Date getACTIVITY_START_DATE () {
					return this.ACTIVITY_START_DATE;
				}
				
			    public java.util.Date ACTIVITY_END_DATE;

				public java.util.Date getACTIVITY_END_DATE () {
					return this.ACTIVITY_END_DATE;
				}
				
			    public java.util.Date LIST_GENERATED_DATE;

				public java.util.Date getLIST_GENERATED_DATE () {
					return this.LIST_GENERATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				
			    public Integer RESERVATIONS;

				public Integer getRESERVATIONS () {
					return this.RESERVATIONS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.CAMPAIGN_NAME = readString(dis);
					
					this.CAMPAIGN_PROVIDER_NAME = readString(dis);
					
					this.CAMPAIGN_TYPE = readString(dis);
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.CAMPAIGN_DATE = readDate(dis);
					
					this.SUBJECT_LINE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.ACTIVITY_START_DATE = readDate(dis);
					
					this.ACTIVITY_END_DATE = readDate(dis);
					
					this.LIST_GENERATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
						this.RESERVATIONS = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CAMPAIGN_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_PROVIDER_NAME,dos);
					
					// String
				
						writeString(this.CAMPAIGN_TYPE,dos);
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// java.util.Date
				
						writeDate(this.CAMPAIGN_DATE,dos);
					
					// String
				
						writeString(this.SUBJECT_LINE,dos);
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_START_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.ACTIVITY_END_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.LIST_GENERATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
					// Integer
				
						writeInteger(this.RESERVATIONS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CAMPAIGN_NAME="+CAMPAIGN_NAME);
		sb.append(",CAMPAIGN_PROVIDER_NAME="+CAMPAIGN_PROVIDER_NAME);
		sb.append(",CAMPAIGN_TYPE="+CAMPAIGN_TYPE);
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",CAMPAIGN_DATE="+String.valueOf(CAMPAIGN_DATE));
		sb.append(",SUBJECT_LINE="+SUBJECT_LINE);
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",ACTIVITY_START_DATE="+String.valueOf(ACTIVITY_START_DATE));
		sb.append(",ACTIVITY_END_DATE="+String.valueOf(ACTIVITY_END_DATE));
		sb.append(",LIST_GENERATED_DATE="+String.valueOf(LIST_GENERATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
		sb.append(",RESERVATIONS="+String.valueOf(RESERVATIONS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String newColumn01;

				public String getNewColumn01 () {
					return this.newColumn01;
				}
				
			    public String newColumn02;

				public String getNewColumn02 () {
					return this.newColumn02;
				}
				
			    public String newColumn03;

				public String getNewColumn03 () {
					return this.newColumn03;
				}
				
			    public String newColumn04;

				public String getNewColumn04 () {
					return this.newColumn04;
				}
				
			    public String newColumn05;

				public String getNewColumn05 () {
					return this.newColumn05;
				}
				
			    public String newColumn06;

				public String getNewColumn06 () {
					return this.newColumn06;
				}
				
			    public String newColumn07;

				public String getNewColumn07 () {
					return this.newColumn07;
				}
				
			    public String newColumn08;

				public String getNewColumn08 () {
					return this.newColumn08;
				}
				
			    public String newColumn09;

				public String getNewColumn09 () {
					return this.newColumn09;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.newColumn01 = readString(dis);
					
					this.newColumn02 = readString(dis);
					
					this.newColumn03 = readString(dis);
					
					this.newColumn04 = readString(dis);
					
					this.newColumn05 = readString(dis);
					
					this.newColumn06 = readString(dis);
					
					this.newColumn07 = readString(dis);
					
					this.newColumn08 = readString(dis);
					
					this.newColumn09 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn01,dos);
					
					// String
				
						writeString(this.newColumn02,dos);
					
					// String
				
						writeString(this.newColumn03,dos);
					
					// String
				
						writeString(this.newColumn04,dos);
					
					// String
				
						writeString(this.newColumn05,dos);
					
					// String
				
						writeString(this.newColumn06,dos);
					
					// String
				
						writeString(this.newColumn07,dos);
					
					// String
				
						writeString(this.newColumn08,dos);
					
					// String
				
						writeString(this.newColumn09,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn01="+newColumn01);
		sb.append(",newColumn02="+newColumn02);
		sb.append(",newColumn03="+newColumn03);
		sb.append(",newColumn04="+newColumn04);
		sb.append(",newColumn05="+newColumn05);
		sb.append(",newColumn06="+newColumn06);
		sb.append(",newColumn07="+newColumn07);
		sb.append(",newColumn08="+newColumn08);
		sb.append(",newColumn09="+newColumn09);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row5Struct row5 = new row5Struct();
row6Struct row6 = new row6Struct();
row13Struct row13 = new row13Struct();







	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_6 = 0;
		
    	class BytesLimit65535_tJavaRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_6().limitLog4jByte();

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_4", false);
		start_Hash.put("tRedshiftOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_4 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_4().limitLog4jByte();





String dbschema_tRedshiftOutput_4 = null;
	dbschema_tRedshiftOutput_4 = (String)globalMap.get("schema_" + "tRedshiftConnection_1");
	
String tableName_tRedshiftOutput_4 = "temp_campaign_info";
String schemaForSearch_tRedshiftOutput_4 = null;
String tableForSearch_tRedshiftOutput_4 = tableName_tRedshiftOutput_4;
    if(dbschema_tRedshiftOutput_4 != null && dbschema_tRedshiftOutput_4.trim().length() > 0) {
    	tableName_tRedshiftOutput_4 = dbschema_tRedshiftOutput_4 + "\".\"" + tableName_tRedshiftOutput_4;
    }

int nb_line_tRedshiftOutput_4 = 0;
int nb_line_update_tRedshiftOutput_4 = 0;
int nb_line_inserted_tRedshiftOutput_4 = 0;
int nb_line_deleted_tRedshiftOutput_4 = 0;
int nb_line_rejected_tRedshiftOutput_4 = 0;

int deletedCount_tRedshiftOutput_4=0;
int updatedCount_tRedshiftOutput_4=0;
int insertedCount_tRedshiftOutput_4=0;
int rejectedCount_tRedshiftOutput_4=0;

java.util.Calendar calendar_tRedshiftOutput_4 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_4.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_4 = calendar_tRedshiftOutput_4.getTime().getTime();
calendar_tRedshiftOutput_4.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_4 = calendar_tRedshiftOutput_4.getTime().getTime();
long date_tRedshiftOutput_4;

boolean whetherReject_tRedshiftOutput_4 = false;


java.sql.Connection conn_tRedshiftOutput_4 = null;
	conn_tRedshiftOutput_4 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	
	
int count_tRedshiftOutput_4=0;
	
			int rowCounttRedshiftOutput_4 = 0;
			class BufferLine_tRedshiftOutput_4 {				
						String CAMPAIGN_NAME;
						
	            		public BufferLine_tRedshiftOutput_4 c0(String CAMPAIGN_NAME){
							this.CAMPAIGN_NAME = CAMPAIGN_NAME;
							return this;
						}				
						String CAMPAIGN_PROVIDER_NAME;
						
	            		public BufferLine_tRedshiftOutput_4 c1(String CAMPAIGN_PROVIDER_NAME){
							this.CAMPAIGN_PROVIDER_NAME = CAMPAIGN_PROVIDER_NAME;
							return this;
						}				
						String CAMPAIGN_TYPE;
						
	            		public BufferLine_tRedshiftOutput_4 c2(String CAMPAIGN_TYPE){
							this.CAMPAIGN_TYPE = CAMPAIGN_TYPE;
							return this;
						}				
						String CAMPAIGN_DESC;
						
	            		public BufferLine_tRedshiftOutput_4 c3(String CAMPAIGN_DESC){
							this.CAMPAIGN_DESC = CAMPAIGN_DESC;
							return this;
						}				
						java.util.Date CAMPAIGN_DATE;
						
	            		public BufferLine_tRedshiftOutput_4 c4(java.util.Date CAMPAIGN_DATE){
							this.CAMPAIGN_DATE = CAMPAIGN_DATE;
							return this;
						}				
						String SUBJECT_LINE;
						
	            		public BufferLine_tRedshiftOutput_4 c5(String SUBJECT_LINE){
							this.SUBJECT_LINE = SUBJECT_LINE;
							return this;
						}				
						Long MAILING_ID;
						
	            		public BufferLine_tRedshiftOutput_4 c6(Long MAILING_ID){
							this.MAILING_ID = MAILING_ID;
							return this;
						}				
						java.util.Date ACTIVITY_START_DATE;
						
	            		public BufferLine_tRedshiftOutput_4 c7(java.util.Date ACTIVITY_START_DATE){
							this.ACTIVITY_START_DATE = ACTIVITY_START_DATE;
							return this;
						}				
						java.util.Date ACTIVITY_END_DATE;
						
	            		public BufferLine_tRedshiftOutput_4 c8(java.util.Date ACTIVITY_END_DATE){
							this.ACTIVITY_END_DATE = ACTIVITY_END_DATE;
							return this;
						}				
						java.util.Date LIST_GENERATED_DATE;
						
	            		public BufferLine_tRedshiftOutput_4 c9(java.util.Date LIST_GENERATED_DATE){
							this.LIST_GENERATED_DATE = LIST_GENERATED_DATE;
							return this;
						}				
						Float DRIVING_CREDIT;
						
	            		public BufferLine_tRedshiftOutput_4 c10(Float DRIVING_CREDIT){
							this.DRIVING_CREDIT = DRIVING_CREDIT;
							return this;
						}				
						String DRIVING_CREDIT_CURRENCY;
						
	            		public BufferLine_tRedshiftOutput_4 c11(String DRIVING_CREDIT_CURRENCY){
							this.DRIVING_CREDIT_CURRENCY = DRIVING_CREDIT_CURRENCY;
							return this;
						}				
						Integer RESERVATIONS;
						
	            		public BufferLine_tRedshiftOutput_4 c12(Integer RESERVATIONS){
							this.RESERVATIONS = RESERVATIONS;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_4> exInsertColValueListtRedshiftOutput_4 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_4 exInsertColValuetRedshiftOutput_4 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_4 = new StringBuilder();
			for(int i_tRedshiftOutput_4=0;i_tRedshiftOutput_4 < 2500;i_tRedshiftOutput_4++){
				 extendInsertValueStmt_tRedshiftOutput_4.append("(?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_4!=2500-1) extendInsertValueStmt_tRedshiftOutput_4.append(",");
			}

			String insert_tRedshiftOutput_4 = "INSERT INTO \"" + tableName_tRedshiftOutput_4 + "\" (\"CAMPAIGN_NAME\",\"CAMPAIGN_PROVIDER_NAME\",\"CAMPAIGN_TYPE\",\"CAMPAIGN_DESC\",\"CAMPAIGN_DATE\",\"SUBJECT_LINE\",\"MAILING_ID\",\"ACTIVITY_START_DATE\",\"ACTIVITY_END_DATE\",\"LIST_GENERATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\",\"RESERVATIONS\") VALUES " + extendInsertValueStmt_tRedshiftOutput_4.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_4 =  conn_tRedshiftOutput_4.prepareStatement(insert_tRedshiftOutput_4);

 



/**
 * [tRedshiftOutput_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		
    	class BytesLimit65535_tFileInputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_1().limitLog4jByte();


			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.CampaignExcelFile;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, "^[\\s]*campaign[\\s]*$", true));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 25;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn01";

				row1.newColumn01 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn01 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn02";

				row1.newColumn02 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn02 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn03";

				row1.newColumn03 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn03 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn04";

				row1.newColumn04 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn04 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn05";

				row1.newColumn05 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn05 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn06";

				row1.newColumn06 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn06 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn07";

				row1.newColumn07 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn07 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn08";

				row1.newColumn08 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn08 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn09";

				row1.newColumn09 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn09 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn10";

				row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn11";

				row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn12";

				row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn13";

				row1.newColumn13 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn14";

				row1.newColumn14 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn15";

				row1.newColumn15 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn16";

				row1.newColumn16 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn17";

				row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn18";

				row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn19";

				row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn20";

				row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn21";

				row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn22";

				row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn23";

				row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn24";

				row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim().length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn25";

				row1.newColumn25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].trim();
			}else{
				row1.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

        if(emptyColumnCount_tFileInputExcel_1 >= 25){
        	break; //if meet the empty row, there will break the iterate.
        }
				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

    String currentSheet = ((String)globalMap.get("tFileInputExcel_1_CURRENT_SHEET")).trim();
Map<String, String> fieldMap = (Map<String, String>)globalMap.get(currentSheet + "_field_map");

row5.CAMPAIGN_NAME = StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_NAME"));
row5.CAMPAIGN_PROVIDER_NAME = StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_PROVIDER_NAME"));
row5.CAMPAIGN_TYPE = StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_TYPE"));
row5.CAMPAIGN_DESC = StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_DESC"));
	
try {
	row5.CAMPAIGN_DATE = new SimpleDateFormat("EEE MMM dd kk:mm:ss z yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_DATE")));
} catch(Exception ex1) {
	try {
		row5.CAMPAIGN_DATE = new SimpleDateFormat("MM/dd/yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("CAMPAIGN_DATE")));
	} catch(Exception ex) {
		row5.CAMPAIGN_DATE = null;
		ex.printStackTrace();
	}
}
try {
	row5.ACTIVITY_END_DATE = new SimpleDateFormat("EEE MMM dd kk:mm:ss z yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("ACTIVITY_END_DATE")));
} catch(Exception ex1) {
	try {
		row5.ACTIVITY_END_DATE = new SimpleDateFormat("MM/dd/yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("ACTIVITY_END_DATE")));
	} catch(Exception ex) {
		row5.ACTIVITY_END_DATE = null;
		ex.printStackTrace();
	}
}
try {
	row5.ACTIVITY_START_DATE = new SimpleDateFormat("EEE MMM dd kk:mm:ss z yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("ACTIVITY_START_DATE")));
} catch(Exception ex1) {
	try {
		row5.ACTIVITY_START_DATE = new SimpleDateFormat("MM/dd/yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("ACTIVITY_START_DATE")));
	} catch(Exception ex) {
		row5.ACTIVITY_START_DATE = null;
		ex.printStackTrace();
	}
}
try {
	row5.LIST_GENERATED_DATE = new SimpleDateFormat("EEE MMM dd kk:mm:ss z yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("LIST_GENERATED_DATE")));
} catch(Exception ex1) {
	try {
		row5.LIST_GENERATED_DATE = new SimpleDateFormat("MM/dd/yyyy").parse(StringUtils.getFieldValue(row1, fieldMap.get("LIST_GENERATED_DATE")));
	} catch(Exception ex) {
		row5.LIST_GENERATED_DATE = null;
		ex.printStackTrace();
	}
}

row5.SUBJECT_LINE = StringUtils.getFieldValue(row1, fieldMap.get("SUBJECT_LINE"));
	
try {
	row5.MAILING_ID = Long.parseLong(StringUtils.getFieldValue(row1, fieldMap.get("MAILING_ID")));
} catch(Exception ex) {
	row5.MAILING_ID = null;
}

row5.DRIVING_CREDIT_CURRENCY = StringUtils.getFieldValue(row1, fieldMap.get("DRIVING_CREDIT_CURRENCY"));
	
try {
	row5.DRIVING_CREDIT = Float.parseFloat(StringUtils.getFieldValue(row1, fieldMap.get("DRIVING_CREDIT")));
} catch(Exception ex) {
	row5.DRIVING_CREDIT = null;
}

try {
	row5.RESERVATIONS = Integer.parseInt(StringUtils.getFieldValue(row1, fieldMap.get("RESERVATIONS")));
} catch(Exception ex) {
	row5.RESERVATIONS = null;
}
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

          row6 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
      ope_tFilterRow_2.matches((row5.CAMPAIGN_NAME != null &&
row5.CAMPAIGN_PROVIDER_NAME != null &&
row5.CAMPAIGN_TYPE != null &&
row5.CAMPAIGN_DESC != null &&
row5.CAMPAIGN_DATE != null &&
row5.ACTIVITY_START_DATE != null &&
row5.ACTIVITY_END_DATE != null &&
row5.LIST_GENERATED_DATE != null), "advanced condition failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.CAMPAIGN_NAME = row5.CAMPAIGN_NAME;
               row6.CAMPAIGN_PROVIDER_NAME = row5.CAMPAIGN_PROVIDER_NAME;
               row6.CAMPAIGN_TYPE = row5.CAMPAIGN_TYPE;
               row6.CAMPAIGN_DESC = row5.CAMPAIGN_DESC;
               row6.CAMPAIGN_DATE = row5.CAMPAIGN_DATE;
               row6.SUBJECT_LINE = row5.SUBJECT_LINE;
               row6.MAILING_ID = row5.MAILING_ID;
               row6.ACTIVITY_START_DATE = row5.ACTIVITY_START_DATE;
               row6.ACTIVITY_END_DATE = row5.ACTIVITY_END_DATE;
               row6.LIST_GENERATED_DATE = row5.LIST_GENERATED_DATE;
               row6.DRIVING_CREDIT = row5.DRIVING_CREDIT;
               row6.DRIVING_CREDIT_CURRENCY = row5.DRIVING_CREDIT_CURRENCY;
               row6.RESERVATIONS = row5.RESERVATIONS;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tRedshiftOutput_4 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_4";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		



            row13 = null;
        whetherReject_tRedshiftOutput_4 = false;
				int countertRedshiftOutput_4 = rowCounttRedshiftOutput_4 *
					(13
					)
				+ 1;

						
							if(row6.CAMPAIGN_NAME==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.CAMPAIGN_NAME);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.CAMPAIGN_PROVIDER_NAME==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.CAMPAIGN_PROVIDER_NAME);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.CAMPAIGN_TYPE==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.CAMPAIGN_TYPE);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.CAMPAIGN_DESC==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.CAMPAIGN_DESC);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.CAMPAIGN_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_4 = row6.CAMPAIGN_DATE.getTime();
								if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
									pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_4.setTimestamp(countertRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
								}
							}else{

								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_4++;
						

						
							if(row6.SUBJECT_LINE==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.SUBJECT_LINE);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.MAILING_ID==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setLong(countertRedshiftOutput_4,row6.MAILING_ID);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.ACTIVITY_START_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_4 = row6.ACTIVITY_START_DATE.getTime();
								if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
									pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_4.setTimestamp(countertRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
								}
							}else{

								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_4++;
						

						
							if(row6.ACTIVITY_END_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_4 = row6.ACTIVITY_END_DATE.getTime();
								if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
									pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_4.setTimestamp(countertRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
								}
							}else{

								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_4++;
						

						
							if(row6.LIST_GENERATED_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_4 = row6.LIST_GENERATED_DATE.getTime();
								if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
									pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_4.setTimestamp(countertRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
								}
							}else{

								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_4++;
						

						
							if(row6.DRIVING_CREDIT==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.FLOAT);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setFloat(countertRedshiftOutput_4,row6.DRIVING_CREDIT);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.DRIVING_CREDIT_CURRENCY==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setString(countertRedshiftOutput_4,row6.DRIVING_CREDIT_CURRENCY);
							

							}

						
						countertRedshiftOutput_4++;
						

						
							if(row6.RESERVATIONS==null){
								pstmt_tRedshiftOutput_4.setNull(countertRedshiftOutput_4,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_4.setInt(countertRedshiftOutput_4,row6.RESERVATIONS);
							

							}

						
						countertRedshiftOutput_4++;
						
				exInsertColValuetRedshiftOutput_4 = new BufferLine_tRedshiftOutput_4();
                    	exInsertColValuetRedshiftOutput_4
                    	
                        .c0(row6.CAMPAIGN_NAME)
                        .c1(row6.CAMPAIGN_PROVIDER_NAME)
                        .c2(row6.CAMPAIGN_TYPE)
                        .c3(row6.CAMPAIGN_DESC)
                        .c4(row6.CAMPAIGN_DATE)
                        .c5(row6.SUBJECT_LINE)
                        .c6(row6.MAILING_ID)
                        .c7(row6.ACTIVITY_START_DATE)
                        .c8(row6.ACTIVITY_END_DATE)
                        .c9(row6.LIST_GENERATED_DATE)
                        .c10(row6.DRIVING_CREDIT)
                        .c11(row6.DRIVING_CREDIT_CURRENCY)
                        .c12(row6.RESERVATIONS)
				;

				exInsertColValueListtRedshiftOutput_4.add(exInsertColValuetRedshiftOutput_4);
				rowCounttRedshiftOutput_4++;

                nb_line_tRedshiftOutput_4++;

				if(rowCounttRedshiftOutput_4 == 2500){
	                insertedCount_tRedshiftOutput_4 = insertedCount_tRedshiftOutput_4 + pstmt_tRedshiftOutput_4.executeUpdate();
	                exInsertColValueListtRedshiftOutput_4.clear();
	                rowCounttRedshiftOutput_4 = 0;
					countertRedshiftOutput_4=1;
				}
            if(!whetherReject_tRedshiftOutput_4) {
                            row13 = new row13Struct();
                                row13.CAMPAIGN_NAME = row6.CAMPAIGN_NAME;
                                row13.CAMPAIGN_PROVIDER_NAME = row6.CAMPAIGN_PROVIDER_NAME;
                                row13.CAMPAIGN_TYPE = row6.CAMPAIGN_TYPE;
                                row13.CAMPAIGN_DESC = row6.CAMPAIGN_DESC;
                                row13.CAMPAIGN_DATE = row6.CAMPAIGN_DATE;
                                row13.SUBJECT_LINE = row6.SUBJECT_LINE;
                                row13.MAILING_ID = row6.MAILING_ID;
                                row13.ACTIVITY_START_DATE = row6.ACTIVITY_START_DATE;
                                row13.ACTIVITY_END_DATE = row6.ACTIVITY_END_DATE;
                                row13.LIST_GENERATED_DATE = row6.LIST_GENERATED_DATE;
                                row13.DRIVING_CREDIT = row6.DRIVING_CREDIT;
                                row13.DRIVING_CREDIT_CURRENCY = row6.DRIVING_CREDIT_CURRENCY;
                                row13.RESERVATIONS = row6.RESERVATIONS;
            }

 


	tos_count_tRedshiftOutput_4++;

/**
 * [tRedshiftOutput_4 main ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		

    ((java.util.concurrent.atomic.AtomicInteger)globalMap.get("campaign_instance_processed")).incrementAndGet();
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */

} // End of branch "row13"





} // End of branch "row6"








} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());

   			if (row5.CAMPAIGN_NAME == null ||
row5.CAMPAIGN_TYPE == null ||
row5.CAMPAIGN_DESC == null ||
row5.CAMPAIGN_DATE == null ||
row5.ACTIVITY_START_DATE == null ||
row5.ACTIVITY_END_DATE == null ||
row5.LIST_GENERATED_DATE == null) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				
    			tDie_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_4 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_4";

	





	    if(rowCounttRedshiftOutput_4!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_4 = new StringBuilder();
	        for(int i_tRedshiftOutput_4=0 ; i_tRedshiftOutput_4 < rowCounttRedshiftOutput_4 ; i_tRedshiftOutput_4++){
				extendInsertValue_tRedshiftOutput_4.append("(?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_4 != rowCounttRedshiftOutput_4 - 1) extendInsertValue_tRedshiftOutput_4.append(",");
	        }

				insert_tRedshiftOutput_4 = "INSERT INTO \"" + tableName_tRedshiftOutput_4 + "\" (\"CAMPAIGN_NAME\",\"CAMPAIGN_PROVIDER_NAME\",\"CAMPAIGN_TYPE\",\"CAMPAIGN_DESC\",\"CAMPAIGN_DATE\",\"SUBJECT_LINE\",\"MAILING_ID\",\"ACTIVITY_START_DATE\",\"ACTIVITY_END_DATE\",\"LIST_GENERATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\",\"RESERVATIONS\") VALUES "+extendInsertValue_tRedshiftOutput_4.toString();
        	pstmt_tRedshiftOutput_4 =  conn_tRedshiftOutput_4.prepareStatement(insert_tRedshiftOutput_4);
			rowCounttRedshiftOutput_4 = 0;
	        for(BufferLine_tRedshiftOutput_4 bufferLtRedshiftOutput_4 : exInsertColValueListtRedshiftOutput_4){
				int counttRedshiftOutput_4 = rowCounttRedshiftOutput_4 *
					(13
					)
				+ 1;
					if(bufferLtRedshiftOutput_4.CAMPAIGN_NAME==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.CAMPAIGN_NAME);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.CAMPAIGN_PROVIDER_NAME==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.CAMPAIGN_PROVIDER_NAME);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.CAMPAIGN_TYPE==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.CAMPAIGN_TYPE);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.CAMPAIGN_DESC==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.CAMPAIGN_DESC);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.CAMPAIGN_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_4 = bufferLtRedshiftOutput_4.CAMPAIGN_DATE.getTime();
						if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
							pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_4.setTimestamp(counttRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
						}
					}else{

						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.SUBJECT_LINE==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.SUBJECT_LINE);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.MAILING_ID==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setLong(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.MAILING_ID);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.ACTIVITY_START_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_4 = bufferLtRedshiftOutput_4.ACTIVITY_START_DATE.getTime();
						if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
							pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_4.setTimestamp(counttRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
						}
					}else{

						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.ACTIVITY_END_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_4 = bufferLtRedshiftOutput_4.ACTIVITY_END_DATE.getTime();
						if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
							pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_4.setTimestamp(counttRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
						}
					}else{

						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.LIST_GENERATED_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_4 = bufferLtRedshiftOutput_4.LIST_GENERATED_DATE.getTime();
						if (date_tRedshiftOutput_4 < year1_tRedshiftOutput_4 || date_tRedshiftOutput_4 >= year10000_tRedshiftOutput_4) {
							pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_4.setTimestamp(counttRedshiftOutput_4, new java.sql.Timestamp(date_tRedshiftOutput_4));
						}
					}else{

						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.DRIVING_CREDIT==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.FLOAT);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setFloat(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.DRIVING_CREDIT);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.DRIVING_CREDIT_CURRENCY==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setString(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.DRIVING_CREDIT_CURRENCY);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    
					if(bufferLtRedshiftOutput_4.RESERVATIONS==null){
						pstmt_tRedshiftOutput_4.setNull(counttRedshiftOutput_4,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_4.setInt(counttRedshiftOutput_4,bufferLtRedshiftOutput_4.RESERVATIONS);
					

					}

				
	                    counttRedshiftOutput_4++;
	                    

	            rowCounttRedshiftOutput_4++;
	        }
	        insertedCount_tRedshiftOutput_4 = insertedCount_tRedshiftOutput_4 + pstmt_tRedshiftOutput_4.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_4 != null) {
                            pstmt_tRedshiftOutput_4.close();
                        }

	nb_line_deleted_tRedshiftOutput_4=nb_line_deleted_tRedshiftOutput_4+ deletedCount_tRedshiftOutput_4;
	nb_line_update_tRedshiftOutput_4=nb_line_update_tRedshiftOutput_4 + updatedCount_tRedshiftOutput_4;
	nb_line_inserted_tRedshiftOutput_4=nb_line_inserted_tRedshiftOutput_4 + insertedCount_tRedshiftOutput_4;
	nb_line_rejected_tRedshiftOutput_4=nb_line_rejected_tRedshiftOutput_4 + rejectedCount_tRedshiftOutput_4;
	
        globalMap.put("tRedshiftOutput_4_NB_LINE",nb_line_tRedshiftOutput_4);
        globalMap.put("tRedshiftOutput_4_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_4);
        globalMap.put("tRedshiftOutput_4_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_4);
        globalMap.put("tRedshiftOutput_4_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_4);
        globalMap.put("tRedshiftOutput_4_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_4);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_4", true);
end_Hash.put("tRedshiftOutput_4", System.currentTimeMillis());




/**
 * [tRedshiftOutput_4 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tRedshiftInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_4";

	



	

 



/**
 * [tRedshiftOutput_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";

	

 



/**
 * [tJavaRow_6 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";

	
		int tos_count_tDie_3 = 0;
		
    	class BytesLimit65535_tDie_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDie_3().limitLog4jByte();

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";

	


				tLogCatcher_1.addMessage("tDie", "tDie_3", 5, "Make sure all campaign info are filled out in the spreadsheet.", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("Make sure all campaign info are filled out in the spreadsheet.");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "Make sure all campaign info are filled out in the spreadsheet.");
	globalMap.put("tDie_3_DIE_MESSAGES", "Make sure all campaign info are filled out in the spreadsheet.");
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long person_id;

				public Long getPerson_id () {
					return this.person_id;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.person_id = null;
           				} else {
           			    	this.person_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.person_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.person_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("person_id="+String.valueOf(person_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long campaign_id;

				public Long getCampaign_id () {
					return this.campaign_id;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.campaign_id = null;
           				} else {
           			    	this.campaign_id = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.campaign_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.campaign_id);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("campaign_id="+String.valueOf(campaign_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_2 = 0;
		
    	class BytesLimit65535_tWarn_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_2().limitLog4jByte();

 



/**
 * [tWarn_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_9 = 0;
		
    	class BytesLimit65535_tJavaRow_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_9().limitLog4jByte();

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_3", false);
		start_Hash.put("tRedshiftInput_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_3";

	
		int tos_count_tRedshiftInput_3 = 0;
		
    	class BytesLimit65535_tRedshiftInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_3 = 0;
		    java.sql.Connection conn_tRedshiftInput_3 = null;
		        conn_tRedshiftInput_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_3 = conn_tRedshiftInput_3.createStatement();

		    String dbquery_tRedshiftInput_3 = StringUtils.templateString(
"\n-- determine campaign id for a newly loaded campaign\nSELECT	\n	COALESCE(c2.campaign_id, c1.next_campaign_id) as campaign_id\nFROM (\n	SELECT COALESCE(max(campaign_id), 0)+1 AS next_campaign_id FROM {{marketing.schema}}.l_campaign\n) c1\nLEFT JOIN (\n	SELECT lc.campaign_id\n	FROM {{marketing.schema}}.l_campaign lc\n	JOIN (SELECT DISTINCT campaign_name FROM {{marketing.schema}}.temp_campaign_info LIMIT 1) cn\n	ON LOWER(lc.campaign_name) = LOWER(cn.campaign_name)\n) c2\nON 1=1;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
)
;
			

                       globalMap.put("tRedshiftInput_3_QUERY",dbquery_tRedshiftInput_3);

		    java.sql.ResultSet rs_tRedshiftInput_3 = null;
		try{
		    rs_tRedshiftInput_3 = stmt_tRedshiftInput_3.executeQuery(dbquery_tRedshiftInput_3);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_3 = rs_tRedshiftInput_3.getMetaData();
		    int colQtyInRs_tRedshiftInput_3 = rsmd_tRedshiftInput_3.getColumnCount();

		    String tmpContent_tRedshiftInput_3 = null;
		    
		    
		    while (rs_tRedshiftInput_3.next()) {
		        nb_line_tRedshiftInput_3++;
		        
							if(colQtyInRs_tRedshiftInput_3 < 1) {
								row10.campaign_id = null;
							} else {
		                          
            if(rs_tRedshiftInput_3.getObject(1) != null) {
                row10.campaign_id = rs_tRedshiftInput_3.getLong(1);
            } else {
                    row10.campaign_id = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_3 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 


	tos_count_tRedshiftInput_3++;

/**
 * [tRedshiftInput_3 main ] stop
 */

	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		

    // Create a Counter to generate next sequence id.
globalMap.put("Next_CampaignId", new Long(row10.campaign_id));

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */

	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "WARN","","Next Campaign ID: " + (Long)globalMap.get("Next_CampaignId"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 4, "Next Campaign ID: " + (Long)globalMap.get("Next_CampaignId"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_2_WARN_MESSAGES", "Next Campaign ID: " + (Long)globalMap.get("Next_CampaignId")); 
globalMap.put("tWarn_2_WARN_PRIORITY", 4);
globalMap.put("tWarn_2_WARN_CODE", 42);


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */






	
	/**
	 * [tRedshiftInput_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

	}
}finally{
	stmt_tRedshiftInput_3.close();

}
globalMap.put("tRedshiftInput_3_NB_LINE",nb_line_tRedshiftInput_3);

 

ok_Hash.put("tRedshiftInput_3", true);
end_Hash.put("tRedshiftInput_3", System.currentTimeMillis());




/**
 * [tRedshiftInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */

	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tRedshiftRow_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_3";

	

 



/**
 * [tRedshiftInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";

	

 



/**
 * [tJavaRow_9 finally ] stop
 */

	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_3", false);
		start_Hash.put("tRedshiftRow_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_3";

	
		int tos_count_tRedshiftRow_3 = 0;
		
    	class BytesLimit65535_tRedshiftRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_3().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_3 = null;
	String query_tRedshiftRow_3 = "";
	boolean whetherReject_tRedshiftRow_3 = false;
				conn_tRedshiftRow_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_3 = conn_tRedshiftRow_3.createStatement();
	

 



/**
 * [tRedshiftRow_3 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

query_tRedshiftRow_3 = StringUtils.templateString(
"\n-- delete any existing campaign with the same name (mainly for reloading the data)\nDELETE FROM {{marketing.schema}}.l_campaign_email_list\nWHERE campaign_id IN (\n	SELECT lc.campaign_id\n	FROM {{marketing.schema}}.l_campaign lc\n	JOIN (SELECT DISTINCT campaign_name FROM {{marketing.schema}}.temp_campaign_info LIMIT 1) cn\n	on LOWER(lc.campaign_name) = LOWER(cn.campaign_name)\n);\n\nDELETE FROM {{marketing.schema}}.l_campaign_instance\nWHERE campaign_id IN (\n	SELECT lc.campaign_id\n	FROM {{marketing.schema}}.l_campaign lc\n	JOIN (SELECT DISTINCT campaign_name FROM {{marketing.schema}}.temp_campaign_info LIMIT 1) cn\n	on LOWER(lc.campaign_name) = LOWER(cn.campaign_name)\n);\n\nDELETE FROM {{marketing.schema}}.l_campaign\nWHERE campaign_id IN (\n	SELECT lc.campaign_id\n	FROM {{marketing.schema}}.l_campaign lc\n	JOIN (SELECT DISTINCT campaign_name FROM {{marketing.schema}}.temp_campaign_info LIMIT 1) cn\n	on LOWER(lc.campaign_name) = LOWER(cn.campaign_name)\n);\n\n-- insert campaign data\nINSERT INTO {{marketing.schema}}.l_campaign\nSELECT\n	{{nextCampaignId}} as campaign_id,\n	campaign_name,\n	campaign_type_id,\n	{{runDate}} as created_date,\n	campaign_provider_id\nFROM (\n	SELECT \n		ci.campaign_name, lct.campaign_type_id, lcp.campaign_provider_id\n	FROM (\n		SELECT DISTINCT campaign_name, campaign_type, campaign_provider_name FROM {{marketing.schema}}.temp_campaign_info LIMIT 1\n	) ci\n	JOIN {{marketing.schema}}.l_campaign_type lct\n	ON ci.campaign_type = lct.campaign_type\n	JOIN {{marketing.schema}}.l_campaign_provider lcp\n	ON ci.campaign_provider_name = lcp.name\n);\n\n-- insert campaign instance data\nINSERT INTO {{marketing.schema}}.l_campaign_instance\nSELECT\n	{{nextCampaignId}} as campaign_id,\n	mailing_id,\n	campaign_desc,\n	subject_line,\n	campaign_date,\n    activity_start_date,\n    activity_end_date,\n    list_generated_date,\n	{{runDate}} as created_date,\n	driving_credit,\n	reservations,\n	driving_credit_currency\nFROM {{marketing.schema}}.temp_campaign_info;\n\nDROP TABLE IF EXISTS {{marketing.schema}}.temp_campaign_info;\n\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"runDate", DateUtils.dateToSqlStr((Date) globalMap.get("RUN_DATE")),
"nextCampaignId",  (Long)globalMap.get("Next_CampaignId")+""
)
;
whetherReject_tRedshiftRow_3 = false;
globalMap.put("tRedshiftRow_3_QUERY",query_tRedshiftRow_3);
try {
		stmt_tRedshiftRow_3.execute(query_tRedshiftRow_3);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_3 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_3) {
		
	}
	

 


	tos_count_tRedshiftRow_3++;

/**
 * [tRedshiftRow_3 main ] stop
 */
	
	/**
	 * [tRedshiftRow_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

	
	stmt_tRedshiftRow_3.close();	

 

ok_Hash.put("tRedshiftRow_3", true);
end_Hash.put("tRedshiftRow_3", System.currentTimeMillis());




/**
 * [tRedshiftRow_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_3";

	

 



/**
 * [tRedshiftRow_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		
    	class BytesLimit65535_tWarn_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_5().limitLog4jByte();

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "TRACE","","Rows inserted (Campaign Instance): " + globalMap.get("campaign_instance_processed"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 1, "Rows inserted (Campaign Instance): " + globalMap.get("campaign_instance_processed"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_5_WARN_MESSAGES", "Rows inserted (Campaign Instance): " + globalMap.get("campaign_instance_processed")); 
globalMap.put("tWarn_5_WARN_PRIORITY", 1);
globalMap.put("tWarn_5_WARN_CODE", 42);


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tRunJob_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("CampaignExcelFile", context.CampaignExcelFile);
			paraList_tRunJob_1.add("--context_type " + "CampaignExcelFile" + "=" + "id_File");
		
			parentContextMap_tRunJob_1.put("RunDate", context.RunDate);
			paraList_tRunJob_1.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = "mailing";
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param ExcelSheetName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param ExcelSheetName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("ExcelSheetName", obj_tRunJob_1);
	
		obj_tRunJob_1 = (Map)globalMap.get("mailing_field_map");
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param FieldMap=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param FieldMap=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("FieldMap", obj_tRunJob_1);
	
	
		zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping childJob_tRunJob_1 = new zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputExcel_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rejected_mailing_rowStruct implements routines.system.IPersistableRow<rejected_mailing_rowStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rejected_mailing_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String newColumn01;

				public String getNewColumn01 () {
					return this.newColumn01;
				}
				
			    public String newColumn02;

				public String getNewColumn02 () {
					return this.newColumn02;
				}
				
			    public String newColumn03;

				public String getNewColumn03 () {
					return this.newColumn03;
				}
				
			    public String newColumn04;

				public String getNewColumn04 () {
					return this.newColumn04;
				}
				
			    public String newColumn05;

				public String getNewColumn05 () {
					return this.newColumn05;
				}
				
			    public String newColumn06;

				public String getNewColumn06 () {
					return this.newColumn06;
				}
				
			    public String newColumn07;

				public String getNewColumn07 () {
					return this.newColumn07;
				}
				
			    public String newColumn08;

				public String getNewColumn08 () {
					return this.newColumn08;
				}
				
			    public String newColumn09;

				public String getNewColumn09 () {
					return this.newColumn09;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.newColumn01 = readString(dis);
					
					this.newColumn02 = readString(dis);
					
					this.newColumn03 = readString(dis);
					
					this.newColumn04 = readString(dis);
					
					this.newColumn05 = readString(dis);
					
					this.newColumn06 = readString(dis);
					
					this.newColumn07 = readString(dis);
					
					this.newColumn08 = readString(dis);
					
					this.newColumn09 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn01,dos);
					
					// String
				
						writeString(this.newColumn02,dos);
					
					// String
				
						writeString(this.newColumn03,dos);
					
					// String
				
						writeString(this.newColumn04,dos);
					
					// String
				
						writeString(this.newColumn05,dos);
					
					// String
				
						writeString(this.newColumn06,dos);
					
					// String
				
						writeString(this.newColumn07,dos);
					
					// String
				
						writeString(this.newColumn08,dos);
					
					// String
				
						writeString(this.newColumn09,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn01="+newColumn01);
		sb.append(",newColumn02="+newColumn02);
		sb.append(",newColumn03="+newColumn03);
		sb.append(",newColumn04="+newColumn04);
		sb.append(",newColumn05="+newColumn05);
		sb.append(",newColumn06="+newColumn06);
		sb.append(",newColumn07="+newColumn07);
		sb.append(",newColumn08="+newColumn08);
		sb.append(",newColumn09="+newColumn09);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row9Struct row9 = new row9Struct();
rejected_mailing_rowStruct rejected_mailing_row = new rejected_mailing_rowStruct();







	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_7 = 0;
		
    	class BytesLimit65535_tJavaRow_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_7().limitLog4jByte();

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_2", false);
		start_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_2 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_2().limitLog4jByte();





String dbschema_tRedshiftOutput_2 = null;
	dbschema_tRedshiftOutput_2 = (String)globalMap.get("schema_" + "tRedshiftConnection_1");
	
String tableName_tRedshiftOutput_2 = "l_campaign_email_list";
String schemaForSearch_tRedshiftOutput_2 = null;
String tableForSearch_tRedshiftOutput_2 = tableName_tRedshiftOutput_2;
    if(dbschema_tRedshiftOutput_2 != null && dbschema_tRedshiftOutput_2.trim().length() > 0) {
    	tableName_tRedshiftOutput_2 = dbschema_tRedshiftOutput_2 + "\".\"" + tableName_tRedshiftOutput_2;
    }

int nb_line_tRedshiftOutput_2 = 0;
int nb_line_update_tRedshiftOutput_2 = 0;
int nb_line_inserted_tRedshiftOutput_2 = 0;
int nb_line_deleted_tRedshiftOutput_2 = 0;
int nb_line_rejected_tRedshiftOutput_2 = 0;

int deletedCount_tRedshiftOutput_2=0;
int updatedCount_tRedshiftOutput_2=0;
int insertedCount_tRedshiftOutput_2=0;
int rejectedCount_tRedshiftOutput_2=0;

java.util.Calendar calendar_tRedshiftOutput_2 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
calendar_tRedshiftOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
long date_tRedshiftOutput_2;

boolean whetherReject_tRedshiftOutput_2 = false;


java.sql.Connection conn_tRedshiftOutput_2 = null;
	conn_tRedshiftOutput_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	
	
int count_tRedshiftOutput_2=0;
	
			int rowCounttRedshiftOutput_2 = 0;
			class BufferLine_tRedshiftOutput_2 {				
						Long MEMBER_ID;
						
	            		public BufferLine_tRedshiftOutput_2 c0(Long MEMBER_ID){
							this.MEMBER_ID = MEMBER_ID;
							return this;
						}				
						Long CAMPAIGN_ID;
						
	            		public BufferLine_tRedshiftOutput_2 c1(Long CAMPAIGN_ID){
							this.CAMPAIGN_ID = CAMPAIGN_ID;
							return this;
						}				
						Long MAILING_ID;
						
	            		public BufferLine_tRedshiftOutput_2 c2(Long MAILING_ID){
							this.MAILING_ID = MAILING_ID;
							return this;
						}				
						String CAMPAIGN_DESC;
						
	            		public BufferLine_tRedshiftOutput_2 c3(String CAMPAIGN_DESC){
							this.CAMPAIGN_DESC = CAMPAIGN_DESC;
							return this;
						}				
						String EMAIL_ADDRESS;
						
	            		public BufferLine_tRedshiftOutput_2 c4(String EMAIL_ADDRESS){
							this.EMAIL_ADDRESS = EMAIL_ADDRESS;
							return this;
						}				
						Boolean IS_CONTROL;
						
	            		public BufferLine_tRedshiftOutput_2 c5(Boolean IS_CONTROL){
							this.IS_CONTROL = IS_CONTROL;
							return this;
						}				
						java.util.Date CREATED_DATE;
						
	            		public BufferLine_tRedshiftOutput_2 c6(java.util.Date CREATED_DATE){
							this.CREATED_DATE = CREATED_DATE;
							return this;
						}				
						Float DRIVING_CREDIT;
						
	            		public BufferLine_tRedshiftOutput_2 c7(Float DRIVING_CREDIT){
							this.DRIVING_CREDIT = DRIVING_CREDIT;
							return this;
						}				
						String DRIVING_CREDIT_CURRENCY;
						
	            		public BufferLine_tRedshiftOutput_2 c8(String DRIVING_CREDIT_CURRENCY){
							this.DRIVING_CREDIT_CURRENCY = DRIVING_CREDIT_CURRENCY;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_2> exInsertColValueListtRedshiftOutput_2 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_2 exInsertColValuetRedshiftOutput_2 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_2 = new StringBuilder();
			for(int i_tRedshiftOutput_2=0;i_tRedshiftOutput_2 < 3000;i_tRedshiftOutput_2++){
				 extendInsertValueStmt_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_2!=3000-1) extendInsertValueStmt_tRedshiftOutput_2.append(",");
			}

			String insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"MEMBER_ID\",\"CAMPAIGN_ID\",\"MAILING_ID\",\"CAMPAIGN_DESC\",\"EMAIL_ADDRESS\",\"IS_CONTROL\",\"CREATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\") VALUES " + extendInsertValueStmt_tRedshiftOutput_2.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);

 



/**
 * [tRedshiftOutput_2 begin ] stop
 */




	
	/**
	 * [tJavaFlex_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_2", false);
		start_Hash.put("tJavaFlex_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("rejected_mailing_row" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_2 = 0;
		
    	class BytesLimit65535_tJavaFlex_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_2().limitLog4jByte();


// Instantiate some Table Row Loggers to collect the Rows with
Logging.TableRowLogger rowLogger = new Logging.TableRowLogger();



 



/**
 * [tJavaFlex_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		
    	class BytesLimit65535_tFileInputExcel_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_2().limitLog4jByte();


			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.CampaignExcelFile;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, "^[\\s]*mailing[\\s]*$", true));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row2 = null;
					int tempRowLength_tFileInputExcel_2 = 25;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row2 = new row2Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn01";

				row2.newColumn01 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn01 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn02";

				row2.newColumn02 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn02 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn03";

				row2.newColumn03 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn03 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn04";

				row2.newColumn04 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn04 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn05";

				row2.newColumn05 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn05 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn06";

				row2.newColumn06 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn06 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn07";

				row2.newColumn07 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn07 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn08";

				row2.newColumn08 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn08 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn09";

				row2.newColumn09 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn09 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn10";

				row2.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn11";

				row2.newColumn11 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn12";

				row2.newColumn12 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn13";

				row2.newColumn13 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn14";

				row2.newColumn14 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn15";

				row2.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn16";

				row2.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn17";

				row2.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn18";

				row2.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn19";

				row2.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn20";

				row2.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn21";

				row2.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn22";

				row2.newColumn22 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn23";

				row2.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn24";

				row2.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim().length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn25";

				row2.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].trim();
			}else{
				row2.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

        if(emptyColumnCount_tFileInputExcel_2 >= 25){
        	break; //if meet the empty row, there will break the iterate.
        }
				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row2 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 
			rejected_mailing_row = null;



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

    String currentSheet = ((String)globalMap.get("tFileInputExcel_2_CURRENT_SHEET")).trim();
Map<String, String> fieldMap = (Map<String, String>)globalMap.get(currentSheet + "_field_map");
try {
	row3.MEMBER_ID = Long.parseLong(StringUtils.getFieldValue(row2, fieldMap.get("MEMBER_ID")));
} catch(Exception ex) {
	//ex.printStackTrace();
	row3.MEMBER_ID = null;
}

row3.EMAIL_ADDRESS = StringUtils.getFieldValue(row2, fieldMap.get("EMAIL"));

try {
	row3.MAILING_ID = Long.parseLong(StringUtils.getFieldValue(row2, fieldMap.get("MAILING_ID")));
} catch(Exception ex) {
	//ex.printStackTrace();
	row3.MAILING_ID = null;
}

row3.CAMPAIGN_DESC = StringUtils.getFieldValue(row2, fieldMap.get("CAMPAIGN_DESC"));

row3.CAMPAIGN_ID = (Long)globalMap.get("Next_CampaignId");

row3.IS_CONTROL = false;

row3.CREATED_DATE =  (Date) globalMap.get("RUN_DATE");

row3.DRIVING_CREDIT_CURRENCY = StringUtils.getFieldValue(row2, fieldMap.get("DRIVING_CREDIT_CURRENCY"));

try {
	row3.DRIVING_CREDIT = Float.parseFloat(StringUtils.getFieldValue(row2, fieldMap.get("DRIVING_CREDIT")));
} catch(Exception ex) {
	row3.DRIVING_CREDIT = null;
}
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

          rejected_mailing_row = null;
          row4 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
      ope_tFilterRow_1.matches((row3.MEMBER_ID != null &&
row3.CAMPAIGN_DESC != null &&
row3.EMAIL_ADDRESS != null
			), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row4 == null){ 
                row4 = new row4Struct();
              }
               row4.MEMBER_ID = row3.MEMBER_ID;
               row4.CAMPAIGN_ID = row3.CAMPAIGN_ID;
               row4.MAILING_ID = row3.MAILING_ID;
               row4.CAMPAIGN_DESC = row3.CAMPAIGN_DESC;
               row4.EMAIL_ADDRESS = row3.EMAIL_ADDRESS;
               row4.IS_CONTROL = row3.IS_CONTROL;
               row4.CREATED_DATE = row3.CREATED_DATE;
               row4.DRIVING_CREDIT = row3.DRIVING_CREDIT;
               row4.DRIVING_CREDIT_CURRENCY = row3.DRIVING_CREDIT_CURRENCY;    
      nb_line_ok_tFilterRow_1++;
    } else {
            if (rejected_mailing_row == null){
              rejected_mailing_row = new rejected_mailing_rowStruct();
            }
                rejected_mailing_row.MEMBER_ID = row3.MEMBER_ID;
                rejected_mailing_row.CAMPAIGN_ID = row3.CAMPAIGN_ID;
                rejected_mailing_row.MAILING_ID = row3.MAILING_ID;
                rejected_mailing_row.CAMPAIGN_DESC = row3.CAMPAIGN_DESC;
                rejected_mailing_row.EMAIL_ADDRESS = row3.EMAIL_ADDRESS;
                rejected_mailing_row.IS_CONTROL = row3.IS_CONTROL;
                rejected_mailing_row.CREATED_DATE = row3.CREATED_DATE;
                rejected_mailing_row.DRIVING_CREDIT = row3.DRIVING_CREDIT;
                rejected_mailing_row.DRIVING_CREDIT_CURRENCY = row3.DRIVING_CREDIT_CURRENCY;
	            rejected_mailing_row.errorMessage = ope_tFilterRow_1.getErrorMsg();
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tRedshiftOutput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		



            row9 = null;
        whetherReject_tRedshiftOutput_2 = false;
				int countertRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(9
					)
				+ 1;

						
							if(row4.MEMBER_ID==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,row4.MEMBER_ID);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.CAMPAIGN_ID==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,row4.CAMPAIGN_ID);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.MAILING_ID==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,row4.MAILING_ID);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.CAMPAIGN_DESC==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,row4.CAMPAIGN_DESC);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.EMAIL_ADDRESS==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,row4.EMAIL_ADDRESS);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.IS_CONTROL==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.BOOLEAN);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setBoolean(countertRedshiftOutput_2,row4.IS_CONTROL);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.CREATED_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_2 = row4.CREATED_DATE.getTime();
								if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
									pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_2.setTimestamp(countertRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
								}
							}else{

								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_2++;
						

						
							if(row4.DRIVING_CREDIT==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.FLOAT);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setFloat(countertRedshiftOutput_2,row4.DRIVING_CREDIT);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(row4.DRIVING_CREDIT_CURRENCY==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,row4.DRIVING_CREDIT_CURRENCY);
							

							}

						
						countertRedshiftOutput_2++;
						
				exInsertColValuetRedshiftOutput_2 = new BufferLine_tRedshiftOutput_2();
                    	exInsertColValuetRedshiftOutput_2
                    	
                        .c0(row4.MEMBER_ID)
                        .c1(row4.CAMPAIGN_ID)
                        .c2(row4.MAILING_ID)
                        .c3(row4.CAMPAIGN_DESC)
                        .c4(row4.EMAIL_ADDRESS)
                        .c5(row4.IS_CONTROL)
                        .c6(row4.CREATED_DATE)
                        .c7(row4.DRIVING_CREDIT)
                        .c8(row4.DRIVING_CREDIT_CURRENCY)
				;

				exInsertColValueListtRedshiftOutput_2.add(exInsertColValuetRedshiftOutput_2);
				rowCounttRedshiftOutput_2++;

                nb_line_tRedshiftOutput_2++;

				if(rowCounttRedshiftOutput_2 == 3000){
	                insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	                exInsertColValueListtRedshiftOutput_2.clear();
	                rowCounttRedshiftOutput_2 = 0;
					countertRedshiftOutput_2=1;
				}
            if(!whetherReject_tRedshiftOutput_2) {
                            row9 = new row9Struct();
                                row9.MEMBER_ID = row4.MEMBER_ID;
                                row9.CAMPAIGN_ID = row4.CAMPAIGN_ID;
                                row9.MAILING_ID = row4.MAILING_ID;
                                row9.CAMPAIGN_DESC = row4.CAMPAIGN_DESC;
                                row9.EMAIL_ADDRESS = row4.EMAIL_ADDRESS;
                                row9.IS_CONTROL = row4.IS_CONTROL;
                                row9.CREATED_DATE = row4.CREATED_DATE;
                                row9.DRIVING_CREDIT = row4.DRIVING_CREDIT;
                                row9.DRIVING_CREDIT_CURRENCY = row4.DRIVING_CREDIT_CURRENCY;
            }

 


	tos_count_tRedshiftOutput_2++;

/**
 * [tRedshiftOutput_2 main ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

    ((java.util.concurrent.atomic.AtomicInteger)globalMap.get("mailing_list_processed")).incrementAndGet();


    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */

} // End of branch "row9"





} // End of branch "row4"




// Start of branch "rejected_mailing_row"
if(rejected_mailing_row != null) { 



	
	/**
	 * [tJavaFlex_2 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

			//rejected_mailing_row
			//rejected_mailing_row


			
				if(execStat){
					runStat.updateStatOnConnection("rejected_mailing_row"+iterateId,1, 1);
				} 
			

		



rowLogger.add(rejected_mailing_row);

 


	tos_count_tJavaFlex_2++;

/**
 * [tJavaFlex_2 main ] stop
 */

} // End of branch "rejected_mailing_row"








} // End of branch "row2"




	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	





	    if(rowCounttRedshiftOutput_2!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_2 = new StringBuilder();
	        for(int i_tRedshiftOutput_2=0 ; i_tRedshiftOutput_2 < rowCounttRedshiftOutput_2 ; i_tRedshiftOutput_2++){
				extendInsertValue_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_2 != rowCounttRedshiftOutput_2 - 1) extendInsertValue_tRedshiftOutput_2.append(",");
	        }

				insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"MEMBER_ID\",\"CAMPAIGN_ID\",\"MAILING_ID\",\"CAMPAIGN_DESC\",\"EMAIL_ADDRESS\",\"IS_CONTROL\",\"CREATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\") VALUES "+extendInsertValue_tRedshiftOutput_2.toString();
        	pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);
			rowCounttRedshiftOutput_2 = 0;
	        for(BufferLine_tRedshiftOutput_2 bufferLtRedshiftOutput_2 : exInsertColValueListtRedshiftOutput_2){
				int counttRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(9
					)
				+ 1;
					if(bufferLtRedshiftOutput_2.MEMBER_ID==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.MEMBER_ID);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.CAMPAIGN_ID==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.CAMPAIGN_ID);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.MAILING_ID==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.MAILING_ID);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.CAMPAIGN_DESC==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.CAMPAIGN_DESC);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.EMAIL_ADDRESS==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.EMAIL_ADDRESS);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.IS_CONTROL==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.BOOLEAN);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setBoolean(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.IS_CONTROL);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.CREATED_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_2 = bufferLtRedshiftOutput_2.CREATED_DATE.getTime();
						if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
							pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_2.setTimestamp(counttRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
						}
					}else{

						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.DRIVING_CREDIT==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.FLOAT);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setFloat(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.DRIVING_CREDIT);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.DRIVING_CREDIT_CURRENCY==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.DRIVING_CREDIT_CURRENCY);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    

	            rowCounttRedshiftOutput_2++;
	        }
	        insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_2 != null) {
                            pstmt_tRedshiftOutput_2.close();
                        }

	nb_line_deleted_tRedshiftOutput_2=nb_line_deleted_tRedshiftOutput_2+ deletedCount_tRedshiftOutput_2;
	nb_line_update_tRedshiftOutput_2=nb_line_update_tRedshiftOutput_2 + updatedCount_tRedshiftOutput_2;
	nb_line_inserted_tRedshiftOutput_2=nb_line_inserted_tRedshiftOutput_2 + insertedCount_tRedshiftOutput_2;
	nb_line_rejected_tRedshiftOutput_2=nb_line_rejected_tRedshiftOutput_2 + rejectedCount_tRedshiftOutput_2;
	
        globalMap.put("tRedshiftOutput_2_NB_LINE",nb_line_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_2", true);
end_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());




/**
 * [tRedshiftOutput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */







	
	/**
	 * [tJavaFlex_2 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	


if(rowLogger.hasRows()) {
	rowLogger.logRows(jobName, Logging.PRIORITY_INFO, "Java_LogInvalidRows", "Invalid Rows");
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("rejected_mailing_row"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_2", true);
end_Hash.put("tJavaFlex_2", System.currentTimeMillis());




/**
 * [tJavaFlex_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tWarn_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	



	

 



/**
 * [tRedshiftOutput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";

	

 



/**
 * [tJavaRow_7 finally ] stop
 */







	
	/**
	 * [tJavaFlex_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
		int tos_count_tWarn_4 = 0;
		
    	class BytesLimit65535_tWarn_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_4().limitLog4jByte();

 



/**
 * [tWarn_4 begin ] stop
 */
	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "TRACE","","Rows inserted (Mailing List): " + globalMap.get("mailing_list_processed"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 1, "Rows inserted (Mailing List): " + globalMap.get("mailing_list_processed"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_4_WARN_MESSAGES", "Rows inserted (Mailing List): " + globalMap.get("mailing_list_processed")); 
globalMap.put("tWarn_4_WARN_PRIORITY", 1);
globalMap.put("tWarn_4_WARN_CODE", 42);


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */
	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tRunJob_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_3.put("CampaignExcelFile", context.CampaignExcelFile);
			paraList_tRunJob_3.add("--context_type " + "CampaignExcelFile" + "=" + "id_File");
		
			parentContextMap_tRunJob_3.put("RunDate", context.RunDate);
			paraList_tRunJob_3.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
		while (propertyNames_tRunJob_3.hasMoreElements()) {
			String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
			Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);
			if(value_tRunJob_3!=null) {  
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			} else {
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_3 = null;

	
		obj_tRunJob_3 = "control";
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param ExcelSheetName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param ExcelSheetName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("ExcelSheetName", obj_tRunJob_3);
	
		obj_tRunJob_3 = (Map)globalMap.get("control_field_map");
		if(obj_tRunJob_3!=null) {
			paraList_tRunJob_3.add("--context_param FieldMap=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
		} else {
			paraList_tRunJob_3.add("--context_param FieldMap=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_3.put("FieldMap", obj_tRunJob_3);
	
	
		zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping childJob_tRunJob_3 = new zipcar_marketingdw.task_getschemamapping_0_1.Task_GetSchemaMapping();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				errorCode = childJob_tRunJob_3.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileInputExcel_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class rejected_control_rowStruct implements routines.system.IPersistableRow<rejected_control_rowStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(rejected_control_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long MEMBER_ID;

				public Long getMEMBER_ID () {
					return this.MEMBER_ID;
				}
				
			    public Long CAMPAIGN_ID;

				public Long getCAMPAIGN_ID () {
					return this.CAMPAIGN_ID;
				}
				
			    public Long MAILING_ID;

				public Long getMAILING_ID () {
					return this.MAILING_ID;
				}
				
			    public String CAMPAIGN_DESC;

				public String getCAMPAIGN_DESC () {
					return this.CAMPAIGN_DESC;
				}
				
			    public String EMAIL_ADDRESS;

				public String getEMAIL_ADDRESS () {
					return this.EMAIL_ADDRESS;
				}
				
			    public Boolean IS_CONTROL;

				public Boolean getIS_CONTROL () {
					return this.IS_CONTROL;
				}
				
			    public java.util.Date CREATED_DATE;

				public java.util.Date getCREATED_DATE () {
					return this.CREATED_DATE;
				}
				
			    public Float DRIVING_CREDIT;

				public Float getDRIVING_CREDIT () {
					return this.DRIVING_CREDIT;
				}
				
			    public String DRIVING_CREDIT_CURRENCY;

				public String getDRIVING_CREDIT_CURRENCY () {
					return this.DRIVING_CREDIT_CURRENCY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MEMBER_ID = null;
           				} else {
           			    	this.MEMBER_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CAMPAIGN_ID = null;
           				} else {
           			    	this.CAMPAIGN_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MAILING_ID = null;
           				} else {
           			    	this.MAILING_ID = dis.readLong();
           				}
					
					this.CAMPAIGN_DESC = readString(dis);
					
					this.EMAIL_ADDRESS = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_CONTROL = null;
           				} else {
           			    	this.IS_CONTROL = dis.readBoolean();
           				}
					
					this.CREATED_DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DRIVING_CREDIT = null;
           				} else {
           			    	this.DRIVING_CREDIT = dis.readFloat();
           				}
					
					this.DRIVING_CREDIT_CURRENCY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MEMBER_ID);
		            	}
					
					// Long
				
						if(this.CAMPAIGN_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.CAMPAIGN_ID);
		            	}
					
					// Long
				
						if(this.MAILING_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.MAILING_ID);
		            	}
					
					// String
				
						writeString(this.CAMPAIGN_DESC,dos);
					
					// String
				
						writeString(this.EMAIL_ADDRESS,dos);
					
					// Boolean
				
						if(this.IS_CONTROL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_CONTROL);
		            	}
					
					// java.util.Date
				
						writeDate(this.CREATED_DATE,dos);
					
					// Float
				
						if(this.DRIVING_CREDIT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.DRIVING_CREDIT);
		            	}
					
					// String
				
						writeString(this.DRIVING_CREDIT_CURRENCY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MEMBER_ID="+String.valueOf(MEMBER_ID));
		sb.append(",CAMPAIGN_ID="+String.valueOf(CAMPAIGN_ID));
		sb.append(",MAILING_ID="+String.valueOf(MAILING_ID));
		sb.append(",CAMPAIGN_DESC="+CAMPAIGN_DESC);
		sb.append(",EMAIL_ADDRESS="+EMAIL_ADDRESS);
		sb.append(",IS_CONTROL="+String.valueOf(IS_CONTROL));
		sb.append(",CREATED_DATE="+String.valueOf(CREATED_DATE));
		sb.append(",DRIVING_CREDIT="+String.valueOf(DRIVING_CREDIT));
		sb.append(",DRIVING_CREDIT_CURRENCY="+DRIVING_CREDIT_CURRENCY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public String newColumn01;

				public String getNewColumn01 () {
					return this.newColumn01;
				}
				
			    public String newColumn02;

				public String getNewColumn02 () {
					return this.newColumn02;
				}
				
			    public String newColumn03;

				public String getNewColumn03 () {
					return this.newColumn03;
				}
				
			    public String newColumn04;

				public String getNewColumn04 () {
					return this.newColumn04;
				}
				
			    public String newColumn05;

				public String getNewColumn05 () {
					return this.newColumn05;
				}
				
			    public String newColumn06;

				public String getNewColumn06 () {
					return this.newColumn06;
				}
				
			    public String newColumn07;

				public String getNewColumn07 () {
					return this.newColumn07;
				}
				
			    public String newColumn08;

				public String getNewColumn08 () {
					return this.newColumn08;
				}
				
			    public String newColumn09;

				public String getNewColumn09 () {
					return this.newColumn09;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.newColumn01 = readString(dis);
					
					this.newColumn02 = readString(dis);
					
					this.newColumn03 = readString(dis);
					
					this.newColumn04 = readString(dis);
					
					this.newColumn05 = readString(dis);
					
					this.newColumn06 = readString(dis);
					
					this.newColumn07 = readString(dis);
					
					this.newColumn08 = readString(dis);
					
					this.newColumn09 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn01,dos);
					
					// String
				
						writeString(this.newColumn02,dos);
					
					// String
				
						writeString(this.newColumn03,dos);
					
					// String
				
						writeString(this.newColumn04,dos);
					
					// String
				
						writeString(this.newColumn05,dos);
					
					// String
				
						writeString(this.newColumn06,dos);
					
					// String
				
						writeString(this.newColumn07,dos);
					
					// String
				
						writeString(this.newColumn08,dos);
					
					// String
				
						writeString(this.newColumn09,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn01="+newColumn01);
		sb.append(",newColumn02="+newColumn02);
		sb.append(",newColumn03="+newColumn03);
		sb.append(",newColumn04="+newColumn04);
		sb.append(",newColumn05="+newColumn05);
		sb.append(",newColumn06="+newColumn06);
		sb.append(",newColumn07="+newColumn07);
		sb.append(",newColumn08="+newColumn08);
		sb.append(",newColumn09="+newColumn09);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();
row14Struct row14 = new row14Struct();
row12Struct row12 = new row12Struct();
rejected_control_rowStruct rejected_control_row = new rejected_control_rowStruct();







	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_8 = 0;
		
    	class BytesLimit65535_tJavaRow_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_8().limitLog4jByte();

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_3", false);
		start_Hash.put("tRedshiftOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_3 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_3().limitLog4jByte();





String dbschema_tRedshiftOutput_3 = null;
	dbschema_tRedshiftOutput_3 = (String)globalMap.get("schema_" + "tRedshiftConnection_1");
	
String tableName_tRedshiftOutput_3 = "l_campaign_email_list";
String schemaForSearch_tRedshiftOutput_3 = null;
String tableForSearch_tRedshiftOutput_3 = tableName_tRedshiftOutput_3;
    if(dbschema_tRedshiftOutput_3 != null && dbschema_tRedshiftOutput_3.trim().length() > 0) {
    	tableName_tRedshiftOutput_3 = dbschema_tRedshiftOutput_3 + "\".\"" + tableName_tRedshiftOutput_3;
    }

int nb_line_tRedshiftOutput_3 = 0;
int nb_line_update_tRedshiftOutput_3 = 0;
int nb_line_inserted_tRedshiftOutput_3 = 0;
int nb_line_deleted_tRedshiftOutput_3 = 0;
int nb_line_rejected_tRedshiftOutput_3 = 0;

int deletedCount_tRedshiftOutput_3=0;
int updatedCount_tRedshiftOutput_3=0;
int insertedCount_tRedshiftOutput_3=0;
int rejectedCount_tRedshiftOutput_3=0;

java.util.Calendar calendar_tRedshiftOutput_3 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_3.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_3 = calendar_tRedshiftOutput_3.getTime().getTime();
calendar_tRedshiftOutput_3.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_3 = calendar_tRedshiftOutput_3.getTime().getTime();
long date_tRedshiftOutput_3;

boolean whetherReject_tRedshiftOutput_3 = false;


java.sql.Connection conn_tRedshiftOutput_3 = null;
	conn_tRedshiftOutput_3 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	
	
int count_tRedshiftOutput_3=0;
	
			int rowCounttRedshiftOutput_3 = 0;
			class BufferLine_tRedshiftOutput_3 {				
						Long MEMBER_ID;
						
	            		public BufferLine_tRedshiftOutput_3 c0(Long MEMBER_ID){
							this.MEMBER_ID = MEMBER_ID;
							return this;
						}				
						Long CAMPAIGN_ID;
						
	            		public BufferLine_tRedshiftOutput_3 c1(Long CAMPAIGN_ID){
							this.CAMPAIGN_ID = CAMPAIGN_ID;
							return this;
						}				
						Long MAILING_ID;
						
	            		public BufferLine_tRedshiftOutput_3 c2(Long MAILING_ID){
							this.MAILING_ID = MAILING_ID;
							return this;
						}				
						String CAMPAIGN_DESC;
						
	            		public BufferLine_tRedshiftOutput_3 c3(String CAMPAIGN_DESC){
							this.CAMPAIGN_DESC = CAMPAIGN_DESC;
							return this;
						}				
						String EMAIL_ADDRESS;
						
	            		public BufferLine_tRedshiftOutput_3 c4(String EMAIL_ADDRESS){
							this.EMAIL_ADDRESS = EMAIL_ADDRESS;
							return this;
						}				
						Boolean IS_CONTROL;
						
	            		public BufferLine_tRedshiftOutput_3 c5(Boolean IS_CONTROL){
							this.IS_CONTROL = IS_CONTROL;
							return this;
						}				
						java.util.Date CREATED_DATE;
						
	            		public BufferLine_tRedshiftOutput_3 c6(java.util.Date CREATED_DATE){
							this.CREATED_DATE = CREATED_DATE;
							return this;
						}				
						Float DRIVING_CREDIT;
						
	            		public BufferLine_tRedshiftOutput_3 c7(Float DRIVING_CREDIT){
							this.DRIVING_CREDIT = DRIVING_CREDIT;
							return this;
						}				
						String DRIVING_CREDIT_CURRENCY;
						
	            		public BufferLine_tRedshiftOutput_3 c8(String DRIVING_CREDIT_CURRENCY){
							this.DRIVING_CREDIT_CURRENCY = DRIVING_CREDIT_CURRENCY;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_3> exInsertColValueListtRedshiftOutput_3 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_3 exInsertColValuetRedshiftOutput_3 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_3 = new StringBuilder();
			for(int i_tRedshiftOutput_3=0;i_tRedshiftOutput_3 < 3000;i_tRedshiftOutput_3++){
				 extendInsertValueStmt_tRedshiftOutput_3.append("(?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_3!=3000-1) extendInsertValueStmt_tRedshiftOutput_3.append(",");
			}

			String insert_tRedshiftOutput_3 = "INSERT INTO \"" + tableName_tRedshiftOutput_3 + "\" (\"MEMBER_ID\",\"CAMPAIGN_ID\",\"MAILING_ID\",\"CAMPAIGN_DESC\",\"EMAIL_ADDRESS\",\"IS_CONTROL\",\"CREATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\") VALUES " + extendInsertValueStmt_tRedshiftOutput_3.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_3 =  conn_tRedshiftOutput_3.prepareStatement(insert_tRedshiftOutput_3);

 



/**
 * [tRedshiftOutput_3 begin ] stop
 */




	
	/**
	 * [tJavaFlex_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_3", false);
		start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("rejected_control_row" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_3 = 0;
		
    	class BytesLimit65535_tJavaFlex_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_3().limitLog4jByte();


// Instantiate some Table Row Loggers to collect the Rows with
Logging.TableRowLogger rowLogger = new Logging.TableRowLogger();



 



/**
 * [tJavaFlex_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_5 = 0;
		
    	class BytesLimit65535_tFilterRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_5().limitLog4jByte();
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_3", false);
		start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_3";

	
		int tos_count_tFileInputExcel_3 = 0;
		
    	class BytesLimit65535_tFileInputExcel_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputExcel_3().limitLog4jByte();


			class RegexUtil_tFileInputExcel_3 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

		Object source_tFileInputExcel_3 = context.CampaignExcelFile;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

		if(source_tFileInputExcel_3 instanceof String){
			workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((String)source_tFileInputExcel_3);
		} else if(source_tFileInputExcel_3 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_3 = new org.apache.poi.xssf.usermodel.XSSFWorkbook((java.io.InputStream)source_tFileInputExcel_3);
		} else{
			workbook_tFileInputExcel_3 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_3.addAll(regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3, "^[\\s]*control[\\s]*$", true));
    	if(sheetList_tFileInputExcel_3.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
			if(sheet_FilterNull_tFileInputExcel_3!=null && sheetList_FilterNull_tFileInputExcel_3.iterator()!=null && sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
			}
		}
		sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
	if(sheetList_tFileInputExcel_3.size()>0){
		int nb_line_tFileInputExcel_3 = 0;

        int begin_line_tFileInputExcel_3 = 1;

        int footer_input_tFileInputExcel_3 = 0;

        int end_line_tFileInputExcel_3=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3:sheetList_tFileInputExcel_3){
			end_line_tFileInputExcel_3+=(sheet_tFileInputExcel_3.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
        int limit_tFileInputExcel_3 = -1;
        int start_column_tFileInputExcel_3 = 1-1;
        int end_column_tFileInputExcel_3 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(0);
        int rowCount_tFileInputExcel_3 = 0;
        int sheetIndex_tFileInputExcel_3 = 0;
        int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++){

        	int emptyColumnCount_tFileInputExcel_3 = 0;

        	if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
        		break;
        	}

            while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
                rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
                sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(++sheetIndex_tFileInputExcel_3);
                currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_3_CURRENT_SHEET",sheet_tFileInputExcel_3.getSheetName());
            if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
                row_tFileInputExcel_3 = sheet_tFileInputExcel_3.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
            }
		    row7 = null;
					int tempRowLength_tFileInputExcel_3 = 25;
				
				int columnIndex_tFileInputExcel_3 = 0;
			
			String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
			int excel_end_column_tFileInputExcel_3;
			if(row_tFileInputExcel_3==null){
				excel_end_column_tFileInputExcel_3=0;
			}else{
				excel_end_column_tFileInputExcel_3=row_tFileInputExcel_3.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_3;
			if(end_column_tFileInputExcel_3 == -1){
				actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
			}
			else{
				actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 >	excel_end_column_tFileInputExcel_3 ? excel_end_column_tFileInputExcel_3 : end_column_tFileInputExcel_3;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_3;i++){
				if(i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3.getCell(i + start_column_tFileInputExcel_3);
					if(cell_tFileInputExcel_3!=null){
					switch (cell_tFileInputExcel_3.getCellType()) {
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                            temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
									temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3.format(cell_tFileInputExcel_3.getNumericCellValue());
                            }
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                            temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                            break;
                        case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA:
        					switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_STRING:
                                    temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
											temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_3.getNumericCellValue());
										temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3.getStringValue();
                                    }
                                    break;
                                case org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN:
                                    temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_3[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_3[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_3[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_3[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_3 = false;
			row7 = new row7Struct();
			int curColNum_tFileInputExcel_3 = -1;
			String curColName_tFileInputExcel_3 = "";
			try{
							columnIndex_tFileInputExcel_3 = 0;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn01";

				row7.newColumn01 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn01 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 1;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn02";

				row7.newColumn02 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn02 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 2;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn03";

				row7.newColumn03 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn03 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 3;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn04";

				row7.newColumn04 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn04 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 4;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn05";

				row7.newColumn05 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn05 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 5;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn06";

				row7.newColumn06 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn06 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 6;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn07";

				row7.newColumn07 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn07 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 7;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn08";

				row7.newColumn08 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn08 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 8;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn09";

				row7.newColumn09 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn09 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 9;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn10";

				row7.newColumn10 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 10;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn11";

				row7.newColumn11 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 11;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn12";

				row7.newColumn12 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 12;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn13";

				row7.newColumn13 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 13;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn14";

				row7.newColumn14 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 14;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn15";

				row7.newColumn15 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 15;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn16";

				row7.newColumn16 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 16;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn17";

				row7.newColumn17 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 17;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn18";

				row7.newColumn18 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 18;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn19";

				row7.newColumn19 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 19;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn20";

				row7.newColumn20 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 20;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn21";

				row7.newColumn21 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 21;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn22";

				row7.newColumn22 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 22;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn23";

				row7.newColumn23 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 23;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn24";

				row7.newColumn24 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 24;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim().length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "newColumn25";

				row7.newColumn25 = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].trim();
			}else{
				row7.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_3++;
			}

        if(emptyColumnCount_tFileInputExcel_3 >= 25){
        	break; //if meet the empty row, there will break the iterate.
        }
				nb_line_tFileInputExcel_3++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_3 = true;
					 System.err.println(e.getMessage());
					 row7 = null;
			}


		



 



/**
 * [tFileInputExcel_3 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 


	tos_count_tFileInputExcel_3++;

/**
 * [tFileInputExcel_3 main ] stop
 */
// Start of branch "row7"
if(row7 != null) { 
			rejected_control_row = null;



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		

    String currentSheet = ((String)globalMap.get("tFileInputExcel_3_CURRENT_SHEET")).trim();
Map<String, String> fieldMap = (Map<String, String>)globalMap.get(currentSheet + "_field_map");
String strId = null;
try {
	row8.MEMBER_ID = Long.parseLong(StringUtils.getFieldValue(row7, fieldMap.get("MEMBER_ID")));
} catch(Exception ex) {
	row8.MEMBER_ID = null;
}

row8.EMAIL_ADDRESS = StringUtils.getFieldValue(row7, fieldMap.get("EMAIL"));

try {
	row8.MAILING_ID = Long.parseLong(StringUtils.getFieldValue(row7, fieldMap.get("MAILING_ID")));
} catch(Exception ex) {
	//ex.printStackTrace();
	row8.MAILING_ID = null;
}

row8.CAMPAIGN_DESC = StringUtils.getFieldValue(row7, fieldMap.get("CAMPAIGN_DESC"));

row8.CAMPAIGN_ID = (Long)globalMap.get("Next_CampaignId");

row8.IS_CONTROL = true;

row8.CREATED_DATE =  (Date) globalMap.get("RUN_DATE");

row8.DRIVING_CREDIT = null;
row8.DRIVING_CREDIT_CURRENCY = null;
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

          rejected_control_row = null;
          row14 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
      ope_tFilterRow_5.matches((row8.MEMBER_ID != null &&
row8.EMAIL_ADDRESS != null), "advanced condition failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row14 == null){ 
                row14 = new row14Struct();
              }
               row14.MEMBER_ID = row8.MEMBER_ID;
               row14.CAMPAIGN_ID = row8.CAMPAIGN_ID;
               row14.MAILING_ID = row8.MAILING_ID;
               row14.CAMPAIGN_DESC = row8.CAMPAIGN_DESC;
               row14.EMAIL_ADDRESS = row8.EMAIL_ADDRESS;
               row14.IS_CONTROL = row8.IS_CONTROL;
               row14.CREATED_DATE = row8.CREATED_DATE;
               row14.DRIVING_CREDIT = row8.DRIVING_CREDIT;
               row14.DRIVING_CREDIT_CURRENCY = row8.DRIVING_CREDIT_CURRENCY;    
      nb_line_ok_tFilterRow_5++;
    } else {
            if (rejected_control_row == null){
              rejected_control_row = new rejected_control_rowStruct();
            }
                rejected_control_row.MEMBER_ID = row8.MEMBER_ID;
                rejected_control_row.CAMPAIGN_ID = row8.CAMPAIGN_ID;
                rejected_control_row.MAILING_ID = row8.MAILING_ID;
                rejected_control_row.CAMPAIGN_DESC = row8.CAMPAIGN_DESC;
                rejected_control_row.EMAIL_ADDRESS = row8.EMAIL_ADDRESS;
                rejected_control_row.IS_CONTROL = row8.IS_CONTROL;
                rejected_control_row.CREATED_DATE = row8.CREATED_DATE;
                rejected_control_row.DRIVING_CREDIT = row8.DRIVING_CREDIT;
                rejected_control_row.DRIVING_CREDIT_CURRENCY = row8.DRIVING_CREDIT_CURRENCY;
	            rejected_control_row.errorMessage = ope_tFilterRow_5.getErrorMsg();
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tRedshiftOutput_3 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_3";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		



            row12 = null;
        whetherReject_tRedshiftOutput_3 = false;
				int countertRedshiftOutput_3 = rowCounttRedshiftOutput_3 *
					(9
					)
				+ 1;

						
							if(row14.MEMBER_ID==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setLong(countertRedshiftOutput_3,row14.MEMBER_ID);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.CAMPAIGN_ID==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setLong(countertRedshiftOutput_3,row14.CAMPAIGN_ID);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.MAILING_ID==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setLong(countertRedshiftOutput_3,row14.MAILING_ID);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.CAMPAIGN_DESC==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setString(countertRedshiftOutput_3,row14.CAMPAIGN_DESC);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.EMAIL_ADDRESS==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setString(countertRedshiftOutput_3,row14.EMAIL_ADDRESS);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.IS_CONTROL==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.BOOLEAN);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setBoolean(countertRedshiftOutput_3,row14.IS_CONTROL);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.CREATED_DATE!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_3 = row14.CREATED_DATE.getTime();
								if (date_tRedshiftOutput_3 < year1_tRedshiftOutput_3 || date_tRedshiftOutput_3 >= year10000_tRedshiftOutput_3) {
									pstmt_tRedshiftOutput_3.setString(countertRedshiftOutput_3, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_3.setTimestamp(countertRedshiftOutput_3, new java.sql.Timestamp(date_tRedshiftOutput_3));
								}
							}else{

								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_3++;
						

						
							if(row14.DRIVING_CREDIT==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.FLOAT);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setFloat(countertRedshiftOutput_3,row14.DRIVING_CREDIT);
							

							}

						
						countertRedshiftOutput_3++;
						

						
							if(row14.DRIVING_CREDIT_CURRENCY==null){
								pstmt_tRedshiftOutput_3.setNull(countertRedshiftOutput_3,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_3.setString(countertRedshiftOutput_3,row14.DRIVING_CREDIT_CURRENCY);
							

							}

						
						countertRedshiftOutput_3++;
						
				exInsertColValuetRedshiftOutput_3 = new BufferLine_tRedshiftOutput_3();
                    	exInsertColValuetRedshiftOutput_3
                    	
                        .c0(row14.MEMBER_ID)
                        .c1(row14.CAMPAIGN_ID)
                        .c2(row14.MAILING_ID)
                        .c3(row14.CAMPAIGN_DESC)
                        .c4(row14.EMAIL_ADDRESS)
                        .c5(row14.IS_CONTROL)
                        .c6(row14.CREATED_DATE)
                        .c7(row14.DRIVING_CREDIT)
                        .c8(row14.DRIVING_CREDIT_CURRENCY)
				;

				exInsertColValueListtRedshiftOutput_3.add(exInsertColValuetRedshiftOutput_3);
				rowCounttRedshiftOutput_3++;

                nb_line_tRedshiftOutput_3++;

				if(rowCounttRedshiftOutput_3 == 3000){
	                insertedCount_tRedshiftOutput_3 = insertedCount_tRedshiftOutput_3 + pstmt_tRedshiftOutput_3.executeUpdate();
	                exInsertColValueListtRedshiftOutput_3.clear();
	                rowCounttRedshiftOutput_3 = 0;
					countertRedshiftOutput_3=1;
				}
            if(!whetherReject_tRedshiftOutput_3) {
                            row12 = new row12Struct();
                                row12.MEMBER_ID = row14.MEMBER_ID;
                                row12.CAMPAIGN_ID = row14.CAMPAIGN_ID;
                                row12.MAILING_ID = row14.MAILING_ID;
                                row12.CAMPAIGN_DESC = row14.CAMPAIGN_DESC;
                                row12.EMAIL_ADDRESS = row14.EMAIL_ADDRESS;
                                row12.IS_CONTROL = row14.IS_CONTROL;
                                row12.CREATED_DATE = row14.CREATED_DATE;
                                row12.DRIVING_CREDIT = row14.DRIVING_CREDIT;
                                row12.DRIVING_CREDIT_CURRENCY = row14.DRIVING_CREDIT_CURRENCY;
            }

 


	tos_count_tRedshiftOutput_3++;

/**
 * [tRedshiftOutput_3 main ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

    ((java.util.concurrent.atomic.AtomicInteger)globalMap.get("control_list_processed")).incrementAndGet();


    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */

} // End of branch "row12"





} // End of branch "row14"




// Start of branch "rejected_control_row"
if(rejected_control_row != null) { 



	
	/**
	 * [tJavaFlex_3 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

			//rejected_control_row
			//rejected_control_row


			
				if(execStat){
					runStat.updateStatOnConnection("rejected_control_row"+iterateId,1, 1);
				} 
			

		



rowLogger.add(rejected_control_row);

 


	tos_count_tJavaFlex_3++;

/**
 * [tJavaFlex_3 main ] stop
 */

} // End of branch "rejected_control_row"








} // End of branch "row7"




	
	/**
	 * [tFileInputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_3_NB_LINE",nb_line_tFileInputExcel_3);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_3 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_3.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_3", true);
end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());




/**
 * [tFileInputExcel_3 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_3 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_3";

	





	    if(rowCounttRedshiftOutput_3!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_3 = new StringBuilder();
	        for(int i_tRedshiftOutput_3=0 ; i_tRedshiftOutput_3 < rowCounttRedshiftOutput_3 ; i_tRedshiftOutput_3++){
				extendInsertValue_tRedshiftOutput_3.append("(?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_3 != rowCounttRedshiftOutput_3 - 1) extendInsertValue_tRedshiftOutput_3.append(",");
	        }

				insert_tRedshiftOutput_3 = "INSERT INTO \"" + tableName_tRedshiftOutput_3 + "\" (\"MEMBER_ID\",\"CAMPAIGN_ID\",\"MAILING_ID\",\"CAMPAIGN_DESC\",\"EMAIL_ADDRESS\",\"IS_CONTROL\",\"CREATED_DATE\",\"DRIVING_CREDIT\",\"DRIVING_CREDIT_CURRENCY\") VALUES "+extendInsertValue_tRedshiftOutput_3.toString();
        	pstmt_tRedshiftOutput_3 =  conn_tRedshiftOutput_3.prepareStatement(insert_tRedshiftOutput_3);
			rowCounttRedshiftOutput_3 = 0;
	        for(BufferLine_tRedshiftOutput_3 bufferLtRedshiftOutput_3 : exInsertColValueListtRedshiftOutput_3){
				int counttRedshiftOutput_3 = rowCounttRedshiftOutput_3 *
					(9
					)
				+ 1;
					if(bufferLtRedshiftOutput_3.MEMBER_ID==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setLong(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.MEMBER_ID);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.CAMPAIGN_ID==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setLong(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.CAMPAIGN_ID);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.MAILING_ID==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setLong(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.MAILING_ID);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.CAMPAIGN_DESC==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setString(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.CAMPAIGN_DESC);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.EMAIL_ADDRESS==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setString(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.EMAIL_ADDRESS);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.IS_CONTROL==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.BOOLEAN);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setBoolean(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.IS_CONTROL);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.CREATED_DATE!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_3 = bufferLtRedshiftOutput_3.CREATED_DATE.getTime();
						if (date_tRedshiftOutput_3 < year1_tRedshiftOutput_3 || date_tRedshiftOutput_3 >= year10000_tRedshiftOutput_3) {
							pstmt_tRedshiftOutput_3.setString(counttRedshiftOutput_3, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_3.setTimestamp(counttRedshiftOutput_3, new java.sql.Timestamp(date_tRedshiftOutput_3));
						}
					}else{

						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.DRIVING_CREDIT==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.FLOAT);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setFloat(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.DRIVING_CREDIT);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    
					if(bufferLtRedshiftOutput_3.DRIVING_CREDIT_CURRENCY==null){
						pstmt_tRedshiftOutput_3.setNull(counttRedshiftOutput_3,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_3.setString(counttRedshiftOutput_3,bufferLtRedshiftOutput_3.DRIVING_CREDIT_CURRENCY);
					

					}

				
	                    counttRedshiftOutput_3++;
	                    

	            rowCounttRedshiftOutput_3++;
	        }
	        insertedCount_tRedshiftOutput_3 = insertedCount_tRedshiftOutput_3 + pstmt_tRedshiftOutput_3.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_3 != null) {
                            pstmt_tRedshiftOutput_3.close();
                        }

	nb_line_deleted_tRedshiftOutput_3=nb_line_deleted_tRedshiftOutput_3+ deletedCount_tRedshiftOutput_3;
	nb_line_update_tRedshiftOutput_3=nb_line_update_tRedshiftOutput_3 + updatedCount_tRedshiftOutput_3;
	nb_line_inserted_tRedshiftOutput_3=nb_line_inserted_tRedshiftOutput_3 + insertedCount_tRedshiftOutput_3;
	nb_line_rejected_tRedshiftOutput_3=nb_line_rejected_tRedshiftOutput_3 + rejectedCount_tRedshiftOutput_3;
	
        globalMap.put("tRedshiftOutput_3_NB_LINE",nb_line_tRedshiftOutput_3);
        globalMap.put("tRedshiftOutput_3_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_3);
        globalMap.put("tRedshiftOutput_3_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_3);
        globalMap.put("tRedshiftOutput_3_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_3);
        globalMap.put("tRedshiftOutput_3_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_3);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_3", true);
end_Hash.put("tRedshiftOutput_3", System.currentTimeMillis());




/**
 * [tRedshiftOutput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */







	
	/**
	 * [tJavaFlex_3 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	


if(rowLogger.hasRows()) {
	rowLogger.logRows(jobName, Logging.PRIORITY_INFO, "Java_LogInvalidRows", "Invalid Rows");
}

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("rejected_control_row"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_3", true);
end_Hash.put("tJavaFlex_3", System.currentTimeMillis());




/**
 * [tJavaFlex_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputExcel_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tRunJob_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_3";

	



	

 



/**
 * [tRedshiftOutput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";

	

 



/**
 * [tJavaRow_8 finally ] stop
 */







	
	/**
	 * [tJavaFlex_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
    	class BytesLimit65535_tRunJob_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_4().limitLog4jByte();


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_4.put("CampaignExcelFile", context.CampaignExcelFile);
			paraList_tRunJob_4.add("--context_type " + "CampaignExcelFile" + "=" + "id_File");
		
			parentContextMap_tRunJob_4.put("RunDate", context.RunDate);
			paraList_tRunJob_4.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_4 = context.propertyNames();
		while (propertyNames_tRunJob_4.hasMoreElements()) {
			String key_tRunJob_4 = (String) propertyNames_tRunJob_4.nextElement();
			Object value_tRunJob_4 = (Object) context.get(key_tRunJob_4);
			if(value_tRunJob_4!=null) {  
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + value_tRunJob_4);
			} else {
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_4 = null;

	
		obj_tRunJob_4 = "l_campaign_email_list";
		if(obj_tRunJob_4!=null) {
			paraList_tRunJob_4.add("--context_param tableName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
		} else {
			paraList_tRunJob_4.add("--context_param tableName=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_4.put("tableName", obj_tRunJob_4);
	
	
		zipcar_marketingdw.task_deduptablerecords_0_1.Task_DedupTableRecords childJob_tRunJob_4 = new zipcar_marketingdw.task_deduptablerecords_0_1.Task_DedupTableRecords();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				errorCode = childJob_tRunJob_4.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_4.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tWarn_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_6", false);
		start_Hash.put("tWarn_6", System.currentTimeMillis());
		
	
	currentComponent="tWarn_6";

	
		int tos_count_tWarn_6 = 0;
		
    	class BytesLimit65535_tWarn_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_6().limitLog4jByte();

 



/**
 * [tWarn_6 begin ] stop
 */
	
	/**
	 * [tWarn_6 main ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "TRACE","","Rows inserted (Control List): " + globalMap.get("control_list_processed"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_6", 1, "Rows inserted (Control List): " + globalMap.get("control_list_processed"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_6_WARN_MESSAGES", "Rows inserted (Control List): " + globalMap.get("control_list_processed")); 
globalMap.put("tWarn_6_WARN_PRIORITY", 1);
globalMap.put("tWarn_6_WARN_CODE", 42);


 


	tos_count_tWarn_6++;

/**
 * [tWarn_6 main ] stop
 */
	
	/**
	 * [tWarn_6 end ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 

ok_Hash.put("tWarn_6", true);
end_Hash.put("tWarn_6", System.currentTimeMillis());




/**
 * [tWarn_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tWarn_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tRedshiftInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_6 finally ] start
	 */

	

	
	
	currentComponent="tWarn_6";

	

 



/**
 * [tWarn_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public Long DUPLICATE_MEMBER_ID;

				public Long getDUPLICATE_MEMBER_ID () {
					return this.DUPLICATE_MEMBER_ID;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.DUPLICATE_MEMBER_ID = null;
           				} else {
           			    	this.DUPLICATE_MEMBER_ID = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Long
				
						if(this.DUPLICATE_MEMBER_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.DUPLICATE_MEMBER_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DUPLICATE_MEMBER_ID="+String.valueOf(DUPLICATE_MEMBER_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		
    	class BytesLimit65535_tLogRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_1().limitLog4jByte();

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = ",";
		java.io.PrintStream consoleOut_tLogRow_1 = null;
                    
                    
                StringBuilder sbHeader_tLogRow_1 = new StringBuilder();
				
				sbHeader_tLogRow_1.append("DUPLICATE_MEMBER_ID");
				
                   
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(sbHeader_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
		        conn_tRedshiftInput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();

		    String dbquery_tRedshiftInput_1 = StringUtils.templateString(
"\nSELECT member_id AS duplicate_member_id\nFROM (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.l_campaign_email_list\n	WHERE campaign_id = {{campaignId}}\n	AND is_control = false\n	INTERSECT\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.l_campaign_email_list\n	WHERE campaign_id = {{campaignId}}\n	AND is_control = true\n)\n",
"marketing.schema",  StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"campaignId", (Long)globalMap.get("Next_CampaignId")+""
);
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								row15.DUPLICATE_MEMBER_ID = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(1) != null) {
                row15.DUPLICATE_MEMBER_ID = rs_tRedshiftInput_1.getLong(1);
            } else {
                    row15.DUPLICATE_MEMBER_ID = null;
            }
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




				strBuffer_tLogRow_1.append("DUPLICATE_MEMBER_ID: ");
   				
	    		if(row15.DUPLICATE_MEMBER_ID != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row15.DUPLICATE_MEMBER_ID)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */



	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());

   			if ( ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")) > 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tRedshiftRow_4Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if ( ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")) == 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				
    			tRedshiftRow_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_4", false);
		start_Hash.put("tRedshiftRow_4", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_4";

	
		int tos_count_tRedshiftRow_4 = 0;
		
    	class BytesLimit65535_tRedshiftRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_4().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_4 = null;
	String query_tRedshiftRow_4 = "";
	boolean whetherReject_tRedshiftRow_4 = false;
				conn_tRedshiftRow_4 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_4 = conn_tRedshiftRow_4.createStatement();
	

 



/**
 * [tRedshiftRow_4 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_4 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

query_tRedshiftRow_4 = StringUtils.templateString(
"\nDELETE FROM {{marketing.schema}}.l_campaign\nWHERE campaign_id = {{campaignId}};\n\nDELETE FROM {{marketing.schema}}.l_campaign_instance\nWHERE campaign_id = {{campaignId}};\n\nDELETE FROM {{marketing.schema}}.l_campaign_email_list\nWHERE campaign_id = {{campaignId}};\n",
"marketing.schema",  StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"campaignId",  (Long)globalMap.get("Next_CampaignId")+""
);
whetherReject_tRedshiftRow_4 = false;
globalMap.put("tRedshiftRow_4_QUERY",query_tRedshiftRow_4);
try {
		stmt_tRedshiftRow_4.execute(query_tRedshiftRow_4);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_4 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_4) {
		
	}
	

 


	tos_count_tRedshiftRow_4++;

/**
 * [tRedshiftRow_4 main ] stop
 */
	
	/**
	 * [tRedshiftRow_4 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

	
	stmt_tRedshiftRow_4.close();	

 

ok_Hash.put("tRedshiftRow_4", true);
end_Hash.put("tRedshiftRow_4", System.currentTimeMillis());




/**
 * [tRedshiftRow_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tDie_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_4 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_4";

	

 



/**
 * [tRedshiftRow_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_4_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		
    	class BytesLimit65535_tDie_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDie_1().limitLog4jByte();

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	


				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Speadsheet has duplicate member IDs in list: " +  ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")), 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Speadsheet has duplicate member IDs in list: " +  ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")));
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Speadsheet has duplicate member IDs in list: " +  ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")));
	globalMap.put("tDie_1_DIE_MESSAGES", "Speadsheet has duplicate member IDs in list: " +  ((Integer)globalMap.get("tRedshiftInput_1_NB_LINE")));
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_1", false);
		start_Hash.put("tRedshiftRow_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_1";

	
		int tos_count_tRedshiftRow_1 = 0;
		
    	class BytesLimit65535_tRedshiftRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_1().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_1 = null;
	String query_tRedshiftRow_1 = "";
	boolean whetherReject_tRedshiftRow_1 = false;
				conn_tRedshiftRow_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_1 = conn_tRedshiftRow_1.createStatement();
	

 



/**
 * [tRedshiftRow_1 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

query_tRedshiftRow_1 = StringUtils.templateString(
"\nUPDATE {{marketing.schema}}.l_campaign_email_list\nSET mailing_id = lci.mailing_id\nFROM {{marketing.schema}}.l_campaign_instance lci\nWHERE {{marketing.schema}}.l_campaign_email_list.campaign_id = lci.campaign_id\nAND {{marketing.schema}}.l_campaign_email_list.campaign_desc = lci.campaign_desc\nAND {{marketing.schema}}.l_campaign_email_list.campaign_id = {{campaignId}};\n",
"marketing.schema",  StringHandling.DQUOTE(context.Redshift_Marketing_Schema),
"campaignId",  (Long)globalMap.get("Next_CampaignId")+""
);
whetherReject_tRedshiftRow_1 = false;
globalMap.put("tRedshiftRow_1_QUERY",query_tRedshiftRow_1);
try {
		stmt_tRedshiftRow_1.execute(query_tRedshiftRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_1) {
		
	}
	

 


	tos_count_tRedshiftRow_1++;

/**
 * [tRedshiftRow_1 main ] stop
 */
	
	/**
	 * [tRedshiftRow_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

	
	stmt_tRedshiftRow_1.close();	

 

ok_Hash.put("tRedshiftRow_1", true);
end_Hash.put("tRedshiftRow_1", System.currentTimeMillis());




/**
 * [tRedshiftRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tRedshiftRow_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

 



/**
 * [tRedshiftRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_5", false);
		start_Hash.put("tRedshiftRow_5", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_5";

	
		int tos_count_tRedshiftRow_5 = 0;
		
    	class BytesLimit65535_tRedshiftRow_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_5().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_5 = null;
	String query_tRedshiftRow_5 = "";
	boolean whetherReject_tRedshiftRow_5 = false;
				conn_tRedshiftRow_5 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_5 = conn_tRedshiftRow_5.createStatement();
	

 



/**
 * [tRedshiftRow_5 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_5 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_5";

	

query_tRedshiftRow_5 = StringUtils.templateString(
"\nTRUNCATE {{marketing.schema}}.s_campaign_detail;\nINSERT INTO {{marketing.schema}}.s_campaign_detail\nSELECT\n    cmp.campaign_id,\n	lcp.name as campaign_provider_name,\n    cmp.campaign_name,\n    ctp.campaign_type,\n    lci.campaign_desc,\n    lci.mailing_id,\n    lci.campaign_date,\n    lci.activity_start_date,\n    lci.activity_end_date,\n	lci.list_generated_date,\n    lci.time_period,\n    lci.start_date,\n    lci.end_date,\n    NVL(lci.driving_credit, cel.driving_credit) AS driving_credit,\n	NVL(lci.driving_credit_currency, cel.driving_credit_currency) AS driving_credit_currency,\n    cel.member_id,\n    cel.email_address,\n    cel.is_control,\n    CASE\n        WHEN cel.is_control THEN 'Control Group'\n        ELSE 'Target Group'\n    END as member_type\nFROM {{marketing.schema}}.l_campaign cmp\nJOIN {{marketing.schema}}.l_campaign_type ctp\n   ON cmp.campaign_type_id = ctp.campaign_type_id\nJOIN {{marketing.schema}}.l_campaign_provider lcp\n	ON cmp.campaign_provider_id = lcp.campaign_provider_id\nJOIN\n(\n    SELECT lci.campaign_id, lci.mailing_id, lci.campaign_desc, lci.campaign_date, lci.list_generated_date, lci.activity_start_date, lci.activity_end_date, lci.driving_credit, lci.driving_credit_currency, 'Before' as time_period, lci.activity_start_date - (marketing.f_rpt_campaign_days(lci.activity_start_date, lci.activity_end_date, 0 )) as start_date, lci.activity_start_date - 1 as end_date from {{marketing.schema}}.l_campaign_instance lci\n    UNION ALL\n    SELECT lci.campaign_id, lci.mailing_id, lci.campaign_desc, lci.campaign_date, lci.list_generated_date, lci.activity_start_date, lci.activity_end_date, lci.driving_credit, lci.driving_credit_currency, 'During' as time_period, lci.activity_start_date as start_date, lci.activity_start_date + ( marketing.f_rpt_campaign_days(lci.activity_start_date, lci.activity_end_date, 0 ) - 1) as end_date from {{marketing.schema}}.l_campaign_instance lci\n    UNION ALL\n    SELECT lci.campaign_id, lci.mailing_id, lci.campaign_desc, lci.campaign_date, lci.list_generated_date, lci.activity_start_date, lci.activity_end_date, lci.driving_credit, lci.driving_credit_currency, 'After' as time_period, lci.activity_start_date + (marketing.f_rpt_campaign_days(lci.activity_start_date, lci.activity_end_date, 0 )) as start_date, lci.activity_start_date + (marketing.f_rpt_campaign_days(lci.activity_start_date, lci.activity_end_date, 0) * 2 - 1) as end_date from {{marketing.schema}}.l_campaign_instance lci\n) lci\n    ON lci.campaign_id=cmp.campaign_id\nJOIN {{marketing.schema}}.l_campaign_email_list cel\n    ON cel.campaign_id = cmp.campaign_id\n    AND (\n       CASE\n          WHEN (cel.mailing_id IS NOT NULL and cel.campaign_desc IS NOT NULL) THEN (cel.mailing_id = lci.mailing_id AND cel.campaign_desc = lci.campaign_desc)\n		  WHEN (cel.mailing_id IS NULL and cel.campaign_desc IS NOT NULL) THEN (cel.campaign_desc = lci.campaign_desc)\n          ELSE cel.is_control = TRUE\n       END\n    )\n;\nANALYZE {{marketing.schema}}.s_campaign_detail;\n",
"marketing.schema",  StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
);
whetherReject_tRedshiftRow_5 = false;
globalMap.put("tRedshiftRow_5_QUERY",query_tRedshiftRow_5);
try {
		stmt_tRedshiftRow_5.execute(query_tRedshiftRow_5);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_5 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_5) {
		
	}
	

 


	tos_count_tRedshiftRow_5++;

/**
 * [tRedshiftRow_5 main ] stop
 */
	
	/**
	 * [tRedshiftRow_5 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_5";

	

	
	stmt_tRedshiftRow_5.close();	

 

ok_Hash.put("tRedshiftRow_5", true);
end_Hash.put("tRedshiftRow_5", System.currentTimeMillis());




/**
 * [tRedshiftRow_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_5 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_5";

	

 



/**
 * [tRedshiftRow_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "TRACE","","Campaign loaded successfully with ID: " + globalMap.get("Next_CampaignId"),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 1, "Campaign loaded successfully with ID: " + globalMap.get("Next_CampaignId"), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Campaign loaded successfully with ID: " + globalMap.get("Next_CampaignId")); 
globalMap.put("tWarn_1_WARN_PRIORITY", 1);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_4 = 0;
		
    	class BytesLimit65535_tJavaRow_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_4().limitLog4jByte();

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_Load_Campaign_Data, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_Load_Campaign_Data) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_stats";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 10000;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_1 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_1 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_1 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 100;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=100-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.project);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.context);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.origin);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.duration);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 100){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_1.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.moment.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.father_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.father_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.root_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.root_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.system_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.system_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.project==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.project);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_repository_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_version==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_version);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.context==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.context);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.origin==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.origin);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.duration==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.duration);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Load_Campaign_Data Load_Campaign_DataClass = new Load_Campaign_Data();

        int exitCode = Load_Campaign_DataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Load_Campaign_Data.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/load_campaign_data_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("CampaignExcelFile", "id_File");
				
                context.CampaignExcelFile=(String) context.getProperty("CampaignExcelFile");
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("CampaignExcelFile")) {
                context.CampaignExcelFile = (String) parentContextMap.get("CampaignExcelFile");
            }if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRedshiftRow_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRedshiftRow_2) {
globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", -1);

e_tRedshiftRow_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Load_Campaign_Data");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_1", globalMap.get("conn_tRedshiftConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     535742 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:39 PM CDT
 ************************************************************************************************/