// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.salesforceexport_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.ConfigFile;
import routines.Relational;
import routines.Mathematical;
import routines.DateUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

	//the import part of tJavaRow_3
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;


@SuppressWarnings("unused")

/**
 * Job: SalesforceExport Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class SalesforceExport implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(isSubJob != null){
				
					this.setProperty("isSubJob", isSubJob.toString());
				
			}
			
			if(ftpHost != null){
				
					this.setProperty("ftpHost", ftpHost.toString());
				
			}
			
			if(ftpPass != null){
				
					this.setProperty("ftpPass", ftpPass.toString());
				
			}
			
			if(ftpPort != null){
				
					this.setProperty("ftpPort", ftpPort.toString());
				
			}
			
			if(ftpUser != null){
				
					this.setProperty("ftpUser", ftpUser.toString());
				
			}
			
			if(localExportDir != null){
				
					this.setProperty("localExportDir", localExportDir.toString());
				
			}
			
			if(localImportDir != null){
				
					this.setProperty("localImportDir", localImportDir.toString());
				
			}
			
			if(remoteExportDir != null){
				
					this.setProperty("remoteExportDir", remoteExportDir.toString());
				
			}
			
			if(remoteImportDir != null){
				
					this.setProperty("remoteImportDir", remoteImportDir.toString());
				
			}
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
			if(localArchiveDir != null){
				
					this.setProperty("localArchiveDir", localArchiveDir.toString());
				
			}
			
		}

public Boolean isSubJob;
public Boolean getIsSubJob(){
	return this.isSubJob;
}
public String ftpHost;
public String getFtpHost(){
	return this.ftpHost;
}
public java.lang.String ftpPass;
public java.lang.String getFtpPass(){
	return this.ftpPass;
}
public Integer ftpPort;
public Integer getFtpPort(){
	return this.ftpPort;
}
public String ftpUser;
public String getFtpUser(){
	return this.ftpUser;
}
public String localExportDir;
public String getLocalExportDir(){
	return this.localExportDir;
}
public String localImportDir;
public String getLocalImportDir(){
	return this.localImportDir;
}
public String remoteExportDir;
public String getRemoteExportDir(){
	return this.remoteExportDir;
}
public String remoteImportDir;
public String getRemoteImportDir(){
	return this.remoteImportDir;
}
public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
public String localArchiveDir;
public String getLocalArchiveDir(){
	return this.localArchiveDir;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "SalesforceExport";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_YAtbQEpWEeiIKLjcIkPhSg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				SalesforceExport.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(SalesforceExport.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_stats";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 10000;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_1 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_1 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_1 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 100;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=100-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.project);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.context);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.origin);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.duration);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 100){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_1.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.moment.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.father_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.father_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.root_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.root_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.system_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.system_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.project==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.project);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_repository_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_version==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_version);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.context==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.context);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.origin==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.origin);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.duration==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.duration);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

Logging.componentName(jobName, "tWarn_1", "Log_Export_Done");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSetGlobalVar_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("RUN_DATE", DateUtils.runDate(context.RunDate));

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

   			if (!context.isSubJob) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tJavaFlex_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.isSubJob) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tRedshiftConnection_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class external_configStruct implements routines.system.IPersistableRow<external_configStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(external_configStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		external_configStruct external_config = new external_configStruct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("external_config" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tContextLoad_1 = 0;
		
    	class BytesLimit65535_tContextLoad_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tContextLoad_1().limitLog4jByte();
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// Load the config file and send its properties to the Context Loader
java.util.Map<String, String> externalConfig = ConfigFile.loadConfig(ConfigFile.JOB_PROC_DAILY_SALESFORCE, context_param);
for(String key: externalConfig.keySet()) {


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// loop
external_config.key = key;
external_config.value = externalConfig.get(key);

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

			//external_config
			//external_config


			
				if(execStat){
					runStat.updateStatOnConnection("external_config"+iterateId,1, 1);
				} 
			

		
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (external_config.key != null){
                          tmp_key_tContextLoad_1 = external_config.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          external_config.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(external_config.key != null) {
                    key_tContextLoad_1 =
                        external_config.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(external_config.value != null) {
                    value_tContextLoad_1 =
                        external_config.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ("ftpPass".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Marketing_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ("Redshift_Monitoring_Password".equals(key_tContextLoad_1) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "isSubJob".equals(key_tContextLoad_1))
        {

               context.isSubJob=Boolean.parseBoolean(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "ftpHost".equals(key_tContextLoad_1))
        {
           context.ftpHost=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ftpPass".equals(key_tContextLoad_1))
        {
           context.ftpPass=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ftpPort".equals(key_tContextLoad_1))
        {

                context.ftpPort=Integer.parseInt(value_tContextLoad_1);

        }

        if(key_tContextLoad_1!=null && "ftpUser".equals(key_tContextLoad_1))
        {
           context.ftpUser=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "localExportDir".equals(key_tContextLoad_1))
        {
           context.localExportDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "localImportDir".equals(key_tContextLoad_1))
        {
           context.localImportDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "remoteExportDir".equals(key_tContextLoad_1))
        {
           context.remoteExportDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "remoteImportDir".equals(key_tContextLoad_1))
        {
           context.remoteImportDir=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "RunDate".equals(key_tContextLoad_1))
        {
                String context_RunDate_value = context.getProperty("RunDate");
                if(context_RunDate_value==null)
                    context_RunDate_value = "";
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                }
                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(value_tContextLoad_1));

        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Marketing_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Marketing_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Database".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Login".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Password".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Port".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Schema".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "Redshift_Monitoring_Server".equals(key_tContextLoad_1))
        {
           context.Redshift_Monitoring_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "localArchiveDir".equals(key_tContextLoad_1))
        {
           context.localArchiveDir=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */



	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("ftpPass");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Marketing_Password");
		
		parametersToEncrypt_tContextLoad_1.add("Redshift_Monitoring_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("external_config"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());




/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRedshiftConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_1", false);
		start_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_1";

	
		int tos_count_tRedshiftConnection_1 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_1().limitLog4jByte();


	
    			String url_tRedshiftConnection_1 = "jdbc:redshift://" + context.Redshift_Marketing_Server + ":" + context.Redshift_Marketing_Port + "/" + context.Redshift_Marketing_Database + "?" + context.Redshift_Marketing_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_1 = context.Redshift_Marketing_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_1 = context.Redshift_Marketing_Password; 
		String dbPwd_tRedshiftConnection_1 = decryptedPassword_tRedshiftConnection_1;
	

	java.sql.Connection conn_tRedshiftConnection_1 = null;
	
					String driverClass_tRedshiftConnection_1 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_1);
		
		conn_tRedshiftConnection_1 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_1,dbUser_tRedshiftConnection_1,dbPwd_tRedshiftConnection_1);

		globalMap.put("conn_tRedshiftConnection_1", conn_tRedshiftConnection_1);
	if (null != conn_tRedshiftConnection_1) {
		
			conn_tRedshiftConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_1",context.Redshift_Marketing_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_1",conn_tRedshiftConnection_1);

 



/**
 * [tRedshiftConnection_1 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 


	tos_count_tRedshiftConnection_1++;

/**
 * [tRedshiftConnection_1 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 

ok_Hash.put("tRedshiftConnection_1", true);
end_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());




/**
 * [tRedshiftConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tFileList_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 



/**
 * [tRedshiftConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
    	class BytesLimit65535_tFileList_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_4().limitLog4jByte();
	
 
     
    
  String directory_tFileList_4 = context.localExportDir;
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("*.*");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4);
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = true;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
     
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	NB_ITERATE_tFileDelete_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileDelete_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File((String)globalMap.get("tFileList_4_CURRENT_FILEPATH"));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",(String)globalMap.get("tFileList_4_CURRENT_FILEPATH"));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileDelete_1);
						}				
					




	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_1", false);
		start_Hash.put("tRedshiftClose_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_1";

	
		int tos_count_tRedshiftClose_1 = 0;
		
    	class BytesLimit65535_tRedshiftClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_1().limitLog4jByte();

 



/**
 * [tRedshiftClose_1 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	



	java.sql.Connection conn_tRedshiftClose_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	if(conn_tRedshiftClose_1 != null && !conn_tRedshiftClose_1.isClosed())
	{
        conn_tRedshiftClose_1.close();
	}

 


	tos_count_tRedshiftClose_1++;

/**
 * [tRedshiftClose_1 main ] stop
 */
	
	/**
	 * [tRedshiftClose_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 

ok_Hash.put("tRedshiftClose_1", true);
end_Hash.put("tRedshiftClose_1", System.currentTimeMillis());




/**
 * [tRedshiftClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 



/**
 * [tRedshiftClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\nCREATE TEMP TABLE calc_member \ndistkey (member_id)\nsortkey (member_id)\nAS (\nSELECT \n	m.member_id ||'_zipcar' AS subscriber_key,\n	m.member_id AS member_id,\n	CASE \n		WHEN m.first_name ~ '^[a-za-z]{2,3}[.]' THEN\n			trim(initcap(substring(trim(replace(m.first_name, regexp_substr(first_name, '^[a-za-z]{2,3}[.]'), '')), \n			1, decode(strpos(trim(replace(m.first_name, regexp_substr(m.first_name, '^[a-za-z]{2,3}[.]'), '')), ' '),\n			0, length(m.first_name), strpos(trim(replace(m.first_name, regexp_substr(m.first_name, '^[a-za-z]{2,3}[.]'), '')), ' ')))))\n			ELSE trim(initcap(substring(m.first_name, 1, decode(strpos(m.first_name, ' '), 0, length(m.first_name), strpos(m.first_name, ' ')))))\n	END AS first_name_zc,\n	initcap(m.last_name) AS last_name_zc,\n	m.user_name AS user_name_zc,\n	m.email AS email_address_zc,\n	CASE\n		WHEN m.email IS NULL THEN NULL\n		WHEN \"position\"(\"substring\"(m.email::text, \"position\"(m.email::text, '@'::text) + 1), '.'::text) = 0 OR \"position\"(\"substring\"(m.email::text, \"position\"(m.email::text, '@'::text) + 1), '.'::text) IS NULL THEN NULL\n		ELSE LOWER(\"left\"(\"substring\"(m.email::text, \"position\"(m.email::text, '@'::text) + 1), \"position\"(\"substring\"(m.email::text, \"position\"(m.email::text, '@'::text) + 1), '.'::text) - 1))\n	END AS email_address_domain,\n	CASE\n		WHEN m.emailable_p = 't' THEN true\n		ELSE false\n	END AS is_emailable,\n	date_trunc('month', m.birthdate) AS birth_month_year,\n	CASE \n		WHEN m.birthdate IS NOT NULL THEN\n			CASE \n				WHEN to_char(m.birthdate,'dd')||to_char(m.birthdate,'mm') = '2902' and to_date('0103'||to_char(sysdate,'yyyy'), 'ddmmyyyy') BETWEEN date_trunc('day', CURRENT_DATE) and date_trunc('day', CURRENT_DATE)+7 THEN true\n				WHEN to_char(m.birthdate,'dd')||to_char(m.birthdate,'mm') = '2902' THEN false\n				WHEN to_date(to_char(m.birthdate,'dd')||to_char(m.birthdate,'mm')||to_char(sysdate,'yyyy'), 'ddmmyyyy') BETWEEN date_trunc('day', CURRENT_DATE) and date_trunc('day', CURRENT_DATE)+7 THEN true\n				ELSE false\n			END\n	END AS has_birthday_this_week,\n	m.occupation,\n	m.locale,\n	m.first_join_date,\n	NVL(m.rejoin_date, m.first_join_date) AS last_join_date,\n	m.current_status,\n	m.driver_confirmed_zipcard_p,\n	m.last_name,\n	m.email,\n	m.current_zipfleet_id,\n	m.preferred_address_id,\n	me.current_waiver_plan_id,\n	me.first_waiver_start_date,\n	me.first_gas_fillup_date,\n	me.completed_res_6mths_wrkday_s\n	--me.last_nps_response_date,\n	--me.last_nps_score\nFROM {{marketing.schema}}.vw_r_member m\nINNER JOIN {{marketing.schema}}.vw_r_members_ext me ON me.member_id = m.member_id\n);\n\nCREATE TEMP TABLE sf_member_reservation \ndistkey (member_id)\nsortkey (member_id)\nAS (\n	SELECT * FROM {{marketing.schema}}.vw_sf_member_reservation\n);\n\nCREATE TEMP TABLE sf_individual AS (\nSELECT \n	m.subscriber_key,\n	m.member_id as member_id_zc,\n	m.first_name_zc,\n	m.last_name_zc,\n	m.user_name_zc,\n	m.email_address_zc,\n	m.email_address_domain,\n	case when svb.email_address is not null then false else m.is_emailable end as is_emailable,\n	m.birth_month_year,\n	m.has_birthday_this_week,\n	m.occupation,\n	m.locale,\n	zo.description AS preferred_address_zone,\n	NVL(zz.has_address_in_uk_zipzone, false) AS has_address_in_uk_zipzone,\n	m.first_join_date,\n	m.last_join_date,\n	mli.last_left_date,\n	mli.last_left_reason,\n	CASE\n		WHEN mli.last_left_reason IN (\n			'Extended Inactivity',\n			'Account entering collections.',\n			'Terminated',\n			'Ineligible',\n			'Closed for debt',\n			'Rescindido', -- terminated\n			'Cerrado por deuda', -- closed for debt\n			'No apto', -- ineligible\n			'已終止', -- terminated\n			'因債務關閉', -- closed for debt\n			'無資格', -- ineligible\n			'Rescindit', -- terminated\n			'Tancat per deute', -- closed for debt\n			'No elegible', -- ineligible\n			'Résilié', -- terminated\n			'Fermé pour dette', -- closed for debt\n			'Inéligible', -- ineligible\n			'Sona erdirildi', -- terminated\n			'Borç nedeniyle kapatıldı', -- closed for debt\n			'Uygun değil' -- ineligible\n		) THEN true\n	ELSE false\n	END AS last_left_due_to_termination,\n	m.current_status,\n	CASE WHEN m.driver_confirmed_zipcard_p ='t' THEN true ELSE false END AS has_active_zipcard,\n	CASE WHEN mrpm.member_id IS NOT NULL and m.current_status = 'approved' THEN true ELSE false END AS is_current_approved_member,\n	CASE WHEN mrpa.member_id IS NOT NULL and (m.current_status <> 'suspended' or m.current_status is null) THEN true ELSE false END AS is_current_admin,\n	CASE\n		WHEN ia.last_incomplete_app_start_date > CURRENT_DATE - interval '6 months'\n			OR ca.last_active_corp_app_date > CURRENT_DATE - interval '6 months'\n			OR ssu.z4b_ssu_last_view_date > CURRENT_DATE - interval '6 months'\n		THEN true ELSE false\n	END AS is_prospect,\n	CASE WHEN con.member_id IS NOT NULL THEN true ELSE false END AS has_segment_consumer,\n	CASE WHEN col.member_id IS NOT NULL THEN true ELSE false END AS has_segment_collegiate,\n	CASE WHEN zv.member_id IS NOT NULL THEN true ELSE false END AS has_segment_zipvan,\n	CASE WHEN bus.member_id IS NOT NULL THEN true ELSE false END AS has_segment_business,\n	NVL(bc.has_corp_db_acc,false) AS has_segment_business_db,\n	bc.corp_direct_billed_code AS business_direct_billed_code,\n	NVL(bc.has_corp_ib_acc,false) AS has_segment_business_ib,\n	bc.corp_individually_billed_code AS business_individually_billed_code,\n	CASE\n		WHEN rpa.current_rate_plan_keys like '%employee%'\n			OR rpa.current_rate_plan_keys like '%\"koc_emp\"%'\n			OR rpa.current_rate_plan_keys like '%\"default\"%'\n			OR rpa.current_rate_plan_keys like '%\"default-legacy\"%'\n			OR rpa.current_rate_plan_keys like '%\"default_plan\"%'\n			OR LOWER(m.last_name) like '%zipcar%'\n			OR m.email like '%@zipcar.%'\n			OR m.email like '%@driver.car%'\n		THEN true\n		ELSE false\n	END AS is_employee,\n	zf.fleet_name AS fleet_name,\n	zf.fleet_country_name,\n	zf.fleet_market_name,\n	rpa.current_rate_plan_keys,\n	rpa.current_affiliates,\n	nf.next_fee_date,\n	nf.next_fee_frequency,\n	nf.next_fee_segment_class,\n	nf.next_fee_amount,\n	nf.next_fee_currency,\n	nf.next_fee_account_name AS next_fee_account_name_zc,\n	NVL(c.current_credit, 0) AS current_credit,\n	c.current_credit_currency,\n	c.next_credit_expiry_date,\n	CASE WHEN m.current_waiver_plan_id IS NULL THEN false ELSE true END AS has_active_consumer_waiver,\n	m.first_waiver_start_date AS first_consumer_waiver_start_date,\n	NVL(bw.has_any_active_business_waiver, false) AS has_active_business_waiver,\n	m.first_gas_fillup_date AS na_first_gas_fillup_date,\n	wex.NA_last_35_day_gas_fillup_count,\n	mr.first_res_start_date,\n	mr.first_res_end_date,       \n	mr.first_res_type,\n	mr.first_res_vehicle_make,\n	mr.first_res_vehicle_model,\n	mr.first_res_vehicle_name,\n	mr.first_res_fleet_name, -- nb roundtrip only\n	mr.first_floating_res_end_date,     \n	mr.last_res_start_date,\n	mr.last_res_end_date,\n	mr.last_res_type,\n	mr.last_res_vehicle_make,\n	mr.last_res_vehicle_model,\n	mr.last_res_vehicle_name,\n	mr.last_res_vehicle_class,\n	mr.last_floating_res_end_date,\n	mr.last_rt_res_mins_late,\n	mr.next_res_date,\n	mr.next_res_type,\n	NVL(mr.last_year_res_count,0) AS last_year_res_count,\n	NVL(mr.last_year_distance_mi,0) AS last_year_distance_mi,\n	NVL(mr.last_year_distance_km,0) AS last_year_distance_km,\n	round(2*(NVL(mr.last_year_hours,0)),0)/2 AS last_year_hours,\n	NVL(mr.last_3_month_res_count,0) AS last_3_month_res_count,\n	NVL(mr.last_3_month_res_rev_in_usd,0) AS last_3_month_res_rev_in_usd,\n	NVL(mr.last_3_month_distance_mi,0) AS last_3_month_distance_mi,\n	NVL(mr.last_3_month_distance_km,0) AS last_3_month_distance_km,\n	round(2*(NVL(mr.last_3_month_hours,0)),0)/2 AS last_3_month_hours,\n	NVL(mr.total_res_count,0) AS total_res_count,\n	mr.all_res_types AS reserver_segment,\n	NVL(mr.workday_res_last_6mths,0) AS workday_res_last_6mths,\n	CASE\n		WHEN (NVL(mr.last_month_hours,0)) < (NVL(mr.previous_month_hours, 0)) THEN true\n		ELSE false\n	END AS reserved_fewer_hours_last_month, -- roundtrip only\n	mdb.nps_last_ltr_date AS last_nps_response_date,\n	mdb.nps_last_ltr_score AS last_nps_score,\n	ia.last_incomplete_app_start_date,\n	ia.last_incomplete_app_segment,\n	ia.last_incomplete_app_affiliate,\n	ia.last_incomplete_app_country,\n	ia.last_incomplete_app_last_step,\n	ca.last_active_corp_app_date,\n	ca.last_active_corp_app_country,\n	ssu.z4b_ssu_last_view_date AS last_z4b_ssu_view_date,\n	ssu.z4b_ssu_last_step AS last_z4b_ssu_last_step,\n	mdb.has_nonservice_account AS mdb_has_nonservice_account,\n	mdb.primary_plan_category AS mdb_primary_plan_category,\n	mdb.primary_segment_class AS mdb_primary_segment_class,\n	mdb.metro_name AS mdb_metro_name,\n	mdb.tenure_category AS mdb_tenure_category,\n	mdb.rfm_profile AS mdb_rfm_profile,\n	mdb.location_segment AS mdb_location_segment,\n	NVL(sv.opened_in_last_90_days, false) AS sv_opened_in_last_90_days,\n	NVL(sv.clicked_in_last_90_days, false) AS sv_clicked_in_last_90_days,\n	CASE\n		WHEN LOWER (\n			CASE WHEN zf.fleet_country_name IS NOT NULL THEN zf.fleet_country_name\n				WHEN zf.fleet_country_name IS NULL and ia.last_incomplete_app_country IS NOT NULL THEN ia.last_incomplete_app_country\n				WHEN ia.last_incomplete_app_country IS NULL and last_active_corp_app_country IS NOT NULL THEN last_active_corp_app_country\n				WHEN ca.last_active_corp_app_country IS NULL THEN m.locale\n			END) IN ('united states', 'canada', 'us', 'ca', 'en-us', 'en-ca')\n		THEN 'NA' ELSE 'EMEA'\n	END AS data_split,\n	CASE\n		WHEN LOWER (\n			CASE WHEN zf.fleet_country_name IS NOT NULL THEN zf.fleet_country_name\n			 WHEN zf.fleet_country_name IS NULL and ia.last_incomplete_app_country IS NOT NULL THEN ia.last_incomplete_app_country\n			 WHEN ia.last_incomplete_app_country IS NULL and last_active_corp_app_country IS NOT NULL THEN last_active_corp_app_country\n			 WHEN ca.last_active_corp_app_country IS NULL THEN m.locale\n			END) IN ('united states', 'canada', 'us', 'ca', 'en-us', 'en-ca')\n		THEN 'NA'\n		WHEN LOWER (\n			CASE WHEN zf.fleet_country_name IS NOT NULL THEN zf.fleet_country_name\n			 WHEN zf.fleet_country_name IS NULL and ia.last_incomplete_app_country IS NOT NULL THEN ia.last_incomplete_app_country\n			 WHEN ia.last_incomplete_app_country IS NULL and last_active_corp_app_country IS NOT NULL THEN last_active_corp_app_country\n			 WHEN ca.last_active_corp_app_country IS NULL THEN m.locale\n			END) IN ('united kingdom', 'uk', 'en-gb')\n		THEN 'UK'\n		WHEN LOWER (\n			CASE WHEN zf.fleet_country_name IS NOT NULL THEN zf.fleet_country_name\n			 WHEN zf.fleet_country_name IS NULL and ia.last_incomplete_app_country IS NOT NULL THEN ia.last_incomplete_app_country\n			 WHEN ia.last_incomplete_app_country IS NULL and last_active_corp_app_country IS NOT NULL THEN last_active_corp_app_country\n			 WHEN ca.last_active_corp_app_country IS NULL THEN m.locale\n			END) IN ('spain', 'es', 'es-es', 'ca-es')\n		THEN 'ES'\n		WHEN LOWER (\n			CASE WHEN zf.fleet_country_name IS NOT NULL THEN zf.fleet_country_name\n			 WHEN zf.fleet_country_name IS NULL and ia.last_incomplete_app_country IS NOT NULL THEN ia.last_incomplete_app_country\n			 WHEN ia.last_incomplete_app_country IS NULL and last_active_corp_app_country IS NOT NULL THEN last_active_corp_app_country\n			 WHEN ca.last_active_corp_app_country IS NULL THEN m.locale\n			END) IN ('france', 'fr', 'fr-fr')\n		THEN 'FR'\n		ELSE 'Other'\n	END AS derived_country,\n	mdb.nps_first_ltr_score\n	, mdb.nps_first_ltr_date\n	, mdb.nps_average_cohort\n	, mdb.nps_survey_count\n	, mdb.nps_survey_total\nFROM calc_member m\nLEFT JOIN {{marketing.schema}}.vw_r_zipfleet zf ON zf.zipfleet_id = m.current_zipfleet_id\nLEFT JOIN {{marketing.schema}}.vw_r_member_left_info mli ON m.member_id = mli.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_credit c ON c.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE is_current_member = 't'\n) mrpm ON mrpm.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE is_current_admin = 't'\n) mrpa ON mrpa.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE segment_class = 'Consumer'\n) con ON con.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE segment_class = 'Business'\n) bus ON bus.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE segment_class = 'Collegiate'\n) col ON col.member_id = m.member_id\nLEFT JOIN (\n	SELECT DISTINCT member_id\n	FROM {{marketing.schema}}.vw_sf_member_rate_plan\n	WHERE segment_class = 'Zipvan'\n) zv ON zv.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_business_code bc ON bc.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_business_waiver bw ON bw.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_rate_plan_affiliate rpa ON rpa.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_incomplete_application ia ON ia.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.s_member mdb ON mdb.member_id = m.member_id\nLEFT JOIN sf_member_reservation mr ON mr.member_id = m.member_id       \nLEFT JOIN {{marketing.schema}}.vw_sf_zipzone zz ON zz.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_r_address addr ON addr.address_id = m.preferred_address_id AND addr.member_id = m.member_id AND addr.preferred_p = 't' AND addr.deleted_date IS NULL\nLEFT JOIN {{marketing.schema}}.vw_r_zone zo ON zo.zone_id = addr.zone_id\nLEFT JOIN {{marketing.schema}}.vw_sf_corporate_application ca ON ca.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_next_fee nf ON nf.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_business_self_signup ssu ON ssu.member_id = m.member_id\nLEFT JOIN (\n	SELECT member_id, count(DISTINCT transaction_time) AS na_last_35_day_gas_fillup_count\n	FROM {{marketing.schema}}.vw_r_wex_fuel_data wex\n	WHERE transaction_time >= (CURRENT_DATE - interval '35 days')\n	GROUP BY member_id\n) wex ON wex.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_strongview_interaction sv ON sv.member_id = m.member_id\nLEFT JOIN {{marketing.schema}}.vw_sf_strongview_bounce svb on svb.email_address = m.email_address_zc\nWHERE m.email IS NOT NULL\n	AND m.member_id IS NOT NULL\n	AND ( (mrpm.member_id IS NOT NULL AND m.current_status = 'approved') -- is_current_approved_member\n	OR mrpa.member_id IS NOT NULL -- is_current_admin\n	OR ia.last_incomplete_app_start_date > CURRENT_DATE - interval '6 months' -- is_prospect\n	OR ca.last_active_corp_app_date > CURRENT_DATE - interval '6 months' -- is_prospect\n	OR ssu.z4b_ssu_last_view_date > CURRENT_DATE - interval '6 months' -- is_prospect\n	OR (\n			mli.last_left_date > CURRENT_DATE - interval '6 months'\n			AND mli.last_left_reason NOT IN (\n				'Extended Inactivity',\n				'Account entering collections.',\n				'Terminated',\n				'Ineligible',\n				'Closed for debt',\n				'Rescindido', -- terminated\n				'Cerrado por deuda', -- closed for debt\n				'No apto', -- ineligible\n				'已終止', -- terminated\n				'因債務關閉', -- closed for debt\n				'無資格', -- ineligible\n				'Rescindit', -- terminated\n				'Tancat per deute', -- closed for debt\n				'No elegible', -- ineligible\n				'Résilié', -- terminated\n				'Fermé pour dette', -- closed for debt\n				'Inéligible', -- ineligible\n				'Sona erdirildi', -- terminated\n				'Borç nedeniyle kapatıldı', -- closed for debt\n				'Uygun değil' -- ineligible\n			)\n		)\n	)\n)\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
);
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_2) {
		
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


globalMap.put("namFileName", "zipcar_nam_individuals_full_overwrite_" + TalendDate.TO_CHAR((Date)globalMap.get("RUN_DATE"), "yyyyMMdd") + ".txt");
globalMap.put("intFileName", "zipcar_int_individuals_full_overwrite_" + TalendDate.TO_CHAR((Date)globalMap.get("RUN_DATE"), "yyyyMMdd") + ".txt");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRedshiftInput_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRedshiftInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public String subscriber_key;

				public String getSubscriber_key () {
					return this.subscriber_key;
				}
				
			    public Long member_id_zc;

				public Long getMember_id_zc () {
					return this.member_id_zc;
				}
				
			    public String first_name_zc;

				public String getFirst_name_zc () {
					return this.first_name_zc;
				}
				
			    public String last_name_zc;

				public String getLast_name_zc () {
					return this.last_name_zc;
				}
				
			    public String user_name_zc;

				public String getUser_name_zc () {
					return this.user_name_zc;
				}
				
			    public String email_address_zc;

				public String getEmail_address_zc () {
					return this.email_address_zc;
				}
				
			    public String email_address_domain;

				public String getEmail_address_domain () {
					return this.email_address_domain;
				}
				
			    public Boolean is_emailable;

				public Boolean getIs_emailable () {
					return this.is_emailable;
				}
				
			    public java.util.Date birth_month_year;

				public java.util.Date getBirth_month_year () {
					return this.birth_month_year;
				}
				
			    public Boolean has_birthday_this_week;

				public Boolean getHas_birthday_this_week () {
					return this.has_birthday_this_week;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String locale;

				public String getLocale () {
					return this.locale;
				}
				
			    public String preferred_address_zone;

				public String getPreferred_address_zone () {
					return this.preferred_address_zone;
				}
				
			    public Boolean has_address_in_uk_zipzone;

				public Boolean getHas_address_in_uk_zipzone () {
					return this.has_address_in_uk_zipzone;
				}
				
			    public java.util.Date first_join_date;

				public java.util.Date getFirst_join_date () {
					return this.first_join_date;
				}
				
			    public java.util.Date last_join_date;

				public java.util.Date getLast_join_date () {
					return this.last_join_date;
				}
				
			    public java.util.Date last_left_date;

				public java.util.Date getLast_left_date () {
					return this.last_left_date;
				}
				
			    public String last_left_reason;

				public String getLast_left_reason () {
					return this.last_left_reason;
				}
				
			    public Boolean last_left_due_to_termination;

				public Boolean getLast_left_due_to_termination () {
					return this.last_left_due_to_termination;
				}
				
			    public String current_status;

				public String getCurrent_status () {
					return this.current_status;
				}
				
			    public Boolean has_active_zipcard;

				public Boolean getHas_active_zipcard () {
					return this.has_active_zipcard;
				}
				
			    public Boolean is_current_approved_member;

				public Boolean getIs_current_approved_member () {
					return this.is_current_approved_member;
				}
				
			    public Boolean is_current_admin;

				public Boolean getIs_current_admin () {
					return this.is_current_admin;
				}
				
			    public Boolean is_prospect;

				public Boolean getIs_prospect () {
					return this.is_prospect;
				}
				
			    public Boolean has_segment_consumer;

				public Boolean getHas_segment_consumer () {
					return this.has_segment_consumer;
				}
				
			    public Boolean has_segment_collegiate;

				public Boolean getHas_segment_collegiate () {
					return this.has_segment_collegiate;
				}
				
			    public Boolean has_segment_zipvan;

				public Boolean getHas_segment_zipvan () {
					return this.has_segment_zipvan;
				}
				
			    public Boolean has_segment_business;

				public Boolean getHas_segment_business () {
					return this.has_segment_business;
				}
				
			    public Boolean has_segment_business_db;

				public Boolean getHas_segment_business_db () {
					return this.has_segment_business_db;
				}
				
			    public String business_direct_billed_code;

				public String getBusiness_direct_billed_code () {
					return this.business_direct_billed_code;
				}
				
			    public Boolean has_segment_business_ib;

				public Boolean getHas_segment_business_ib () {
					return this.has_segment_business_ib;
				}
				
			    public String business_individually_billed_code;

				public String getBusiness_individually_billed_code () {
					return this.business_individually_billed_code;
				}
				
			    public Boolean is_employee;

				public Boolean getIs_employee () {
					return this.is_employee;
				}
				
			    public String fleet_name;

				public String getFleet_name () {
					return this.fleet_name;
				}
				
			    public String fleet_country_name;

				public String getFleet_country_name () {
					return this.fleet_country_name;
				}
				
			    public String fleet_market_name;

				public String getFleet_market_name () {
					return this.fleet_market_name;
				}
				
			    public String current_rate_plan_keys;

				public String getCurrent_rate_plan_keys () {
					return this.current_rate_plan_keys;
				}
				
			    public String current_affiliates;

				public String getCurrent_affiliates () {
					return this.current_affiliates;
				}
				
			    public java.util.Date next_fee_date;

				public java.util.Date getNext_fee_date () {
					return this.next_fee_date;
				}
				
			    public String next_fee_frequency;

				public String getNext_fee_frequency () {
					return this.next_fee_frequency;
				}
				
			    public String next_fee_segment_class;

				public String getNext_fee_segment_class () {
					return this.next_fee_segment_class;
				}
				
			    public Double next_fee_amount;

				public Double getNext_fee_amount () {
					return this.next_fee_amount;
				}
				
			    public String next_fee_currency;

				public String getNext_fee_currency () {
					return this.next_fee_currency;
				}
				
			    public String next_fee_account_name_zc;

				public String getNext_fee_account_name_zc () {
					return this.next_fee_account_name_zc;
				}
				
			    public Double current_credit;

				public Double getCurrent_credit () {
					return this.current_credit;
				}
				
			    public String current_credit_currency;

				public String getCurrent_credit_currency () {
					return this.current_credit_currency;
				}
				
			    public java.util.Date next_credit_expiry_date;

				public java.util.Date getNext_credit_expiry_date () {
					return this.next_credit_expiry_date;
				}
				
			    public Boolean has_active_consumer_waiver;

				public Boolean getHas_active_consumer_waiver () {
					return this.has_active_consumer_waiver;
				}
				
			    public java.util.Date first_consumer_waiver_start_date;

				public java.util.Date getFirst_consumer_waiver_start_date () {
					return this.first_consumer_waiver_start_date;
				}
				
			    public Boolean has_active_business_waiver;

				public Boolean getHas_active_business_waiver () {
					return this.has_active_business_waiver;
				}
				
			    public java.util.Date na_first_gas_fillup_date;

				public java.util.Date getNa_first_gas_fillup_date () {
					return this.na_first_gas_fillup_date;
				}
				
			    public Long na_last_35_day_gas_fillup_count;

				public Long getNa_last_35_day_gas_fillup_count () {
					return this.na_last_35_day_gas_fillup_count;
				}
				
			    public java.util.Date first_res_start_date;

				public java.util.Date getFirst_res_start_date () {
					return this.first_res_start_date;
				}
				
			    public java.util.Date first_res_end_date;

				public java.util.Date getFirst_res_end_date () {
					return this.first_res_end_date;
				}
				
			    public String first_res_type;

				public String getFirst_res_type () {
					return this.first_res_type;
				}
				
			    public String first_res_vehicle_make;

				public String getFirst_res_vehicle_make () {
					return this.first_res_vehicle_make;
				}
				
			    public String first_res_vehicle_model;

				public String getFirst_res_vehicle_model () {
					return this.first_res_vehicle_model;
				}
				
			    public String first_res_vehicle_name;

				public String getFirst_res_vehicle_name () {
					return this.first_res_vehicle_name;
				}
				
			    public String first_res_fleet_name;

				public String getFirst_res_fleet_name () {
					return this.first_res_fleet_name;
				}
				
			    public java.util.Date first_floating_res_end_date;

				public java.util.Date getFirst_floating_res_end_date () {
					return this.first_floating_res_end_date;
				}
				
			    public java.util.Date last_res_start_date;

				public java.util.Date getLast_res_start_date () {
					return this.last_res_start_date;
				}
				
			    public java.util.Date last_res_end_date;

				public java.util.Date getLast_res_end_date () {
					return this.last_res_end_date;
				}
				
			    public String last_res_type;

				public String getLast_res_type () {
					return this.last_res_type;
				}
				
			    public String last_res_vehicle_make;

				public String getLast_res_vehicle_make () {
					return this.last_res_vehicle_make;
				}
				
			    public String last_res_vehicle_model;

				public String getLast_res_vehicle_model () {
					return this.last_res_vehicle_model;
				}
				
			    public String last_res_vehicle_name;

				public String getLast_res_vehicle_name () {
					return this.last_res_vehicle_name;
				}
				
			    public String last_res_vehicle_class;

				public String getLast_res_vehicle_class () {
					return this.last_res_vehicle_class;
				}
				
			    public java.util.Date last_floating_res_end_date;

				public java.util.Date getLast_floating_res_end_date () {
					return this.last_floating_res_end_date;
				}
				
			    public Long last_rt_res_mins_late;

				public Long getLast_rt_res_mins_late () {
					return this.last_rt_res_mins_late;
				}
				
			    public java.util.Date next_res_date;

				public java.util.Date getNext_res_date () {
					return this.next_res_date;
				}
				
			    public String next_res_type;

				public String getNext_res_type () {
					return this.next_res_type;
				}
				
			    public Long last_year_res_count;

				public Long getLast_year_res_count () {
					return this.last_year_res_count;
				}
				
			    public Double last_year_distance_mi;

				public Double getLast_year_distance_mi () {
					return this.last_year_distance_mi;
				}
				
			    public Double last_year_distance_km;

				public Double getLast_year_distance_km () {
					return this.last_year_distance_km;
				}
				
			    public Double last_year_hours;

				public Double getLast_year_hours () {
					return this.last_year_hours;
				}
				
			    public Long last_3_month_res_count;

				public Long getLast_3_month_res_count () {
					return this.last_3_month_res_count;
				}
				
			    public Double last_3_month_res_rev_in_usd;

				public Double getLast_3_month_res_rev_in_usd () {
					return this.last_3_month_res_rev_in_usd;
				}
				
			    public Double last_3_month_distance_mi;

				public Double getLast_3_month_distance_mi () {
					return this.last_3_month_distance_mi;
				}
				
			    public Double last_3_month_distance_km;

				public Double getLast_3_month_distance_km () {
					return this.last_3_month_distance_km;
				}
				
			    public Double last_3_month_hours;

				public Double getLast_3_month_hours () {
					return this.last_3_month_hours;
				}
				
			    public Long total_res_count;

				public Long getTotal_res_count () {
					return this.total_res_count;
				}
				
			    public String reserver_segment;

				public String getReserver_segment () {
					return this.reserver_segment;
				}
				
			    public Integer workday_res_last_6mths;

				public Integer getWorkday_res_last_6mths () {
					return this.workday_res_last_6mths;
				}
				
			    public Boolean reserved_fewer_hours_last_month;

				public Boolean getReserved_fewer_hours_last_month () {
					return this.reserved_fewer_hours_last_month;
				}
				
			    public java.util.Date last_nps_response_date;

				public java.util.Date getLast_nps_response_date () {
					return this.last_nps_response_date;
				}
				
			    public Short last_nps_score;

				public Short getLast_nps_score () {
					return this.last_nps_score;
				}
				
			    public java.util.Date last_incomplete_app_start_date;

				public java.util.Date getLast_incomplete_app_start_date () {
					return this.last_incomplete_app_start_date;
				}
				
			    public String last_incomplete_app_segment;

				public String getLast_incomplete_app_segment () {
					return this.last_incomplete_app_segment;
				}
				
			    public String last_incomplete_app_affiliate;

				public String getLast_incomplete_app_affiliate () {
					return this.last_incomplete_app_affiliate;
				}
				
			    public String last_incomplete_app_country;

				public String getLast_incomplete_app_country () {
					return this.last_incomplete_app_country;
				}
				
			    public String last_incomplete_app_last_step;

				public String getLast_incomplete_app_last_step () {
					return this.last_incomplete_app_last_step;
				}
				
			    public String last_active_corp_app_date;

				public String getLast_active_corp_app_date () {
					return this.last_active_corp_app_date;
				}
				
			    public String last_active_corp_app_country;

				public String getLast_active_corp_app_country () {
					return this.last_active_corp_app_country;
				}
				
			    public java.util.Date last_z4b_ssu_view_date;

				public java.util.Date getLast_z4b_ssu_view_date () {
					return this.last_z4b_ssu_view_date;
				}
				
			    public String last_z4b_ssu_last_step;

				public String getLast_z4b_ssu_last_step () {
					return this.last_z4b_ssu_last_step;
				}
				
			    public Boolean mdb_has_nonservice_account;

				public Boolean getMdb_has_nonservice_account () {
					return this.mdb_has_nonservice_account;
				}
				
			    public String mdb_primary_plan_category;

				public String getMdb_primary_plan_category () {
					return this.mdb_primary_plan_category;
				}
				
			    public String mdb_primary_segment_class;

				public String getMdb_primary_segment_class () {
					return this.mdb_primary_segment_class;
				}
				
			    public String mdb_metro_name;

				public String getMdb_metro_name () {
					return this.mdb_metro_name;
				}
				
			    public String mdb_tenure_category;

				public String getMdb_tenure_category () {
					return this.mdb_tenure_category;
				}
				
			    public String mdb_rfm_profile;

				public String getMdb_rfm_profile () {
					return this.mdb_rfm_profile;
				}
				
			    public String mdb_location_segment;

				public String getMdb_location_segment () {
					return this.mdb_location_segment;
				}
				
			    public Boolean sv_opened_in_last_90_days;

				public Boolean getSv_opened_in_last_90_days () {
					return this.sv_opened_in_last_90_days;
				}
				
			    public Boolean sv_clicked_in_last_90_days;

				public Boolean getSv_clicked_in_last_90_days () {
					return this.sv_clicked_in_last_90_days;
				}
				
			    public String data_split;

				public String getData_split () {
					return this.data_split;
				}
				
			    public String derived_country;

				public String getDerived_country () {
					return this.derived_country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.subscriber_key = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id_zc = null;
           				} else {
           			    	this.member_id_zc = dis.readLong();
           				}
					
					this.first_name_zc = readString(dis);
					
					this.last_name_zc = readString(dis);
					
					this.user_name_zc = readString(dis);
					
					this.email_address_zc = readString(dis);
					
					this.email_address_domain = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_emailable = null;
           				} else {
           			    	this.is_emailable = dis.readBoolean();
           				}
					
					this.birth_month_year = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_birthday_this_week = null;
           				} else {
           			    	this.has_birthday_this_week = dis.readBoolean();
           				}
					
					this.occupation = readString(dis);
					
					this.locale = readString(dis);
					
					this.preferred_address_zone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_address_in_uk_zipzone = null;
           				} else {
           			    	this.has_address_in_uk_zipzone = dis.readBoolean();
           				}
					
					this.first_join_date = readDate(dis);
					
					this.last_join_date = readDate(dis);
					
					this.last_left_date = readDate(dis);
					
					this.last_left_reason = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_left_due_to_termination = null;
           				} else {
           			    	this.last_left_due_to_termination = dis.readBoolean();
           				}
					
					this.current_status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_zipcard = null;
           				} else {
           			    	this.has_active_zipcard = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_approved_member = null;
           				} else {
           			    	this.is_current_approved_member = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_admin = null;
           				} else {
           			    	this.is_current_admin = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_prospect = null;
           				} else {
           			    	this.is_prospect = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_consumer = null;
           				} else {
           			    	this.has_segment_consumer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_collegiate = null;
           				} else {
           			    	this.has_segment_collegiate = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_zipvan = null;
           				} else {
           			    	this.has_segment_zipvan = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business = null;
           				} else {
           			    	this.has_segment_business = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_db = null;
           				} else {
           			    	this.has_segment_business_db = dis.readBoolean();
           				}
					
					this.business_direct_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_ib = null;
           				} else {
           			    	this.has_segment_business_ib = dis.readBoolean();
           				}
					
					this.business_individually_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_employee = null;
           				} else {
           			    	this.is_employee = dis.readBoolean();
           				}
					
					this.fleet_name = readString(dis);
					
					this.fleet_country_name = readString(dis);
					
					this.fleet_market_name = readString(dis);
					
					this.current_rate_plan_keys = readString(dis);
					
					this.current_affiliates = readString(dis);
					
					this.next_fee_date = readDate(dis);
					
					this.next_fee_frequency = readString(dis);
					
					this.next_fee_segment_class = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_fee_amount = null;
           				} else {
           			    	this.next_fee_amount = dis.readDouble();
           				}
					
					this.next_fee_currency = readString(dis);
					
					this.next_fee_account_name_zc = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.current_credit = null;
           				} else {
           			    	this.current_credit = dis.readDouble();
           				}
					
					this.current_credit_currency = readString(dis);
					
					this.next_credit_expiry_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_consumer_waiver = null;
           				} else {
           			    	this.has_active_consumer_waiver = dis.readBoolean();
           				}
					
					this.first_consumer_waiver_start_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_business_waiver = null;
           				} else {
           			    	this.has_active_business_waiver = dis.readBoolean();
           				}
					
					this.na_first_gas_fillup_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.na_last_35_day_gas_fillup_count = null;
           				} else {
           			    	this.na_last_35_day_gas_fillup_count = dis.readLong();
           				}
					
					this.first_res_start_date = readDate(dis);
					
					this.first_res_end_date = readDate(dis);
					
					this.first_res_type = readString(dis);
					
					this.first_res_vehicle_make = readString(dis);
					
					this.first_res_vehicle_model = readString(dis);
					
					this.first_res_vehicle_name = readString(dis);
					
					this.first_res_fleet_name = readString(dis);
					
					this.first_floating_res_end_date = readDate(dis);
					
					this.last_res_start_date = readDate(dis);
					
					this.last_res_end_date = readDate(dis);
					
					this.last_res_type = readString(dis);
					
					this.last_res_vehicle_make = readString(dis);
					
					this.last_res_vehicle_model = readString(dis);
					
					this.last_res_vehicle_name = readString(dis);
					
					this.last_res_vehicle_class = readString(dis);
					
					this.last_floating_res_end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_rt_res_mins_late = null;
           				} else {
           			    	this.last_rt_res_mins_late = dis.readLong();
           				}
					
					this.next_res_date = readDate(dis);
					
					this.next_res_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_res_count = null;
           				} else {
           			    	this.last_year_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_mi = null;
           				} else {
           			    	this.last_year_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_km = null;
           				} else {
           			    	this.last_year_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_hours = null;
           				} else {
           			    	this.last_year_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_count = null;
           				} else {
           			    	this.last_3_month_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_rev_in_usd = null;
           				} else {
           			    	this.last_3_month_res_rev_in_usd = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_mi = null;
           				} else {
           			    	this.last_3_month_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_km = null;
           				} else {
           			    	this.last_3_month_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_hours = null;
           				} else {
           			    	this.last_3_month_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_res_count = null;
           				} else {
           			    	this.total_res_count = dis.readLong();
           				}
					
					this.reserver_segment = readString(dis);
					
						this.workday_res_last_6mths = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reserved_fewer_hours_last_month = null;
           				} else {
           			    	this.reserved_fewer_hours_last_month = dis.readBoolean();
           				}
					
					this.last_nps_response_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_nps_score = null;
           				} else {
           			    	this.last_nps_score = dis.readShort();
           				}
					
					this.last_incomplete_app_start_date = readDate(dis);
					
					this.last_incomplete_app_segment = readString(dis);
					
					this.last_incomplete_app_affiliate = readString(dis);
					
					this.last_incomplete_app_country = readString(dis);
					
					this.last_incomplete_app_last_step = readString(dis);
					
					this.last_active_corp_app_date = readString(dis);
					
					this.last_active_corp_app_country = readString(dis);
					
					this.last_z4b_ssu_view_date = readDate(dis);
					
					this.last_z4b_ssu_last_step = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mdb_has_nonservice_account = null;
           				} else {
           			    	this.mdb_has_nonservice_account = dis.readBoolean();
           				}
					
					this.mdb_primary_plan_category = readString(dis);
					
					this.mdb_primary_segment_class = readString(dis);
					
					this.mdb_metro_name = readString(dis);
					
					this.mdb_tenure_category = readString(dis);
					
					this.mdb_rfm_profile = readString(dis);
					
					this.mdb_location_segment = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_opened_in_last_90_days = null;
           				} else {
           			    	this.sv_opened_in_last_90_days = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_clicked_in_last_90_days = null;
           				} else {
           			    	this.sv_clicked_in_last_90_days = dis.readBoolean();
           				}
					
					this.data_split = readString(dis);
					
					this.derived_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subscriber_key,dos);
					
					// Long
				
						if(this.member_id_zc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id_zc);
		            	}
					
					// String
				
						writeString(this.first_name_zc,dos);
					
					// String
				
						writeString(this.last_name_zc,dos);
					
					// String
				
						writeString(this.user_name_zc,dos);
					
					// String
				
						writeString(this.email_address_zc,dos);
					
					// String
				
						writeString(this.email_address_domain,dos);
					
					// Boolean
				
						if(this.is_emailable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_emailable);
		            	}
					
					// java.util.Date
				
						writeDate(this.birth_month_year,dos);
					
					// Boolean
				
						if(this.has_birthday_this_week == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_birthday_this_week);
		            	}
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.locale,dos);
					
					// String
				
						writeString(this.preferred_address_zone,dos);
					
					// Boolean
				
						if(this.has_address_in_uk_zipzone == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_address_in_uk_zipzone);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_left_date,dos);
					
					// String
				
						writeString(this.last_left_reason,dos);
					
					// Boolean
				
						if(this.last_left_due_to_termination == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.last_left_due_to_termination);
		            	}
					
					// String
				
						writeString(this.current_status,dos);
					
					// Boolean
				
						if(this.has_active_zipcard == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_zipcard);
		            	}
					
					// Boolean
				
						if(this.is_current_approved_member == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_approved_member);
		            	}
					
					// Boolean
				
						if(this.is_current_admin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_admin);
		            	}
					
					// Boolean
				
						if(this.is_prospect == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_prospect);
		            	}
					
					// Boolean
				
						if(this.has_segment_consumer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_consumer);
		            	}
					
					// Boolean
				
						if(this.has_segment_collegiate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_collegiate);
		            	}
					
					// Boolean
				
						if(this.has_segment_zipvan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_zipvan);
		            	}
					
					// Boolean
				
						if(this.has_segment_business == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business);
		            	}
					
					// Boolean
				
						if(this.has_segment_business_db == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_db);
		            	}
					
					// String
				
						writeString(this.business_direct_billed_code,dos);
					
					// Boolean
				
						if(this.has_segment_business_ib == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_ib);
		            	}
					
					// String
				
						writeString(this.business_individually_billed_code,dos);
					
					// Boolean
				
						if(this.is_employee == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_employee);
		            	}
					
					// String
				
						writeString(this.fleet_name,dos);
					
					// String
				
						writeString(this.fleet_country_name,dos);
					
					// String
				
						writeString(this.fleet_market_name,dos);
					
					// String
				
						writeString(this.current_rate_plan_keys,dos);
					
					// String
				
						writeString(this.current_affiliates,dos);
					
					// java.util.Date
				
						writeDate(this.next_fee_date,dos);
					
					// String
				
						writeString(this.next_fee_frequency,dos);
					
					// String
				
						writeString(this.next_fee_segment_class,dos);
					
					// Double
				
						if(this.next_fee_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.next_fee_amount);
		            	}
					
					// String
				
						writeString(this.next_fee_currency,dos);
					
					// String
				
						writeString(this.next_fee_account_name_zc,dos);
					
					// Double
				
						if(this.current_credit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.current_credit);
		            	}
					
					// String
				
						writeString(this.current_credit_currency,dos);
					
					// java.util.Date
				
						writeDate(this.next_credit_expiry_date,dos);
					
					// Boolean
				
						if(this.has_active_consumer_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_consumer_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_consumer_waiver_start_date,dos);
					
					// Boolean
				
						if(this.has_active_business_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_business_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.na_first_gas_fillup_date,dos);
					
					// Long
				
						if(this.na_last_35_day_gas_fillup_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.na_last_35_day_gas_fillup_count);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.first_res_end_date,dos);
					
					// String
				
						writeString(this.first_res_type,dos);
					
					// String
				
						writeString(this.first_res_vehicle_make,dos);
					
					// String
				
						writeString(this.first_res_vehicle_model,dos);
					
					// String
				
						writeString(this.first_res_vehicle_name,dos);
					
					// String
				
						writeString(this.first_res_fleet_name,dos);
					
					// java.util.Date
				
						writeDate(this.first_floating_res_end_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_end_date,dos);
					
					// String
				
						writeString(this.last_res_type,dos);
					
					// String
				
						writeString(this.last_res_vehicle_make,dos);
					
					// String
				
						writeString(this.last_res_vehicle_model,dos);
					
					// String
				
						writeString(this.last_res_vehicle_name,dos);
					
					// String
				
						writeString(this.last_res_vehicle_class,dos);
					
					// java.util.Date
				
						writeDate(this.last_floating_res_end_date,dos);
					
					// Long
				
						if(this.last_rt_res_mins_late == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_rt_res_mins_late);
		            	}
					
					// java.util.Date
				
						writeDate(this.next_res_date,dos);
					
					// String
				
						writeString(this.next_res_type,dos);
					
					// Long
				
						if(this.last_year_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_year_res_count);
		            	}
					
					// Double
				
						if(this.last_year_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_mi);
		            	}
					
					// Double
				
						if(this.last_year_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_km);
		            	}
					
					// Double
				
						if(this.last_year_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_hours);
		            	}
					
					// Long
				
						if(this.last_3_month_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_3_month_res_count);
		            	}
					
					// Double
				
						if(this.last_3_month_res_rev_in_usd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_res_rev_in_usd);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_mi);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_km);
		            	}
					
					// Double
				
						if(this.last_3_month_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_hours);
		            	}
					
					// Long
				
						if(this.total_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.total_res_count);
		            	}
					
					// String
				
						writeString(this.reserver_segment,dos);
					
					// Integer
				
						writeInteger(this.workday_res_last_6mths,dos);
					
					// Boolean
				
						if(this.reserved_fewer_hours_last_month == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.reserved_fewer_hours_last_month);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_nps_response_date,dos);
					
					// Short
				
						if(this.last_nps_score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.last_nps_score);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_incomplete_app_start_date,dos);
					
					// String
				
						writeString(this.last_incomplete_app_segment,dos);
					
					// String
				
						writeString(this.last_incomplete_app_affiliate,dos);
					
					// String
				
						writeString(this.last_incomplete_app_country,dos);
					
					// String
				
						writeString(this.last_incomplete_app_last_step,dos);
					
					// String
				
						writeString(this.last_active_corp_app_date,dos);
					
					// String
				
						writeString(this.last_active_corp_app_country,dos);
					
					// java.util.Date
				
						writeDate(this.last_z4b_ssu_view_date,dos);
					
					// String
				
						writeString(this.last_z4b_ssu_last_step,dos);
					
					// Boolean
				
						if(this.mdb_has_nonservice_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mdb_has_nonservice_account);
		            	}
					
					// String
				
						writeString(this.mdb_primary_plan_category,dos);
					
					// String
				
						writeString(this.mdb_primary_segment_class,dos);
					
					// String
				
						writeString(this.mdb_metro_name,dos);
					
					// String
				
						writeString(this.mdb_tenure_category,dos);
					
					// String
				
						writeString(this.mdb_rfm_profile,dos);
					
					// String
				
						writeString(this.mdb_location_segment,dos);
					
					// Boolean
				
						if(this.sv_opened_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_opened_in_last_90_days);
		            	}
					
					// Boolean
				
						if(this.sv_clicked_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_clicked_in_last_90_days);
		            	}
					
					// String
				
						writeString(this.data_split,dos);
					
					// String
				
						writeString(this.derived_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subscriber_key="+subscriber_key);
		sb.append(",member_id_zc="+String.valueOf(member_id_zc));
		sb.append(",first_name_zc="+first_name_zc);
		sb.append(",last_name_zc="+last_name_zc);
		sb.append(",user_name_zc="+user_name_zc);
		sb.append(",email_address_zc="+email_address_zc);
		sb.append(",email_address_domain="+email_address_domain);
		sb.append(",is_emailable="+String.valueOf(is_emailable));
		sb.append(",birth_month_year="+String.valueOf(birth_month_year));
		sb.append(",has_birthday_this_week="+String.valueOf(has_birthday_this_week));
		sb.append(",occupation="+occupation);
		sb.append(",locale="+locale);
		sb.append(",preferred_address_zone="+preferred_address_zone);
		sb.append(",has_address_in_uk_zipzone="+String.valueOf(has_address_in_uk_zipzone));
		sb.append(",first_join_date="+String.valueOf(first_join_date));
		sb.append(",last_join_date="+String.valueOf(last_join_date));
		sb.append(",last_left_date="+String.valueOf(last_left_date));
		sb.append(",last_left_reason="+last_left_reason);
		sb.append(",last_left_due_to_termination="+String.valueOf(last_left_due_to_termination));
		sb.append(",current_status="+current_status);
		sb.append(",has_active_zipcard="+String.valueOf(has_active_zipcard));
		sb.append(",is_current_approved_member="+String.valueOf(is_current_approved_member));
		sb.append(",is_current_admin="+String.valueOf(is_current_admin));
		sb.append(",is_prospect="+String.valueOf(is_prospect));
		sb.append(",has_segment_consumer="+String.valueOf(has_segment_consumer));
		sb.append(",has_segment_collegiate="+String.valueOf(has_segment_collegiate));
		sb.append(",has_segment_zipvan="+String.valueOf(has_segment_zipvan));
		sb.append(",has_segment_business="+String.valueOf(has_segment_business));
		sb.append(",has_segment_business_db="+String.valueOf(has_segment_business_db));
		sb.append(",business_direct_billed_code="+business_direct_billed_code);
		sb.append(",has_segment_business_ib="+String.valueOf(has_segment_business_ib));
		sb.append(",business_individually_billed_code="+business_individually_billed_code);
		sb.append(",is_employee="+String.valueOf(is_employee));
		sb.append(",fleet_name="+fleet_name);
		sb.append(",fleet_country_name="+fleet_country_name);
		sb.append(",fleet_market_name="+fleet_market_name);
		sb.append(",current_rate_plan_keys="+current_rate_plan_keys);
		sb.append(",current_affiliates="+current_affiliates);
		sb.append(",next_fee_date="+String.valueOf(next_fee_date));
		sb.append(",next_fee_frequency="+next_fee_frequency);
		sb.append(",next_fee_segment_class="+next_fee_segment_class);
		sb.append(",next_fee_amount="+String.valueOf(next_fee_amount));
		sb.append(",next_fee_currency="+next_fee_currency);
		sb.append(",next_fee_account_name_zc="+next_fee_account_name_zc);
		sb.append(",current_credit="+String.valueOf(current_credit));
		sb.append(",current_credit_currency="+current_credit_currency);
		sb.append(",next_credit_expiry_date="+String.valueOf(next_credit_expiry_date));
		sb.append(",has_active_consumer_waiver="+String.valueOf(has_active_consumer_waiver));
		sb.append(",first_consumer_waiver_start_date="+String.valueOf(first_consumer_waiver_start_date));
		sb.append(",has_active_business_waiver="+String.valueOf(has_active_business_waiver));
		sb.append(",na_first_gas_fillup_date="+String.valueOf(na_first_gas_fillup_date));
		sb.append(",na_last_35_day_gas_fillup_count="+String.valueOf(na_last_35_day_gas_fillup_count));
		sb.append(",first_res_start_date="+String.valueOf(first_res_start_date));
		sb.append(",first_res_end_date="+String.valueOf(first_res_end_date));
		sb.append(",first_res_type="+first_res_type);
		sb.append(",first_res_vehicle_make="+first_res_vehicle_make);
		sb.append(",first_res_vehicle_model="+first_res_vehicle_model);
		sb.append(",first_res_vehicle_name="+first_res_vehicle_name);
		sb.append(",first_res_fleet_name="+first_res_fleet_name);
		sb.append(",first_floating_res_end_date="+String.valueOf(first_floating_res_end_date));
		sb.append(",last_res_start_date="+String.valueOf(last_res_start_date));
		sb.append(",last_res_end_date="+String.valueOf(last_res_end_date));
		sb.append(",last_res_type="+last_res_type);
		sb.append(",last_res_vehicle_make="+last_res_vehicle_make);
		sb.append(",last_res_vehicle_model="+last_res_vehicle_model);
		sb.append(",last_res_vehicle_name="+last_res_vehicle_name);
		sb.append(",last_res_vehicle_class="+last_res_vehicle_class);
		sb.append(",last_floating_res_end_date="+String.valueOf(last_floating_res_end_date));
		sb.append(",last_rt_res_mins_late="+String.valueOf(last_rt_res_mins_late));
		sb.append(",next_res_date="+String.valueOf(next_res_date));
		sb.append(",next_res_type="+next_res_type);
		sb.append(",last_year_res_count="+String.valueOf(last_year_res_count));
		sb.append(",last_year_distance_mi="+String.valueOf(last_year_distance_mi));
		sb.append(",last_year_distance_km="+String.valueOf(last_year_distance_km));
		sb.append(",last_year_hours="+String.valueOf(last_year_hours));
		sb.append(",last_3_month_res_count="+String.valueOf(last_3_month_res_count));
		sb.append(",last_3_month_res_rev_in_usd="+String.valueOf(last_3_month_res_rev_in_usd));
		sb.append(",last_3_month_distance_mi="+String.valueOf(last_3_month_distance_mi));
		sb.append(",last_3_month_distance_km="+String.valueOf(last_3_month_distance_km));
		sb.append(",last_3_month_hours="+String.valueOf(last_3_month_hours));
		sb.append(",total_res_count="+String.valueOf(total_res_count));
		sb.append(",reserver_segment="+reserver_segment);
		sb.append(",workday_res_last_6mths="+String.valueOf(workday_res_last_6mths));
		sb.append(",reserved_fewer_hours_last_month="+String.valueOf(reserved_fewer_hours_last_month));
		sb.append(",last_nps_response_date="+String.valueOf(last_nps_response_date));
		sb.append(",last_nps_score="+String.valueOf(last_nps_score));
		sb.append(",last_incomplete_app_start_date="+String.valueOf(last_incomplete_app_start_date));
		sb.append(",last_incomplete_app_segment="+last_incomplete_app_segment);
		sb.append(",last_incomplete_app_affiliate="+last_incomplete_app_affiliate);
		sb.append(",last_incomplete_app_country="+last_incomplete_app_country);
		sb.append(",last_incomplete_app_last_step="+last_incomplete_app_last_step);
		sb.append(",last_active_corp_app_date="+last_active_corp_app_date);
		sb.append(",last_active_corp_app_country="+last_active_corp_app_country);
		sb.append(",last_z4b_ssu_view_date="+String.valueOf(last_z4b_ssu_view_date));
		sb.append(",last_z4b_ssu_last_step="+last_z4b_ssu_last_step);
		sb.append(",mdb_has_nonservice_account="+String.valueOf(mdb_has_nonservice_account));
		sb.append(",mdb_primary_plan_category="+mdb_primary_plan_category);
		sb.append(",mdb_primary_segment_class="+mdb_primary_segment_class);
		sb.append(",mdb_metro_name="+mdb_metro_name);
		sb.append(",mdb_tenure_category="+mdb_tenure_category);
		sb.append(",mdb_rfm_profile="+mdb_rfm_profile);
		sb.append(",mdb_location_segment="+mdb_location_segment);
		sb.append(",sv_opened_in_last_90_days="+String.valueOf(sv_opened_in_last_90_days));
		sb.append(",sv_clicked_in_last_90_days="+String.valueOf(sv_clicked_in_last_90_days));
		sb.append(",data_split="+data_split);
		sb.append(",derived_country="+derived_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public String subscriber_key;

				public String getSubscriber_key () {
					return this.subscriber_key;
				}
				
			    public Long member_id_zc;

				public Long getMember_id_zc () {
					return this.member_id_zc;
				}
				
			    public String first_name_zc;

				public String getFirst_name_zc () {
					return this.first_name_zc;
				}
				
			    public String last_name_zc;

				public String getLast_name_zc () {
					return this.last_name_zc;
				}
				
			    public String user_name_zc;

				public String getUser_name_zc () {
					return this.user_name_zc;
				}
				
			    public String email_address_zc;

				public String getEmail_address_zc () {
					return this.email_address_zc;
				}
				
			    public String email_address_domain;

				public String getEmail_address_domain () {
					return this.email_address_domain;
				}
				
			    public Boolean is_emailable;

				public Boolean getIs_emailable () {
					return this.is_emailable;
				}
				
			    public java.util.Date birth_month_year;

				public java.util.Date getBirth_month_year () {
					return this.birth_month_year;
				}
				
			    public Boolean has_birthday_this_week;

				public Boolean getHas_birthday_this_week () {
					return this.has_birthday_this_week;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String locale;

				public String getLocale () {
					return this.locale;
				}
				
			    public String preferred_address_zone;

				public String getPreferred_address_zone () {
					return this.preferred_address_zone;
				}
				
			    public Boolean has_address_in_uk_zipzone;

				public Boolean getHas_address_in_uk_zipzone () {
					return this.has_address_in_uk_zipzone;
				}
				
			    public java.util.Date first_join_date;

				public java.util.Date getFirst_join_date () {
					return this.first_join_date;
				}
				
			    public java.util.Date last_join_date;

				public java.util.Date getLast_join_date () {
					return this.last_join_date;
				}
				
			    public java.util.Date last_left_date;

				public java.util.Date getLast_left_date () {
					return this.last_left_date;
				}
				
			    public String last_left_reason;

				public String getLast_left_reason () {
					return this.last_left_reason;
				}
				
			    public Boolean last_left_due_to_termination;

				public Boolean getLast_left_due_to_termination () {
					return this.last_left_due_to_termination;
				}
				
			    public String current_status;

				public String getCurrent_status () {
					return this.current_status;
				}
				
			    public Boolean has_active_zipcard;

				public Boolean getHas_active_zipcard () {
					return this.has_active_zipcard;
				}
				
			    public Boolean is_current_approved_member;

				public Boolean getIs_current_approved_member () {
					return this.is_current_approved_member;
				}
				
			    public Boolean is_current_admin;

				public Boolean getIs_current_admin () {
					return this.is_current_admin;
				}
				
			    public Boolean is_prospect;

				public Boolean getIs_prospect () {
					return this.is_prospect;
				}
				
			    public Boolean has_segment_consumer;

				public Boolean getHas_segment_consumer () {
					return this.has_segment_consumer;
				}
				
			    public Boolean has_segment_collegiate;

				public Boolean getHas_segment_collegiate () {
					return this.has_segment_collegiate;
				}
				
			    public Boolean has_segment_zipvan;

				public Boolean getHas_segment_zipvan () {
					return this.has_segment_zipvan;
				}
				
			    public Boolean has_segment_business;

				public Boolean getHas_segment_business () {
					return this.has_segment_business;
				}
				
			    public Boolean has_segment_business_db;

				public Boolean getHas_segment_business_db () {
					return this.has_segment_business_db;
				}
				
			    public String business_direct_billed_code;

				public String getBusiness_direct_billed_code () {
					return this.business_direct_billed_code;
				}
				
			    public Boolean has_segment_business_ib;

				public Boolean getHas_segment_business_ib () {
					return this.has_segment_business_ib;
				}
				
			    public String business_individually_billed_code;

				public String getBusiness_individually_billed_code () {
					return this.business_individually_billed_code;
				}
				
			    public Boolean is_employee;

				public Boolean getIs_employee () {
					return this.is_employee;
				}
				
			    public String fleet_name;

				public String getFleet_name () {
					return this.fleet_name;
				}
				
			    public String fleet_country_name;

				public String getFleet_country_name () {
					return this.fleet_country_name;
				}
				
			    public String fleet_market_name;

				public String getFleet_market_name () {
					return this.fleet_market_name;
				}
				
			    public String current_rate_plan_keys;

				public String getCurrent_rate_plan_keys () {
					return this.current_rate_plan_keys;
				}
				
			    public String current_affiliates;

				public String getCurrent_affiliates () {
					return this.current_affiliates;
				}
				
			    public java.util.Date next_fee_date;

				public java.util.Date getNext_fee_date () {
					return this.next_fee_date;
				}
				
			    public String next_fee_frequency;

				public String getNext_fee_frequency () {
					return this.next_fee_frequency;
				}
				
			    public String next_fee_segment_class;

				public String getNext_fee_segment_class () {
					return this.next_fee_segment_class;
				}
				
			    public Double next_fee_amount;

				public Double getNext_fee_amount () {
					return this.next_fee_amount;
				}
				
			    public String next_fee_currency;

				public String getNext_fee_currency () {
					return this.next_fee_currency;
				}
				
			    public String next_fee_account_name_zc;

				public String getNext_fee_account_name_zc () {
					return this.next_fee_account_name_zc;
				}
				
			    public Double current_credit;

				public Double getCurrent_credit () {
					return this.current_credit;
				}
				
			    public String current_credit_currency;

				public String getCurrent_credit_currency () {
					return this.current_credit_currency;
				}
				
			    public java.util.Date next_credit_expiry_date;

				public java.util.Date getNext_credit_expiry_date () {
					return this.next_credit_expiry_date;
				}
				
			    public Boolean has_active_consumer_waiver;

				public Boolean getHas_active_consumer_waiver () {
					return this.has_active_consumer_waiver;
				}
				
			    public java.util.Date first_consumer_waiver_start_date;

				public java.util.Date getFirst_consumer_waiver_start_date () {
					return this.first_consumer_waiver_start_date;
				}
				
			    public Boolean has_active_business_waiver;

				public Boolean getHas_active_business_waiver () {
					return this.has_active_business_waiver;
				}
				
			    public java.util.Date na_first_gas_fillup_date;

				public java.util.Date getNa_first_gas_fillup_date () {
					return this.na_first_gas_fillup_date;
				}
				
			    public Long na_last_35_day_gas_fillup_count;

				public Long getNa_last_35_day_gas_fillup_count () {
					return this.na_last_35_day_gas_fillup_count;
				}
				
			    public java.util.Date first_res_start_date;

				public java.util.Date getFirst_res_start_date () {
					return this.first_res_start_date;
				}
				
			    public java.util.Date first_res_end_date;

				public java.util.Date getFirst_res_end_date () {
					return this.first_res_end_date;
				}
				
			    public String first_res_type;

				public String getFirst_res_type () {
					return this.first_res_type;
				}
				
			    public String first_res_vehicle_make;

				public String getFirst_res_vehicle_make () {
					return this.first_res_vehicle_make;
				}
				
			    public String first_res_vehicle_model;

				public String getFirst_res_vehicle_model () {
					return this.first_res_vehicle_model;
				}
				
			    public String first_res_vehicle_name;

				public String getFirst_res_vehicle_name () {
					return this.first_res_vehicle_name;
				}
				
			    public String first_res_fleet_name;

				public String getFirst_res_fleet_name () {
					return this.first_res_fleet_name;
				}
				
			    public java.util.Date first_floating_res_end_date;

				public java.util.Date getFirst_floating_res_end_date () {
					return this.first_floating_res_end_date;
				}
				
			    public java.util.Date last_res_start_date;

				public java.util.Date getLast_res_start_date () {
					return this.last_res_start_date;
				}
				
			    public java.util.Date last_res_end_date;

				public java.util.Date getLast_res_end_date () {
					return this.last_res_end_date;
				}
				
			    public String last_res_type;

				public String getLast_res_type () {
					return this.last_res_type;
				}
				
			    public String last_res_vehicle_make;

				public String getLast_res_vehicle_make () {
					return this.last_res_vehicle_make;
				}
				
			    public String last_res_vehicle_model;

				public String getLast_res_vehicle_model () {
					return this.last_res_vehicle_model;
				}
				
			    public String last_res_vehicle_name;

				public String getLast_res_vehicle_name () {
					return this.last_res_vehicle_name;
				}
				
			    public String last_res_vehicle_class;

				public String getLast_res_vehicle_class () {
					return this.last_res_vehicle_class;
				}
				
			    public java.util.Date last_floating_res_end_date;

				public java.util.Date getLast_floating_res_end_date () {
					return this.last_floating_res_end_date;
				}
				
			    public Long last_rt_res_mins_late;

				public Long getLast_rt_res_mins_late () {
					return this.last_rt_res_mins_late;
				}
				
			    public java.util.Date next_res_date;

				public java.util.Date getNext_res_date () {
					return this.next_res_date;
				}
				
			    public String next_res_type;

				public String getNext_res_type () {
					return this.next_res_type;
				}
				
			    public Long last_year_res_count;

				public Long getLast_year_res_count () {
					return this.last_year_res_count;
				}
				
			    public Double last_year_distance_mi;

				public Double getLast_year_distance_mi () {
					return this.last_year_distance_mi;
				}
				
			    public Double last_year_distance_km;

				public Double getLast_year_distance_km () {
					return this.last_year_distance_km;
				}
				
			    public Double last_year_hours;

				public Double getLast_year_hours () {
					return this.last_year_hours;
				}
				
			    public Long last_3_month_res_count;

				public Long getLast_3_month_res_count () {
					return this.last_3_month_res_count;
				}
				
			    public Double last_3_month_res_rev_in_usd;

				public Double getLast_3_month_res_rev_in_usd () {
					return this.last_3_month_res_rev_in_usd;
				}
				
			    public Double last_3_month_distance_mi;

				public Double getLast_3_month_distance_mi () {
					return this.last_3_month_distance_mi;
				}
				
			    public Double last_3_month_distance_km;

				public Double getLast_3_month_distance_km () {
					return this.last_3_month_distance_km;
				}
				
			    public Double last_3_month_hours;

				public Double getLast_3_month_hours () {
					return this.last_3_month_hours;
				}
				
			    public Long total_res_count;

				public Long getTotal_res_count () {
					return this.total_res_count;
				}
				
			    public String reserver_segment;

				public String getReserver_segment () {
					return this.reserver_segment;
				}
				
			    public Integer workday_res_last_6mths;

				public Integer getWorkday_res_last_6mths () {
					return this.workday_res_last_6mths;
				}
				
			    public Boolean reserved_fewer_hours_last_month;

				public Boolean getReserved_fewer_hours_last_month () {
					return this.reserved_fewer_hours_last_month;
				}
				
			    public java.util.Date last_nps_response_date;

				public java.util.Date getLast_nps_response_date () {
					return this.last_nps_response_date;
				}
				
			    public Short last_nps_score;

				public Short getLast_nps_score () {
					return this.last_nps_score;
				}
				
			    public java.util.Date last_incomplete_app_start_date;

				public java.util.Date getLast_incomplete_app_start_date () {
					return this.last_incomplete_app_start_date;
				}
				
			    public String last_incomplete_app_segment;

				public String getLast_incomplete_app_segment () {
					return this.last_incomplete_app_segment;
				}
				
			    public String last_incomplete_app_affiliate;

				public String getLast_incomplete_app_affiliate () {
					return this.last_incomplete_app_affiliate;
				}
				
			    public String last_incomplete_app_country;

				public String getLast_incomplete_app_country () {
					return this.last_incomplete_app_country;
				}
				
			    public String last_incomplete_app_last_step;

				public String getLast_incomplete_app_last_step () {
					return this.last_incomplete_app_last_step;
				}
				
			    public String last_active_corp_app_date;

				public String getLast_active_corp_app_date () {
					return this.last_active_corp_app_date;
				}
				
			    public String last_active_corp_app_country;

				public String getLast_active_corp_app_country () {
					return this.last_active_corp_app_country;
				}
				
			    public java.util.Date last_z4b_ssu_view_date;

				public java.util.Date getLast_z4b_ssu_view_date () {
					return this.last_z4b_ssu_view_date;
				}
				
			    public String last_z4b_ssu_last_step;

				public String getLast_z4b_ssu_last_step () {
					return this.last_z4b_ssu_last_step;
				}
				
			    public Boolean mdb_has_nonservice_account;

				public Boolean getMdb_has_nonservice_account () {
					return this.mdb_has_nonservice_account;
				}
				
			    public String mdb_primary_plan_category;

				public String getMdb_primary_plan_category () {
					return this.mdb_primary_plan_category;
				}
				
			    public String mdb_primary_segment_class;

				public String getMdb_primary_segment_class () {
					return this.mdb_primary_segment_class;
				}
				
			    public String mdb_metro_name;

				public String getMdb_metro_name () {
					return this.mdb_metro_name;
				}
				
			    public String mdb_tenure_category;

				public String getMdb_tenure_category () {
					return this.mdb_tenure_category;
				}
				
			    public String mdb_rfm_profile;

				public String getMdb_rfm_profile () {
					return this.mdb_rfm_profile;
				}
				
			    public String mdb_location_segment;

				public String getMdb_location_segment () {
					return this.mdb_location_segment;
				}
				
			    public Boolean sv_opened_in_last_90_days;

				public Boolean getSv_opened_in_last_90_days () {
					return this.sv_opened_in_last_90_days;
				}
				
			    public Boolean sv_clicked_in_last_90_days;

				public Boolean getSv_clicked_in_last_90_days () {
					return this.sv_clicked_in_last_90_days;
				}
				
			    public String data_split;

				public String getData_split () {
					return this.data_split;
				}
				
			    public String derived_country;

				public String getDerived_country () {
					return this.derived_country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.subscriber_key = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id_zc = null;
           				} else {
           			    	this.member_id_zc = dis.readLong();
           				}
					
					this.first_name_zc = readString(dis);
					
					this.last_name_zc = readString(dis);
					
					this.user_name_zc = readString(dis);
					
					this.email_address_zc = readString(dis);
					
					this.email_address_domain = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_emailable = null;
           				} else {
           			    	this.is_emailable = dis.readBoolean();
           				}
					
					this.birth_month_year = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_birthday_this_week = null;
           				} else {
           			    	this.has_birthday_this_week = dis.readBoolean();
           				}
					
					this.occupation = readString(dis);
					
					this.locale = readString(dis);
					
					this.preferred_address_zone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_address_in_uk_zipzone = null;
           				} else {
           			    	this.has_address_in_uk_zipzone = dis.readBoolean();
           				}
					
					this.first_join_date = readDate(dis);
					
					this.last_join_date = readDate(dis);
					
					this.last_left_date = readDate(dis);
					
					this.last_left_reason = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_left_due_to_termination = null;
           				} else {
           			    	this.last_left_due_to_termination = dis.readBoolean();
           				}
					
					this.current_status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_zipcard = null;
           				} else {
           			    	this.has_active_zipcard = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_approved_member = null;
           				} else {
           			    	this.is_current_approved_member = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_admin = null;
           				} else {
           			    	this.is_current_admin = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_prospect = null;
           				} else {
           			    	this.is_prospect = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_consumer = null;
           				} else {
           			    	this.has_segment_consumer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_collegiate = null;
           				} else {
           			    	this.has_segment_collegiate = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_zipvan = null;
           				} else {
           			    	this.has_segment_zipvan = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business = null;
           				} else {
           			    	this.has_segment_business = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_db = null;
           				} else {
           			    	this.has_segment_business_db = dis.readBoolean();
           				}
					
					this.business_direct_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_ib = null;
           				} else {
           			    	this.has_segment_business_ib = dis.readBoolean();
           				}
					
					this.business_individually_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_employee = null;
           				} else {
           			    	this.is_employee = dis.readBoolean();
           				}
					
					this.fleet_name = readString(dis);
					
					this.fleet_country_name = readString(dis);
					
					this.fleet_market_name = readString(dis);
					
					this.current_rate_plan_keys = readString(dis);
					
					this.current_affiliates = readString(dis);
					
					this.next_fee_date = readDate(dis);
					
					this.next_fee_frequency = readString(dis);
					
					this.next_fee_segment_class = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_fee_amount = null;
           				} else {
           			    	this.next_fee_amount = dis.readDouble();
           				}
					
					this.next_fee_currency = readString(dis);
					
					this.next_fee_account_name_zc = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.current_credit = null;
           				} else {
           			    	this.current_credit = dis.readDouble();
           				}
					
					this.current_credit_currency = readString(dis);
					
					this.next_credit_expiry_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_consumer_waiver = null;
           				} else {
           			    	this.has_active_consumer_waiver = dis.readBoolean();
           				}
					
					this.first_consumer_waiver_start_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_business_waiver = null;
           				} else {
           			    	this.has_active_business_waiver = dis.readBoolean();
           				}
					
					this.na_first_gas_fillup_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.na_last_35_day_gas_fillup_count = null;
           				} else {
           			    	this.na_last_35_day_gas_fillup_count = dis.readLong();
           				}
					
					this.first_res_start_date = readDate(dis);
					
					this.first_res_end_date = readDate(dis);
					
					this.first_res_type = readString(dis);
					
					this.first_res_vehicle_make = readString(dis);
					
					this.first_res_vehicle_model = readString(dis);
					
					this.first_res_vehicle_name = readString(dis);
					
					this.first_res_fleet_name = readString(dis);
					
					this.first_floating_res_end_date = readDate(dis);
					
					this.last_res_start_date = readDate(dis);
					
					this.last_res_end_date = readDate(dis);
					
					this.last_res_type = readString(dis);
					
					this.last_res_vehicle_make = readString(dis);
					
					this.last_res_vehicle_model = readString(dis);
					
					this.last_res_vehicle_name = readString(dis);
					
					this.last_res_vehicle_class = readString(dis);
					
					this.last_floating_res_end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_rt_res_mins_late = null;
           				} else {
           			    	this.last_rt_res_mins_late = dis.readLong();
           				}
					
					this.next_res_date = readDate(dis);
					
					this.next_res_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_res_count = null;
           				} else {
           			    	this.last_year_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_mi = null;
           				} else {
           			    	this.last_year_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_km = null;
           				} else {
           			    	this.last_year_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_hours = null;
           				} else {
           			    	this.last_year_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_count = null;
           				} else {
           			    	this.last_3_month_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_rev_in_usd = null;
           				} else {
           			    	this.last_3_month_res_rev_in_usd = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_mi = null;
           				} else {
           			    	this.last_3_month_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_km = null;
           				} else {
           			    	this.last_3_month_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_hours = null;
           				} else {
           			    	this.last_3_month_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_res_count = null;
           				} else {
           			    	this.total_res_count = dis.readLong();
           				}
					
					this.reserver_segment = readString(dis);
					
						this.workday_res_last_6mths = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reserved_fewer_hours_last_month = null;
           				} else {
           			    	this.reserved_fewer_hours_last_month = dis.readBoolean();
           				}
					
					this.last_nps_response_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_nps_score = null;
           				} else {
           			    	this.last_nps_score = dis.readShort();
           				}
					
					this.last_incomplete_app_start_date = readDate(dis);
					
					this.last_incomplete_app_segment = readString(dis);
					
					this.last_incomplete_app_affiliate = readString(dis);
					
					this.last_incomplete_app_country = readString(dis);
					
					this.last_incomplete_app_last_step = readString(dis);
					
					this.last_active_corp_app_date = readString(dis);
					
					this.last_active_corp_app_country = readString(dis);
					
					this.last_z4b_ssu_view_date = readDate(dis);
					
					this.last_z4b_ssu_last_step = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mdb_has_nonservice_account = null;
           				} else {
           			    	this.mdb_has_nonservice_account = dis.readBoolean();
           				}
					
					this.mdb_primary_plan_category = readString(dis);
					
					this.mdb_primary_segment_class = readString(dis);
					
					this.mdb_metro_name = readString(dis);
					
					this.mdb_tenure_category = readString(dis);
					
					this.mdb_rfm_profile = readString(dis);
					
					this.mdb_location_segment = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_opened_in_last_90_days = null;
           				} else {
           			    	this.sv_opened_in_last_90_days = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_clicked_in_last_90_days = null;
           				} else {
           			    	this.sv_clicked_in_last_90_days = dis.readBoolean();
           				}
					
					this.data_split = readString(dis);
					
					this.derived_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subscriber_key,dos);
					
					// Long
				
						if(this.member_id_zc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id_zc);
		            	}
					
					// String
				
						writeString(this.first_name_zc,dos);
					
					// String
				
						writeString(this.last_name_zc,dos);
					
					// String
				
						writeString(this.user_name_zc,dos);
					
					// String
				
						writeString(this.email_address_zc,dos);
					
					// String
				
						writeString(this.email_address_domain,dos);
					
					// Boolean
				
						if(this.is_emailable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_emailable);
		            	}
					
					// java.util.Date
				
						writeDate(this.birth_month_year,dos);
					
					// Boolean
				
						if(this.has_birthday_this_week == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_birthday_this_week);
		            	}
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.locale,dos);
					
					// String
				
						writeString(this.preferred_address_zone,dos);
					
					// Boolean
				
						if(this.has_address_in_uk_zipzone == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_address_in_uk_zipzone);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_left_date,dos);
					
					// String
				
						writeString(this.last_left_reason,dos);
					
					// Boolean
				
						if(this.last_left_due_to_termination == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.last_left_due_to_termination);
		            	}
					
					// String
				
						writeString(this.current_status,dos);
					
					// Boolean
				
						if(this.has_active_zipcard == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_zipcard);
		            	}
					
					// Boolean
				
						if(this.is_current_approved_member == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_approved_member);
		            	}
					
					// Boolean
				
						if(this.is_current_admin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_admin);
		            	}
					
					// Boolean
				
						if(this.is_prospect == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_prospect);
		            	}
					
					// Boolean
				
						if(this.has_segment_consumer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_consumer);
		            	}
					
					// Boolean
				
						if(this.has_segment_collegiate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_collegiate);
		            	}
					
					// Boolean
				
						if(this.has_segment_zipvan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_zipvan);
		            	}
					
					// Boolean
				
						if(this.has_segment_business == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business);
		            	}
					
					// Boolean
				
						if(this.has_segment_business_db == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_db);
		            	}
					
					// String
				
						writeString(this.business_direct_billed_code,dos);
					
					// Boolean
				
						if(this.has_segment_business_ib == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_ib);
		            	}
					
					// String
				
						writeString(this.business_individually_billed_code,dos);
					
					// Boolean
				
						if(this.is_employee == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_employee);
		            	}
					
					// String
				
						writeString(this.fleet_name,dos);
					
					// String
				
						writeString(this.fleet_country_name,dos);
					
					// String
				
						writeString(this.fleet_market_name,dos);
					
					// String
				
						writeString(this.current_rate_plan_keys,dos);
					
					// String
				
						writeString(this.current_affiliates,dos);
					
					// java.util.Date
				
						writeDate(this.next_fee_date,dos);
					
					// String
				
						writeString(this.next_fee_frequency,dos);
					
					// String
				
						writeString(this.next_fee_segment_class,dos);
					
					// Double
				
						if(this.next_fee_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.next_fee_amount);
		            	}
					
					// String
				
						writeString(this.next_fee_currency,dos);
					
					// String
				
						writeString(this.next_fee_account_name_zc,dos);
					
					// Double
				
						if(this.current_credit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.current_credit);
		            	}
					
					// String
				
						writeString(this.current_credit_currency,dos);
					
					// java.util.Date
				
						writeDate(this.next_credit_expiry_date,dos);
					
					// Boolean
				
						if(this.has_active_consumer_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_consumer_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_consumer_waiver_start_date,dos);
					
					// Boolean
				
						if(this.has_active_business_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_business_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.na_first_gas_fillup_date,dos);
					
					// Long
				
						if(this.na_last_35_day_gas_fillup_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.na_last_35_day_gas_fillup_count);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.first_res_end_date,dos);
					
					// String
				
						writeString(this.first_res_type,dos);
					
					// String
				
						writeString(this.first_res_vehicle_make,dos);
					
					// String
				
						writeString(this.first_res_vehicle_model,dos);
					
					// String
				
						writeString(this.first_res_vehicle_name,dos);
					
					// String
				
						writeString(this.first_res_fleet_name,dos);
					
					// java.util.Date
				
						writeDate(this.first_floating_res_end_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_end_date,dos);
					
					// String
				
						writeString(this.last_res_type,dos);
					
					// String
				
						writeString(this.last_res_vehicle_make,dos);
					
					// String
				
						writeString(this.last_res_vehicle_model,dos);
					
					// String
				
						writeString(this.last_res_vehicle_name,dos);
					
					// String
				
						writeString(this.last_res_vehicle_class,dos);
					
					// java.util.Date
				
						writeDate(this.last_floating_res_end_date,dos);
					
					// Long
				
						if(this.last_rt_res_mins_late == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_rt_res_mins_late);
		            	}
					
					// java.util.Date
				
						writeDate(this.next_res_date,dos);
					
					// String
				
						writeString(this.next_res_type,dos);
					
					// Long
				
						if(this.last_year_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_year_res_count);
		            	}
					
					// Double
				
						if(this.last_year_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_mi);
		            	}
					
					// Double
				
						if(this.last_year_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_km);
		            	}
					
					// Double
				
						if(this.last_year_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_hours);
		            	}
					
					// Long
				
						if(this.last_3_month_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_3_month_res_count);
		            	}
					
					// Double
				
						if(this.last_3_month_res_rev_in_usd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_res_rev_in_usd);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_mi);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_km);
		            	}
					
					// Double
				
						if(this.last_3_month_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_hours);
		            	}
					
					// Long
				
						if(this.total_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.total_res_count);
		            	}
					
					// String
				
						writeString(this.reserver_segment,dos);
					
					// Integer
				
						writeInteger(this.workday_res_last_6mths,dos);
					
					// Boolean
				
						if(this.reserved_fewer_hours_last_month == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.reserved_fewer_hours_last_month);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_nps_response_date,dos);
					
					// Short
				
						if(this.last_nps_score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.last_nps_score);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_incomplete_app_start_date,dos);
					
					// String
				
						writeString(this.last_incomplete_app_segment,dos);
					
					// String
				
						writeString(this.last_incomplete_app_affiliate,dos);
					
					// String
				
						writeString(this.last_incomplete_app_country,dos);
					
					// String
				
						writeString(this.last_incomplete_app_last_step,dos);
					
					// String
				
						writeString(this.last_active_corp_app_date,dos);
					
					// String
				
						writeString(this.last_active_corp_app_country,dos);
					
					// java.util.Date
				
						writeDate(this.last_z4b_ssu_view_date,dos);
					
					// String
				
						writeString(this.last_z4b_ssu_last_step,dos);
					
					// Boolean
				
						if(this.mdb_has_nonservice_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mdb_has_nonservice_account);
		            	}
					
					// String
				
						writeString(this.mdb_primary_plan_category,dos);
					
					// String
				
						writeString(this.mdb_primary_segment_class,dos);
					
					// String
				
						writeString(this.mdb_metro_name,dos);
					
					// String
				
						writeString(this.mdb_tenure_category,dos);
					
					// String
				
						writeString(this.mdb_rfm_profile,dos);
					
					// String
				
						writeString(this.mdb_location_segment,dos);
					
					// Boolean
				
						if(this.sv_opened_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_opened_in_last_90_days);
		            	}
					
					// Boolean
				
						if(this.sv_clicked_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_clicked_in_last_90_days);
		            	}
					
					// String
				
						writeString(this.data_split,dos);
					
					// String
				
						writeString(this.derived_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subscriber_key="+subscriber_key);
		sb.append(",member_id_zc="+String.valueOf(member_id_zc));
		sb.append(",first_name_zc="+first_name_zc);
		sb.append(",last_name_zc="+last_name_zc);
		sb.append(",user_name_zc="+user_name_zc);
		sb.append(",email_address_zc="+email_address_zc);
		sb.append(",email_address_domain="+email_address_domain);
		sb.append(",is_emailable="+String.valueOf(is_emailable));
		sb.append(",birth_month_year="+String.valueOf(birth_month_year));
		sb.append(",has_birthday_this_week="+String.valueOf(has_birthday_this_week));
		sb.append(",occupation="+occupation);
		sb.append(",locale="+locale);
		sb.append(",preferred_address_zone="+preferred_address_zone);
		sb.append(",has_address_in_uk_zipzone="+String.valueOf(has_address_in_uk_zipzone));
		sb.append(",first_join_date="+String.valueOf(first_join_date));
		sb.append(",last_join_date="+String.valueOf(last_join_date));
		sb.append(",last_left_date="+String.valueOf(last_left_date));
		sb.append(",last_left_reason="+last_left_reason);
		sb.append(",last_left_due_to_termination="+String.valueOf(last_left_due_to_termination));
		sb.append(",current_status="+current_status);
		sb.append(",has_active_zipcard="+String.valueOf(has_active_zipcard));
		sb.append(",is_current_approved_member="+String.valueOf(is_current_approved_member));
		sb.append(",is_current_admin="+String.valueOf(is_current_admin));
		sb.append(",is_prospect="+String.valueOf(is_prospect));
		sb.append(",has_segment_consumer="+String.valueOf(has_segment_consumer));
		sb.append(",has_segment_collegiate="+String.valueOf(has_segment_collegiate));
		sb.append(",has_segment_zipvan="+String.valueOf(has_segment_zipvan));
		sb.append(",has_segment_business="+String.valueOf(has_segment_business));
		sb.append(",has_segment_business_db="+String.valueOf(has_segment_business_db));
		sb.append(",business_direct_billed_code="+business_direct_billed_code);
		sb.append(",has_segment_business_ib="+String.valueOf(has_segment_business_ib));
		sb.append(",business_individually_billed_code="+business_individually_billed_code);
		sb.append(",is_employee="+String.valueOf(is_employee));
		sb.append(",fleet_name="+fleet_name);
		sb.append(",fleet_country_name="+fleet_country_name);
		sb.append(",fleet_market_name="+fleet_market_name);
		sb.append(",current_rate_plan_keys="+current_rate_plan_keys);
		sb.append(",current_affiliates="+current_affiliates);
		sb.append(",next_fee_date="+String.valueOf(next_fee_date));
		sb.append(",next_fee_frequency="+next_fee_frequency);
		sb.append(",next_fee_segment_class="+next_fee_segment_class);
		sb.append(",next_fee_amount="+String.valueOf(next_fee_amount));
		sb.append(",next_fee_currency="+next_fee_currency);
		sb.append(",next_fee_account_name_zc="+next_fee_account_name_zc);
		sb.append(",current_credit="+String.valueOf(current_credit));
		sb.append(",current_credit_currency="+current_credit_currency);
		sb.append(",next_credit_expiry_date="+String.valueOf(next_credit_expiry_date));
		sb.append(",has_active_consumer_waiver="+String.valueOf(has_active_consumer_waiver));
		sb.append(",first_consumer_waiver_start_date="+String.valueOf(first_consumer_waiver_start_date));
		sb.append(",has_active_business_waiver="+String.valueOf(has_active_business_waiver));
		sb.append(",na_first_gas_fillup_date="+String.valueOf(na_first_gas_fillup_date));
		sb.append(",na_last_35_day_gas_fillup_count="+String.valueOf(na_last_35_day_gas_fillup_count));
		sb.append(",first_res_start_date="+String.valueOf(first_res_start_date));
		sb.append(",first_res_end_date="+String.valueOf(first_res_end_date));
		sb.append(",first_res_type="+first_res_type);
		sb.append(",first_res_vehicle_make="+first_res_vehicle_make);
		sb.append(",first_res_vehicle_model="+first_res_vehicle_model);
		sb.append(",first_res_vehicle_name="+first_res_vehicle_name);
		sb.append(",first_res_fleet_name="+first_res_fleet_name);
		sb.append(",first_floating_res_end_date="+String.valueOf(first_floating_res_end_date));
		sb.append(",last_res_start_date="+String.valueOf(last_res_start_date));
		sb.append(",last_res_end_date="+String.valueOf(last_res_end_date));
		sb.append(",last_res_type="+last_res_type);
		sb.append(",last_res_vehicle_make="+last_res_vehicle_make);
		sb.append(",last_res_vehicle_model="+last_res_vehicle_model);
		sb.append(",last_res_vehicle_name="+last_res_vehicle_name);
		sb.append(",last_res_vehicle_class="+last_res_vehicle_class);
		sb.append(",last_floating_res_end_date="+String.valueOf(last_floating_res_end_date));
		sb.append(",last_rt_res_mins_late="+String.valueOf(last_rt_res_mins_late));
		sb.append(",next_res_date="+String.valueOf(next_res_date));
		sb.append(",next_res_type="+next_res_type);
		sb.append(",last_year_res_count="+String.valueOf(last_year_res_count));
		sb.append(",last_year_distance_mi="+String.valueOf(last_year_distance_mi));
		sb.append(",last_year_distance_km="+String.valueOf(last_year_distance_km));
		sb.append(",last_year_hours="+String.valueOf(last_year_hours));
		sb.append(",last_3_month_res_count="+String.valueOf(last_3_month_res_count));
		sb.append(",last_3_month_res_rev_in_usd="+String.valueOf(last_3_month_res_rev_in_usd));
		sb.append(",last_3_month_distance_mi="+String.valueOf(last_3_month_distance_mi));
		sb.append(",last_3_month_distance_km="+String.valueOf(last_3_month_distance_km));
		sb.append(",last_3_month_hours="+String.valueOf(last_3_month_hours));
		sb.append(",total_res_count="+String.valueOf(total_res_count));
		sb.append(",reserver_segment="+reserver_segment);
		sb.append(",workday_res_last_6mths="+String.valueOf(workday_res_last_6mths));
		sb.append(",reserved_fewer_hours_last_month="+String.valueOf(reserved_fewer_hours_last_month));
		sb.append(",last_nps_response_date="+String.valueOf(last_nps_response_date));
		sb.append(",last_nps_score="+String.valueOf(last_nps_score));
		sb.append(",last_incomplete_app_start_date="+String.valueOf(last_incomplete_app_start_date));
		sb.append(",last_incomplete_app_segment="+last_incomplete_app_segment);
		sb.append(",last_incomplete_app_affiliate="+last_incomplete_app_affiliate);
		sb.append(",last_incomplete_app_country="+last_incomplete_app_country);
		sb.append(",last_incomplete_app_last_step="+last_incomplete_app_last_step);
		sb.append(",last_active_corp_app_date="+last_active_corp_app_date);
		sb.append(",last_active_corp_app_country="+last_active_corp_app_country);
		sb.append(",last_z4b_ssu_view_date="+String.valueOf(last_z4b_ssu_view_date));
		sb.append(",last_z4b_ssu_last_step="+last_z4b_ssu_last_step);
		sb.append(",mdb_has_nonservice_account="+String.valueOf(mdb_has_nonservice_account));
		sb.append(",mdb_primary_plan_category="+mdb_primary_plan_category);
		sb.append(",mdb_primary_segment_class="+mdb_primary_segment_class);
		sb.append(",mdb_metro_name="+mdb_metro_name);
		sb.append(",mdb_tenure_category="+mdb_tenure_category);
		sb.append(",mdb_rfm_profile="+mdb_rfm_profile);
		sb.append(",mdb_location_segment="+mdb_location_segment);
		sb.append(",sv_opened_in_last_90_days="+String.valueOf(sv_opened_in_last_90_days));
		sb.append(",sv_clicked_in_last_90_days="+String.valueOf(sv_clicked_in_last_90_days));
		sb.append(",data_split="+data_split);
		sb.append(",derived_country="+derived_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_1{
                                    public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("subscriber_key");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("member_id_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_name_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_name_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("user_name_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("email_address_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("email_address_domain");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("is_emailable");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("birth_month_year");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_birthday_this_week");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("occupation");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("locale");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("preferred_address_zone");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_address_in_uk_zipzone");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_join_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_join_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_left_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_left_reason");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_left_due_to_termination");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("current_status");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_active_zipcard");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("is_current_approved_member");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("is_current_admin");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("is_prospect");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_consumer");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_collegiate");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_zipvan");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_business");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_business_db");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("business_direct_billed_code");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_segment_business_ib");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("business_individually_billed_code");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("is_employee");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fleet_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fleet_country_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("fleet_market_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("current_rate_plan_keys");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("current_affiliates");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_frequency");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_segment_class");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_amount");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_currency");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_fee_account_name_zc");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("current_credit");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("current_credit_currency");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_credit_expiry_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_active_consumer_waiver");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_consumer_waiver_start_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("has_active_business_waiver");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("na_first_gas_fillup_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("na_last_35_day_gas_fillup_count");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_start_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_end_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_type");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_vehicle_make");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_vehicle_model");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_vehicle_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_res_fleet_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("first_floating_res_end_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_start_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_end_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_type");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_vehicle_make");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_vehicle_model");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_vehicle_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_res_vehicle_class");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_floating_res_end_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_rt_res_mins_late");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_res_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("next_res_type");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_year_res_count");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_year_distance_mi");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_year_distance_km");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_year_hours");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_3_month_res_count");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_3_month_res_rev_in_usd");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_3_month_distance_mi");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_3_month_distance_km");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_3_month_hours");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("total_res_count");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("reserver_segment");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("workday_res_last_6mths");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("reserved_fewer_hours_last_month");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_nps_response_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_nps_score");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_incomplete_app_start_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_incomplete_app_segment");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_incomplete_app_affiliate");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_incomplete_app_country");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    }
                                    public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception{
                                    outtFileOutputDelimited_1.write("last_incomplete_app_last_step");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_active_corp_app_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_active_corp_app_country");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_z4b_ssu_view_date");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("last_z4b_ssu_last_step");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_has_nonservice_account");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_primary_plan_category");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_primary_segment_class");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_metro_name");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_tenure_category");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_rfm_profile");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("mdb_location_segment");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sv_opened_in_last_90_days");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("sv_clicked_in_last_90_days");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("data_split");
                                    outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                    outtFileOutputDelimited_1.write("derived_country");
                                }
                                public void putValue_0(final row3Struct row3,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                if(row3.subscriber_key != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.subscriber_key
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.member_id_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.member_id_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_name_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_name_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.user_name_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.user_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.email_address_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.email_address_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.email_address_domain != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.email_address_domain
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.is_emailable != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.is_emailable
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.birth_month_year != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.birth_month_year, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_birthday_this_week != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_birthday_this_week
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.occupation != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.occupation
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.locale != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.locale
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.preferred_address_zone != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.preferred_address_zone
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_address_in_uk_zipzone != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_address_in_uk_zipzone
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_join_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.first_join_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_join_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_join_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_left_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_left_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_left_reason != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_left_reason
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_left_due_to_termination != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_left_due_to_termination
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.current_status != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.current_status
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_active_zipcard != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_active_zipcard
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.is_current_approved_member != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.is_current_approved_member
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.is_current_admin != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.is_current_admin
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.is_prospect != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.is_prospect
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_consumer != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_consumer
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_collegiate != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_collegiate
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_zipvan != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_zipvan
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_business != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_business
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_business_db != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_business_db
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.business_direct_billed_code != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.business_direct_billed_code
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_segment_business_ib != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_segment_business_ib
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.business_individually_billed_code != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.business_individually_billed_code
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.is_employee != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.is_employee
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.fleet_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.fleet_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.fleet_country_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.fleet_country_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.fleet_market_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.fleet_market_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.current_rate_plan_keys != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.current_rate_plan_keys
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.current_affiliates != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.current_affiliates
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.next_fee_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_frequency != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_fee_frequency
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_segment_class != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_fee_segment_class
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_amount != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_fee_amount
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_currency != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_fee_currency
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_fee_account_name_zc != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_fee_account_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.current_credit != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.current_credit
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.current_credit_currency != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.current_credit_currency
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_credit_expiry_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.next_credit_expiry_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_active_consumer_waiver != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_active_consumer_waiver
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_consumer_waiver_start_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.first_consumer_waiver_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.has_active_business_waiver != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.has_active_business_waiver
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.na_first_gas_fillup_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.na_first_gas_fillup_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.na_last_35_day_gas_fillup_count != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.na_last_35_day_gas_fillup_count
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_start_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.first_res_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_end_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.first_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_type != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_res_type
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_vehicle_make != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_res_vehicle_make
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_vehicle_model != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_res_vehicle_model
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_vehicle_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_res_vehicle_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_res_fleet_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.first_res_fleet_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.first_floating_res_end_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.first_floating_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_start_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_res_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_end_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_type != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_res_type
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_vehicle_make != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_res_vehicle_make
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_vehicle_model != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_res_vehicle_model
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_vehicle_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_res_vehicle_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_res_vehicle_class != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_res_vehicle_class
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_floating_res_end_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_floating_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_rt_res_mins_late != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_rt_res_mins_late
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_res_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.next_res_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.next_res_type != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.next_res_type
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_year_res_count != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_year_res_count
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_year_distance_mi != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_year_distance_mi
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_year_distance_km != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_year_distance_km
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_year_hours != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_year_hours
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_3_month_res_count != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_3_month_res_count
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_3_month_res_rev_in_usd != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_3_month_res_rev_in_usd
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_3_month_distance_mi != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_3_month_distance_mi
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_3_month_distance_km != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_3_month_distance_km
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_3_month_hours != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_3_month_hours
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.total_res_count != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.total_res_count
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.reserver_segment != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.reserver_segment
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.workday_res_last_6mths != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.workday_res_last_6mths
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.reserved_fewer_hours_last_month != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.reserved_fewer_hours_last_month
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_nps_response_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_nps_response_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_nps_score != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_nps_score
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_incomplete_app_start_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_incomplete_app_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_incomplete_app_segment != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_incomplete_app_segment
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_incomplete_app_affiliate != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_incomplete_app_affiliate
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_incomplete_app_country != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_incomplete_app_country
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                }
                                public void putValue_1(final row3Struct row3,StringBuilder sb_tFileOutputDelimited_1,final String OUT_DELIM_tFileOutputDelimited_1)throws java.lang.Exception {
                                if(row3.last_incomplete_app_last_step != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_incomplete_app_last_step
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_active_corp_app_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_active_corp_app_date
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_active_corp_app_country != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_active_corp_app_country
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_z4b_ssu_view_date != null) {
                                sb_tFileOutputDelimited_1.append(
                                        FormatterUtils.format_Date(row3.last_z4b_ssu_view_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.last_z4b_ssu_last_step != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.last_z4b_ssu_last_step
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_has_nonservice_account != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_has_nonservice_account
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_primary_plan_category != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_primary_plan_category
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_primary_segment_class != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_primary_segment_class
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_metro_name != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_metro_name
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_tenure_category != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_tenure_category
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_rfm_profile != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_rfm_profile
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.mdb_location_segment != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.mdb_location_segment
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.sv_opened_in_last_90_days != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.sv_opened_in_last_90_days
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.sv_clicked_in_last_90_days != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.sv_clicked_in_last_90_days
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.data_split != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.data_split
                                );
                                }
                                sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                                if(row3.derived_country != null) {
                                sb_tFileOutputDelimited_1.append(
                                        row3.derived_country
                                );
                                }
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_1 fileOutputDelimitedUtil_tFileOutputDelimited_1=new FileOutputDelimitedUtil_tFileOutputDelimited_1();
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.localExportDir + "/" + globalMap.get("namFileName"))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        String zipName_tFileOutputDelimited_1 = fullName_tFileOutputDelimited_1 + ".zip";
                        java.io.File file_tFileOutputDelimited_1 = new java.io.File(zipName_tFileOutputDelimited_1);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_1= null;
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        if(file_tFileOutputDelimited_1.exists()) {
                            file_tFileOutputDelimited_1.delete();
                        }
                        zipOut_tFileOutputDelimited_1= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_1)));
                        zipOut_tFileOutputDelimited_1.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_1.getName()));
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_1,"UTF-8"));
                                    if(file_tFileOutputDelimited_1.length()==0){
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_0(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_1(outtFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
		        conn_tRedshiftInput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();

		    String dbquery_tRedshiftInput_1 = StringUtils.templateString(
"\nSELECT * FROM sf_individual\nWHERE data_split = 'NA'\n--LIMIT 1000\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
)
;
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								row1.subscriber_key = null;
							} else {
	                         		
        	row1.subscriber_key = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 2) {
								row1.member_id_zc = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(2) != null) {
                row1.member_id_zc = rs_tRedshiftInput_1.getLong(2);
            } else {
                    row1.member_id_zc = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 3) {
								row1.first_name_zc = null;
							} else {
	                         		
        	row1.first_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 3, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 4) {
								row1.last_name_zc = null;
							} else {
	                         		
        	row1.last_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 4, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 5) {
								row1.user_name_zc = null;
							} else {
	                         		
        	row1.user_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 5, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 6) {
								row1.email_address_zc = null;
							} else {
	                         		
        	row1.email_address_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 6, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 7) {
								row1.email_address_domain = null;
							} else {
	                         		
        	row1.email_address_domain = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 7, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 8) {
								row1.is_emailable = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(8) != null) {
                row1.is_emailable = rs_tRedshiftInput_1.getBoolean(8);
            } else {
                    row1.is_emailable = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 9) {
								row1.birth_month_year = null;
							} else {
										
			row1.birth_month_year = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 9);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 10) {
								row1.has_birthday_this_week = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(10) != null) {
                row1.has_birthday_this_week = rs_tRedshiftInput_1.getBoolean(10);
            } else {
                    row1.has_birthday_this_week = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 11) {
								row1.occupation = null;
							} else {
	                         		
        	row1.occupation = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 11, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 12) {
								row1.locale = null;
							} else {
	                         		
        	row1.locale = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 12, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 13) {
								row1.preferred_address_zone = null;
							} else {
	                         		
        	row1.preferred_address_zone = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 13, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 14) {
								row1.has_address_in_uk_zipzone = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(14) != null) {
                row1.has_address_in_uk_zipzone = rs_tRedshiftInput_1.getBoolean(14);
            } else {
                    row1.has_address_in_uk_zipzone = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 15) {
								row1.first_join_date = null;
							} else {
										
			row1.first_join_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 15);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 16) {
								row1.last_join_date = null;
							} else {
										
			row1.last_join_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 16);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 17) {
								row1.last_left_date = null;
							} else {
										
			row1.last_left_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 17);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 18) {
								row1.last_left_reason = null;
							} else {
	                         		
        	row1.last_left_reason = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 18, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 19) {
								row1.last_left_due_to_termination = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(19) != null) {
                row1.last_left_due_to_termination = rs_tRedshiftInput_1.getBoolean(19);
            } else {
                    row1.last_left_due_to_termination = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 20) {
								row1.current_status = null;
							} else {
	                         		
        	row1.current_status = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 20, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 21) {
								row1.has_active_zipcard = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(21) != null) {
                row1.has_active_zipcard = rs_tRedshiftInput_1.getBoolean(21);
            } else {
                    row1.has_active_zipcard = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 22) {
								row1.is_current_approved_member = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(22) != null) {
                row1.is_current_approved_member = rs_tRedshiftInput_1.getBoolean(22);
            } else {
                    row1.is_current_approved_member = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 23) {
								row1.is_current_admin = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(23) != null) {
                row1.is_current_admin = rs_tRedshiftInput_1.getBoolean(23);
            } else {
                    row1.is_current_admin = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 24) {
								row1.is_prospect = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(24) != null) {
                row1.is_prospect = rs_tRedshiftInput_1.getBoolean(24);
            } else {
                    row1.is_prospect = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 25) {
								row1.has_segment_consumer = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(25) != null) {
                row1.has_segment_consumer = rs_tRedshiftInput_1.getBoolean(25);
            } else {
                    row1.has_segment_consumer = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 26) {
								row1.has_segment_collegiate = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(26) != null) {
                row1.has_segment_collegiate = rs_tRedshiftInput_1.getBoolean(26);
            } else {
                    row1.has_segment_collegiate = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 27) {
								row1.has_segment_zipvan = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(27) != null) {
                row1.has_segment_zipvan = rs_tRedshiftInput_1.getBoolean(27);
            } else {
                    row1.has_segment_zipvan = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 28) {
								row1.has_segment_business = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(28) != null) {
                row1.has_segment_business = rs_tRedshiftInput_1.getBoolean(28);
            } else {
                    row1.has_segment_business = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 29) {
								row1.has_segment_business_db = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(29) != null) {
                row1.has_segment_business_db = rs_tRedshiftInput_1.getBoolean(29);
            } else {
                    row1.has_segment_business_db = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 30) {
								row1.business_direct_billed_code = null;
							} else {
	                         		
        	row1.business_direct_billed_code = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 30, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 31) {
								row1.has_segment_business_ib = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(31) != null) {
                row1.has_segment_business_ib = rs_tRedshiftInput_1.getBoolean(31);
            } else {
                    row1.has_segment_business_ib = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 32) {
								row1.business_individually_billed_code = null;
							} else {
	                         		
        	row1.business_individually_billed_code = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 32, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 33) {
								row1.is_employee = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(33) != null) {
                row1.is_employee = rs_tRedshiftInput_1.getBoolean(33);
            } else {
                    row1.is_employee = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 34) {
								row1.fleet_name = null;
							} else {
	                         		
        	row1.fleet_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 34, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 35) {
								row1.fleet_country_name = null;
							} else {
	                         		
        	row1.fleet_country_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 35, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 36) {
								row1.fleet_market_name = null;
							} else {
	                         		
        	row1.fleet_market_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 36, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 37) {
								row1.current_rate_plan_keys = null;
							} else {
	                         		
        	row1.current_rate_plan_keys = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 37, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 38) {
								row1.current_affiliates = null;
							} else {
	                         		
        	row1.current_affiliates = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 38, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 39) {
								row1.next_fee_date = null;
							} else {
										
			row1.next_fee_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 39);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 40) {
								row1.next_fee_frequency = null;
							} else {
	                         		
        	row1.next_fee_frequency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 40, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 41) {
								row1.next_fee_segment_class = null;
							} else {
	                         		
        	row1.next_fee_segment_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 41, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 42) {
								row1.next_fee_amount = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(42) != null) {
                row1.next_fee_amount = rs_tRedshiftInput_1.getDouble(42);
            } else {
                    row1.next_fee_amount = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 43) {
								row1.next_fee_currency = null;
							} else {
	                         		
        	row1.next_fee_currency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 43, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 44) {
								row1.next_fee_account_name_zc = null;
							} else {
	                         		
        	row1.next_fee_account_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 44, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 45) {
								row1.current_credit = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(45) != null) {
                row1.current_credit = rs_tRedshiftInput_1.getDouble(45);
            } else {
                    row1.current_credit = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 46) {
								row1.current_credit_currency = null;
							} else {
	                         		
        	row1.current_credit_currency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 46, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 47) {
								row1.next_credit_expiry_date = null;
							} else {
										
			row1.next_credit_expiry_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 47);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 48) {
								row1.has_active_consumer_waiver = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(48) != null) {
                row1.has_active_consumer_waiver = rs_tRedshiftInput_1.getBoolean(48);
            } else {
                    row1.has_active_consumer_waiver = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 49) {
								row1.first_consumer_waiver_start_date = null;
							} else {
										
			row1.first_consumer_waiver_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 49);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 50) {
								row1.has_active_business_waiver = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(50) != null) {
                row1.has_active_business_waiver = rs_tRedshiftInput_1.getBoolean(50);
            } else {
                    row1.has_active_business_waiver = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 51) {
								row1.na_first_gas_fillup_date = null;
							} else {
										
			row1.na_first_gas_fillup_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 51);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 52) {
								row1.na_last_35_day_gas_fillup_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(52) != null) {
                row1.na_last_35_day_gas_fillup_count = rs_tRedshiftInput_1.getLong(52);
            } else {
                    row1.na_last_35_day_gas_fillup_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 53) {
								row1.first_res_start_date = null;
							} else {
										
			row1.first_res_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 53);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 54) {
								row1.first_res_end_date = null;
							} else {
										
			row1.first_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 54);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 55) {
								row1.first_res_type = null;
							} else {
	                         		
        	row1.first_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 55, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 56) {
								row1.first_res_vehicle_make = null;
							} else {
	                         		
        	row1.first_res_vehicle_make = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 56, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 57) {
								row1.first_res_vehicle_model = null;
							} else {
	                         		
        	row1.first_res_vehicle_model = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 57, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 58) {
								row1.first_res_vehicle_name = null;
							} else {
	                         		
        	row1.first_res_vehicle_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 58, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 59) {
								row1.first_res_fleet_name = null;
							} else {
	                         		
        	row1.first_res_fleet_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 59, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 60) {
								row1.first_floating_res_end_date = null;
							} else {
										
			row1.first_floating_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 60);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 61) {
								row1.last_res_start_date = null;
							} else {
										
			row1.last_res_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 61);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 62) {
								row1.last_res_end_date = null;
							} else {
										
			row1.last_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 62);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 63) {
								row1.last_res_type = null;
							} else {
	                         		
        	row1.last_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 63, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 64) {
								row1.last_res_vehicle_make = null;
							} else {
	                         		
        	row1.last_res_vehicle_make = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 64, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 65) {
								row1.last_res_vehicle_model = null;
							} else {
	                         		
        	row1.last_res_vehicle_model = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 65, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 66) {
								row1.last_res_vehicle_name = null;
							} else {
	                         		
        	row1.last_res_vehicle_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 66, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 67) {
								row1.last_res_vehicle_class = null;
							} else {
	                         		
        	row1.last_res_vehicle_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 67, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 68) {
								row1.last_floating_res_end_date = null;
							} else {
										
			row1.last_floating_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 68);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 69) {
								row1.last_rt_res_mins_late = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(69) != null) {
                row1.last_rt_res_mins_late = rs_tRedshiftInput_1.getLong(69);
            } else {
                    row1.last_rt_res_mins_late = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 70) {
								row1.next_res_date = null;
							} else {
										
			row1.next_res_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 70);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 71) {
								row1.next_res_type = null;
							} else {
	                         		
        	row1.next_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 71, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 72) {
								row1.last_year_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(72) != null) {
                row1.last_year_res_count = rs_tRedshiftInput_1.getLong(72);
            } else {
                    row1.last_year_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 73) {
								row1.last_year_distance_mi = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(73) != null) {
                row1.last_year_distance_mi = rs_tRedshiftInput_1.getDouble(73);
            } else {
                    row1.last_year_distance_mi = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 74) {
								row1.last_year_distance_km = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(74) != null) {
                row1.last_year_distance_km = rs_tRedshiftInput_1.getDouble(74);
            } else {
                    row1.last_year_distance_km = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 75) {
								row1.last_year_hours = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(75) != null) {
                row1.last_year_hours = rs_tRedshiftInput_1.getDouble(75);
            } else {
                    row1.last_year_hours = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 76) {
								row1.last_3_month_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(76) != null) {
                row1.last_3_month_res_count = rs_tRedshiftInput_1.getLong(76);
            } else {
                    row1.last_3_month_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 77) {
								row1.last_3_month_res_rev_in_usd = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(77) != null) {
                row1.last_3_month_res_rev_in_usd = rs_tRedshiftInput_1.getDouble(77);
            } else {
                    row1.last_3_month_res_rev_in_usd = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 78) {
								row1.last_3_month_distance_mi = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(78) != null) {
                row1.last_3_month_distance_mi = rs_tRedshiftInput_1.getDouble(78);
            } else {
                    row1.last_3_month_distance_mi = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 79) {
								row1.last_3_month_distance_km = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(79) != null) {
                row1.last_3_month_distance_km = rs_tRedshiftInput_1.getDouble(79);
            } else {
                    row1.last_3_month_distance_km = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 80) {
								row1.last_3_month_hours = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(80) != null) {
                row1.last_3_month_hours = rs_tRedshiftInput_1.getDouble(80);
            } else {
                    row1.last_3_month_hours = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 81) {
								row1.total_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(81) != null) {
                row1.total_res_count = rs_tRedshiftInput_1.getLong(81);
            } else {
                    row1.total_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 82) {
								row1.reserver_segment = null;
							} else {
	                         		
        	row1.reserver_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 82, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 83) {
								row1.workday_res_last_6mths = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(83) != null) {
                row1.workday_res_last_6mths = rs_tRedshiftInput_1.getInt(83);
            } else {
                    row1.workday_res_last_6mths = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 84) {
								row1.reserved_fewer_hours_last_month = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(84) != null) {
                row1.reserved_fewer_hours_last_month = rs_tRedshiftInput_1.getBoolean(84);
            } else {
                    row1.reserved_fewer_hours_last_month = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 85) {
								row1.last_nps_response_date = null;
							} else {
										
			row1.last_nps_response_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 85);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 86) {
								row1.last_nps_score = null;
							} else {
		                          
            if(rs_tRedshiftInput_1.getObject(86) != null) {
                row1.last_nps_score = rs_tRedshiftInput_1.getShort(86);
            } else {
                    row1.last_nps_score = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 87) {
								row1.last_incomplete_app_start_date = null;
							} else {
										
			row1.last_incomplete_app_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 87);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 88) {
								row1.last_incomplete_app_segment = null;
							} else {
	                         		
        	row1.last_incomplete_app_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 88, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 89) {
								row1.last_incomplete_app_affiliate = null;
							} else {
	                         		
        	row1.last_incomplete_app_affiliate = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 89, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 90) {
								row1.last_incomplete_app_country = null;
							} else {
	                         		
        	row1.last_incomplete_app_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 90, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 91) {
								row1.last_incomplete_app_last_step = null;
							} else {
	                         		
        	row1.last_incomplete_app_last_step = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 91, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 92) {
								row1.last_active_corp_app_date = null;
							} else {
	                         		
        	row1.last_active_corp_app_date = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 92, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 93) {
								row1.last_active_corp_app_country = null;
							} else {
	                         		
        	row1.last_active_corp_app_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 93, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 94) {
								row1.last_z4b_ssu_view_date = null;
							} else {
										
			row1.last_z4b_ssu_view_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_1, 94);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 95) {
								row1.last_z4b_ssu_last_step = null;
							} else {
	                         		
        	row1.last_z4b_ssu_last_step = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 95, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 96) {
								row1.mdb_has_nonservice_account = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(96) != null) {
                row1.mdb_has_nonservice_account = rs_tRedshiftInput_1.getBoolean(96);
            } else {
                    row1.mdb_has_nonservice_account = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 97) {
								row1.mdb_primary_plan_category = null;
							} else {
	                         		
        	row1.mdb_primary_plan_category = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 97, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 98) {
								row1.mdb_primary_segment_class = null;
							} else {
	                         		
        	row1.mdb_primary_segment_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 98, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 99) {
								row1.mdb_metro_name = null;
							} else {
	                         		
        	row1.mdb_metro_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 99, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 100) {
								row1.mdb_tenure_category = null;
							} else {
	                         		
        	row1.mdb_tenure_category = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 100, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 101) {
								row1.mdb_rfm_profile = null;
							} else {
	                         		
        	row1.mdb_rfm_profile = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 101, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 102) {
								row1.mdb_location_segment = null;
							} else {
	                         		
        	row1.mdb_location_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 102, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 103) {
								row1.sv_opened_in_last_90_days = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(103) != null) {
                row1.sv_opened_in_last_90_days = rs_tRedshiftInput_1.getBoolean(103);
            } else {
                    row1.sv_opened_in_last_90_days = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 104) {
								row1.sv_clicked_in_last_90_days = null;
							} else {
	                         		
            if(rs_tRedshiftInput_1.getObject(104) != null) {
                row1.sv_clicked_in_last_90_days = rs_tRedshiftInput_1.getBoolean(104);
            } else {
                    row1.sv_clicked_in_last_90_days = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 105) {
								row1.data_split = null;
							} else {
	                         		
        	row1.data_split = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 105, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 106) {
								row1.derived_country = null;
							} else {
	                         		
        	row1.derived_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 106, false);
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

    Object fieldValue = null;
for( Field f : row1.getClass().getFields() ) {
	//System.out.println(f.getName() + "/" + f.get(row1));
   	fieldValue = f.get(row1);
   	if(fieldValue != null && fieldValue instanceof String) {
   		String temp = (String)fieldValue;
   		if(temp.contains("|")) {
   			fieldValue = temp.replaceAll("\\|", "-");
   		}
   	}
   	row3.getClass().getField(f.getName()).set(row3, fieldValue);
}
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(row3,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                            fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(row3,sb_tFileOutputDelimited_1,OUT_DELIM_tFileOutputDelimited_1);
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */






	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());




/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public String subscriber_key;

				public String getSubscriber_key () {
					return this.subscriber_key;
				}
				
			    public Long member_id_zc;

				public Long getMember_id_zc () {
					return this.member_id_zc;
				}
				
			    public String first_name_zc;

				public String getFirst_name_zc () {
					return this.first_name_zc;
				}
				
			    public String last_name_zc;

				public String getLast_name_zc () {
					return this.last_name_zc;
				}
				
			    public String user_name_zc;

				public String getUser_name_zc () {
					return this.user_name_zc;
				}
				
			    public String email_address_zc;

				public String getEmail_address_zc () {
					return this.email_address_zc;
				}
				
			    public String email_address_domain;

				public String getEmail_address_domain () {
					return this.email_address_domain;
				}
				
			    public Boolean is_emailable;

				public Boolean getIs_emailable () {
					return this.is_emailable;
				}
				
			    public java.util.Date birth_month_year;

				public java.util.Date getBirth_month_year () {
					return this.birth_month_year;
				}
				
			    public Boolean has_birthday_this_week;

				public Boolean getHas_birthday_this_week () {
					return this.has_birthday_this_week;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String locale;

				public String getLocale () {
					return this.locale;
				}
				
			    public String preferred_address_zone;

				public String getPreferred_address_zone () {
					return this.preferred_address_zone;
				}
				
			    public Boolean has_address_in_uk_zipzone;

				public Boolean getHas_address_in_uk_zipzone () {
					return this.has_address_in_uk_zipzone;
				}
				
			    public java.util.Date first_join_date;

				public java.util.Date getFirst_join_date () {
					return this.first_join_date;
				}
				
			    public java.util.Date last_join_date;

				public java.util.Date getLast_join_date () {
					return this.last_join_date;
				}
				
			    public java.util.Date last_left_date;

				public java.util.Date getLast_left_date () {
					return this.last_left_date;
				}
				
			    public String last_left_reason;

				public String getLast_left_reason () {
					return this.last_left_reason;
				}
				
			    public Boolean last_left_due_to_termination;

				public Boolean getLast_left_due_to_termination () {
					return this.last_left_due_to_termination;
				}
				
			    public String current_status;

				public String getCurrent_status () {
					return this.current_status;
				}
				
			    public Boolean has_active_zipcard;

				public Boolean getHas_active_zipcard () {
					return this.has_active_zipcard;
				}
				
			    public Boolean is_current_approved_member;

				public Boolean getIs_current_approved_member () {
					return this.is_current_approved_member;
				}
				
			    public Boolean is_current_admin;

				public Boolean getIs_current_admin () {
					return this.is_current_admin;
				}
				
			    public Boolean is_prospect;

				public Boolean getIs_prospect () {
					return this.is_prospect;
				}
				
			    public Boolean has_segment_consumer;

				public Boolean getHas_segment_consumer () {
					return this.has_segment_consumer;
				}
				
			    public Boolean has_segment_collegiate;

				public Boolean getHas_segment_collegiate () {
					return this.has_segment_collegiate;
				}
				
			    public Boolean has_segment_zipvan;

				public Boolean getHas_segment_zipvan () {
					return this.has_segment_zipvan;
				}
				
			    public Boolean has_segment_business;

				public Boolean getHas_segment_business () {
					return this.has_segment_business;
				}
				
			    public Boolean has_segment_business_db;

				public Boolean getHas_segment_business_db () {
					return this.has_segment_business_db;
				}
				
			    public String business_direct_billed_code;

				public String getBusiness_direct_billed_code () {
					return this.business_direct_billed_code;
				}
				
			    public Boolean has_segment_business_ib;

				public Boolean getHas_segment_business_ib () {
					return this.has_segment_business_ib;
				}
				
			    public String business_individually_billed_code;

				public String getBusiness_individually_billed_code () {
					return this.business_individually_billed_code;
				}
				
			    public Boolean is_employee;

				public Boolean getIs_employee () {
					return this.is_employee;
				}
				
			    public String fleet_name;

				public String getFleet_name () {
					return this.fleet_name;
				}
				
			    public String fleet_country_name;

				public String getFleet_country_name () {
					return this.fleet_country_name;
				}
				
			    public String fleet_market_name;

				public String getFleet_market_name () {
					return this.fleet_market_name;
				}
				
			    public String current_rate_plan_keys;

				public String getCurrent_rate_plan_keys () {
					return this.current_rate_plan_keys;
				}
				
			    public String current_affiliates;

				public String getCurrent_affiliates () {
					return this.current_affiliates;
				}
				
			    public java.util.Date next_fee_date;

				public java.util.Date getNext_fee_date () {
					return this.next_fee_date;
				}
				
			    public String next_fee_frequency;

				public String getNext_fee_frequency () {
					return this.next_fee_frequency;
				}
				
			    public String next_fee_segment_class;

				public String getNext_fee_segment_class () {
					return this.next_fee_segment_class;
				}
				
			    public Double next_fee_amount;

				public Double getNext_fee_amount () {
					return this.next_fee_amount;
				}
				
			    public String next_fee_currency;

				public String getNext_fee_currency () {
					return this.next_fee_currency;
				}
				
			    public String next_fee_account_name_zc;

				public String getNext_fee_account_name_zc () {
					return this.next_fee_account_name_zc;
				}
				
			    public Double current_credit;

				public Double getCurrent_credit () {
					return this.current_credit;
				}
				
			    public String current_credit_currency;

				public String getCurrent_credit_currency () {
					return this.current_credit_currency;
				}
				
			    public java.util.Date next_credit_expiry_date;

				public java.util.Date getNext_credit_expiry_date () {
					return this.next_credit_expiry_date;
				}
				
			    public Boolean has_active_consumer_waiver;

				public Boolean getHas_active_consumer_waiver () {
					return this.has_active_consumer_waiver;
				}
				
			    public java.util.Date first_consumer_waiver_start_date;

				public java.util.Date getFirst_consumer_waiver_start_date () {
					return this.first_consumer_waiver_start_date;
				}
				
			    public Boolean has_active_business_waiver;

				public Boolean getHas_active_business_waiver () {
					return this.has_active_business_waiver;
				}
				
			    public java.util.Date na_first_gas_fillup_date;

				public java.util.Date getNa_first_gas_fillup_date () {
					return this.na_first_gas_fillup_date;
				}
				
			    public Long na_last_35_day_gas_fillup_count;

				public Long getNa_last_35_day_gas_fillup_count () {
					return this.na_last_35_day_gas_fillup_count;
				}
				
			    public java.util.Date first_res_start_date;

				public java.util.Date getFirst_res_start_date () {
					return this.first_res_start_date;
				}
				
			    public java.util.Date first_res_end_date;

				public java.util.Date getFirst_res_end_date () {
					return this.first_res_end_date;
				}
				
			    public String first_res_type;

				public String getFirst_res_type () {
					return this.first_res_type;
				}
				
			    public String first_res_vehicle_make;

				public String getFirst_res_vehicle_make () {
					return this.first_res_vehicle_make;
				}
				
			    public String first_res_vehicle_model;

				public String getFirst_res_vehicle_model () {
					return this.first_res_vehicle_model;
				}
				
			    public String first_res_vehicle_name;

				public String getFirst_res_vehicle_name () {
					return this.first_res_vehicle_name;
				}
				
			    public String first_res_fleet_name;

				public String getFirst_res_fleet_name () {
					return this.first_res_fleet_name;
				}
				
			    public java.util.Date first_floating_res_end_date;

				public java.util.Date getFirst_floating_res_end_date () {
					return this.first_floating_res_end_date;
				}
				
			    public java.util.Date last_res_start_date;

				public java.util.Date getLast_res_start_date () {
					return this.last_res_start_date;
				}
				
			    public java.util.Date last_res_end_date;

				public java.util.Date getLast_res_end_date () {
					return this.last_res_end_date;
				}
				
			    public String last_res_type;

				public String getLast_res_type () {
					return this.last_res_type;
				}
				
			    public String last_res_vehicle_make;

				public String getLast_res_vehicle_make () {
					return this.last_res_vehicle_make;
				}
				
			    public String last_res_vehicle_model;

				public String getLast_res_vehicle_model () {
					return this.last_res_vehicle_model;
				}
				
			    public String last_res_vehicle_name;

				public String getLast_res_vehicle_name () {
					return this.last_res_vehicle_name;
				}
				
			    public String last_res_vehicle_class;

				public String getLast_res_vehicle_class () {
					return this.last_res_vehicle_class;
				}
				
			    public java.util.Date last_floating_res_end_date;

				public java.util.Date getLast_floating_res_end_date () {
					return this.last_floating_res_end_date;
				}
				
			    public Long last_rt_res_mins_late;

				public Long getLast_rt_res_mins_late () {
					return this.last_rt_res_mins_late;
				}
				
			    public java.util.Date next_res_date;

				public java.util.Date getNext_res_date () {
					return this.next_res_date;
				}
				
			    public String next_res_type;

				public String getNext_res_type () {
					return this.next_res_type;
				}
				
			    public Long last_year_res_count;

				public Long getLast_year_res_count () {
					return this.last_year_res_count;
				}
				
			    public Double last_year_distance_mi;

				public Double getLast_year_distance_mi () {
					return this.last_year_distance_mi;
				}
				
			    public Double last_year_distance_km;

				public Double getLast_year_distance_km () {
					return this.last_year_distance_km;
				}
				
			    public Double last_year_hours;

				public Double getLast_year_hours () {
					return this.last_year_hours;
				}
				
			    public Long last_3_month_res_count;

				public Long getLast_3_month_res_count () {
					return this.last_3_month_res_count;
				}
				
			    public Double last_3_month_res_rev_in_usd;

				public Double getLast_3_month_res_rev_in_usd () {
					return this.last_3_month_res_rev_in_usd;
				}
				
			    public Double last_3_month_distance_mi;

				public Double getLast_3_month_distance_mi () {
					return this.last_3_month_distance_mi;
				}
				
			    public Double last_3_month_distance_km;

				public Double getLast_3_month_distance_km () {
					return this.last_3_month_distance_km;
				}
				
			    public Double last_3_month_hours;

				public Double getLast_3_month_hours () {
					return this.last_3_month_hours;
				}
				
			    public Long total_res_count;

				public Long getTotal_res_count () {
					return this.total_res_count;
				}
				
			    public String reserver_segment;

				public String getReserver_segment () {
					return this.reserver_segment;
				}
				
			    public Integer workday_res_last_6mths;

				public Integer getWorkday_res_last_6mths () {
					return this.workday_res_last_6mths;
				}
				
			    public Boolean reserved_fewer_hours_last_month;

				public Boolean getReserved_fewer_hours_last_month () {
					return this.reserved_fewer_hours_last_month;
				}
				
			    public java.util.Date last_nps_response_date;

				public java.util.Date getLast_nps_response_date () {
					return this.last_nps_response_date;
				}
				
			    public Short last_nps_score;

				public Short getLast_nps_score () {
					return this.last_nps_score;
				}
				
			    public java.util.Date last_incomplete_app_start_date;

				public java.util.Date getLast_incomplete_app_start_date () {
					return this.last_incomplete_app_start_date;
				}
				
			    public String last_incomplete_app_segment;

				public String getLast_incomplete_app_segment () {
					return this.last_incomplete_app_segment;
				}
				
			    public String last_incomplete_app_affiliate;

				public String getLast_incomplete_app_affiliate () {
					return this.last_incomplete_app_affiliate;
				}
				
			    public String last_incomplete_app_country;

				public String getLast_incomplete_app_country () {
					return this.last_incomplete_app_country;
				}
				
			    public String last_incomplete_app_last_step;

				public String getLast_incomplete_app_last_step () {
					return this.last_incomplete_app_last_step;
				}
				
			    public String last_active_corp_app_date;

				public String getLast_active_corp_app_date () {
					return this.last_active_corp_app_date;
				}
				
			    public String last_active_corp_app_country;

				public String getLast_active_corp_app_country () {
					return this.last_active_corp_app_country;
				}
				
			    public java.util.Date last_z4b_ssu_view_date;

				public java.util.Date getLast_z4b_ssu_view_date () {
					return this.last_z4b_ssu_view_date;
				}
				
			    public String last_z4b_ssu_last_step;

				public String getLast_z4b_ssu_last_step () {
					return this.last_z4b_ssu_last_step;
				}
				
			    public Boolean mdb_has_nonservice_account;

				public Boolean getMdb_has_nonservice_account () {
					return this.mdb_has_nonservice_account;
				}
				
			    public String mdb_primary_plan_category;

				public String getMdb_primary_plan_category () {
					return this.mdb_primary_plan_category;
				}
				
			    public String mdb_primary_segment_class;

				public String getMdb_primary_segment_class () {
					return this.mdb_primary_segment_class;
				}
				
			    public String mdb_metro_name;

				public String getMdb_metro_name () {
					return this.mdb_metro_name;
				}
				
			    public String mdb_tenure_category;

				public String getMdb_tenure_category () {
					return this.mdb_tenure_category;
				}
				
			    public String mdb_rfm_profile;

				public String getMdb_rfm_profile () {
					return this.mdb_rfm_profile;
				}
				
			    public String mdb_location_segment;

				public String getMdb_location_segment () {
					return this.mdb_location_segment;
				}
				
			    public Boolean sv_opened_in_last_90_days;

				public Boolean getSv_opened_in_last_90_days () {
					return this.sv_opened_in_last_90_days;
				}
				
			    public Boolean sv_clicked_in_last_90_days;

				public Boolean getSv_clicked_in_last_90_days () {
					return this.sv_clicked_in_last_90_days;
				}
				
			    public String data_split;

				public String getData_split () {
					return this.data_split;
				}
				
			    public String derived_country;

				public String getDerived_country () {
					return this.derived_country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.subscriber_key = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id_zc = null;
           				} else {
           			    	this.member_id_zc = dis.readLong();
           				}
					
					this.first_name_zc = readString(dis);
					
					this.last_name_zc = readString(dis);
					
					this.user_name_zc = readString(dis);
					
					this.email_address_zc = readString(dis);
					
					this.email_address_domain = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_emailable = null;
           				} else {
           			    	this.is_emailable = dis.readBoolean();
           				}
					
					this.birth_month_year = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_birthday_this_week = null;
           				} else {
           			    	this.has_birthday_this_week = dis.readBoolean();
           				}
					
					this.occupation = readString(dis);
					
					this.locale = readString(dis);
					
					this.preferred_address_zone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_address_in_uk_zipzone = null;
           				} else {
           			    	this.has_address_in_uk_zipzone = dis.readBoolean();
           				}
					
					this.first_join_date = readDate(dis);
					
					this.last_join_date = readDate(dis);
					
					this.last_left_date = readDate(dis);
					
					this.last_left_reason = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_left_due_to_termination = null;
           				} else {
           			    	this.last_left_due_to_termination = dis.readBoolean();
           				}
					
					this.current_status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_zipcard = null;
           				} else {
           			    	this.has_active_zipcard = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_approved_member = null;
           				} else {
           			    	this.is_current_approved_member = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_admin = null;
           				} else {
           			    	this.is_current_admin = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_prospect = null;
           				} else {
           			    	this.is_prospect = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_consumer = null;
           				} else {
           			    	this.has_segment_consumer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_collegiate = null;
           				} else {
           			    	this.has_segment_collegiate = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_zipvan = null;
           				} else {
           			    	this.has_segment_zipvan = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business = null;
           				} else {
           			    	this.has_segment_business = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_db = null;
           				} else {
           			    	this.has_segment_business_db = dis.readBoolean();
           				}
					
					this.business_direct_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_ib = null;
           				} else {
           			    	this.has_segment_business_ib = dis.readBoolean();
           				}
					
					this.business_individually_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_employee = null;
           				} else {
           			    	this.is_employee = dis.readBoolean();
           				}
					
					this.fleet_name = readString(dis);
					
					this.fleet_country_name = readString(dis);
					
					this.fleet_market_name = readString(dis);
					
					this.current_rate_plan_keys = readString(dis);
					
					this.current_affiliates = readString(dis);
					
					this.next_fee_date = readDate(dis);
					
					this.next_fee_frequency = readString(dis);
					
					this.next_fee_segment_class = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_fee_amount = null;
           				} else {
           			    	this.next_fee_amount = dis.readDouble();
           				}
					
					this.next_fee_currency = readString(dis);
					
					this.next_fee_account_name_zc = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.current_credit = null;
           				} else {
           			    	this.current_credit = dis.readDouble();
           				}
					
					this.current_credit_currency = readString(dis);
					
					this.next_credit_expiry_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_consumer_waiver = null;
           				} else {
           			    	this.has_active_consumer_waiver = dis.readBoolean();
           				}
					
					this.first_consumer_waiver_start_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_business_waiver = null;
           				} else {
           			    	this.has_active_business_waiver = dis.readBoolean();
           				}
					
					this.na_first_gas_fillup_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.na_last_35_day_gas_fillup_count = null;
           				} else {
           			    	this.na_last_35_day_gas_fillup_count = dis.readLong();
           				}
					
					this.first_res_start_date = readDate(dis);
					
					this.first_res_end_date = readDate(dis);
					
					this.first_res_type = readString(dis);
					
					this.first_res_vehicle_make = readString(dis);
					
					this.first_res_vehicle_model = readString(dis);
					
					this.first_res_vehicle_name = readString(dis);
					
					this.first_res_fleet_name = readString(dis);
					
					this.first_floating_res_end_date = readDate(dis);
					
					this.last_res_start_date = readDate(dis);
					
					this.last_res_end_date = readDate(dis);
					
					this.last_res_type = readString(dis);
					
					this.last_res_vehicle_make = readString(dis);
					
					this.last_res_vehicle_model = readString(dis);
					
					this.last_res_vehicle_name = readString(dis);
					
					this.last_res_vehicle_class = readString(dis);
					
					this.last_floating_res_end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_rt_res_mins_late = null;
           				} else {
           			    	this.last_rt_res_mins_late = dis.readLong();
           				}
					
					this.next_res_date = readDate(dis);
					
					this.next_res_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_res_count = null;
           				} else {
           			    	this.last_year_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_mi = null;
           				} else {
           			    	this.last_year_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_km = null;
           				} else {
           			    	this.last_year_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_hours = null;
           				} else {
           			    	this.last_year_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_count = null;
           				} else {
           			    	this.last_3_month_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_rev_in_usd = null;
           				} else {
           			    	this.last_3_month_res_rev_in_usd = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_mi = null;
           				} else {
           			    	this.last_3_month_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_km = null;
           				} else {
           			    	this.last_3_month_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_hours = null;
           				} else {
           			    	this.last_3_month_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_res_count = null;
           				} else {
           			    	this.total_res_count = dis.readLong();
           				}
					
					this.reserver_segment = readString(dis);
					
						this.workday_res_last_6mths = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reserved_fewer_hours_last_month = null;
           				} else {
           			    	this.reserved_fewer_hours_last_month = dis.readBoolean();
           				}
					
					this.last_nps_response_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_nps_score = null;
           				} else {
           			    	this.last_nps_score = dis.readShort();
           				}
					
					this.last_incomplete_app_start_date = readDate(dis);
					
					this.last_incomplete_app_segment = readString(dis);
					
					this.last_incomplete_app_affiliate = readString(dis);
					
					this.last_incomplete_app_country = readString(dis);
					
					this.last_incomplete_app_last_step = readString(dis);
					
					this.last_active_corp_app_date = readString(dis);
					
					this.last_active_corp_app_country = readString(dis);
					
					this.last_z4b_ssu_view_date = readDate(dis);
					
					this.last_z4b_ssu_last_step = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mdb_has_nonservice_account = null;
           				} else {
           			    	this.mdb_has_nonservice_account = dis.readBoolean();
           				}
					
					this.mdb_primary_plan_category = readString(dis);
					
					this.mdb_primary_segment_class = readString(dis);
					
					this.mdb_metro_name = readString(dis);
					
					this.mdb_tenure_category = readString(dis);
					
					this.mdb_rfm_profile = readString(dis);
					
					this.mdb_location_segment = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_opened_in_last_90_days = null;
           				} else {
           			    	this.sv_opened_in_last_90_days = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_clicked_in_last_90_days = null;
           				} else {
           			    	this.sv_clicked_in_last_90_days = dis.readBoolean();
           				}
					
					this.data_split = readString(dis);
					
					this.derived_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subscriber_key,dos);
					
					// Long
				
						if(this.member_id_zc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id_zc);
		            	}
					
					// String
				
						writeString(this.first_name_zc,dos);
					
					// String
				
						writeString(this.last_name_zc,dos);
					
					// String
				
						writeString(this.user_name_zc,dos);
					
					// String
				
						writeString(this.email_address_zc,dos);
					
					// String
				
						writeString(this.email_address_domain,dos);
					
					// Boolean
				
						if(this.is_emailable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_emailable);
		            	}
					
					// java.util.Date
				
						writeDate(this.birth_month_year,dos);
					
					// Boolean
				
						if(this.has_birthday_this_week == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_birthday_this_week);
		            	}
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.locale,dos);
					
					// String
				
						writeString(this.preferred_address_zone,dos);
					
					// Boolean
				
						if(this.has_address_in_uk_zipzone == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_address_in_uk_zipzone);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_left_date,dos);
					
					// String
				
						writeString(this.last_left_reason,dos);
					
					// Boolean
				
						if(this.last_left_due_to_termination == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.last_left_due_to_termination);
		            	}
					
					// String
				
						writeString(this.current_status,dos);
					
					// Boolean
				
						if(this.has_active_zipcard == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_zipcard);
		            	}
					
					// Boolean
				
						if(this.is_current_approved_member == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_approved_member);
		            	}
					
					// Boolean
				
						if(this.is_current_admin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_admin);
		            	}
					
					// Boolean
				
						if(this.is_prospect == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_prospect);
		            	}
					
					// Boolean
				
						if(this.has_segment_consumer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_consumer);
		            	}
					
					// Boolean
				
						if(this.has_segment_collegiate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_collegiate);
		            	}
					
					// Boolean
				
						if(this.has_segment_zipvan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_zipvan);
		            	}
					
					// Boolean
				
						if(this.has_segment_business == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business);
		            	}
					
					// Boolean
				
						if(this.has_segment_business_db == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_db);
		            	}
					
					// String
				
						writeString(this.business_direct_billed_code,dos);
					
					// Boolean
				
						if(this.has_segment_business_ib == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_ib);
		            	}
					
					// String
				
						writeString(this.business_individually_billed_code,dos);
					
					// Boolean
				
						if(this.is_employee == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_employee);
		            	}
					
					// String
				
						writeString(this.fleet_name,dos);
					
					// String
				
						writeString(this.fleet_country_name,dos);
					
					// String
				
						writeString(this.fleet_market_name,dos);
					
					// String
				
						writeString(this.current_rate_plan_keys,dos);
					
					// String
				
						writeString(this.current_affiliates,dos);
					
					// java.util.Date
				
						writeDate(this.next_fee_date,dos);
					
					// String
				
						writeString(this.next_fee_frequency,dos);
					
					// String
				
						writeString(this.next_fee_segment_class,dos);
					
					// Double
				
						if(this.next_fee_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.next_fee_amount);
		            	}
					
					// String
				
						writeString(this.next_fee_currency,dos);
					
					// String
				
						writeString(this.next_fee_account_name_zc,dos);
					
					// Double
				
						if(this.current_credit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.current_credit);
		            	}
					
					// String
				
						writeString(this.current_credit_currency,dos);
					
					// java.util.Date
				
						writeDate(this.next_credit_expiry_date,dos);
					
					// Boolean
				
						if(this.has_active_consumer_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_consumer_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_consumer_waiver_start_date,dos);
					
					// Boolean
				
						if(this.has_active_business_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_business_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.na_first_gas_fillup_date,dos);
					
					// Long
				
						if(this.na_last_35_day_gas_fillup_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.na_last_35_day_gas_fillup_count);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.first_res_end_date,dos);
					
					// String
				
						writeString(this.first_res_type,dos);
					
					// String
				
						writeString(this.first_res_vehicle_make,dos);
					
					// String
				
						writeString(this.first_res_vehicle_model,dos);
					
					// String
				
						writeString(this.first_res_vehicle_name,dos);
					
					// String
				
						writeString(this.first_res_fleet_name,dos);
					
					// java.util.Date
				
						writeDate(this.first_floating_res_end_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_end_date,dos);
					
					// String
				
						writeString(this.last_res_type,dos);
					
					// String
				
						writeString(this.last_res_vehicle_make,dos);
					
					// String
				
						writeString(this.last_res_vehicle_model,dos);
					
					// String
				
						writeString(this.last_res_vehicle_name,dos);
					
					// String
				
						writeString(this.last_res_vehicle_class,dos);
					
					// java.util.Date
				
						writeDate(this.last_floating_res_end_date,dos);
					
					// Long
				
						if(this.last_rt_res_mins_late == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_rt_res_mins_late);
		            	}
					
					// java.util.Date
				
						writeDate(this.next_res_date,dos);
					
					// String
				
						writeString(this.next_res_type,dos);
					
					// Long
				
						if(this.last_year_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_year_res_count);
		            	}
					
					// Double
				
						if(this.last_year_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_mi);
		            	}
					
					// Double
				
						if(this.last_year_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_km);
		            	}
					
					// Double
				
						if(this.last_year_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_hours);
		            	}
					
					// Long
				
						if(this.last_3_month_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_3_month_res_count);
		            	}
					
					// Double
				
						if(this.last_3_month_res_rev_in_usd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_res_rev_in_usd);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_mi);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_km);
		            	}
					
					// Double
				
						if(this.last_3_month_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_hours);
		            	}
					
					// Long
				
						if(this.total_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.total_res_count);
		            	}
					
					// String
				
						writeString(this.reserver_segment,dos);
					
					// Integer
				
						writeInteger(this.workday_res_last_6mths,dos);
					
					// Boolean
				
						if(this.reserved_fewer_hours_last_month == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.reserved_fewer_hours_last_month);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_nps_response_date,dos);
					
					// Short
				
						if(this.last_nps_score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.last_nps_score);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_incomplete_app_start_date,dos);
					
					// String
				
						writeString(this.last_incomplete_app_segment,dos);
					
					// String
				
						writeString(this.last_incomplete_app_affiliate,dos);
					
					// String
				
						writeString(this.last_incomplete_app_country,dos);
					
					// String
				
						writeString(this.last_incomplete_app_last_step,dos);
					
					// String
				
						writeString(this.last_active_corp_app_date,dos);
					
					// String
				
						writeString(this.last_active_corp_app_country,dos);
					
					// java.util.Date
				
						writeDate(this.last_z4b_ssu_view_date,dos);
					
					// String
				
						writeString(this.last_z4b_ssu_last_step,dos);
					
					// Boolean
				
						if(this.mdb_has_nonservice_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mdb_has_nonservice_account);
		            	}
					
					// String
				
						writeString(this.mdb_primary_plan_category,dos);
					
					// String
				
						writeString(this.mdb_primary_segment_class,dos);
					
					// String
				
						writeString(this.mdb_metro_name,dos);
					
					// String
				
						writeString(this.mdb_tenure_category,dos);
					
					// String
				
						writeString(this.mdb_rfm_profile,dos);
					
					// String
				
						writeString(this.mdb_location_segment,dos);
					
					// Boolean
				
						if(this.sv_opened_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_opened_in_last_90_days);
		            	}
					
					// Boolean
				
						if(this.sv_clicked_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_clicked_in_last_90_days);
		            	}
					
					// String
				
						writeString(this.data_split,dos);
					
					// String
				
						writeString(this.derived_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subscriber_key="+subscriber_key);
		sb.append(",member_id_zc="+String.valueOf(member_id_zc));
		sb.append(",first_name_zc="+first_name_zc);
		sb.append(",last_name_zc="+last_name_zc);
		sb.append(",user_name_zc="+user_name_zc);
		sb.append(",email_address_zc="+email_address_zc);
		sb.append(",email_address_domain="+email_address_domain);
		sb.append(",is_emailable="+String.valueOf(is_emailable));
		sb.append(",birth_month_year="+String.valueOf(birth_month_year));
		sb.append(",has_birthday_this_week="+String.valueOf(has_birthday_this_week));
		sb.append(",occupation="+occupation);
		sb.append(",locale="+locale);
		sb.append(",preferred_address_zone="+preferred_address_zone);
		sb.append(",has_address_in_uk_zipzone="+String.valueOf(has_address_in_uk_zipzone));
		sb.append(",first_join_date="+String.valueOf(first_join_date));
		sb.append(",last_join_date="+String.valueOf(last_join_date));
		sb.append(",last_left_date="+String.valueOf(last_left_date));
		sb.append(",last_left_reason="+last_left_reason);
		sb.append(",last_left_due_to_termination="+String.valueOf(last_left_due_to_termination));
		sb.append(",current_status="+current_status);
		sb.append(",has_active_zipcard="+String.valueOf(has_active_zipcard));
		sb.append(",is_current_approved_member="+String.valueOf(is_current_approved_member));
		sb.append(",is_current_admin="+String.valueOf(is_current_admin));
		sb.append(",is_prospect="+String.valueOf(is_prospect));
		sb.append(",has_segment_consumer="+String.valueOf(has_segment_consumer));
		sb.append(",has_segment_collegiate="+String.valueOf(has_segment_collegiate));
		sb.append(",has_segment_zipvan="+String.valueOf(has_segment_zipvan));
		sb.append(",has_segment_business="+String.valueOf(has_segment_business));
		sb.append(",has_segment_business_db="+String.valueOf(has_segment_business_db));
		sb.append(",business_direct_billed_code="+business_direct_billed_code);
		sb.append(",has_segment_business_ib="+String.valueOf(has_segment_business_ib));
		sb.append(",business_individually_billed_code="+business_individually_billed_code);
		sb.append(",is_employee="+String.valueOf(is_employee));
		sb.append(",fleet_name="+fleet_name);
		sb.append(",fleet_country_name="+fleet_country_name);
		sb.append(",fleet_market_name="+fleet_market_name);
		sb.append(",current_rate_plan_keys="+current_rate_plan_keys);
		sb.append(",current_affiliates="+current_affiliates);
		sb.append(",next_fee_date="+String.valueOf(next_fee_date));
		sb.append(",next_fee_frequency="+next_fee_frequency);
		sb.append(",next_fee_segment_class="+next_fee_segment_class);
		sb.append(",next_fee_amount="+String.valueOf(next_fee_amount));
		sb.append(",next_fee_currency="+next_fee_currency);
		sb.append(",next_fee_account_name_zc="+next_fee_account_name_zc);
		sb.append(",current_credit="+String.valueOf(current_credit));
		sb.append(",current_credit_currency="+current_credit_currency);
		sb.append(",next_credit_expiry_date="+String.valueOf(next_credit_expiry_date));
		sb.append(",has_active_consumer_waiver="+String.valueOf(has_active_consumer_waiver));
		sb.append(",first_consumer_waiver_start_date="+String.valueOf(first_consumer_waiver_start_date));
		sb.append(",has_active_business_waiver="+String.valueOf(has_active_business_waiver));
		sb.append(",na_first_gas_fillup_date="+String.valueOf(na_first_gas_fillup_date));
		sb.append(",na_last_35_day_gas_fillup_count="+String.valueOf(na_last_35_day_gas_fillup_count));
		sb.append(",first_res_start_date="+String.valueOf(first_res_start_date));
		sb.append(",first_res_end_date="+String.valueOf(first_res_end_date));
		sb.append(",first_res_type="+first_res_type);
		sb.append(",first_res_vehicle_make="+first_res_vehicle_make);
		sb.append(",first_res_vehicle_model="+first_res_vehicle_model);
		sb.append(",first_res_vehicle_name="+first_res_vehicle_name);
		sb.append(",first_res_fleet_name="+first_res_fleet_name);
		sb.append(",first_floating_res_end_date="+String.valueOf(first_floating_res_end_date));
		sb.append(",last_res_start_date="+String.valueOf(last_res_start_date));
		sb.append(",last_res_end_date="+String.valueOf(last_res_end_date));
		sb.append(",last_res_type="+last_res_type);
		sb.append(",last_res_vehicle_make="+last_res_vehicle_make);
		sb.append(",last_res_vehicle_model="+last_res_vehicle_model);
		sb.append(",last_res_vehicle_name="+last_res_vehicle_name);
		sb.append(",last_res_vehicle_class="+last_res_vehicle_class);
		sb.append(",last_floating_res_end_date="+String.valueOf(last_floating_res_end_date));
		sb.append(",last_rt_res_mins_late="+String.valueOf(last_rt_res_mins_late));
		sb.append(",next_res_date="+String.valueOf(next_res_date));
		sb.append(",next_res_type="+next_res_type);
		sb.append(",last_year_res_count="+String.valueOf(last_year_res_count));
		sb.append(",last_year_distance_mi="+String.valueOf(last_year_distance_mi));
		sb.append(",last_year_distance_km="+String.valueOf(last_year_distance_km));
		sb.append(",last_year_hours="+String.valueOf(last_year_hours));
		sb.append(",last_3_month_res_count="+String.valueOf(last_3_month_res_count));
		sb.append(",last_3_month_res_rev_in_usd="+String.valueOf(last_3_month_res_rev_in_usd));
		sb.append(",last_3_month_distance_mi="+String.valueOf(last_3_month_distance_mi));
		sb.append(",last_3_month_distance_km="+String.valueOf(last_3_month_distance_km));
		sb.append(",last_3_month_hours="+String.valueOf(last_3_month_hours));
		sb.append(",total_res_count="+String.valueOf(total_res_count));
		sb.append(",reserver_segment="+reserver_segment);
		sb.append(",workday_res_last_6mths="+String.valueOf(workday_res_last_6mths));
		sb.append(",reserved_fewer_hours_last_month="+String.valueOf(reserved_fewer_hours_last_month));
		sb.append(",last_nps_response_date="+String.valueOf(last_nps_response_date));
		sb.append(",last_nps_score="+String.valueOf(last_nps_score));
		sb.append(",last_incomplete_app_start_date="+String.valueOf(last_incomplete_app_start_date));
		sb.append(",last_incomplete_app_segment="+last_incomplete_app_segment);
		sb.append(",last_incomplete_app_affiliate="+last_incomplete_app_affiliate);
		sb.append(",last_incomplete_app_country="+last_incomplete_app_country);
		sb.append(",last_incomplete_app_last_step="+last_incomplete_app_last_step);
		sb.append(",last_active_corp_app_date="+last_active_corp_app_date);
		sb.append(",last_active_corp_app_country="+last_active_corp_app_country);
		sb.append(",last_z4b_ssu_view_date="+String.valueOf(last_z4b_ssu_view_date));
		sb.append(",last_z4b_ssu_last_step="+last_z4b_ssu_last_step);
		sb.append(",mdb_has_nonservice_account="+String.valueOf(mdb_has_nonservice_account));
		sb.append(",mdb_primary_plan_category="+mdb_primary_plan_category);
		sb.append(",mdb_primary_segment_class="+mdb_primary_segment_class);
		sb.append(",mdb_metro_name="+mdb_metro_name);
		sb.append(",mdb_tenure_category="+mdb_tenure_category);
		sb.append(",mdb_rfm_profile="+mdb_rfm_profile);
		sb.append(",mdb_location_segment="+mdb_location_segment);
		sb.append(",sv_opened_in_last_90_days="+String.valueOf(sv_opened_in_last_90_days));
		sb.append(",sv_clicked_in_last_90_days="+String.valueOf(sv_clicked_in_last_90_days));
		sb.append(",data_split="+data_split);
		sb.append(",derived_country="+derived_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[0];

	
			    public String subscriber_key;

				public String getSubscriber_key () {
					return this.subscriber_key;
				}
				
			    public Long member_id_zc;

				public Long getMember_id_zc () {
					return this.member_id_zc;
				}
				
			    public String first_name_zc;

				public String getFirst_name_zc () {
					return this.first_name_zc;
				}
				
			    public String last_name_zc;

				public String getLast_name_zc () {
					return this.last_name_zc;
				}
				
			    public String user_name_zc;

				public String getUser_name_zc () {
					return this.user_name_zc;
				}
				
			    public String email_address_zc;

				public String getEmail_address_zc () {
					return this.email_address_zc;
				}
				
			    public String email_address_domain;

				public String getEmail_address_domain () {
					return this.email_address_domain;
				}
				
			    public Boolean is_emailable;

				public Boolean getIs_emailable () {
					return this.is_emailable;
				}
				
			    public java.util.Date birth_month_year;

				public java.util.Date getBirth_month_year () {
					return this.birth_month_year;
				}
				
			    public Boolean has_birthday_this_week;

				public Boolean getHas_birthday_this_week () {
					return this.has_birthday_this_week;
				}
				
			    public String occupation;

				public String getOccupation () {
					return this.occupation;
				}
				
			    public String locale;

				public String getLocale () {
					return this.locale;
				}
				
			    public String preferred_address_zone;

				public String getPreferred_address_zone () {
					return this.preferred_address_zone;
				}
				
			    public Boolean has_address_in_uk_zipzone;

				public Boolean getHas_address_in_uk_zipzone () {
					return this.has_address_in_uk_zipzone;
				}
				
			    public java.util.Date first_join_date;

				public java.util.Date getFirst_join_date () {
					return this.first_join_date;
				}
				
			    public java.util.Date last_join_date;

				public java.util.Date getLast_join_date () {
					return this.last_join_date;
				}
				
			    public java.util.Date last_left_date;

				public java.util.Date getLast_left_date () {
					return this.last_left_date;
				}
				
			    public String last_left_reason;

				public String getLast_left_reason () {
					return this.last_left_reason;
				}
				
			    public Boolean last_left_due_to_termination;

				public Boolean getLast_left_due_to_termination () {
					return this.last_left_due_to_termination;
				}
				
			    public String current_status;

				public String getCurrent_status () {
					return this.current_status;
				}
				
			    public Boolean has_active_zipcard;

				public Boolean getHas_active_zipcard () {
					return this.has_active_zipcard;
				}
				
			    public Boolean is_current_approved_member;

				public Boolean getIs_current_approved_member () {
					return this.is_current_approved_member;
				}
				
			    public Boolean is_current_admin;

				public Boolean getIs_current_admin () {
					return this.is_current_admin;
				}
				
			    public Boolean is_prospect;

				public Boolean getIs_prospect () {
					return this.is_prospect;
				}
				
			    public Boolean has_segment_consumer;

				public Boolean getHas_segment_consumer () {
					return this.has_segment_consumer;
				}
				
			    public Boolean has_segment_collegiate;

				public Boolean getHas_segment_collegiate () {
					return this.has_segment_collegiate;
				}
				
			    public Boolean has_segment_zipvan;

				public Boolean getHas_segment_zipvan () {
					return this.has_segment_zipvan;
				}
				
			    public Boolean has_segment_business;

				public Boolean getHas_segment_business () {
					return this.has_segment_business;
				}
				
			    public Boolean has_segment_business_db;

				public Boolean getHas_segment_business_db () {
					return this.has_segment_business_db;
				}
				
			    public String business_direct_billed_code;

				public String getBusiness_direct_billed_code () {
					return this.business_direct_billed_code;
				}
				
			    public Boolean has_segment_business_ib;

				public Boolean getHas_segment_business_ib () {
					return this.has_segment_business_ib;
				}
				
			    public String business_individually_billed_code;

				public String getBusiness_individually_billed_code () {
					return this.business_individually_billed_code;
				}
				
			    public Boolean is_employee;

				public Boolean getIs_employee () {
					return this.is_employee;
				}
				
			    public String fleet_name;

				public String getFleet_name () {
					return this.fleet_name;
				}
				
			    public String fleet_country_name;

				public String getFleet_country_name () {
					return this.fleet_country_name;
				}
				
			    public String fleet_market_name;

				public String getFleet_market_name () {
					return this.fleet_market_name;
				}
				
			    public String current_rate_plan_keys;

				public String getCurrent_rate_plan_keys () {
					return this.current_rate_plan_keys;
				}
				
			    public String current_affiliates;

				public String getCurrent_affiliates () {
					return this.current_affiliates;
				}
				
			    public java.util.Date next_fee_date;

				public java.util.Date getNext_fee_date () {
					return this.next_fee_date;
				}
				
			    public String next_fee_frequency;

				public String getNext_fee_frequency () {
					return this.next_fee_frequency;
				}
				
			    public String next_fee_segment_class;

				public String getNext_fee_segment_class () {
					return this.next_fee_segment_class;
				}
				
			    public Double next_fee_amount;

				public Double getNext_fee_amount () {
					return this.next_fee_amount;
				}
				
			    public String next_fee_currency;

				public String getNext_fee_currency () {
					return this.next_fee_currency;
				}
				
			    public String next_fee_account_name_zc;

				public String getNext_fee_account_name_zc () {
					return this.next_fee_account_name_zc;
				}
				
			    public Double current_credit;

				public Double getCurrent_credit () {
					return this.current_credit;
				}
				
			    public String current_credit_currency;

				public String getCurrent_credit_currency () {
					return this.current_credit_currency;
				}
				
			    public java.util.Date next_credit_expiry_date;

				public java.util.Date getNext_credit_expiry_date () {
					return this.next_credit_expiry_date;
				}
				
			    public Boolean has_active_consumer_waiver;

				public Boolean getHas_active_consumer_waiver () {
					return this.has_active_consumer_waiver;
				}
				
			    public java.util.Date first_consumer_waiver_start_date;

				public java.util.Date getFirst_consumer_waiver_start_date () {
					return this.first_consumer_waiver_start_date;
				}
				
			    public Boolean has_active_business_waiver;

				public Boolean getHas_active_business_waiver () {
					return this.has_active_business_waiver;
				}
				
			    public java.util.Date na_first_gas_fillup_date;

				public java.util.Date getNa_first_gas_fillup_date () {
					return this.na_first_gas_fillup_date;
				}
				
			    public Long na_last_35_day_gas_fillup_count;

				public Long getNa_last_35_day_gas_fillup_count () {
					return this.na_last_35_day_gas_fillup_count;
				}
				
			    public java.util.Date first_res_start_date;

				public java.util.Date getFirst_res_start_date () {
					return this.first_res_start_date;
				}
				
			    public java.util.Date first_res_end_date;

				public java.util.Date getFirst_res_end_date () {
					return this.first_res_end_date;
				}
				
			    public String first_res_type;

				public String getFirst_res_type () {
					return this.first_res_type;
				}
				
			    public String first_res_vehicle_make;

				public String getFirst_res_vehicle_make () {
					return this.first_res_vehicle_make;
				}
				
			    public String first_res_vehicle_model;

				public String getFirst_res_vehicle_model () {
					return this.first_res_vehicle_model;
				}
				
			    public String first_res_vehicle_name;

				public String getFirst_res_vehicle_name () {
					return this.first_res_vehicle_name;
				}
				
			    public String first_res_fleet_name;

				public String getFirst_res_fleet_name () {
					return this.first_res_fleet_name;
				}
				
			    public java.util.Date first_floating_res_end_date;

				public java.util.Date getFirst_floating_res_end_date () {
					return this.first_floating_res_end_date;
				}
				
			    public java.util.Date last_res_start_date;

				public java.util.Date getLast_res_start_date () {
					return this.last_res_start_date;
				}
				
			    public java.util.Date last_res_end_date;

				public java.util.Date getLast_res_end_date () {
					return this.last_res_end_date;
				}
				
			    public String last_res_type;

				public String getLast_res_type () {
					return this.last_res_type;
				}
				
			    public String last_res_vehicle_make;

				public String getLast_res_vehicle_make () {
					return this.last_res_vehicle_make;
				}
				
			    public String last_res_vehicle_model;

				public String getLast_res_vehicle_model () {
					return this.last_res_vehicle_model;
				}
				
			    public String last_res_vehicle_name;

				public String getLast_res_vehicle_name () {
					return this.last_res_vehicle_name;
				}
				
			    public String last_res_vehicle_class;

				public String getLast_res_vehicle_class () {
					return this.last_res_vehicle_class;
				}
				
			    public java.util.Date last_floating_res_end_date;

				public java.util.Date getLast_floating_res_end_date () {
					return this.last_floating_res_end_date;
				}
				
			    public Long last_rt_res_mins_late;

				public Long getLast_rt_res_mins_late () {
					return this.last_rt_res_mins_late;
				}
				
			    public java.util.Date next_res_date;

				public java.util.Date getNext_res_date () {
					return this.next_res_date;
				}
				
			    public String next_res_type;

				public String getNext_res_type () {
					return this.next_res_type;
				}
				
			    public Long last_year_res_count;

				public Long getLast_year_res_count () {
					return this.last_year_res_count;
				}
				
			    public Double last_year_distance_mi;

				public Double getLast_year_distance_mi () {
					return this.last_year_distance_mi;
				}
				
			    public Double last_year_distance_km;

				public Double getLast_year_distance_km () {
					return this.last_year_distance_km;
				}
				
			    public Double last_year_hours;

				public Double getLast_year_hours () {
					return this.last_year_hours;
				}
				
			    public Long last_3_month_res_count;

				public Long getLast_3_month_res_count () {
					return this.last_3_month_res_count;
				}
				
			    public Double last_3_month_res_rev_in_usd;

				public Double getLast_3_month_res_rev_in_usd () {
					return this.last_3_month_res_rev_in_usd;
				}
				
			    public Double last_3_month_distance_mi;

				public Double getLast_3_month_distance_mi () {
					return this.last_3_month_distance_mi;
				}
				
			    public Double last_3_month_distance_km;

				public Double getLast_3_month_distance_km () {
					return this.last_3_month_distance_km;
				}
				
			    public Double last_3_month_hours;

				public Double getLast_3_month_hours () {
					return this.last_3_month_hours;
				}
				
			    public Long total_res_count;

				public Long getTotal_res_count () {
					return this.total_res_count;
				}
				
			    public String reserver_segment;

				public String getReserver_segment () {
					return this.reserver_segment;
				}
				
			    public Integer workday_res_last_6mths;

				public Integer getWorkday_res_last_6mths () {
					return this.workday_res_last_6mths;
				}
				
			    public Boolean reserved_fewer_hours_last_month;

				public Boolean getReserved_fewer_hours_last_month () {
					return this.reserved_fewer_hours_last_month;
				}
				
			    public java.util.Date last_nps_response_date;

				public java.util.Date getLast_nps_response_date () {
					return this.last_nps_response_date;
				}
				
			    public Short last_nps_score;

				public Short getLast_nps_score () {
					return this.last_nps_score;
				}
				
			    public java.util.Date last_incomplete_app_start_date;

				public java.util.Date getLast_incomplete_app_start_date () {
					return this.last_incomplete_app_start_date;
				}
				
			    public String last_incomplete_app_segment;

				public String getLast_incomplete_app_segment () {
					return this.last_incomplete_app_segment;
				}
				
			    public String last_incomplete_app_affiliate;

				public String getLast_incomplete_app_affiliate () {
					return this.last_incomplete_app_affiliate;
				}
				
			    public String last_incomplete_app_country;

				public String getLast_incomplete_app_country () {
					return this.last_incomplete_app_country;
				}
				
			    public String last_incomplete_app_last_step;

				public String getLast_incomplete_app_last_step () {
					return this.last_incomplete_app_last_step;
				}
				
			    public String last_active_corp_app_date;

				public String getLast_active_corp_app_date () {
					return this.last_active_corp_app_date;
				}
				
			    public String last_active_corp_app_country;

				public String getLast_active_corp_app_country () {
					return this.last_active_corp_app_country;
				}
				
			    public java.util.Date last_z4b_ssu_view_date;

				public java.util.Date getLast_z4b_ssu_view_date () {
					return this.last_z4b_ssu_view_date;
				}
				
			    public String last_z4b_ssu_last_step;

				public String getLast_z4b_ssu_last_step () {
					return this.last_z4b_ssu_last_step;
				}
				
			    public Boolean mdb_has_nonservice_account;

				public Boolean getMdb_has_nonservice_account () {
					return this.mdb_has_nonservice_account;
				}
				
			    public String mdb_primary_plan_category;

				public String getMdb_primary_plan_category () {
					return this.mdb_primary_plan_category;
				}
				
			    public String mdb_primary_segment_class;

				public String getMdb_primary_segment_class () {
					return this.mdb_primary_segment_class;
				}
				
			    public String mdb_metro_name;

				public String getMdb_metro_name () {
					return this.mdb_metro_name;
				}
				
			    public String mdb_tenure_category;

				public String getMdb_tenure_category () {
					return this.mdb_tenure_category;
				}
				
			    public String mdb_rfm_profile;

				public String getMdb_rfm_profile () {
					return this.mdb_rfm_profile;
				}
				
			    public String mdb_location_segment;

				public String getMdb_location_segment () {
					return this.mdb_location_segment;
				}
				
			    public Boolean sv_opened_in_last_90_days;

				public Boolean getSv_opened_in_last_90_days () {
					return this.sv_opened_in_last_90_days;
				}
				
			    public Boolean sv_clicked_in_last_90_days;

				public Boolean getSv_clicked_in_last_90_days () {
					return this.sv_clicked_in_last_90_days;
				}
				
			    public String data_split;

				public String getData_split () {
					return this.data_split;
				}
				
			    public String derived_country;

				public String getDerived_country () {
					return this.derived_country;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_SalesforceExport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_SalesforceExport) {

        	try {

        		int length = 0;
		
					this.subscriber_key = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id_zc = null;
           				} else {
           			    	this.member_id_zc = dis.readLong();
           				}
					
					this.first_name_zc = readString(dis);
					
					this.last_name_zc = readString(dis);
					
					this.user_name_zc = readString(dis);
					
					this.email_address_zc = readString(dis);
					
					this.email_address_domain = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_emailable = null;
           				} else {
           			    	this.is_emailable = dis.readBoolean();
           				}
					
					this.birth_month_year = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_birthday_this_week = null;
           				} else {
           			    	this.has_birthday_this_week = dis.readBoolean();
           				}
					
					this.occupation = readString(dis);
					
					this.locale = readString(dis);
					
					this.preferred_address_zone = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_address_in_uk_zipzone = null;
           				} else {
           			    	this.has_address_in_uk_zipzone = dis.readBoolean();
           				}
					
					this.first_join_date = readDate(dis);
					
					this.last_join_date = readDate(dis);
					
					this.last_left_date = readDate(dis);
					
					this.last_left_reason = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_left_due_to_termination = null;
           				} else {
           			    	this.last_left_due_to_termination = dis.readBoolean();
           				}
					
					this.current_status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_zipcard = null;
           				} else {
           			    	this.has_active_zipcard = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_approved_member = null;
           				} else {
           			    	this.is_current_approved_member = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_current_admin = null;
           				} else {
           			    	this.is_current_admin = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_prospect = null;
           				} else {
           			    	this.is_prospect = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_consumer = null;
           				} else {
           			    	this.has_segment_consumer = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_collegiate = null;
           				} else {
           			    	this.has_segment_collegiate = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_zipvan = null;
           				} else {
           			    	this.has_segment_zipvan = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business = null;
           				} else {
           			    	this.has_segment_business = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_db = null;
           				} else {
           			    	this.has_segment_business_db = dis.readBoolean();
           				}
					
					this.business_direct_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_segment_business_ib = null;
           				} else {
           			    	this.has_segment_business_ib = dis.readBoolean();
           				}
					
					this.business_individually_billed_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.is_employee = null;
           				} else {
           			    	this.is_employee = dis.readBoolean();
           				}
					
					this.fleet_name = readString(dis);
					
					this.fleet_country_name = readString(dis);
					
					this.fleet_market_name = readString(dis);
					
					this.current_rate_plan_keys = readString(dis);
					
					this.current_affiliates = readString(dis);
					
					this.next_fee_date = readDate(dis);
					
					this.next_fee_frequency = readString(dis);
					
					this.next_fee_segment_class = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_fee_amount = null;
           				} else {
           			    	this.next_fee_amount = dis.readDouble();
           				}
					
					this.next_fee_currency = readString(dis);
					
					this.next_fee_account_name_zc = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.current_credit = null;
           				} else {
           			    	this.current_credit = dis.readDouble();
           				}
					
					this.current_credit_currency = readString(dis);
					
					this.next_credit_expiry_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_consumer_waiver = null;
           				} else {
           			    	this.has_active_consumer_waiver = dis.readBoolean();
           				}
					
					this.first_consumer_waiver_start_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.has_active_business_waiver = null;
           				} else {
           			    	this.has_active_business_waiver = dis.readBoolean();
           				}
					
					this.na_first_gas_fillup_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.na_last_35_day_gas_fillup_count = null;
           				} else {
           			    	this.na_last_35_day_gas_fillup_count = dis.readLong();
           				}
					
					this.first_res_start_date = readDate(dis);
					
					this.first_res_end_date = readDate(dis);
					
					this.first_res_type = readString(dis);
					
					this.first_res_vehicle_make = readString(dis);
					
					this.first_res_vehicle_model = readString(dis);
					
					this.first_res_vehicle_name = readString(dis);
					
					this.first_res_fleet_name = readString(dis);
					
					this.first_floating_res_end_date = readDate(dis);
					
					this.last_res_start_date = readDate(dis);
					
					this.last_res_end_date = readDate(dis);
					
					this.last_res_type = readString(dis);
					
					this.last_res_vehicle_make = readString(dis);
					
					this.last_res_vehicle_model = readString(dis);
					
					this.last_res_vehicle_name = readString(dis);
					
					this.last_res_vehicle_class = readString(dis);
					
					this.last_floating_res_end_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_rt_res_mins_late = null;
           				} else {
           			    	this.last_rt_res_mins_late = dis.readLong();
           				}
					
					this.next_res_date = readDate(dis);
					
					this.next_res_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_res_count = null;
           				} else {
           			    	this.last_year_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_mi = null;
           				} else {
           			    	this.last_year_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_distance_km = null;
           				} else {
           			    	this.last_year_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_year_hours = null;
           				} else {
           			    	this.last_year_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_count = null;
           				} else {
           			    	this.last_3_month_res_count = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_res_rev_in_usd = null;
           				} else {
           			    	this.last_3_month_res_rev_in_usd = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_mi = null;
           				} else {
           			    	this.last_3_month_distance_mi = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_distance_km = null;
           				} else {
           			    	this.last_3_month_distance_km = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_3_month_hours = null;
           				} else {
           			    	this.last_3_month_hours = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.total_res_count = null;
           				} else {
           			    	this.total_res_count = dis.readLong();
           				}
					
					this.reserver_segment = readString(dis);
					
						this.workday_res_last_6mths = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reserved_fewer_hours_last_month = null;
           				} else {
           			    	this.reserved_fewer_hours_last_month = dis.readBoolean();
           				}
					
					this.last_nps_response_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.last_nps_score = null;
           				} else {
           			    	this.last_nps_score = dis.readShort();
           				}
					
					this.last_incomplete_app_start_date = readDate(dis);
					
					this.last_incomplete_app_segment = readString(dis);
					
					this.last_incomplete_app_affiliate = readString(dis);
					
					this.last_incomplete_app_country = readString(dis);
					
					this.last_incomplete_app_last_step = readString(dis);
					
					this.last_active_corp_app_date = readString(dis);
					
					this.last_active_corp_app_country = readString(dis);
					
					this.last_z4b_ssu_view_date = readDate(dis);
					
					this.last_z4b_ssu_last_step = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mdb_has_nonservice_account = null;
           				} else {
           			    	this.mdb_has_nonservice_account = dis.readBoolean();
           				}
					
					this.mdb_primary_plan_category = readString(dis);
					
					this.mdb_primary_segment_class = readString(dis);
					
					this.mdb_metro_name = readString(dis);
					
					this.mdb_tenure_category = readString(dis);
					
					this.mdb_rfm_profile = readString(dis);
					
					this.mdb_location_segment = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_opened_in_last_90_days = null;
           				} else {
           			    	this.sv_opened_in_last_90_days = dis.readBoolean();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sv_clicked_in_last_90_days = null;
           				} else {
           			    	this.sv_clicked_in_last_90_days = dis.readBoolean();
           				}
					
					this.data_split = readString(dis);
					
					this.derived_country = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.subscriber_key,dos);
					
					// Long
				
						if(this.member_id_zc == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id_zc);
		            	}
					
					// String
				
						writeString(this.first_name_zc,dos);
					
					// String
				
						writeString(this.last_name_zc,dos);
					
					// String
				
						writeString(this.user_name_zc,dos);
					
					// String
				
						writeString(this.email_address_zc,dos);
					
					// String
				
						writeString(this.email_address_domain,dos);
					
					// Boolean
				
						if(this.is_emailable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_emailable);
		            	}
					
					// java.util.Date
				
						writeDate(this.birth_month_year,dos);
					
					// Boolean
				
						if(this.has_birthday_this_week == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_birthday_this_week);
		            	}
					
					// String
				
						writeString(this.occupation,dos);
					
					// String
				
						writeString(this.locale,dos);
					
					// String
				
						writeString(this.preferred_address_zone,dos);
					
					// Boolean
				
						if(this.has_address_in_uk_zipzone == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_address_in_uk_zipzone);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_join_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_left_date,dos);
					
					// String
				
						writeString(this.last_left_reason,dos);
					
					// Boolean
				
						if(this.last_left_due_to_termination == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.last_left_due_to_termination);
		            	}
					
					// String
				
						writeString(this.current_status,dos);
					
					// Boolean
				
						if(this.has_active_zipcard == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_zipcard);
		            	}
					
					// Boolean
				
						if(this.is_current_approved_member == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_approved_member);
		            	}
					
					// Boolean
				
						if(this.is_current_admin == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_current_admin);
		            	}
					
					// Boolean
				
						if(this.is_prospect == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_prospect);
		            	}
					
					// Boolean
				
						if(this.has_segment_consumer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_consumer);
		            	}
					
					// Boolean
				
						if(this.has_segment_collegiate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_collegiate);
		            	}
					
					// Boolean
				
						if(this.has_segment_zipvan == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_zipvan);
		            	}
					
					// Boolean
				
						if(this.has_segment_business == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business);
		            	}
					
					// Boolean
				
						if(this.has_segment_business_db == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_db);
		            	}
					
					// String
				
						writeString(this.business_direct_billed_code,dos);
					
					// Boolean
				
						if(this.has_segment_business_ib == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_segment_business_ib);
		            	}
					
					// String
				
						writeString(this.business_individually_billed_code,dos);
					
					// Boolean
				
						if(this.is_employee == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.is_employee);
		            	}
					
					// String
				
						writeString(this.fleet_name,dos);
					
					// String
				
						writeString(this.fleet_country_name,dos);
					
					// String
				
						writeString(this.fleet_market_name,dos);
					
					// String
				
						writeString(this.current_rate_plan_keys,dos);
					
					// String
				
						writeString(this.current_affiliates,dos);
					
					// java.util.Date
				
						writeDate(this.next_fee_date,dos);
					
					// String
				
						writeString(this.next_fee_frequency,dos);
					
					// String
				
						writeString(this.next_fee_segment_class,dos);
					
					// Double
				
						if(this.next_fee_amount == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.next_fee_amount);
		            	}
					
					// String
				
						writeString(this.next_fee_currency,dos);
					
					// String
				
						writeString(this.next_fee_account_name_zc,dos);
					
					// Double
				
						if(this.current_credit == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.current_credit);
		            	}
					
					// String
				
						writeString(this.current_credit_currency,dos);
					
					// java.util.Date
				
						writeDate(this.next_credit_expiry_date,dos);
					
					// Boolean
				
						if(this.has_active_consumer_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_consumer_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_consumer_waiver_start_date,dos);
					
					// Boolean
				
						if(this.has_active_business_waiver == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.has_active_business_waiver);
		            	}
					
					// java.util.Date
				
						writeDate(this.na_first_gas_fillup_date,dos);
					
					// Long
				
						if(this.na_last_35_day_gas_fillup_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.na_last_35_day_gas_fillup_count);
		            	}
					
					// java.util.Date
				
						writeDate(this.first_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.first_res_end_date,dos);
					
					// String
				
						writeString(this.first_res_type,dos);
					
					// String
				
						writeString(this.first_res_vehicle_make,dos);
					
					// String
				
						writeString(this.first_res_vehicle_model,dos);
					
					// String
				
						writeString(this.first_res_vehicle_name,dos);
					
					// String
				
						writeString(this.first_res_fleet_name,dos);
					
					// java.util.Date
				
						writeDate(this.first_floating_res_end_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_start_date,dos);
					
					// java.util.Date
				
						writeDate(this.last_res_end_date,dos);
					
					// String
				
						writeString(this.last_res_type,dos);
					
					// String
				
						writeString(this.last_res_vehicle_make,dos);
					
					// String
				
						writeString(this.last_res_vehicle_model,dos);
					
					// String
				
						writeString(this.last_res_vehicle_name,dos);
					
					// String
				
						writeString(this.last_res_vehicle_class,dos);
					
					// java.util.Date
				
						writeDate(this.last_floating_res_end_date,dos);
					
					// Long
				
						if(this.last_rt_res_mins_late == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_rt_res_mins_late);
		            	}
					
					// java.util.Date
				
						writeDate(this.next_res_date,dos);
					
					// String
				
						writeString(this.next_res_type,dos);
					
					// Long
				
						if(this.last_year_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_year_res_count);
		            	}
					
					// Double
				
						if(this.last_year_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_mi);
		            	}
					
					// Double
				
						if(this.last_year_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_distance_km);
		            	}
					
					// Double
				
						if(this.last_year_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_year_hours);
		            	}
					
					// Long
				
						if(this.last_3_month_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.last_3_month_res_count);
		            	}
					
					// Double
				
						if(this.last_3_month_res_rev_in_usd == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_res_rev_in_usd);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_mi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_mi);
		            	}
					
					// Double
				
						if(this.last_3_month_distance_km == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_distance_km);
		            	}
					
					// Double
				
						if(this.last_3_month_hours == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.last_3_month_hours);
		            	}
					
					// Long
				
						if(this.total_res_count == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.total_res_count);
		            	}
					
					// String
				
						writeString(this.reserver_segment,dos);
					
					// Integer
				
						writeInteger(this.workday_res_last_6mths,dos);
					
					// Boolean
				
						if(this.reserved_fewer_hours_last_month == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.reserved_fewer_hours_last_month);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_nps_response_date,dos);
					
					// Short
				
						if(this.last_nps_score == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeShort(this.last_nps_score);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_incomplete_app_start_date,dos);
					
					// String
				
						writeString(this.last_incomplete_app_segment,dos);
					
					// String
				
						writeString(this.last_incomplete_app_affiliate,dos);
					
					// String
				
						writeString(this.last_incomplete_app_country,dos);
					
					// String
				
						writeString(this.last_incomplete_app_last_step,dos);
					
					// String
				
						writeString(this.last_active_corp_app_date,dos);
					
					// String
				
						writeString(this.last_active_corp_app_country,dos);
					
					// java.util.Date
				
						writeDate(this.last_z4b_ssu_view_date,dos);
					
					// String
				
						writeString(this.last_z4b_ssu_last_step,dos);
					
					// Boolean
				
						if(this.mdb_has_nonservice_account == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.mdb_has_nonservice_account);
		            	}
					
					// String
				
						writeString(this.mdb_primary_plan_category,dos);
					
					// String
				
						writeString(this.mdb_primary_segment_class,dos);
					
					// String
				
						writeString(this.mdb_metro_name,dos);
					
					// String
				
						writeString(this.mdb_tenure_category,dos);
					
					// String
				
						writeString(this.mdb_rfm_profile,dos);
					
					// String
				
						writeString(this.mdb_location_segment,dos);
					
					// Boolean
				
						if(this.sv_opened_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_opened_in_last_90_days);
		            	}
					
					// Boolean
				
						if(this.sv_clicked_in_last_90_days == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.sv_clicked_in_last_90_days);
		            	}
					
					// String
				
						writeString(this.data_split,dos);
					
					// String
				
						writeString(this.derived_country,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("subscriber_key="+subscriber_key);
		sb.append(",member_id_zc="+String.valueOf(member_id_zc));
		sb.append(",first_name_zc="+first_name_zc);
		sb.append(",last_name_zc="+last_name_zc);
		sb.append(",user_name_zc="+user_name_zc);
		sb.append(",email_address_zc="+email_address_zc);
		sb.append(",email_address_domain="+email_address_domain);
		sb.append(",is_emailable="+String.valueOf(is_emailable));
		sb.append(",birth_month_year="+String.valueOf(birth_month_year));
		sb.append(",has_birthday_this_week="+String.valueOf(has_birthday_this_week));
		sb.append(",occupation="+occupation);
		sb.append(",locale="+locale);
		sb.append(",preferred_address_zone="+preferred_address_zone);
		sb.append(",has_address_in_uk_zipzone="+String.valueOf(has_address_in_uk_zipzone));
		sb.append(",first_join_date="+String.valueOf(first_join_date));
		sb.append(",last_join_date="+String.valueOf(last_join_date));
		sb.append(",last_left_date="+String.valueOf(last_left_date));
		sb.append(",last_left_reason="+last_left_reason);
		sb.append(",last_left_due_to_termination="+String.valueOf(last_left_due_to_termination));
		sb.append(",current_status="+current_status);
		sb.append(",has_active_zipcard="+String.valueOf(has_active_zipcard));
		sb.append(",is_current_approved_member="+String.valueOf(is_current_approved_member));
		sb.append(",is_current_admin="+String.valueOf(is_current_admin));
		sb.append(",is_prospect="+String.valueOf(is_prospect));
		sb.append(",has_segment_consumer="+String.valueOf(has_segment_consumer));
		sb.append(",has_segment_collegiate="+String.valueOf(has_segment_collegiate));
		sb.append(",has_segment_zipvan="+String.valueOf(has_segment_zipvan));
		sb.append(",has_segment_business="+String.valueOf(has_segment_business));
		sb.append(",has_segment_business_db="+String.valueOf(has_segment_business_db));
		sb.append(",business_direct_billed_code="+business_direct_billed_code);
		sb.append(",has_segment_business_ib="+String.valueOf(has_segment_business_ib));
		sb.append(",business_individually_billed_code="+business_individually_billed_code);
		sb.append(",is_employee="+String.valueOf(is_employee));
		sb.append(",fleet_name="+fleet_name);
		sb.append(",fleet_country_name="+fleet_country_name);
		sb.append(",fleet_market_name="+fleet_market_name);
		sb.append(",current_rate_plan_keys="+current_rate_plan_keys);
		sb.append(",current_affiliates="+current_affiliates);
		sb.append(",next_fee_date="+String.valueOf(next_fee_date));
		sb.append(",next_fee_frequency="+next_fee_frequency);
		sb.append(",next_fee_segment_class="+next_fee_segment_class);
		sb.append(",next_fee_amount="+String.valueOf(next_fee_amount));
		sb.append(",next_fee_currency="+next_fee_currency);
		sb.append(",next_fee_account_name_zc="+next_fee_account_name_zc);
		sb.append(",current_credit="+String.valueOf(current_credit));
		sb.append(",current_credit_currency="+current_credit_currency);
		sb.append(",next_credit_expiry_date="+String.valueOf(next_credit_expiry_date));
		sb.append(",has_active_consumer_waiver="+String.valueOf(has_active_consumer_waiver));
		sb.append(",first_consumer_waiver_start_date="+String.valueOf(first_consumer_waiver_start_date));
		sb.append(",has_active_business_waiver="+String.valueOf(has_active_business_waiver));
		sb.append(",na_first_gas_fillup_date="+String.valueOf(na_first_gas_fillup_date));
		sb.append(",na_last_35_day_gas_fillup_count="+String.valueOf(na_last_35_day_gas_fillup_count));
		sb.append(",first_res_start_date="+String.valueOf(first_res_start_date));
		sb.append(",first_res_end_date="+String.valueOf(first_res_end_date));
		sb.append(",first_res_type="+first_res_type);
		sb.append(",first_res_vehicle_make="+first_res_vehicle_make);
		sb.append(",first_res_vehicle_model="+first_res_vehicle_model);
		sb.append(",first_res_vehicle_name="+first_res_vehicle_name);
		sb.append(",first_res_fleet_name="+first_res_fleet_name);
		sb.append(",first_floating_res_end_date="+String.valueOf(first_floating_res_end_date));
		sb.append(",last_res_start_date="+String.valueOf(last_res_start_date));
		sb.append(",last_res_end_date="+String.valueOf(last_res_end_date));
		sb.append(",last_res_type="+last_res_type);
		sb.append(",last_res_vehicle_make="+last_res_vehicle_make);
		sb.append(",last_res_vehicle_model="+last_res_vehicle_model);
		sb.append(",last_res_vehicle_name="+last_res_vehicle_name);
		sb.append(",last_res_vehicle_class="+last_res_vehicle_class);
		sb.append(",last_floating_res_end_date="+String.valueOf(last_floating_res_end_date));
		sb.append(",last_rt_res_mins_late="+String.valueOf(last_rt_res_mins_late));
		sb.append(",next_res_date="+String.valueOf(next_res_date));
		sb.append(",next_res_type="+next_res_type);
		sb.append(",last_year_res_count="+String.valueOf(last_year_res_count));
		sb.append(",last_year_distance_mi="+String.valueOf(last_year_distance_mi));
		sb.append(",last_year_distance_km="+String.valueOf(last_year_distance_km));
		sb.append(",last_year_hours="+String.valueOf(last_year_hours));
		sb.append(",last_3_month_res_count="+String.valueOf(last_3_month_res_count));
		sb.append(",last_3_month_res_rev_in_usd="+String.valueOf(last_3_month_res_rev_in_usd));
		sb.append(",last_3_month_distance_mi="+String.valueOf(last_3_month_distance_mi));
		sb.append(",last_3_month_distance_km="+String.valueOf(last_3_month_distance_km));
		sb.append(",last_3_month_hours="+String.valueOf(last_3_month_hours));
		sb.append(",total_res_count="+String.valueOf(total_res_count));
		sb.append(",reserver_segment="+reserver_segment);
		sb.append(",workday_res_last_6mths="+String.valueOf(workday_res_last_6mths));
		sb.append(",reserved_fewer_hours_last_month="+String.valueOf(reserved_fewer_hours_last_month));
		sb.append(",last_nps_response_date="+String.valueOf(last_nps_response_date));
		sb.append(",last_nps_score="+String.valueOf(last_nps_score));
		sb.append(",last_incomplete_app_start_date="+String.valueOf(last_incomplete_app_start_date));
		sb.append(",last_incomplete_app_segment="+last_incomplete_app_segment);
		sb.append(",last_incomplete_app_affiliate="+last_incomplete_app_affiliate);
		sb.append(",last_incomplete_app_country="+last_incomplete_app_country);
		sb.append(",last_incomplete_app_last_step="+last_incomplete_app_last_step);
		sb.append(",last_active_corp_app_date="+last_active_corp_app_date);
		sb.append(",last_active_corp_app_country="+last_active_corp_app_country);
		sb.append(",last_z4b_ssu_view_date="+String.valueOf(last_z4b_ssu_view_date));
		sb.append(",last_z4b_ssu_last_step="+last_z4b_ssu_last_step);
		sb.append(",mdb_has_nonservice_account="+String.valueOf(mdb_has_nonservice_account));
		sb.append(",mdb_primary_plan_category="+mdb_primary_plan_category);
		sb.append(",mdb_primary_segment_class="+mdb_primary_segment_class);
		sb.append(",mdb_metro_name="+mdb_metro_name);
		sb.append(",mdb_tenure_category="+mdb_tenure_category);
		sb.append(",mdb_rfm_profile="+mdb_rfm_profile);
		sb.append(",mdb_location_segment="+mdb_location_segment);
		sb.append(",sv_opened_in_last_90_days="+String.valueOf(sv_opened_in_last_90_days));
		sb.append(",sv_clicked_in_last_90_days="+String.valueOf(sv_clicked_in_last_90_days));
		sb.append(",data_split="+data_split);
		sb.append(",derived_country="+derived_country);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row4Struct row4 = new row4Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_2{
                                    public void putHeaderValue_0(java.io.Writer outtFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception{
                                    outtFileOutputDelimited_2.write("subscriber_key");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("member_id_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_name_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_name_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("user_name_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("email_address_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("email_address_domain");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("is_emailable");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("birth_month_year");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_birthday_this_week");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("occupation");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("locale");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("preferred_address_zone");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_address_in_uk_zipzone");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_join_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_join_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_left_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_left_reason");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_left_due_to_termination");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("current_status");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_active_zipcard");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("is_current_approved_member");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("is_current_admin");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("is_prospect");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_consumer");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_collegiate");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_zipvan");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_business");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_business_db");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("business_direct_billed_code");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_segment_business_ib");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("business_individually_billed_code");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("is_employee");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("fleet_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("fleet_country_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("fleet_market_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("current_rate_plan_keys");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("current_affiliates");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_frequency");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_segment_class");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_amount");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_currency");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_fee_account_name_zc");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("current_credit");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("current_credit_currency");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_credit_expiry_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_active_consumer_waiver");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_consumer_waiver_start_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("has_active_business_waiver");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("na_first_gas_fillup_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("na_last_35_day_gas_fillup_count");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_start_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_end_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_type");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_vehicle_make");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_vehicle_model");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_vehicle_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_res_fleet_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("first_floating_res_end_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_start_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_end_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_type");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_vehicle_make");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_vehicle_model");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_vehicle_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_res_vehicle_class");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_floating_res_end_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_rt_res_mins_late");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_res_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("next_res_type");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_year_res_count");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_year_distance_mi");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_year_distance_km");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_year_hours");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_3_month_res_count");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_3_month_res_rev_in_usd");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_3_month_distance_mi");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_3_month_distance_km");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_3_month_hours");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("total_res_count");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("reserver_segment");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("workday_res_last_6mths");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("reserved_fewer_hours_last_month");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_nps_response_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_nps_score");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_incomplete_app_start_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_incomplete_app_segment");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_incomplete_app_affiliate");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_incomplete_app_country");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    }
                                    public void putHeaderValue_1(java.io.Writer outtFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception{
                                    outtFileOutputDelimited_2.write("last_incomplete_app_last_step");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_active_corp_app_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_active_corp_app_country");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_z4b_ssu_view_date");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("last_z4b_ssu_last_step");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_has_nonservice_account");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_primary_plan_category");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_primary_segment_class");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_metro_name");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_tenure_category");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_rfm_profile");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("mdb_location_segment");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("sv_opened_in_last_90_days");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("sv_clicked_in_last_90_days");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("data_split");
                                    outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                    outtFileOutputDelimited_2.write("derived_country");
                                }
                                public void putValue_0(final row4Struct row4,StringBuilder sb_tFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception {
                                if(row4.subscriber_key != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.subscriber_key
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.member_id_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.member_id_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_name_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_name_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.user_name_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.user_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.email_address_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.email_address_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.email_address_domain != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.email_address_domain
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.is_emailable != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.is_emailable
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.birth_month_year != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.birth_month_year, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_birthday_this_week != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_birthday_this_week
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.occupation != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.occupation
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.locale != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.locale
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.preferred_address_zone != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.preferred_address_zone
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_address_in_uk_zipzone != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_address_in_uk_zipzone
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_join_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.first_join_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_join_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_join_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_left_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_left_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_left_reason != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_left_reason
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_left_due_to_termination != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_left_due_to_termination
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.current_status != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.current_status
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_active_zipcard != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_active_zipcard
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.is_current_approved_member != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.is_current_approved_member
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.is_current_admin != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.is_current_admin
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.is_prospect != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.is_prospect
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_consumer != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_consumer
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_collegiate != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_collegiate
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_zipvan != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_zipvan
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_business != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_business
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_business_db != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_business_db
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.business_direct_billed_code != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.business_direct_billed_code
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_segment_business_ib != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_segment_business_ib
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.business_individually_billed_code != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.business_individually_billed_code
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.is_employee != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.is_employee
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.fleet_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.fleet_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.fleet_country_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.fleet_country_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.fleet_market_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.fleet_market_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.current_rate_plan_keys != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.current_rate_plan_keys
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.current_affiliates != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.current_affiliates
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.next_fee_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_frequency != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_fee_frequency
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_segment_class != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_fee_segment_class
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_amount != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_fee_amount
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_currency != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_fee_currency
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_fee_account_name_zc != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_fee_account_name_zc
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.current_credit != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.current_credit
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.current_credit_currency != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.current_credit_currency
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_credit_expiry_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.next_credit_expiry_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_active_consumer_waiver != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_active_consumer_waiver
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_consumer_waiver_start_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.first_consumer_waiver_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.has_active_business_waiver != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.has_active_business_waiver
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.na_first_gas_fillup_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.na_first_gas_fillup_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.na_last_35_day_gas_fillup_count != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.na_last_35_day_gas_fillup_count
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_start_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.first_res_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_end_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.first_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_type != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_res_type
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_vehicle_make != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_res_vehicle_make
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_vehicle_model != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_res_vehicle_model
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_vehicle_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_res_vehicle_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_res_fleet_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.first_res_fleet_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.first_floating_res_end_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.first_floating_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_start_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_res_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_end_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_type != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_res_type
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_vehicle_make != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_res_vehicle_make
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_vehicle_model != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_res_vehicle_model
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_vehicle_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_res_vehicle_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_res_vehicle_class != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_res_vehicle_class
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_floating_res_end_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_floating_res_end_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_rt_res_mins_late != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_rt_res_mins_late
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_res_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.next_res_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.next_res_type != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.next_res_type
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_year_res_count != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_year_res_count
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_year_distance_mi != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_year_distance_mi
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_year_distance_km != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_year_distance_km
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_year_hours != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_year_hours
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_3_month_res_count != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_3_month_res_count
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_3_month_res_rev_in_usd != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_3_month_res_rev_in_usd
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_3_month_distance_mi != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_3_month_distance_mi
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_3_month_distance_km != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_3_month_distance_km
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_3_month_hours != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_3_month_hours
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.total_res_count != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.total_res_count
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.reserver_segment != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.reserver_segment
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.workday_res_last_6mths != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.workday_res_last_6mths
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.reserved_fewer_hours_last_month != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.reserved_fewer_hours_last_month
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_nps_response_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_nps_response_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_nps_score != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_nps_score
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_incomplete_app_start_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_incomplete_app_start_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_incomplete_app_segment != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_incomplete_app_segment
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_incomplete_app_affiliate != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_incomplete_app_affiliate
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_incomplete_app_country != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_incomplete_app_country
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                }
                                public void putValue_1(final row4Struct row4,StringBuilder sb_tFileOutputDelimited_2,final String OUT_DELIM_tFileOutputDelimited_2)throws java.lang.Exception {
                                if(row4.last_incomplete_app_last_step != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_incomplete_app_last_step
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_active_corp_app_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_active_corp_app_date
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_active_corp_app_country != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_active_corp_app_country
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_z4b_ssu_view_date != null) {
                                sb_tFileOutputDelimited_2.append(
                                        FormatterUtils.format_Date(row4.last_z4b_ssu_view_date, FeedFile.DF_DATETIME)
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.last_z4b_ssu_last_step != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.last_z4b_ssu_last_step
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_has_nonservice_account != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_has_nonservice_account
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_primary_plan_category != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_primary_plan_category
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_primary_segment_class != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_primary_segment_class
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_metro_name != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_metro_name
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_tenure_category != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_tenure_category
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_rfm_profile != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_rfm_profile
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.mdb_location_segment != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.mdb_location_segment
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.sv_opened_in_last_90_days != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.sv_opened_in_last_90_days
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.sv_clicked_in_last_90_days != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.sv_clicked_in_last_90_days
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.data_split != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.data_split
                                );
                                }
                                sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                                if(row4.derived_country != null) {
                                sb_tFileOutputDelimited_2.append(
                                        row4.derived_country
                                );
                                }
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_2 fileOutputDelimitedUtil_tFileOutputDelimited_2=new FileOutputDelimitedUtil_tFileOutputDelimited_2();
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.localExportDir + "/" + globalMap.get("intFileName"))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"|"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        String zipName_tFileOutputDelimited_2 = fullName_tFileOutputDelimited_2 + ".zip";
                        java.io.File file_tFileOutputDelimited_2 = new java.io.File(zipName_tFileOutputDelimited_2);
                        //routines.system.Row
                        java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_2= null;
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        if(file_tFileOutputDelimited_2.exists()) {
                            file_tFileOutputDelimited_2.delete();
                        }
                        zipOut_tFileOutputDelimited_2= new java.util.zip.ZipOutputStream(
                                new java.io.BufferedOutputStream(new java.io.FileOutputStream(zipName_tFileOutputDelimited_2)));
                        zipOut_tFileOutputDelimited_2.putNextEntry(new java.util.zip.ZipEntry(filetFileOutputDelimited_2.getName()));
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(zipOut_tFileOutputDelimited_2,"UTF-8"));
                                    if(file_tFileOutputDelimited_2.length()==0){
                                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putHeaderValue_0(outtFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putHeaderValue_1(outtFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_2", false);
		start_Hash.put("tRedshiftInput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_2";

	
		int tos_count_tRedshiftInput_2 = 0;
		
    	class BytesLimit65535_tRedshiftInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_2 = 0;
		    java.sql.Connection conn_tRedshiftInput_2 = null;
		        conn_tRedshiftInput_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_2 = conn_tRedshiftInput_2.createStatement();

		    String dbquery_tRedshiftInput_2 = StringUtils.templateString(
"\nSELECT * FROM sf_individual\nWHERE data_split = 'EMEA'\n--LIMIT 1000\n;\n",
"marketing.schema", StringHandling.DQUOTE(context.Redshift_Marketing_Schema)
)
;
			

                       globalMap.put("tRedshiftInput_2_QUERY",dbquery_tRedshiftInput_2);

		    java.sql.ResultSet rs_tRedshiftInput_2 = null;
		try{
		    rs_tRedshiftInput_2 = stmt_tRedshiftInput_2.executeQuery(dbquery_tRedshiftInput_2);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_2 = rs_tRedshiftInput_2.getMetaData();
		    int colQtyInRs_tRedshiftInput_2 = rsmd_tRedshiftInput_2.getColumnCount();

		    String tmpContent_tRedshiftInput_2 = null;
		    
		    
		    while (rs_tRedshiftInput_2.next()) {
		        nb_line_tRedshiftInput_2++;
		        
							if(colQtyInRs_tRedshiftInput_2 < 1) {
								row2.subscriber_key = null;
							} else {
	                         		
        	row2.subscriber_key = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 2) {
								row2.member_id_zc = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(2) != null) {
                row2.member_id_zc = rs_tRedshiftInput_2.getLong(2);
            } else {
                    row2.member_id_zc = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 3) {
								row2.first_name_zc = null;
							} else {
	                         		
        	row2.first_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 3, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 4) {
								row2.last_name_zc = null;
							} else {
	                         		
        	row2.last_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 4, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 5) {
								row2.user_name_zc = null;
							} else {
	                         		
        	row2.user_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 5, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 6) {
								row2.email_address_zc = null;
							} else {
	                         		
        	row2.email_address_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 6, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 7) {
								row2.email_address_domain = null;
							} else {
	                         		
        	row2.email_address_domain = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 7, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 8) {
								row2.is_emailable = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(8) != null) {
                row2.is_emailable = rs_tRedshiftInput_2.getBoolean(8);
            } else {
                    row2.is_emailable = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 9) {
								row2.birth_month_year = null;
							} else {
										
			row2.birth_month_year = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 9);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 10) {
								row2.has_birthday_this_week = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(10) != null) {
                row2.has_birthday_this_week = rs_tRedshiftInput_2.getBoolean(10);
            } else {
                    row2.has_birthday_this_week = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 11) {
								row2.occupation = null;
							} else {
	                         		
        	row2.occupation = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 11, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 12) {
								row2.locale = null;
							} else {
	                         		
        	row2.locale = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 12, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 13) {
								row2.preferred_address_zone = null;
							} else {
	                         		
        	row2.preferred_address_zone = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 13, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 14) {
								row2.has_address_in_uk_zipzone = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(14) != null) {
                row2.has_address_in_uk_zipzone = rs_tRedshiftInput_2.getBoolean(14);
            } else {
                    row2.has_address_in_uk_zipzone = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 15) {
								row2.first_join_date = null;
							} else {
										
			row2.first_join_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 15);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 16) {
								row2.last_join_date = null;
							} else {
										
			row2.last_join_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 16);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 17) {
								row2.last_left_date = null;
							} else {
										
			row2.last_left_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 17);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 18) {
								row2.last_left_reason = null;
							} else {
	                         		
        	row2.last_left_reason = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 18, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 19) {
								row2.last_left_due_to_termination = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(19) != null) {
                row2.last_left_due_to_termination = rs_tRedshiftInput_2.getBoolean(19);
            } else {
                    row2.last_left_due_to_termination = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 20) {
								row2.current_status = null;
							} else {
	                         		
        	row2.current_status = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 20, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 21) {
								row2.has_active_zipcard = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(21) != null) {
                row2.has_active_zipcard = rs_tRedshiftInput_2.getBoolean(21);
            } else {
                    row2.has_active_zipcard = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 22) {
								row2.is_current_approved_member = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(22) != null) {
                row2.is_current_approved_member = rs_tRedshiftInput_2.getBoolean(22);
            } else {
                    row2.is_current_approved_member = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 23) {
								row2.is_current_admin = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(23) != null) {
                row2.is_current_admin = rs_tRedshiftInput_2.getBoolean(23);
            } else {
                    row2.is_current_admin = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 24) {
								row2.is_prospect = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(24) != null) {
                row2.is_prospect = rs_tRedshiftInput_2.getBoolean(24);
            } else {
                    row2.is_prospect = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 25) {
								row2.has_segment_consumer = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(25) != null) {
                row2.has_segment_consumer = rs_tRedshiftInput_2.getBoolean(25);
            } else {
                    row2.has_segment_consumer = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 26) {
								row2.has_segment_collegiate = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(26) != null) {
                row2.has_segment_collegiate = rs_tRedshiftInput_2.getBoolean(26);
            } else {
                    row2.has_segment_collegiate = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 27) {
								row2.has_segment_zipvan = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(27) != null) {
                row2.has_segment_zipvan = rs_tRedshiftInput_2.getBoolean(27);
            } else {
                    row2.has_segment_zipvan = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 28) {
								row2.has_segment_business = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(28) != null) {
                row2.has_segment_business = rs_tRedshiftInput_2.getBoolean(28);
            } else {
                    row2.has_segment_business = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 29) {
								row2.has_segment_business_db = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(29) != null) {
                row2.has_segment_business_db = rs_tRedshiftInput_2.getBoolean(29);
            } else {
                    row2.has_segment_business_db = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 30) {
								row2.business_direct_billed_code = null;
							} else {
	                         		
        	row2.business_direct_billed_code = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 30, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 31) {
								row2.has_segment_business_ib = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(31) != null) {
                row2.has_segment_business_ib = rs_tRedshiftInput_2.getBoolean(31);
            } else {
                    row2.has_segment_business_ib = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 32) {
								row2.business_individually_billed_code = null;
							} else {
	                         		
        	row2.business_individually_billed_code = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 32, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 33) {
								row2.is_employee = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(33) != null) {
                row2.is_employee = rs_tRedshiftInput_2.getBoolean(33);
            } else {
                    row2.is_employee = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 34) {
								row2.fleet_name = null;
							} else {
	                         		
        	row2.fleet_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 34, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 35) {
								row2.fleet_country_name = null;
							} else {
	                         		
        	row2.fleet_country_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 35, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 36) {
								row2.fleet_market_name = null;
							} else {
	                         		
        	row2.fleet_market_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 36, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 37) {
								row2.current_rate_plan_keys = null;
							} else {
	                         		
        	row2.current_rate_plan_keys = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 37, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 38) {
								row2.current_affiliates = null;
							} else {
	                         		
        	row2.current_affiliates = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 38, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 39) {
								row2.next_fee_date = null;
							} else {
										
			row2.next_fee_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 39);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 40) {
								row2.next_fee_frequency = null;
							} else {
	                         		
        	row2.next_fee_frequency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 40, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 41) {
								row2.next_fee_segment_class = null;
							} else {
	                         		
        	row2.next_fee_segment_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 41, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 42) {
								row2.next_fee_amount = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(42) != null) {
                row2.next_fee_amount = rs_tRedshiftInput_2.getDouble(42);
            } else {
                    row2.next_fee_amount = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 43) {
								row2.next_fee_currency = null;
							} else {
	                         		
        	row2.next_fee_currency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 43, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 44) {
								row2.next_fee_account_name_zc = null;
							} else {
	                         		
        	row2.next_fee_account_name_zc = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 44, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 45) {
								row2.current_credit = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(45) != null) {
                row2.current_credit = rs_tRedshiftInput_2.getDouble(45);
            } else {
                    row2.current_credit = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 46) {
								row2.current_credit_currency = null;
							} else {
	                         		
        	row2.current_credit_currency = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 46, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 47) {
								row2.next_credit_expiry_date = null;
							} else {
										
			row2.next_credit_expiry_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 47);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 48) {
								row2.has_active_consumer_waiver = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(48) != null) {
                row2.has_active_consumer_waiver = rs_tRedshiftInput_2.getBoolean(48);
            } else {
                    row2.has_active_consumer_waiver = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 49) {
								row2.first_consumer_waiver_start_date = null;
							} else {
										
			row2.first_consumer_waiver_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 49);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 50) {
								row2.has_active_business_waiver = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(50) != null) {
                row2.has_active_business_waiver = rs_tRedshiftInput_2.getBoolean(50);
            } else {
                    row2.has_active_business_waiver = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 51) {
								row2.na_first_gas_fillup_date = null;
							} else {
										
			row2.na_first_gas_fillup_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 51);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 52) {
								row2.na_last_35_day_gas_fillup_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(52) != null) {
                row2.na_last_35_day_gas_fillup_count = rs_tRedshiftInput_2.getLong(52);
            } else {
                    row2.na_last_35_day_gas_fillup_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 53) {
								row2.first_res_start_date = null;
							} else {
										
			row2.first_res_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 53);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 54) {
								row2.first_res_end_date = null;
							} else {
										
			row2.first_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 54);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 55) {
								row2.first_res_type = null;
							} else {
	                         		
        	row2.first_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 55, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 56) {
								row2.first_res_vehicle_make = null;
							} else {
	                         		
        	row2.first_res_vehicle_make = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 56, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 57) {
								row2.first_res_vehicle_model = null;
							} else {
	                         		
        	row2.first_res_vehicle_model = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 57, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 58) {
								row2.first_res_vehicle_name = null;
							} else {
	                         		
        	row2.first_res_vehicle_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 58, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 59) {
								row2.first_res_fleet_name = null;
							} else {
	                         		
        	row2.first_res_fleet_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 59, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 60) {
								row2.first_floating_res_end_date = null;
							} else {
										
			row2.first_floating_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 60);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 61) {
								row2.last_res_start_date = null;
							} else {
										
			row2.last_res_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 61);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 62) {
								row2.last_res_end_date = null;
							} else {
										
			row2.last_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 62);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 63) {
								row2.last_res_type = null;
							} else {
	                         		
        	row2.last_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 63, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 64) {
								row2.last_res_vehicle_make = null;
							} else {
	                         		
        	row2.last_res_vehicle_make = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 64, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 65) {
								row2.last_res_vehicle_model = null;
							} else {
	                         		
        	row2.last_res_vehicle_model = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 65, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 66) {
								row2.last_res_vehicle_name = null;
							} else {
	                         		
        	row2.last_res_vehicle_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 66, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 67) {
								row2.last_res_vehicle_class = null;
							} else {
	                         		
        	row2.last_res_vehicle_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 67, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 68) {
								row2.last_floating_res_end_date = null;
							} else {
										
			row2.last_floating_res_end_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 68);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 69) {
								row2.last_rt_res_mins_late = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(69) != null) {
                row2.last_rt_res_mins_late = rs_tRedshiftInput_2.getLong(69);
            } else {
                    row2.last_rt_res_mins_late = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 70) {
								row2.next_res_date = null;
							} else {
										
			row2.next_res_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 70);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 71) {
								row2.next_res_type = null;
							} else {
	                         		
        	row2.next_res_type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 71, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 72) {
								row2.last_year_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(72) != null) {
                row2.last_year_res_count = rs_tRedshiftInput_2.getLong(72);
            } else {
                    row2.last_year_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 73) {
								row2.last_year_distance_mi = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(73) != null) {
                row2.last_year_distance_mi = rs_tRedshiftInput_2.getDouble(73);
            } else {
                    row2.last_year_distance_mi = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 74) {
								row2.last_year_distance_km = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(74) != null) {
                row2.last_year_distance_km = rs_tRedshiftInput_2.getDouble(74);
            } else {
                    row2.last_year_distance_km = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 75) {
								row2.last_year_hours = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(75) != null) {
                row2.last_year_hours = rs_tRedshiftInput_2.getDouble(75);
            } else {
                    row2.last_year_hours = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 76) {
								row2.last_3_month_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(76) != null) {
                row2.last_3_month_res_count = rs_tRedshiftInput_2.getLong(76);
            } else {
                    row2.last_3_month_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 77) {
								row2.last_3_month_res_rev_in_usd = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(77) != null) {
                row2.last_3_month_res_rev_in_usd = rs_tRedshiftInput_2.getDouble(77);
            } else {
                    row2.last_3_month_res_rev_in_usd = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 78) {
								row2.last_3_month_distance_mi = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(78) != null) {
                row2.last_3_month_distance_mi = rs_tRedshiftInput_2.getDouble(78);
            } else {
                    row2.last_3_month_distance_mi = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 79) {
								row2.last_3_month_distance_km = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(79) != null) {
                row2.last_3_month_distance_km = rs_tRedshiftInput_2.getDouble(79);
            } else {
                    row2.last_3_month_distance_km = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 80) {
								row2.last_3_month_hours = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(80) != null) {
                row2.last_3_month_hours = rs_tRedshiftInput_2.getDouble(80);
            } else {
                    row2.last_3_month_hours = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 81) {
								row2.total_res_count = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(81) != null) {
                row2.total_res_count = rs_tRedshiftInput_2.getLong(81);
            } else {
                    row2.total_res_count = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 82) {
								row2.reserver_segment = null;
							} else {
	                         		
        	row2.reserver_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 82, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 83) {
								row2.workday_res_last_6mths = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(83) != null) {
                row2.workday_res_last_6mths = rs_tRedshiftInput_2.getInt(83);
            } else {
                    row2.workday_res_last_6mths = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 84) {
								row2.reserved_fewer_hours_last_month = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(84) != null) {
                row2.reserved_fewer_hours_last_month = rs_tRedshiftInput_2.getBoolean(84);
            } else {
                    row2.reserved_fewer_hours_last_month = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 85) {
								row2.last_nps_response_date = null;
							} else {
										
			row2.last_nps_response_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 85);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 86) {
								row2.last_nps_score = null;
							} else {
		                          
            if(rs_tRedshiftInput_2.getObject(86) != null) {
                row2.last_nps_score = rs_tRedshiftInput_2.getShort(86);
            } else {
                    row2.last_nps_score = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 87) {
								row2.last_incomplete_app_start_date = null;
							} else {
										
			row2.last_incomplete_app_start_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 87);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 88) {
								row2.last_incomplete_app_segment = null;
							} else {
	                         		
        	row2.last_incomplete_app_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 88, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 89) {
								row2.last_incomplete_app_affiliate = null;
							} else {
	                         		
        	row2.last_incomplete_app_affiliate = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 89, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 90) {
								row2.last_incomplete_app_country = null;
							} else {
	                         		
        	row2.last_incomplete_app_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 90, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 91) {
								row2.last_incomplete_app_last_step = null;
							} else {
	                         		
        	row2.last_incomplete_app_last_step = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 91, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 92) {
								row2.last_active_corp_app_date = null;
							} else {
	                         		
        	row2.last_active_corp_app_date = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 92, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 93) {
								row2.last_active_corp_app_country = null;
							} else {
	                         		
        	row2.last_active_corp_app_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 93, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 94) {
								row2.last_z4b_ssu_view_date = null;
							} else {
										
			row2.last_z4b_ssu_view_date = routines.system.JDBCUtil.getDate(rs_tRedshiftInput_2, 94);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 95) {
								row2.last_z4b_ssu_last_step = null;
							} else {
	                         		
        	row2.last_z4b_ssu_last_step = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 95, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 96) {
								row2.mdb_has_nonservice_account = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(96) != null) {
                row2.mdb_has_nonservice_account = rs_tRedshiftInput_2.getBoolean(96);
            } else {
                    row2.mdb_has_nonservice_account = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 97) {
								row2.mdb_primary_plan_category = null;
							} else {
	                         		
        	row2.mdb_primary_plan_category = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 97, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 98) {
								row2.mdb_primary_segment_class = null;
							} else {
	                         		
        	row2.mdb_primary_segment_class = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 98, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 99) {
								row2.mdb_metro_name = null;
							} else {
	                         		
        	row2.mdb_metro_name = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 99, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 100) {
								row2.mdb_tenure_category = null;
							} else {
	                         		
        	row2.mdb_tenure_category = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 100, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 101) {
								row2.mdb_rfm_profile = null;
							} else {
	                         		
        	row2.mdb_rfm_profile = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 101, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 102) {
								row2.mdb_location_segment = null;
							} else {
	                         		
        	row2.mdb_location_segment = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 102, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 103) {
								row2.sv_opened_in_last_90_days = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(103) != null) {
                row2.sv_opened_in_last_90_days = rs_tRedshiftInput_2.getBoolean(103);
            } else {
                    row2.sv_opened_in_last_90_days = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 104) {
								row2.sv_clicked_in_last_90_days = null;
							} else {
	                         		
            if(rs_tRedshiftInput_2.getObject(104) != null) {
                row2.sv_clicked_in_last_90_days = rs_tRedshiftInput_2.getBoolean(104);
            } else {
                    row2.sv_clicked_in_last_90_days = null;
            }
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 105) {
								row2.data_split = null;
							} else {
	                         		
        	row2.data_split = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 105, false);
		                    }
							if(colQtyInRs_tRedshiftInput_2 < 106) {
								row2.derived_country = null;
							} else {
	                         		
        	row2.derived_country = routines.system.JDBCUtil.getString(rs_tRedshiftInput_2, 106, false);
		                    }
					



 



/**
 * [tRedshiftInput_2 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 


	tos_count_tRedshiftInput_2++;

/**
 * [tRedshiftInput_2 main ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

    Object fieldValue = null;
for( Field f : row2.getClass().getFields() ) {
	//System.out.println(f.getName() + "/" + f.get(row2));
   	fieldValue = f.get(row2);
   	if(fieldValue != null && fieldValue instanceof String) {
   		String temp = (String)fieldValue;
   		if(temp.contains("|")) {
   			fieldValue = temp.replaceAll("\\|", "-");
   		}
   	}
   	row4.getClass().getField(f.getName()).set(row4, fieldValue);
}
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_0(row4,sb_tFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                            fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_1(row4,sb_tFileOutputDelimited_2,OUT_DELIM_tFileOutputDelimited_2);
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */






	
	/**
	 * [tRedshiftInput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

	}
}finally{
	stmt_tRedshiftInput_2.close();

}
globalMap.put("tRedshiftInput_2_NB_LINE",nb_line_tRedshiftInput_2);

 

ok_Hash.put("tRedshiftInput_2", true);
end_Hash.put("tRedshiftInput_2", System.currentTimeMillis());




/**
 * [tRedshiftInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_2";

	

 



/**
 * [tRedshiftInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tRunJob_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
    	class BytesLimit65535_tFileList_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_1().limitLog4jByte();
	
 
     
    
  String directory_tFileList_1 = context.localExportDir;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("*.zip");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	NB_ITERATE_tRunJob_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tRunJob_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("isSubJob", context.isSubJob);
			paraList_tRunJob_1.add("--context_type " + "isSubJob" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("ftpHost", context.ftpHost);
			paraList_tRunJob_1.add("--context_type " + "ftpHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("ftpPass", context.ftpPass);
			paraList_tRunJob_1.add("--context_type " + "ftpPass" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("ftpPort", context.ftpPort);
			paraList_tRunJob_1.add("--context_type " + "ftpPort" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_1.put("ftpUser", context.ftpUser);
			paraList_tRunJob_1.add("--context_type " + "ftpUser" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("localExportDir", context.localExportDir);
			paraList_tRunJob_1.add("--context_type " + "localExportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("localImportDir", context.localImportDir);
			paraList_tRunJob_1.add("--context_type " + "localImportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("remoteExportDir", context.remoteExportDir);
			paraList_tRunJob_1.add("--context_type " + "remoteExportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("remoteImportDir", context.remoteImportDir);
			paraList_tRunJob_1.add("--context_type " + "remoteImportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("RunDate", context.RunDate);
			paraList_tRunJob_1.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("localArchiveDir", context.localArchiveDir);
			paraList_tRunJob_1.add("--context_type " + "localArchiveDir" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = (String)globalMap.get("tFileList_1_CURRENT_FILEPATH");
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param inputFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param inputFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("inputFile", obj_tRunJob_1);
	
		obj_tRunJob_1 = (String)globalMap.get("tFileList_1_CURRENT_FILEPATH") + ".gpg";
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param outputFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param outputFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("outputFile", obj_tRunJob_1);
	
		obj_tRunJob_1 = "info@exacttarget.com|marketingdb_prod_success@zipcar.com";
		if(obj_tRunJob_1!=null) {
			paraList_tRunJob_1.add("--context_param encryptRecipient=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
		} else {
			paraList_tRunJob_1.add("--context_param encryptRecipient=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("encryptRecipient", obj_tRunJob_1);
	
	
		zipcar_marketingdw.pgpencryptdecrypt_0_1.PGPEncryptDecrypt childJob_tRunJob_1 = new zipcar_marketingdw.pgpencryptdecrypt_0_1.PGPEncryptDecrypt();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tRunJob_1);
						}				
					




	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tRunJob_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("isSubJob", context.isSubJob);
			paraList_tRunJob_2.add("--context_type " + "isSubJob" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("ftpHost", context.ftpHost);
			paraList_tRunJob_2.add("--context_type " + "ftpHost" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("ftpPass", context.ftpPass);
			paraList_tRunJob_2.add("--context_type " + "ftpPass" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("ftpPort", context.ftpPort);
			paraList_tRunJob_2.add("--context_type " + "ftpPort" + "=" + "id_Integer");
		
			parentContextMap_tRunJob_2.put("ftpUser", context.ftpUser);
			paraList_tRunJob_2.add("--context_type " + "ftpUser" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("localExportDir", context.localExportDir);
			paraList_tRunJob_2.add("--context_type " + "localExportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("localImportDir", context.localImportDir);
			paraList_tRunJob_2.add("--context_type " + "localImportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("remoteExportDir", context.remoteExportDir);
			paraList_tRunJob_2.add("--context_type " + "remoteExportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("remoteImportDir", context.remoteImportDir);
			paraList_tRunJob_2.add("--context_type " + "remoteImportDir" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("RunDate", context.RunDate);
			paraList_tRunJob_2.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("localArchiveDir", context.localArchiveDir);
			paraList_tRunJob_2.add("--context_type " + "localArchiveDir" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = "*.gpg";
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param fileMask=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param fileMask=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("fileMask", obj_tRunJob_2);
	
		obj_tRunJob_2 = "PUT";
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param ftpMethod=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param ftpMethod=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("ftpMethod", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.localExportDir;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param localDir=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param localDir=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("localDir", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.remoteImportDir;
		if(obj_tRunJob_2!=null) {
			paraList_tRunJob_2.add("--context_param remoteDir=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
		} else {
			paraList_tRunJob_2.add("--context_param remoteDir=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("remoteDir", obj_tRunJob_2);
	
	
		zipcar_marketingdw.doftp_0_1.DoFtp childJob_tRunJob_2 = new zipcar_marketingdw.doftp_0_1.DoFtp();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tFileList_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
    	class BytesLimit65535_tFileList_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_2().limitLog4jByte();
	
 
     
    
  String directory_tFileList_2 = context.localExportDir;
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_2.add("*.zip");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	NB_ITERATE_tFileDelete_2++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileDelete_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		
    	class BytesLimit65535_tFileDelete_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_2().limitLog4jByte();

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File((String)globalMap.get("tFileList_2_CURRENT_FILEPATH"));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",(String)globalMap.get("tFileList_2_CURRENT_FILEPATH"));
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileDelete_2);
						}				
					




	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tFileCopy_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
    	class BytesLimit65535_tFileList_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_3().limitLog4jByte();
	
 
     
    
  String directory_tFileList_3 = context.localExportDir;
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_3.add("*.gpg");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3);
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = true;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
     
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	NB_ITERATE_tFileCopy_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileCopy_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		
    	class BytesLimit65535_tFileCopy_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_1().limitLog4jByte();

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = (String)globalMap.get("tFileList_3_CURRENT_FILEPATH");

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = context.localArchiveDir;

		String desFileName_tFileCopy_1 =  srcFile_tFileCopy_1.getName() ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}
				java.io.File isRemoved_tFileCopy_1 = new java.io.File((String)globalMap.get("tFileList_3_CURRENT_FILEPATH"));
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						System.err.println(errorMessageCouldNotRemoveFile_tFileCopy_1 + "\n");
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());




/**
 * [tFileCopy_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileCopy_1);
						}				
					




	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Files exported, encrypted and ftp'ed to Salesforce.","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Files exported, encrypted and ftp'ed to Salesforce.", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Files exported, encrypted and ftp'ed to Salesforce."); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final SalesforceExport SalesforceExportClass = new SalesforceExport();

        int exitCode = SalesforceExportClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = SalesforceExport.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/salesforceexport_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("isSubJob", "id_Boolean");
				
             try{
                 context.isSubJob=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isSubJob"));
             }catch(NumberFormatException e){
                 context.isSubJob=null;
              }
				    context.setContextType("ftpHost", "id_String");
				
                context.ftpHost=(String) context.getProperty("ftpHost");
				    context.setContextType("ftpPass", "id_Password");
				
            		String pwd_ftpPass_value = context.getProperty("ftpPass");
            		context.ftpPass = null;
            		if(pwd_ftpPass_value!=null) {
            			if(context_param.containsKey("ftpPass")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.ftpPass = pwd_ftpPass_value;
            			} else if (!pwd_ftpPass_value.isEmpty()) {
            				try {
            					context.ftpPass = routines.system.PasswordEncryptUtil.decryptPassword(pwd_ftpPass_value);
            					context.put("ftpPass",context.ftpPass);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("ftpPort", "id_Integer");
				
             try{
                 context.ftpPort=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ftpPort"));
             }catch(NumberFormatException e){
                 context.ftpPort=null;
              }
				    context.setContextType("ftpUser", "id_String");
				
                context.ftpUser=(String) context.getProperty("ftpUser");
				    context.setContextType("localExportDir", "id_String");
				
                context.localExportDir=(String) context.getProperty("localExportDir");
				    context.setContextType("localImportDir", "id_String");
				
                context.localImportDir=(String) context.getProperty("localImportDir");
				    context.setContextType("remoteExportDir", "id_String");
				
                context.remoteExportDir=(String) context.getProperty("remoteExportDir");
				    context.setContextType("remoteImportDir", "id_String");
				
                context.remoteImportDir=(String) context.getProperty("remoteImportDir");
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
				    context.setContextType("localArchiveDir", "id_String");
				
                context.localArchiveDir=(String) context.getProperty("localArchiveDir");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("isSubJob")) {
                context.isSubJob = (Boolean) parentContextMap.get("isSubJob");
            }if (parentContextMap.containsKey("ftpHost")) {
                context.ftpHost = (String) parentContextMap.get("ftpHost");
            }if (parentContextMap.containsKey("ftpPass")) {
                context.ftpPass = (java.lang.String) parentContextMap.get("ftpPass");
            }if (parentContextMap.containsKey("ftpPort")) {
                context.ftpPort = (Integer) parentContextMap.get("ftpPort");
            }if (parentContextMap.containsKey("ftpUser")) {
                context.ftpUser = (String) parentContextMap.get("ftpUser");
            }if (parentContextMap.containsKey("localExportDir")) {
                context.localExportDir = (String) parentContextMap.get("localExportDir");
            }if (parentContextMap.containsKey("localImportDir")) {
                context.localImportDir = (String) parentContextMap.get("localImportDir");
            }if (parentContextMap.containsKey("remoteExportDir")) {
                context.remoteExportDir = (String) parentContextMap.get("remoteExportDir");
            }if (parentContextMap.containsKey("remoteImportDir")) {
                context.remoteImportDir = (String) parentContextMap.get("remoteImportDir");
            }if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }if (parentContextMap.containsKey("localArchiveDir")) {
                context.localArchiveDir = (String) parentContextMap.get("localArchiveDir");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("ftpPass");
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRedshiftRow_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRedshiftRow_2) {
globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", -1);

e_tRedshiftRow_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SalesforceExport");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_1", globalMap.get("conn_tRedshiftConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     644823 characters generated by Talend Open Studio for Data Integration 
 *     on the October 24, 2018 9:09:22 AM CDT
 ************************************************************************************************/