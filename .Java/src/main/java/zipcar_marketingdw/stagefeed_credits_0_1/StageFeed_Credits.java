// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.stagefeed_credits_0_1;

import routines.Logging;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.BooleanUtils;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.TalendDate;
import routines.FeedFile;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: StageFeed_Credits Purpose: Stage the Feed files<br>
 * Description: Load the Feed Files and Stage into its staging table. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class StageFeed_Credits implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(clearStagingTable != null){
				
					this.setProperty("clearStagingTable", clearStagingTable.toString());
				
			}
			
			if(bulkLoadMaxErrors != null){
				
					this.setProperty("bulkLoadMaxErrors", bulkLoadMaxErrors.toString());
				
			}
			
			if(bulkLoadPath != null){
				
					this.setProperty("bulkLoadPath", bulkLoadPath.toString());
				
			}
			
			if(bulkLoadTempPath != null){
				
					this.setProperty("bulkLoadTempPath", bulkLoadTempPath.toString());
				
			}
			
			if(s3_accesskey != null){
				
					this.setProperty("s3_accesskey", s3_accesskey.toString());
				
			}
			
			if(s3_bucket != null){
				
					this.setProperty("s3_bucket", s3_bucket.toString());
				
			}
			
			if(s3_secretkey != null){
				
					this.setProperty("s3_secretkey", s3_secretkey.toString());
				
			}
			
			if(bulkLoad != null){
				
					this.setProperty("bulkLoad", bulkLoad.toString());
				
			}
			
			if(feedArchive != null){
				
					this.setProperty("feedArchive", feedArchive.toString());
				
			}
			
			if(feedError != null){
				
					this.setProperty("feedError", feedError.toString());
				
			}
			
			if(feedInput != null){
				
					this.setProperty("feedInput", feedInput.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
			if(Redshift_Staging_AdditionalParams != null){
				
					this.setProperty("Redshift_Staging_AdditionalParams", Redshift_Staging_AdditionalParams.toString());
				
			}
			
			if(Redshift_Staging_Database != null){
				
					this.setProperty("Redshift_Staging_Database", Redshift_Staging_Database.toString());
				
			}
			
			if(Redshift_Staging_Login != null){
				
					this.setProperty("Redshift_Staging_Login", Redshift_Staging_Login.toString());
				
			}
			
			if(Redshift_Staging_Password != null){
				
					this.setProperty("Redshift_Staging_Password", Redshift_Staging_Password.toString());
				
			}
			
			if(Redshift_Staging_Port != null){
				
					this.setProperty("Redshift_Staging_Port", Redshift_Staging_Port.toString());
				
			}
			
			if(Redshift_Staging_Schema != null){
				
					this.setProperty("Redshift_Staging_Schema", Redshift_Staging_Schema.toString());
				
			}
			
			if(Redshift_Staging_Server != null){
				
					this.setProperty("Redshift_Staging_Server", Redshift_Staging_Server.toString());
				
			}
			
		}

public Boolean clearStagingTable;
public Boolean getClearStagingTable(){
	return this.clearStagingTable;
}
public Long bulkLoadMaxErrors;
public Long getBulkLoadMaxErrors(){
	return this.bulkLoadMaxErrors;
}
public String bulkLoadPath;
public String getBulkLoadPath(){
	return this.bulkLoadPath;
}
public String bulkLoadTempPath;
public String getBulkLoadTempPath(){
	return this.bulkLoadTempPath;
}
public String s3_accesskey;
public String getS3_accesskey(){
	return this.s3_accesskey;
}
public String s3_bucket;
public String getS3_bucket(){
	return this.s3_bucket;
}
public String s3_secretkey;
public String getS3_secretkey(){
	return this.s3_secretkey;
}
public Boolean bulkLoad;
public Boolean getBulkLoad(){
	return this.bulkLoad;
}
		public String feedArchive;
		public String getFeedArchive(){
			return this.feedArchive;
		}
		
		public String feedError;
		public String getFeedError(){
			return this.feedError;
		}
		
		public String feedInput;
		public String getFeedInput(){
			return this.feedInput;
		}
		
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
public String Redshift_Staging_AdditionalParams;
public String getRedshift_Staging_AdditionalParams(){
	return this.Redshift_Staging_AdditionalParams;
}
public String Redshift_Staging_Database;
public String getRedshift_Staging_Database(){
	return this.Redshift_Staging_Database;
}
public String Redshift_Staging_Login;
public String getRedshift_Staging_Login(){
	return this.Redshift_Staging_Login;
}
public java.lang.String Redshift_Staging_Password;
public java.lang.String getRedshift_Staging_Password(){
	return this.Redshift_Staging_Password;
}
public String Redshift_Staging_Port;
public String getRedshift_Staging_Port(){
	return this.Redshift_Staging_Port;
}
public String Redshift_Staging_Schema;
public String getRedshift_Staging_Schema(){
	return this.Redshift_Staging_Schema;
}
public String Redshift_Staging_Server;
public String getRedshift_Staging_Server(){
	return this.Redshift_Staging_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "StageFeed_Credits";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_qDD-oDTOEeeS5dX18WtAYA", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				StageFeed_Credits.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(StageFeed_Credits.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tFileCopy_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError2", 0, "error");
								}
							
							
								errorCode = null;
								tFileCopy_2Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileArchive_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileArchive_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRedshiftInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileArchive_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRedshiftInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Log_FileComplete");
Logging.componentName(jobName, "tWarn_2", "Log_TableTruncated");
Logging.componentName(jobName, "tWarn_3", "Log_NoFiles");
Logging.componentName(jobName, "tWarn_4", "Log_FeedProgress");
Logging.componentName(jobName, "tWarn_5", "Log_BulkLoadFeedComplete");
Logging.componentName(jobName, "tDie_1", "Die_FileError");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSetGlobalVar_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_2", false);
		start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_2";

	
		int tos_count_tSetGlobalVar_2 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_2().limitLog4jByte();

 



/**
 * [tSetGlobalVar_2 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

globalMap.put("FileList_Counter", new java.util.concurrent.atomic.AtomicInteger(0) );

 


	tos_count_tSetGlobalVar_2++;

/**
 * [tSetGlobalVar_2 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_2 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 

ok_Hash.put("tSetGlobalVar_2", true);
end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());




/**
 * [tSetGlobalVar_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRedshiftConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_2 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_2";

	

 



/**
 * [tSetGlobalVar_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftConnection_1", false);
		start_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftConnection_1";

	
		int tos_count_tRedshiftConnection_1 = 0;
		
    	class BytesLimit65535_tRedshiftConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftConnection_1().limitLog4jByte();


	
    			String url_tRedshiftConnection_1 = "jdbc:redshift://" + context.Redshift_Staging_Server + ":" + context.Redshift_Staging_Port + "/" + context.Redshift_Staging_Database + "?" + context.Redshift_Staging_AdditionalParams;
    		

	String dbUser_tRedshiftConnection_1 = context.Redshift_Staging_Login;
	
	
		
	final String decryptedPassword_tRedshiftConnection_1 = context.Redshift_Staging_Password; 
		String dbPwd_tRedshiftConnection_1 = decryptedPassword_tRedshiftConnection_1;
	

	java.sql.Connection conn_tRedshiftConnection_1 = null;
	
					String driverClass_tRedshiftConnection_1 = "com.amazon.redshift.jdbc41.Driver";
			java.lang.Class.forName(driverClass_tRedshiftConnection_1);
		
		conn_tRedshiftConnection_1 = java.sql.DriverManager.getConnection(url_tRedshiftConnection_1,dbUser_tRedshiftConnection_1,dbPwd_tRedshiftConnection_1);

		globalMap.put("conn_tRedshiftConnection_1", conn_tRedshiftConnection_1);
	if (null != conn_tRedshiftConnection_1) {
		
			conn_tRedshiftConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tRedshiftConnection_1",context.Redshift_Staging_Schema);

	globalMap.put("conn_" + "tRedshiftConnection_1",conn_tRedshiftConnection_1);

 



/**
 * [tRedshiftConnection_1 begin ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 


	tos_count_tRedshiftConnection_1++;

/**
 * [tRedshiftConnection_1 main ] stop
 */
	
	/**
	 * [tRedshiftConnection_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 

ok_Hash.put("tRedshiftConnection_1", true);
end_Hash.put("tRedshiftConnection_1", System.currentTimeMillis());




/**
 * [tRedshiftConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftConnection_1";

	

 



/**
 * [tRedshiftConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRedshiftClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRedshiftClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftClose_1", false);
		start_Hash.put("tRedshiftClose_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftClose_1";

	
		int tos_count_tRedshiftClose_1 = 0;
		
    	class BytesLimit65535_tRedshiftClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftClose_1().limitLog4jByte();

 



/**
 * [tRedshiftClose_1 begin ] stop
 */
	
	/**
	 * [tRedshiftClose_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	



	java.sql.Connection conn_tRedshiftClose_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	if(conn_tRedshiftClose_1 != null && !conn_tRedshiftClose_1.isClosed())
	{
        conn_tRedshiftClose_1.close();
	}

 


	tos_count_tRedshiftClose_1++;

/**
 * [tRedshiftClose_1 main ] stop
 */
	
	/**
	 * [tRedshiftClose_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 

ok_Hash.put("tRedshiftClose_1", true);
end_Hash.put("tRedshiftClose_1", System.currentTimeMillis());




/**
 * [tRedshiftClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftClose_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftClose_1";

	

 



/**
 * [tRedshiftClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tSetGlobalVar_1 = 0; //for statistics
						
			int NB_ITERATE_tJava_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
    	class BytesLimit65535_tFileList_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileList_1().limitLog4jByte();
	
 
     
    
  String directory_tFileList_1 = context.feedInput;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add(FeedFile.FileType.CREDITS.filePattern());  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	NB_ITERATE_tSetGlobalVar_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("tables_to_clear", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("first_file", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("log_truncated", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tSetGlobalVar_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		
    	class BytesLimit65535_tSetGlobalVar_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSetGlobalVar_1().limitLog4jByte();

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("File_Processed_Records", new java.util.concurrent.atomic.AtomicInteger(0) );
globalMap.put("FileList_CurrentIndex", ((java.util.concurrent.atomic.AtomicInteger)globalMap.get("FileList_Counter")).incrementAndGet());

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

   			if (context.clearStagingTable && ((Integer) globalMap.get("FileList_CurrentIndex")) == 1) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("first_file", 0, "true");
					}
				
    			tFixedFlowInput_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("first_file", 0, "false");
					}   	 
   				}



/**
 * [tSetGlobalVar_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tSetGlobalVar_1);
						}				
					




	NB_ITERATE_tJava_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Row_FeedRecord", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("file_failed", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Record_OutputToDB", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_row", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("file_success", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("After_Insert", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Log_Rows", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		
    	class BytesLimit65535_tJava_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_2().limitLog4jByte();


globalMap.put("fileName", FeedFile.getCleanFeedFileName((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
globalMap.put("tableName", FeedFile.FileType.CREDITS.toString());
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (context.bulkLoad == null || !context.bulkLoad) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFileInputDelimited_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.bulkLoad) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tFileInputDelimited_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_2);
						}				
					




	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tFileList_1_NB_FILE")) == 0) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("no_files", 0, "true");
					}
				
    			tWarn_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("no_files", 0, "false");
					}   	 
   				}



/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */




	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class log_truncatedStruct implements routines.system.IPersistableRow<log_truncatedStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public String tableName;

				public String getTableName () {
					return this.tableName;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.tableName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tableName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tableName="+tableName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_truncatedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tables_to_clearStruct implements routines.system.IPersistableRow<tables_to_clearStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public String tableName;

				public String getTableName () {
					return this.tableName;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.tableName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.tableName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("tableName="+tableName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tables_to_clearStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		tables_to_clearStruct tables_to_clear = new tables_to_clearStruct();
log_truncatedStruct log_truncated = new log_truncatedStruct();





	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_truncated" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_2 = 0;
		
    	class BytesLimit65535_tWarn_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_2().limitLog4jByte();

 



/**
 * [tWarn_2 begin ] stop
 */



	
	/**
	 * [tRedshiftRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_1", false);
		start_Hash.put("tRedshiftRow_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("tables_to_clear" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftRow_1 = 0;
		
    	class BytesLimit65535_tRedshiftRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_1().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_1 = null;
	String query_tRedshiftRow_1 = "";
	boolean whetherReject_tRedshiftRow_1 = false;
				conn_tRedshiftRow_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_1 = conn_tRedshiftRow_1.createStatement();
	

 



/**
 * [tRedshiftRow_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		
    	class BytesLimit65535_tFixedFlowInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		tables_to_clear.tableName = context.Redshift_Staging_Schema + "." + FeedFile.FileType.CREDITS;
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */

	
	/**
	 * [tRedshiftRow_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

			//tables_to_clear
			//tables_to_clear


			
				if(execStat){
					runStat.updateStatOnConnection("tables_to_clear"+iterateId,1, 1);
				} 
			

		

		log_truncated = null;
		
query_tRedshiftRow_1 = "truncate  " + tables_to_clear.tableName;
whetherReject_tRedshiftRow_1 = false;
globalMap.put("tRedshiftRow_1_QUERY",query_tRedshiftRow_1);
try {
		stmt_tRedshiftRow_1.execute(query_tRedshiftRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_1 = true;
		
			throw(e);
			
	}
	
	if(!whetherReject_tRedshiftRow_1) {
		
					log_truncated = new log_truncatedStruct();
					
							log_truncated.tableName = tables_to_clear.tableName;
							
	}
	

 


	tos_count_tRedshiftRow_1++;

/**
 * [tRedshiftRow_1 main ] stop
 */
// Start of branch "log_truncated"
if(log_truncated != null) { 



	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			//log_truncated
			//log_truncated


			
				if(execStat){
					runStat.updateStatOnConnection("log_truncated"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO","","Truncating Table - " + tables_to_clear.tableName,"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_2", 3, "Truncating Table - " + tables_to_clear.tableName, 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_2_WARN_MESSAGES", "Truncating Table - " + tables_to_clear.tableName); 
globalMap.put("tWarn_2_WARN_PRIORITY", 3);
globalMap.put("tWarn_2_WARN_CODE", 42);


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */

} // End of branch "log_truncated"







	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tRedshiftRow_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

	
	stmt_tRedshiftRow_1.close();	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("tables_to_clear"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftRow_1", true);
end_Hash.put("tRedshiftRow_1", System.currentTimeMillis());




/**
 * [tRedshiftRow_1 end ] stop
 */

	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_truncated"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tRedshiftRow_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_1";

	

 



/**
 * [tRedshiftRow_1 finally ] stop
 */

	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Log_RowsStruct implements routines.system.IPersistableRow<Log_RowsStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Log_RowsStruct other = (Log_RowsStruct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Log_RowsStruct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(Log_RowsStruct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Log_RowsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class After_InsertStruct implements routines.system.IPersistableRow<After_InsertStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final After_InsertStruct other = (After_InsertStruct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(After_InsertStruct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(After_InsertStruct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(After_InsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Record_OutputToDBStruct implements routines.system.IPersistableRow<Record_OutputToDBStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Record_OutputToDBStruct other = (Record_OutputToDBStruct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Record_OutputToDBStruct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(Record_OutputToDBStruct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Record_OutputToDBStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Row_FeedRecordStruct implements routines.system.IPersistableRow<Row_FeedRecordStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Row_FeedRecordStruct other = (Row_FeedRecordStruct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(Row_FeedRecordStruct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(Row_FeedRecordStruct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Row_FeedRecordStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		Row_FeedRecordStruct Row_FeedRecord = new Row_FeedRecordStruct();
Record_OutputToDBStruct Record_OutputToDB = new Record_OutputToDBStruct();
After_InsertStruct After_Insert = new After_InsertStruct();
Log_RowsStruct Log_Rows = new Log_RowsStruct();







	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Log_Rows" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_4 = 0;
		
    	class BytesLimit65535_tWarn_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_4().limitLog4jByte();

 



/**
 * [tWarn_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("After_Insert" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Record_OutputToDB" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = (String)globalMap.get("schema_" + "tRedshiftConnection_1");
	
String tableName_tRedshiftOutput_1 = (String)globalMap.get("tableName");
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;
	conn_tRedshiftOutput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
	
	
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						long credit_id;
						
	            		public BufferLine_tRedshiftOutput_1 c0(long credit_id){
							this.credit_id = credit_id;
							return this;
						}				
						Long account_id;
						
	            		public BufferLine_tRedshiftOutput_1 c1(Long account_id){
							this.account_id = account_id;
							return this;
						}				
						Long member_id;
						
	            		public BufferLine_tRedshiftOutput_1 c2(Long member_id){
							this.member_id = member_id;
							return this;
						}				
						Long reservation_id;
						
	            		public BufferLine_tRedshiftOutput_1 c3(Long reservation_id){
							this.reservation_id = reservation_id;
							return this;
						}				
						Long zipfleet_id;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long zipfleet_id){
							this.zipfleet_id = zipfleet_id;
							return this;
						}				
						String currency_iso;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String currency_iso){
							this.currency_iso = currency_iso;
							return this;
						}				
						String credit_type;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String credit_type){
							this.credit_type = credit_type;
							return this;
						}				
						Double credit_used;
						
	            		public BufferLine_tRedshiftOutput_1 c7(Double credit_used){
							this.credit_used = credit_used;
							return this;
						}				
						Double credit_expired;
						
	            		public BufferLine_tRedshiftOutput_1 c8(Double credit_expired){
							this.credit_expired = credit_expired;
							return this;
						}				
						Double credit_unused;
						
	            		public BufferLine_tRedshiftOutput_1 c9(Double credit_unused){
							this.credit_unused = credit_unused;
							return this;
						}				
						String description;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String description){
							this.description = description;
							return this;
						}				
						String manual_credit_p;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String manual_credit_p){
							this.manual_credit_p = manual_credit_p;
							return this;
						}				
						String operation;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String operation){
							this.operation = operation;
							return this;
						}				
						Double value;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Double value){
							this.value = value;
							return this;
						}				
						java.util.Date start_date;
						
	            		public BufferLine_tRedshiftOutput_1 c14(java.util.Date start_date){
							this.start_date = start_date;
							return this;
						}				
						java.util.Date end_date;
						
	            		public BufferLine_tRedshiftOutput_1 c15(java.util.Date end_date){
							this.end_date = end_date;
							return this;
						}				
						java.util.Date void_date;
						
	            		public BufferLine_tRedshiftOutput_1 c16(java.util.Date void_date){
							this.void_date = void_date;
							return this;
						}				
						Long giver_account_id;
						
	            		public BufferLine_tRedshiftOutput_1 c17(Long giver_account_id){
							this.giver_account_id = giver_account_id;
							return this;
						}				
						String usage_only_p;
						
	            		public BufferLine_tRedshiftOutput_1 c18(String usage_only_p){
							this.usage_only_p = usage_only_p;
							return this;
						}				
						Long reference_id;
						
	            		public BufferLine_tRedshiftOutput_1 c19(Long reference_id){
							this.reference_id = reference_id;
							return this;
						}				
						Long creation_user;
						
	            		public BufferLine_tRedshiftOutput_1 c20(Long creation_user){
							this.creation_user = creation_user;
							return this;
						}				
						java.util.Date creation_date;
						
	            		public BufferLine_tRedshiftOutput_1 c21(java.util.Date creation_date){
							this.creation_date = creation_date;
							return this;
						}				
						String internal_description;
						
	            		public BufferLine_tRedshiftOutput_1 c22(String internal_description){
							this.internal_description = internal_description;
							return this;
						}				
						Long modifying_user;
						
	            		public BufferLine_tRedshiftOutput_1 c23(Long modifying_user){
							this.modifying_user = modifying_user;
							return this;
						}				
						java.util.Date last_modified;
						
	            		public BufferLine_tRedshiftOutput_1 c24(java.util.Date last_modified){
							this.last_modified = last_modified;
							return this;
						}				
						Integer driving_credit_reason_code_id;
						
	            		public BufferLine_tRedshiftOutput_1 c25(Integer driving_credit_reason_code_id){
							this.driving_credit_reason_code_id = driving_credit_reason_code_id;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 1000;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=1000-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"credit_id\",\"account_id\",\"member_id\",\"reservation_id\",\"zipfleet_id\",\"currency_iso\",\"credit_type\",\"credit_used\",\"credit_expired\",\"credit_unused\",\"description\",\"manual_credit_p\",\"operation\",\"value\",\"start_date\",\"end_date\",\"void_date\",\"giver_account_id\",\"usage_only_p\",\"reference_id\",\"creation_user\",\"creation_date\",\"internal_description\",\"modifying_user\",\"last_modified\",\"driving_credit_reason_code_id\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("Row_FeedRecord" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_2 = 0;
		
    	class BytesLimit65535_tJavaRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_2().limitLog4jByte();

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
	        			java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
	        			try {
		        			if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
		        				zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_1));
		        			}else{
		        				zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1))));
		        			}
	        			} catch(java.lang.Exception e) {
	        				
								
								System.err.println(e.getMessage());
							
	        			}
	        			java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;
		        
				        while (true) {
			        		try {
	        					entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1.getNextEntry();
	        				} catch(java.lang.Exception e) {
	        					
									
									System.err.println(e.getMessage());
									break;
								
	        				}
	        				if(entry_tFileInputDelimited_1 == null) {
								break;
							}
	        				if(entry_tFileInputDelimited_1.isDirectory()){ //directory
	        					continue;
	        				}
	        				String[] rowtFileInputDelimited_1=null;
	        				int currentLinetFileInputDelimited_1 = 0;
	        				int outputLinetFileInputDelimited_1 = 0;
	        				try {//TD110 begin
	        					csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(zis_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							Row_FeedRecord = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								Row_FeedRecord = new Row_FeedRecordStruct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							Row_FeedRecord.credit_id = 0;
					
							Row_FeedRecord.account_id = null;
					
							Row_FeedRecord.member_id = null;
					
							Row_FeedRecord.reservation_id = null;
					
							Row_FeedRecord.zipfleet_id = null;
					
							Row_FeedRecord.currency_iso = null;
					
							Row_FeedRecord.credit_type = null;
					
							Row_FeedRecord.credit_used = null;
					
							Row_FeedRecord.credit_expired = null;
					
							Row_FeedRecord.credit_unused = null;
					
							Row_FeedRecord.description = null;
					
							Row_FeedRecord.manual_credit_p = null;
					
							Row_FeedRecord.operation = null;
					
							Row_FeedRecord.value = null;
					
							Row_FeedRecord.start_date = null;
					
							Row_FeedRecord.end_date = null;
					
							Row_FeedRecord.void_date = null;
					
							Row_FeedRecord.giver_account_id = null;
					
							Row_FeedRecord.usage_only_p = null;
					
							Row_FeedRecord.reference_id = null;
					
							Row_FeedRecord.creation_user = null;
					
							Row_FeedRecord.creation_date = null;
					
							Row_FeedRecord.internal_description = null;
					
							Row_FeedRecord.modifying_user = null;
					
							Row_FeedRecord.last_modified = null;
					
							Row_FeedRecord.driving_credit_reason_code_id = null;
					
				}else{
					
					for(int i_tFileInputDelimited_1=0;i_tFileInputDelimited_1<rowtFileInputDelimited_1.length;i_tFileInputDelimited_1++){
						rowtFileInputDelimited_1[i_tFileInputDelimited_1]=rowtFileInputDelimited_1[i_tFileInputDelimited_1].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.credit_id = ParserUtils.parseTo_long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'credit_id' in 'Row_FeedRecord' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.credit_id = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.account_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.account_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.account_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.member_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.member_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.member_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.reservation_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.reservation_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.reservation_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.zipfleet_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.zipfleet_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.zipfleet_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.currency_iso = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.currency_iso = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.credit_type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.credit_type = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.credit_used = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.credit_used = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.credit_used = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.credit_expired = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.credit_expired = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.credit_expired = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.credit_unused = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.credit_unused = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.credit_unused = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.description = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.description = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.manual_credit_p = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.manual_credit_p = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.operation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.operation = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.value = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.value = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.value = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.start_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.start_date = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.start_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.end_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.end_date = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.end_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.void_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.void_date = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.void_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.giver_account_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.giver_account_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.giver_account_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.usage_only_p = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.usage_only_p = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.reference_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.reference_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.reference_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.creation_user = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.creation_user = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.creation_user = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.creation_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.creation_date = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.creation_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									Row_FeedRecord.internal_description = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							Row_FeedRecord.internal_description = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.modifying_user = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.modifying_user = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.modifying_user = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											Row_FeedRecord.last_modified = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.last_modified = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.last_modified = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										Row_FeedRecord.driving_credit_reason_code_id = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										Row_FeedRecord.driving_credit_reason_code_id = null;
    									
    								}
									
									
							
						
						}else{
							Row_FeedRecord.driving_credit_reason_code_id = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_1.length;
 					if(filedsum < (26 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (26 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							Row_FeedRecord = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "Row_FeedRecord"
if(Row_FeedRecord != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

			//Row_FeedRecord
			//Row_FeedRecord


			
				if(execStat){
					runStat.updateStatOnConnection("Row_FeedRecord"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
Record_OutputToDB.credit_id = Row_FeedRecord.credit_id;
Record_OutputToDB.account_id = Row_FeedRecord.account_id;
Record_OutputToDB.member_id = Row_FeedRecord.member_id;
Record_OutputToDB.reservation_id = Row_FeedRecord.reservation_id;
Record_OutputToDB.zipfleet_id = Row_FeedRecord.zipfleet_id;
Record_OutputToDB.currency_iso = StringUtils.trimToNull(Row_FeedRecord.currency_iso);
Record_OutputToDB.credit_type = StringUtils.trimToNull(Row_FeedRecord.credit_type);
Record_OutputToDB.credit_used = Row_FeedRecord.credit_used;
Record_OutputToDB.credit_expired = Row_FeedRecord.credit_expired;
Record_OutputToDB.credit_unused = Row_FeedRecord.credit_unused;
Record_OutputToDB.description = StringUtils.trimToNull(Row_FeedRecord.description);
Record_OutputToDB.manual_credit_p = BooleanUtils.boolChar(Row_FeedRecord.manual_credit_p);
Record_OutputToDB.operation = StringUtils.trimToNull(Row_FeedRecord.operation);
Record_OutputToDB.value = Row_FeedRecord.value;
Record_OutputToDB.start_date = Row_FeedRecord.start_date;
Record_OutputToDB.end_date = Row_FeedRecord.end_date;
Record_OutputToDB.void_date = Row_FeedRecord.void_date;
Record_OutputToDB.giver_account_id = Row_FeedRecord.giver_account_id;
Record_OutputToDB.usage_only_p = BooleanUtils.boolChar(Row_FeedRecord.usage_only_p);
Record_OutputToDB.reference_id = Row_FeedRecord.reference_id;
Record_OutputToDB.creation_user = Row_FeedRecord.creation_user;
Record_OutputToDB.creation_date = Row_FeedRecord.creation_date;
Record_OutputToDB.internal_description = StringUtils.trimToNull(Row_FeedRecord.internal_description);
Record_OutputToDB.modifying_user = Row_FeedRecord.modifying_user;
Record_OutputToDB.last_modified = Row_FeedRecord.last_modified;
Record_OutputToDB.driving_credit_reason_code_id = Row_FeedRecord.driving_credit_reason_code_id;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//Record_OutputToDB
			//Record_OutputToDB


			
				if(execStat){
					runStat.updateStatOnConnection("Record_OutputToDB"+iterateId,1, 1);
				} 
			

		



            After_Insert = null;
        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(26
					)
				+ 1;

						
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.credit_id);
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.account_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.account_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.member_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.member_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.reservation_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.reservation_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.zipfleet_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.zipfleet_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.currency_iso==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.currency_iso);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.credit_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.credit_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.credit_used==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.credit_used);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.credit_expired==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.credit_expired);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.credit_unused==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.credit_unused);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.description==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.description);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.manual_credit_p==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.manual_credit_p);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.operation==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.operation);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.value==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DOUBLE);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setDouble(countertRedshiftOutput_1,Record_OutputToDB.value);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.start_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.start_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.end_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.end_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.void_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.void_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.giver_account_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.giver_account_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.usage_only_p==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.usage_only_p);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.reference_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.reference_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.creation_user==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.creation_user);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.creation_date!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.creation_date.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.internal_description==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,Record_OutputToDB.internal_description);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.modifying_user==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,Record_OutputToDB.modifying_user);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.last_modified!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = Record_OutputToDB.last_modified.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(Record_OutputToDB.driving_credit_reason_code_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setInt(countertRedshiftOutput_1,Record_OutputToDB.driving_credit_reason_code_id);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(Record_OutputToDB.credit_id)
                        .c1(Record_OutputToDB.account_id)
                        .c2(Record_OutputToDB.member_id)
                        .c3(Record_OutputToDB.reservation_id)
                        .c4(Record_OutputToDB.zipfleet_id)
                        .c5(Record_OutputToDB.currency_iso)
                        .c6(Record_OutputToDB.credit_type)
                        .c7(Record_OutputToDB.credit_used)
                        .c8(Record_OutputToDB.credit_expired)
                        .c9(Record_OutputToDB.credit_unused)
                        .c10(Record_OutputToDB.description)
                        .c11(Record_OutputToDB.manual_credit_p)
                        .c12(Record_OutputToDB.operation)
                        .c13(Record_OutputToDB.value)
                        .c14(Record_OutputToDB.start_date)
                        .c15(Record_OutputToDB.end_date)
                        .c16(Record_OutputToDB.void_date)
                        .c17(Record_OutputToDB.giver_account_id)
                        .c18(Record_OutputToDB.usage_only_p)
                        .c19(Record_OutputToDB.reference_id)
                        .c20(Record_OutputToDB.creation_user)
                        .c21(Record_OutputToDB.creation_date)
                        .c22(Record_OutputToDB.internal_description)
                        .c23(Record_OutputToDB.modifying_user)
                        .c24(Record_OutputToDB.last_modified)
                        .c25(Record_OutputToDB.driving_credit_reason_code_id)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 1000){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
            if(!whetherReject_tRedshiftOutput_1) {
                            After_Insert = new After_InsertStruct();
                                After_Insert.credit_id = Record_OutputToDB.credit_id;
                                After_Insert.account_id = Record_OutputToDB.account_id;
                                After_Insert.member_id = Record_OutputToDB.member_id;
                                After_Insert.reservation_id = Record_OutputToDB.reservation_id;
                                After_Insert.zipfleet_id = Record_OutputToDB.zipfleet_id;
                                After_Insert.currency_iso = Record_OutputToDB.currency_iso;
                                After_Insert.credit_type = Record_OutputToDB.credit_type;
                                After_Insert.credit_used = Record_OutputToDB.credit_used;
                                After_Insert.credit_expired = Record_OutputToDB.credit_expired;
                                After_Insert.credit_unused = Record_OutputToDB.credit_unused;
                                After_Insert.description = Record_OutputToDB.description;
                                After_Insert.manual_credit_p = Record_OutputToDB.manual_credit_p;
                                After_Insert.operation = Record_OutputToDB.operation;
                                After_Insert.value = Record_OutputToDB.value;
                                After_Insert.start_date = Record_OutputToDB.start_date;
                                After_Insert.end_date = Record_OutputToDB.end_date;
                                After_Insert.void_date = Record_OutputToDB.void_date;
                                After_Insert.giver_account_id = Record_OutputToDB.giver_account_id;
                                After_Insert.usage_only_p = Record_OutputToDB.usage_only_p;
                                After_Insert.reference_id = Record_OutputToDB.reference_id;
                                After_Insert.creation_user = Record_OutputToDB.creation_user;
                                After_Insert.creation_date = Record_OutputToDB.creation_date;
                                After_Insert.internal_description = Record_OutputToDB.internal_description;
                                After_Insert.modifying_user = Record_OutputToDB.modifying_user;
                                After_Insert.last_modified = Record_OutputToDB.last_modified;
                                After_Insert.driving_credit_reason_code_id = Record_OutputToDB.driving_credit_reason_code_id;
            }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */
// Start of branch "After_Insert"
if(After_Insert != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//After_Insert
			//After_Insert


			
				if(execStat){
					runStat.updateStatOnConnection("After_Insert"+iterateId,1, 1);
				} 
			

		

          Log_Rows = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
      ope_tFilterRow_1.matches((// Log Every X Records
((java.util.concurrent.atomic.AtomicInteger)globalMap.get("File_Processed_Records")).incrementAndGet() % Logging.PROGRESS_ROW_COUNT  == 0), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(Log_Rows == null){ 
                Log_Rows = new Log_RowsStruct();
              }
               Log_Rows.credit_id = After_Insert.credit_id;
               Log_Rows.account_id = After_Insert.account_id;
               Log_Rows.member_id = After_Insert.member_id;
               Log_Rows.reservation_id = After_Insert.reservation_id;
               Log_Rows.zipfleet_id = After_Insert.zipfleet_id;
               Log_Rows.currency_iso = After_Insert.currency_iso;
               Log_Rows.credit_type = After_Insert.credit_type;
               Log_Rows.credit_used = After_Insert.credit_used;
               Log_Rows.credit_expired = After_Insert.credit_expired;
               Log_Rows.credit_unused = After_Insert.credit_unused;
               Log_Rows.description = After_Insert.description;
               Log_Rows.manual_credit_p = After_Insert.manual_credit_p;
               Log_Rows.operation = After_Insert.operation;
               Log_Rows.value = After_Insert.value;
               Log_Rows.start_date = After_Insert.start_date;
               Log_Rows.end_date = After_Insert.end_date;
               Log_Rows.void_date = After_Insert.void_date;
               Log_Rows.giver_account_id = After_Insert.giver_account_id;
               Log_Rows.usage_only_p = After_Insert.usage_only_p;
               Log_Rows.reference_id = After_Insert.reference_id;
               Log_Rows.creation_user = After_Insert.creation_user;
               Log_Rows.creation_date = After_Insert.creation_date;
               Log_Rows.internal_description = After_Insert.internal_description;
               Log_Rows.modifying_user = After_Insert.modifying_user;
               Log_Rows.last_modified = After_Insert.last_modified;
               Log_Rows.driving_credit_reason_code_id = After_Insert.driving_credit_reason_code_id;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "Log_Rows"
if(Log_Rows != null) { 



	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			//Log_Rows
			//Log_Rows


			
				if(execStat){
					runStat.updateStatOnConnection("Log_Rows"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "TRACE","","Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_4", 1, "Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_4_WARN_MESSAGES", "Inserted: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) +" -> Rows: " + (globalMap.get("File_Processed_Records"))); 
globalMap.put("tWarn_4_WARN_PRIORITY", 1);
globalMap.put("tWarn_4_WARN_CODE", 42);


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */

} // End of branch "Log_Rows"





} // End of branch "After_Insert"








} // End of branch "Row_FeedRecord"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			}
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileCopy_1Process(globalMap);



/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Row_FeedRecord"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"credit_id\",\"account_id\",\"member_id\",\"reservation_id\",\"zipfleet_id\",\"currency_iso\",\"credit_type\",\"credit_used\",\"credit_expired\",\"credit_unused\",\"description\",\"manual_credit_p\",\"operation\",\"value\",\"start_date\",\"end_date\",\"void_date\",\"giver_account_id\",\"usage_only_p\",\"reference_id\",\"creation_user\",\"creation_date\",\"internal_description\",\"modifying_user\",\"last_modified\",\"driving_credit_reason_code_id\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(26
					)
				+ 1;
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.credit_id);
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.account_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.account_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.member_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.member_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.reservation_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.reservation_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.zipfleet_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.zipfleet_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.currency_iso==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.currency_iso);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.credit_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.credit_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.credit_used==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.credit_used);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.credit_expired==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.credit_expired);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.credit_unused==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.credit_unused);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.description==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.description);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.manual_credit_p==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.manual_credit_p);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.operation==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.operation);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.value==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DOUBLE);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setDouble(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.value);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.start_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.start_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.end_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.end_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.void_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.void_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.giver_account_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.giver_account_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.usage_only_p==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.usage_only_p);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.reference_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.reference_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.creation_user==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.creation_user);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.creation_date!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.creation_date.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.internal_description==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.internal_description);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.modifying_user==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.modifying_user);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.last_modified!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.last_modified.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.driving_credit_reason_code_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setInt(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.driving_credit_reason_code_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Record_OutputToDB"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("After_Insert"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("Log_Rows"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class file_failedStruct implements routines.system.IPersistableRow<file_failedStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public String filePath;

				public String getFilePath () {
					return this.filePath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.filePath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filePath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filePath="+filePath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(file_failedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileCopy_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		file_failedStruct file_failed = new file_failedStruct();




	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("file_failed" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tDie_1 = 0;
		
    	class BytesLimit65535_tDie_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tDie_1().limitLog4jByte();

 



/**
 * [tDie_1 begin ] stop
 */



	
	/**
	 * [tFileCopy_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_2", false);
		start_Hash.put("tFileCopy_2", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_2";

	
		int tos_count_tFileCopy_2 = 0;
		
    	class BytesLimit65535_tFileCopy_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_2().limitLog4jByte();

 



/**
 * [tFileCopy_2 begin ] stop
 */
	
	/**
	 * [tFileCopy_2 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 


        String srcFileName_tFileCopy_2 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));

		java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
		}
        String desDirName_tFileCopy_2 = context.feedError;

		String desFileName_tFileCopy_2 =  srcFile_tFileCopy_2.getName() ;

		if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())){
			desFileName_tFileCopy_2 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2, desFileName_tFileCopy_2);

		if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())  ) {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(), desFile_tFileCopy_2.getPath(), true);
				java.io.File isRemoved_tFileCopy_2 = new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
				if(isRemoved_tFileCopy_2.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_2 = String.format("tFileCopy_2 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_2);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_2);
				} 

		}
		globalMap.put("tFileCopy_2_DESTINATION_FILEPATH",desFile_tFileCopy_2.getPath()); 
		globalMap.put("tFileCopy_2_DESTINATION_FILENAME",desFile_tFileCopy_2.getName()); 

		globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
		globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());        
        

 


	tos_count_tFileCopy_2++;

/**
 * [tFileCopy_2 main ] stop
 */

	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

			//file_failed
			//file_failed


			
				if(execStat){
					runStat.updateStatOnConnection("file_failed"+iterateId,1, 1);
				} 
			

		


				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")), 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	globalMap.put("tDie_1_DIE_MESSAGES", "Failed to Process Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")));
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */



	
	/**
	 * [tFileCopy_2 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 

ok_Hash.put("tFileCopy_2", true);
end_Hash.put("tFileCopy_2", System.currentTimeMillis());




/**
 * [tFileCopy_2 end ] stop
 */

	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("file_failed"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_2 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 finally ] stop
 */

	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 1);
	}
	


public static class file_successStruct implements routines.system.IPersistableRow<file_successStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public String filePath;

				public String getFilePath () {
					return this.filePath;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.filePath = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filePath,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filePath="+filePath);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(file_successStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		file_successStruct file_success = new file_successStruct();




	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("file_success" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */



	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		
    	class BytesLimit65535_tFileCopy_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileCopy_1().limitLog4jByte();

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"));

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = context.feedArchive;

		String desFileName_tFileCopy_1 =  srcFile_tFileCopy_1.getName() ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				java.io.File isRemoved_tFileCopy_1 = new java.io.File(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")));
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_1);
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */

	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

			//file_success
			//file_success


			
				if(execStat){
					runStat.updateStatOnConnection("file_success"+iterateId,1, 1);
				} 
			

		

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Archived Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE"))); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */



	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());




/**
 * [tFileCopy_1 end ] stop
 */

	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("file_success"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */

	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long credit_id;

				public long getCredit_id () {
					return this.credit_id;
				}
				
			    public Long account_id;

				public Long getAccount_id () {
					return this.account_id;
				}
				
			    public Long member_id;

				public Long getMember_id () {
					return this.member_id;
				}
				
			    public Long reservation_id;

				public Long getReservation_id () {
					return this.reservation_id;
				}
				
			    public Long zipfleet_id;

				public Long getZipfleet_id () {
					return this.zipfleet_id;
				}
				
			    public String currency_iso;

				public String getCurrency_iso () {
					return this.currency_iso;
				}
				
			    public String credit_type;

				public String getCredit_type () {
					return this.credit_type;
				}
				
			    public Double credit_used;

				public Double getCredit_used () {
					return this.credit_used;
				}
				
			    public Double credit_expired;

				public Double getCredit_expired () {
					return this.credit_expired;
				}
				
			    public Double credit_unused;

				public Double getCredit_unused () {
					return this.credit_unused;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String manual_credit_p;

				public String getManual_credit_p () {
					return this.manual_credit_p;
				}
				
			    public String operation;

				public String getOperation () {
					return this.operation;
				}
				
			    public Double value;

				public Double getValue () {
					return this.value;
				}
				
			    public java.util.Date start_date;

				public java.util.Date getStart_date () {
					return this.start_date;
				}
				
			    public java.util.Date end_date;

				public java.util.Date getEnd_date () {
					return this.end_date;
				}
				
			    public java.util.Date void_date;

				public java.util.Date getVoid_date () {
					return this.void_date;
				}
				
			    public Long giver_account_id;

				public Long getGiver_account_id () {
					return this.giver_account_id;
				}
				
			    public String usage_only_p;

				public String getUsage_only_p () {
					return this.usage_only_p;
				}
				
			    public Long reference_id;

				public Long getReference_id () {
					return this.reference_id;
				}
				
			    public Long creation_user;

				public Long getCreation_user () {
					return this.creation_user;
				}
				
			    public java.util.Date creation_date;

				public java.util.Date getCreation_date () {
					return this.creation_date;
				}
				
			    public String internal_description;

				public String getInternal_description () {
					return this.internal_description;
				}
				
			    public Long modifying_user;

				public Long getModifying_user () {
					return this.modifying_user;
				}
				
			    public java.util.Date last_modified;

				public java.util.Date getLast_modified () {
					return this.last_modified;
				}
				
			    public Integer driving_credit_reason_code_id;

				public Integer getDriving_credit_reason_code_id () {
					return this.driving_credit_reason_code_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.credit_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.credit_id != other.credit_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.credit_id = this.credit_id;
	            other.account_id = this.account_id;
	            other.member_id = this.member_id;
	            other.reservation_id = this.reservation_id;
	            other.zipfleet_id = this.zipfleet_id;
	            other.currency_iso = this.currency_iso;
	            other.credit_type = this.credit_type;
	            other.credit_used = this.credit_used;
	            other.credit_expired = this.credit_expired;
	            other.credit_unused = this.credit_unused;
	            other.description = this.description;
	            other.manual_credit_p = this.manual_credit_p;
	            other.operation = this.operation;
	            other.value = this.value;
	            other.start_date = this.start_date;
	            other.end_date = this.end_date;
	            other.void_date = this.void_date;
	            other.giver_account_id = this.giver_account_id;
	            other.usage_only_p = this.usage_only_p;
	            other.reference_id = this.reference_id;
	            other.creation_user = this.creation_user;
	            other.creation_date = this.creation_date;
	            other.internal_description = this.internal_description;
	            other.modifying_user = this.modifying_user;
	            other.last_modified = this.last_modified;
	            other.driving_credit_reason_code_id = this.driving_credit_reason_code_id;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.credit_id = this.credit_id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
			        this.credit_id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.account_id = null;
           				} else {
           			    	this.account_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.member_id = null;
           				} else {
           			    	this.member_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reservation_id = null;
           				} else {
           			    	this.reservation_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.zipfleet_id = null;
           				} else {
           			    	this.zipfleet_id = dis.readLong();
           				}
					
					this.currency_iso = readString(dis);
					
					this.credit_type = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_used = null;
           				} else {
           			    	this.credit_used = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_expired = null;
           				} else {
           			    	this.credit_expired = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.credit_unused = null;
           				} else {
           			    	this.credit_unused = dis.readDouble();
           				}
					
					this.description = readString(dis);
					
					this.manual_credit_p = readString(dis);
					
					this.operation = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.value = null;
           				} else {
           			    	this.value = dis.readDouble();
           				}
					
					this.start_date = readDate(dis);
					
					this.end_date = readDate(dis);
					
					this.void_date = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.giver_account_id = null;
           				} else {
           			    	this.giver_account_id = dis.readLong();
           				}
					
					this.usage_only_p = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.reference_id = null;
           				} else {
           			    	this.reference_id = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.creation_user = null;
           				} else {
           			    	this.creation_user = dis.readLong();
           				}
					
					this.creation_date = readDate(dis);
					
					this.internal_description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.modifying_user = null;
           				} else {
           			    	this.modifying_user = dis.readLong();
           				}
					
					this.last_modified = readDate(dis);
					
						this.driving_credit_reason_code_id = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.credit_id);
					
					// Long
				
						if(this.account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.account_id);
		            	}
					
					// Long
				
						if(this.member_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.member_id);
		            	}
					
					// Long
				
						if(this.reservation_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reservation_id);
		            	}
					
					// Long
				
						if(this.zipfleet_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.zipfleet_id);
		            	}
					
					// String
				
						writeString(this.currency_iso,dos);
					
					// String
				
						writeString(this.credit_type,dos);
					
					// Double
				
						if(this.credit_used == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_used);
		            	}
					
					// Double
				
						if(this.credit_expired == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_expired);
		            	}
					
					// Double
				
						if(this.credit_unused == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.credit_unused);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.manual_credit_p,dos);
					
					// String
				
						writeString(this.operation,dos);
					
					// Double
				
						if(this.value == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.value);
		            	}
					
					// java.util.Date
				
						writeDate(this.start_date,dos);
					
					// java.util.Date
				
						writeDate(this.end_date,dos);
					
					// java.util.Date
				
						writeDate(this.void_date,dos);
					
					// Long
				
						if(this.giver_account_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.giver_account_id);
		            	}
					
					// String
				
						writeString(this.usage_only_p,dos);
					
					// Long
				
						if(this.reference_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.reference_id);
		            	}
					
					// Long
				
						if(this.creation_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.creation_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.creation_date,dos);
					
					// String
				
						writeString(this.internal_description,dos);
					
					// Long
				
						if(this.modifying_user == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.modifying_user);
		            	}
					
					// java.util.Date
				
						writeDate(this.last_modified,dos);
					
					// Integer
				
						writeInteger(this.driving_credit_reason_code_id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("credit_id="+String.valueOf(credit_id));
		sb.append(",account_id="+String.valueOf(account_id));
		sb.append(",member_id="+String.valueOf(member_id));
		sb.append(",reservation_id="+String.valueOf(reservation_id));
		sb.append(",zipfleet_id="+String.valueOf(zipfleet_id));
		sb.append(",currency_iso="+currency_iso);
		sb.append(",credit_type="+credit_type);
		sb.append(",credit_used="+String.valueOf(credit_used));
		sb.append(",credit_expired="+String.valueOf(credit_expired));
		sb.append(",credit_unused="+String.valueOf(credit_unused));
		sb.append(",description="+description);
		sb.append(",manual_credit_p="+manual_credit_p);
		sb.append(",operation="+operation);
		sb.append(",value="+String.valueOf(value));
		sb.append(",start_date="+String.valueOf(start_date));
		sb.append(",end_date="+String.valueOf(end_date));
		sb.append(",void_date="+String.valueOf(void_date));
		sb.append(",giver_account_id="+String.valueOf(giver_account_id));
		sb.append(",usage_only_p="+usage_only_p);
		sb.append(",reference_id="+String.valueOf(reference_id));
		sb.append(",creation_user="+String.valueOf(creation_user));
		sb.append(",creation_date="+String.valueOf(creation_date));
		sb.append(",internal_description="+internal_description);
		sb.append(",modifying_user="+String.valueOf(modifying_user));
		sb.append(",last_modified="+String.valueOf(last_modified));
		sb.append(",driving_credit_reason_code_id="+String.valueOf(driving_credit_reason_code_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.credit_id, other.credit_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.bulkLoadTempPath + "/" + globalMap.get("fileName"))).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[26];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("|");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator("|");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\\","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_3 = 0;
		
    	class BytesLimit65535_tJavaRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_3().limitLog4jByte();

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
	        			java.util.zip.ZipInputStream zis_tFileInputDelimited_2 = null;
	        			try {
		        			if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
		        				zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream((java.io.InputStream)filename_tFileInputDelimited_2));
		        			}else{
		        				zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2))));
		        			}
	        			} catch(java.lang.Exception e) {
	        				
								
								System.err.println(e.getMessage());
							
	        			}
	        			java.util.zip.ZipEntry entry_tFileInputDelimited_2 = null;
		        
				        while (true) {
			        		try {
	        					entry_tFileInputDelimited_2 = zis_tFileInputDelimited_2.getNextEntry();
	        				} catch(java.lang.Exception e) {
	        					
									
									System.err.println(e.getMessage());
									break;
								
	        				}
	        				if(entry_tFileInputDelimited_2 == null) {
								break;
							}
	        				if(entry_tFileInputDelimited_2.isDirectory()){ //directory
	        					continue;
	        				}
	        				String[] rowtFileInputDelimited_2=null;
	        				int currentLinetFileInputDelimited_2 = 0;
	        				int outputLinetFileInputDelimited_2 = 0;
	        				try {//TD110 begin
	        					csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(zis_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar('\\');
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar('\\');
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"|").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)"|").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.credit_id = 0;
					
							row1.account_id = null;
					
							row1.member_id = null;
					
							row1.reservation_id = null;
					
							row1.zipfleet_id = null;
					
							row1.currency_iso = null;
					
							row1.credit_type = null;
					
							row1.credit_used = null;
					
							row1.credit_expired = null;
					
							row1.credit_unused = null;
					
							row1.description = null;
					
							row1.manual_credit_p = null;
					
							row1.operation = null;
					
							row1.value = null;
					
							row1.start_date = null;
					
							row1.end_date = null;
					
							row1.void_date = null;
					
							row1.giver_account_id = null;
					
							row1.usage_only_p = null;
					
							row1.reference_id = null;
					
							row1.creation_user = null;
					
							row1.creation_date = null;
					
							row1.internal_description = null;
					
							row1.modifying_user = null;
					
							row1.last_modified = null;
					
							row1.driving_credit_reason_code_id = null;
					
				}else{
					
					for(int i_tFileInputDelimited_2=0;i_tFileInputDelimited_2<rowtFileInputDelimited_2.length;i_tFileInputDelimited_2++){
						rowtFileInputDelimited_2[i_tFileInputDelimited_2]=rowtFileInputDelimited_2[i_tFileInputDelimited_2].trim();
					}
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.credit_id = ParserUtils.parseTo_long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'credit_id' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));
    									
    								}
									
									
							
						
						}else{
							row1.credit_id = 0;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.account_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.account_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.account_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.member_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.member_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.member_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.reservation_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.reservation_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.reservation_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.zipfleet_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.zipfleet_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.zipfleet_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.currency_iso = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.currency_iso = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.credit_type = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.credit_type = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.credit_used = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.credit_used = null;
    									
    								}
									
									
							
						
						}else{
							row1.credit_used = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.credit_expired = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.credit_expired = null;
    									
    								}
									
									
							
						
						}else{
							row1.credit_expired = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.credit_unused = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.credit_unused = null;
    									
    								}
									
									
							
						
						}else{
							row1.credit_unused = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.description = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.description = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.manual_credit_p = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.manual_credit_p = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.operation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.operation = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.value = ParserUtils.parseTo_Double(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.value = null;
    									
    								}
									
									
							
						
						}else{
							row1.value = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.start_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.start_date = null;
    									
    								}
									
									
							
						
						}else{
							row1.start_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.end_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.end_date = null;
    									
    								}
									
									
							
						
						}else{
							row1.end_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.void_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.void_date = null;
    									
    								}
									
									
							
						
						}else{
							row1.void_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.giver_account_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.giver_account_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.giver_account_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.usage_only_p = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.usage_only_p = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.reference_id = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.reference_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.reference_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.creation_user = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.creation_user = null;
    									
    								}
									
									
							
						
						}else{
							row1.creation_user = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.creation_date = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.creation_date = null;
    									
    								}
									
									
							
						
						}else{
							row1.creation_date = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.internal_description = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row1.internal_description = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.modifying_user = ParserUtils.parseTo_Long(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.modifying_user = null;
    									
    								}
									
									
							
						
						}else{
							row1.modifying_user = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
											row1.last_modified = ParserUtils.parseTo_Date(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], FeedFile.DF_DATETIME, false);
										
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.last_modified = null;
    									
    								}
									
									
							
						
						}else{
							row1.last_modified = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row1.driving_credit_reason_code_id = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(ex_tFileInputDelimited_2);
										}
    								}else{
    									
    										row1.driving_credit_reason_code_id = null;
    									
    								}
									
									
							
						
						}else{
							row1.driving_credit_reason_code_id = null;
						}
						
						
					
				}
				
 					int filedsum = rowtFileInputDelimited_2.length;
 					if(filedsum < (26 )){
 						throw new java.lang.Exception("Column(s) missing");
 					} else if(filedsum > (26 )) {
 						throw new RuntimeException("Too many columns");
 					}     
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row2.credit_id = row1.credit_id;
row2.account_id = row1.account_id;
row2.member_id = row1.member_id;
row2.reservation_id = row1.reservation_id;
row2.zipfleet_id = row1.zipfleet_id;
row2.currency_iso = StringUtils.trimToNull(row1.currency_iso);
row2.credit_type = StringUtils.trimToNull(row1.credit_type);
row2.credit_used = row1.credit_used;
row2.credit_expired = row1.credit_expired;
row2.credit_unused = row1.credit_unused;
row2.description = StringUtils.trimToNull(row1.description);
row2.manual_credit_p = BooleanUtils.boolChar(row1.manual_credit_p);
row2.operation = StringUtils.trimToNull(row1.operation);
row2.value = row1.value;
row2.start_date = row1.start_date;
row2.end_date = row1.end_date;
row2.void_date = row1.void_date;
row2.giver_account_id = row1.giver_account_id;
row2.usage_only_p = BooleanUtils.boolChar(row1.usage_only_p);
row2.reference_id = row1.reference_id;
row2.creation_user = row1.creation_user;
row2.creation_date = row1.creation_date;
row2.internal_description = StringUtils.trimToNull(row1.internal_description);
row2.modifying_user = row1.modifying_user;
row2.last_modified = row1.last_modified;
row2.driving_credit_reason_code_id = row1.driving_credit_reason_code_id;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[26];
                            rowtFileOutputDelimited_1[0]=String.valueOf(row2.credit_id);
                            rowtFileOutputDelimited_1[1]=row2.account_id == null ? null : String.valueOf(row2.account_id);
                            rowtFileOutputDelimited_1[2]=row2.member_id == null ? null : String.valueOf(row2.member_id);
                            rowtFileOutputDelimited_1[3]=row2.reservation_id == null ? null : String.valueOf(row2.reservation_id);
                            rowtFileOutputDelimited_1[4]=row2.zipfleet_id == null ? null : String.valueOf(row2.zipfleet_id);
                            rowtFileOutputDelimited_1[5]=row2.currency_iso == null ? null : row2.currency_iso;
                            rowtFileOutputDelimited_1[6]=row2.credit_type == null ? null : row2.credit_type;
                            rowtFileOutputDelimited_1[7]=row2.credit_used == null ? null : String.valueOf(row2.credit_used);
                            rowtFileOutputDelimited_1[8]=row2.credit_expired == null ? null : String.valueOf(row2.credit_expired);
                            rowtFileOutputDelimited_1[9]=row2.credit_unused == null ? null : String.valueOf(row2.credit_unused);
                            rowtFileOutputDelimited_1[10]=row2.description == null ? null : row2.description;
                            rowtFileOutputDelimited_1[11]=row2.manual_credit_p == null ? null : row2.manual_credit_p;
                            rowtFileOutputDelimited_1[12]=row2.operation == null ? null : row2.operation;
                            rowtFileOutputDelimited_1[13]=row2.value == null ? null : String.valueOf(row2.value);
                            rowtFileOutputDelimited_1[14]=row2.start_date == null ? null : FormatterUtils.format_Date(row2.start_date, FeedFile.DF_DATETIME);
                            rowtFileOutputDelimited_1[15]=row2.end_date == null ? null : FormatterUtils.format_Date(row2.end_date, FeedFile.DF_DATETIME);
                            rowtFileOutputDelimited_1[16]=row2.void_date == null ? null : FormatterUtils.format_Date(row2.void_date, FeedFile.DF_DATETIME);
                            rowtFileOutputDelimited_1[17]=row2.giver_account_id == null ? null : String.valueOf(row2.giver_account_id);
                            rowtFileOutputDelimited_1[18]=row2.usage_only_p == null ? null : row2.usage_only_p;
                            rowtFileOutputDelimited_1[19]=row2.reference_id == null ? null : String.valueOf(row2.reference_id);
                            rowtFileOutputDelimited_1[20]=row2.creation_user == null ? null : String.valueOf(row2.creation_user);
                            rowtFileOutputDelimited_1[21]=row2.creation_date == null ? null : FormatterUtils.format_Date(row2.creation_date, FeedFile.DF_DATETIME);
                            rowtFileOutputDelimited_1[22]=row2.internal_description == null ? null : row2.internal_description;
                            rowtFileOutputDelimited_1[23]=row2.modifying_user == null ? null : String.valueOf(row2.modifying_user);
                            rowtFileOutputDelimited_1[24]=row2.last_modified == null ? null : FormatterUtils.format_Date(row2.last_modified, FeedFile.DF_DATETIME);
                            rowtFileOutputDelimited_1[25]=row2.driving_credit_reason_code_id == null ? null : String.valueOf(row2.driving_credit_reason_code_id);
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */




} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			}
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileCopy_1Process(globalMap);



/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileArchive_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileArchive_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileArchive_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileArchive_1", false);
		start_Hash.put("tFileArchive_1", System.currentTimeMillis());
		
	
	currentComponent="tFileArchive_1";

	
		int tos_count_tFileArchive_1 = 0;
		
    	class BytesLimit65535_tFileArchive_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileArchive_1().limitLog4jByte();

 



/**
 * [tFileArchive_1 begin ] stop
 */
	
	/**
	 * [tFileArchive_1 main ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

	
	
		String sourceFile_tFileArchive_1 = context.bulkLoadTempPath + "/" + globalMap.get("fileName");
	
    String zipFile_tFileArchive_1 = context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz";
    
    com.talend.compress.zip.Zip zip_tFileArchive_1 = new com.talend.compress.zip.Zip(sourceFile_tFileArchive_1, zipFile_tFileArchive_1);
    zip_tFileArchive_1.setOverwriteExistTargetZip(true);
	zip_tFileArchive_1.setMakeTargetDir(true);
	zip_tFileArchive_1.setCompressLevel(4);
	zip_tFileArchive_1.setArchiveFormat("gzip");
	zip_tFileArchive_1.setAllFiles(true);
	
	
		zip_tFileArchive_1.setSyncFlush(false);
	
  
  
   globalMap.put("tFileArchive_1_ARCHIVE_FILEPATH",zipFile_tFileArchive_1);
   
   globalMap.put("tFileArchive_1_ARCHIVE_FILENAME", new java.io.File(zipFile_tFileArchive_1).getName());

   zip_tFileArchive_1.doZip();


 


	tos_count_tFileArchive_1++;

/**
 * [tFileArchive_1 main ] stop
 */
	
	/**
	 * [tFileArchive_1 end ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 

ok_Hash.put("tFileArchive_1", true);
end_Hash.put("tFileArchive_1", System.currentTimeMillis());




/**
 * [tFileArchive_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileArchive_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileDelete_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileArchive_1 finally ] start
	 */

	

	
	
	currentComponent="tFileArchive_1";

	

 



/**
 * [tFileArchive_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileArchive_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.bulkLoadTempPath + "/" + globalMap.get("fileName"));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.bulkLoadTempPath + "/" + globalMap.get("fileName"));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRedshiftRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void tRedshiftRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRedshiftRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftRow_2", false);
		start_Hash.put("tRedshiftRow_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftRow_2";

	
		int tos_count_tRedshiftRow_2 = 0;
		
    	class BytesLimit65535_tRedshiftRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftRow_2().limitLog4jByte();

	java.sql.Connection conn_tRedshiftRow_2 = null;
	String query_tRedshiftRow_2 = "";
	boolean whetherReject_tRedshiftRow_2 = false;
				conn_tRedshiftRow_2 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
			
		java.sql.Statement stmt_tRedshiftRow_2 = conn_tRedshiftRow_2.createStatement();
	

 



/**
 * [tRedshiftRow_2 begin ] stop
 */
	
	/**
	 * [tRedshiftRow_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

query_tRedshiftRow_2 = StringUtils.templateString(
"\nCOPY  {{StageSchema}}.{{tableName}}\nFROM 's3://{{s3Bucket}}/{{feedFilePath}}'\nCREDENTIALS 'aws_access_key_id={{s3AccessKey}};aws_secret_access_key={{s3SecretKey}}'\nDATEFORMAT 'auto'\nTIMEFORMAT 'auto'\nEMPTYASNULL\nREMOVEQUOTES\nIGNOREHEADER 0\nESCAPE\nDELIMITER '|'\nMAXERROR AS {{bulkLoadMaxErrors}}\nGZIP\n;\n",
"StageSchema",  StringHandling.DQUOTE(context.Redshift_Staging_Schema),
"tableName", (String)globalMap.get("tableName"),
"feedFilePath", context.bulkLoadPath.replace("/s3/", "") + "/" + globalMap.get("fileName") + ".gz",
"bulkLoadMaxErrors", context.bulkLoadMaxErrors+"",
"s3Bucket", context.s3_bucket,
"s3AccessKey", context.s3_accesskey,
"s3SecretKey", context.s3_secretkey
);
whetherReject_tRedshiftRow_2 = false;
globalMap.put("tRedshiftRow_2_QUERY",query_tRedshiftRow_2);
try {
		stmt_tRedshiftRow_2.execute(query_tRedshiftRow_2);
		
	} catch (java.lang.Exception e) {
		whetherReject_tRedshiftRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tRedshiftRow_2) {
		
	}
	

 


	tos_count_tRedshiftRow_2++;

/**
 * [tRedshiftRow_2 main ] stop
 */
	
	/**
	 * [tRedshiftRow_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

	
	stmt_tRedshiftRow_2.close();	

 

ok_Hash.put("tRedshiftRow_2", true);
end_Hash.put("tRedshiftRow_2", System.currentTimeMillis());




/**
 * [tRedshiftRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tRedshiftInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftRow_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftRow_2";

	

 



/**
 * [tRedshiftRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class error_rowStruct implements routines.system.IPersistableRow<error_rowStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public String filename;

				public String getFilename () {
					return this.filename;
				}
				
			    public String line_number;

				public String getLine_number () {
					return this.line_number;
				}
				
			    public String colname;

				public String getColname () {
					return this.colname;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String position;

				public String getPosition () {
					return this.position;
				}
				
			    public String raw_line;

				public String getRaw_line () {
					return this.raw_line;
				}
				
			    public String raw_field_value;

				public String getRaw_field_value () {
					return this.raw_field_value;
				}
				
			    public String err_reason;

				public String getErr_reason () {
					return this.err_reason;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.filename = readString(dis);
					
					this.line_number = readString(dis);
					
					this.colname = readString(dis);
					
					this.type = readString(dis);
					
					this.position = readString(dis);
					
					this.raw_line = readString(dis);
					
					this.raw_field_value = readString(dis);
					
					this.err_reason = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.filename,dos);
					
					// String
				
						writeString(this.line_number,dos);
					
					// String
				
						writeString(this.colname,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.position,dos);
					
					// String
				
						writeString(this.raw_line,dos);
					
					// String
				
						writeString(this.raw_field_value,dos);
					
					// String
				
						writeString(this.err_reason,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("filename="+filename);
		sb.append(",line_number="+line_number);
		sb.append(",colname="+colname);
		sb.append(",type="+type);
		sb.append(",position="+position);
		sb.append(",raw_line="+raw_line);
		sb.append(",raw_field_value="+raw_field_value);
		sb.append(",err_reason="+err_reason);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_rowStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRedshiftInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		error_rowStruct error_row = new error_rowStruct();




	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("error_row" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// start part of your Java code
String errorMsg = "";


 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tRedshiftInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftInput_1", false);
		start_Hash.put("tRedshiftInput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftInput_1";

	
		int tos_count_tRedshiftInput_1 = 0;
		
    	class BytesLimit65535_tRedshiftInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tRedshiftInput_1 = 0;
		    java.sql.Connection conn_tRedshiftInput_1 = null;
		        conn_tRedshiftInput_1 = (java.sql.Connection)globalMap.get("conn_tRedshiftConnection_1");
				
		    
			java.sql.Statement stmt_tRedshiftInput_1 = conn_tRedshiftInput_1.createStatement();

		    String dbquery_tRedshiftInput_1 = StringUtils.templateString(
"\n	select filename, line_number, colname, type, position, raw_line, raw_field_value, err_reason\n	from stl_load_errors\n	where session = pg_backend_pid()\n	and filename like '%{{fileName}}%'\n	order by filename, line_number;\n",
"fileName", (String)globalMap.get("fileName")
);
			

                       globalMap.put("tRedshiftInput_1_QUERY",dbquery_tRedshiftInput_1);

		    java.sql.ResultSet rs_tRedshiftInput_1 = null;
		try{
		    rs_tRedshiftInput_1 = stmt_tRedshiftInput_1.executeQuery(dbquery_tRedshiftInput_1);
		    java.sql.ResultSetMetaData rsmd_tRedshiftInput_1 = rs_tRedshiftInput_1.getMetaData();
		    int colQtyInRs_tRedshiftInput_1 = rsmd_tRedshiftInput_1.getColumnCount();

		    String tmpContent_tRedshiftInput_1 = null;
		    
		    
		    while (rs_tRedshiftInput_1.next()) {
		        nb_line_tRedshiftInput_1++;
		        
							if(colQtyInRs_tRedshiftInput_1 < 1) {
								error_row.filename = null;
							} else {
	                         		
        	error_row.filename = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 1, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 2) {
								error_row.line_number = null;
							} else {
	                         		
        	error_row.line_number = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 2, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 3) {
								error_row.colname = null;
							} else {
	                         		
        	error_row.colname = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 3, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 4) {
								error_row.type = null;
							} else {
	                         		
        	error_row.type = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 4, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 5) {
								error_row.position = null;
							} else {
	                         		
        	error_row.position = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 5, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 6) {
								error_row.raw_line = null;
							} else {
	                         		
        	error_row.raw_line = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 6, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 7) {
								error_row.raw_field_value = null;
							} else {
	                         		
        	error_row.raw_field_value = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 7, false);
		                    }
							if(colQtyInRs_tRedshiftInput_1 < 8) {
								error_row.err_reason = null;
							} else {
	                         		
        	error_row.err_reason = routines.system.JDBCUtil.getString(rs_tRedshiftInput_1, 8, false);
		                    }
					



 



/**
 * [tRedshiftInput_1 begin ] stop
 */
	
	/**
	 * [tRedshiftInput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 


	tos_count_tRedshiftInput_1++;

/**
 * [tRedshiftInput_1 main ] stop
 */

	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

			//error_row
			//error_row


			
				if(execStat){
					runStat.updateStatOnConnection("error_row"+iterateId,1, 1);
				} 
			

		



// here is the main part of the component,
// a piece of code executed in the row
// loop
errorMsg += 
	error_row.line_number.trim() + "|" +
	error_row.position.trim() + "|" +
	error_row.raw_field_value.trim() + "|" +
	error_row.colname.trim() + "|" +
	error_row.type.trim() + "|" +
	error_row.err_reason.trim() + "\n";

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */



	
	/**
	 * [tRedshiftInput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

	}
}finally{
	stmt_tRedshiftInput_1.close();

}
globalMap.put("tRedshiftInput_1_NB_LINE",nb_line_tRedshiftInput_1);

 

ok_Hash.put("tRedshiftInput_1", true);
end_Hash.put("tRedshiftInput_1", System.currentTimeMillis());




/**
 * [tRedshiftInput_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
if(errorMsg.length() > 0) {
	org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger("BulkLoadCSV");
	logger.warn("\n\n******************** Start Loading error report ***********************");
	logger.warn("\n\nLine_Number|Field_Pos|Field_Value|Db_Col_Name|Db_Type|Err_Reason");
	logger.warn(errorMsg);
	logger.warn("\n******************** End Loading error report ***********************\n");
}


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("error_row"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRedshiftInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileDelete_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRedshiftInput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftInput_1";

	

 



/**
 * [tRedshiftInput_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRedshiftInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		
    	class BytesLimit65535_tFileDelete_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_2().limitLog4jByte();

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz");
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",context.bulkLoadPath + "/" + globalMap.get("fileName") + ".gz");
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		
    	class BytesLimit65535_tWarn_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_5().limitLog4jByte();

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO","","Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE")),"", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_5", 3, "Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE")), 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_5_WARN_MESSAGES", "Completed Bulk Load Feed File: " + ((String)globalMap.get("tFileList_1_CURRENT_FILE")) + " with total rows: " + ((Integer)globalMap.get("tFileInputDelimited_2_NB_LINE"))); 
globalMap.put("tWarn_5_WARN_PRIORITY", 3);
globalMap.put("tWarn_5_WARN_CODE", 42);


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		
    	class BytesLimit65535_tWarn_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_3().limitLog4jByte();

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO","","No Files to process in Feed folder","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_3", 3, "No Files to process in Feed folder", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_3_WARN_MESSAGES", "No Files to process in Feed folder"); 
globalMap.put("tWarn_3_WARN_PRIORITY", 3);
globalMap.put("tWarn_3_WARN_CODE", 42);


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_StageFeed_Credits, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_StageFeed_Credits) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_2", false);
		start_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_2 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_2().limitLog4jByte();





String dbschema_tRedshiftOutput_2 = null;
	dbschema_tRedshiftOutput_2 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_2 = "job_stats";
String schemaForSearch_tRedshiftOutput_2 = null;
String tableForSearch_tRedshiftOutput_2 = tableName_tRedshiftOutput_2;
    if(dbschema_tRedshiftOutput_2 != null && dbschema_tRedshiftOutput_2.trim().length() > 0) {
    	tableName_tRedshiftOutput_2 = dbschema_tRedshiftOutput_2 + "\".\"" + tableName_tRedshiftOutput_2;
    }

int nb_line_tRedshiftOutput_2 = 0;
int nb_line_update_tRedshiftOutput_2 = 0;
int nb_line_inserted_tRedshiftOutput_2 = 0;
int nb_line_deleted_tRedshiftOutput_2 = 0;
int nb_line_rejected_tRedshiftOutput_2 = 0;

int deletedCount_tRedshiftOutput_2=0;
int updatedCount_tRedshiftOutput_2=0;
int insertedCount_tRedshiftOutput_2=0;
int rejectedCount_tRedshiftOutput_2=0;

java.util.Calendar calendar_tRedshiftOutput_2 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
calendar_tRedshiftOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_2 = calendar_tRedshiftOutput_2.getTime().getTime();
long date_tRedshiftOutput_2;

boolean whetherReject_tRedshiftOutput_2 = false;


java.sql.Connection conn_tRedshiftOutput_2 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_2 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_2 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_2 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_2 = decryptedPassword_tRedshiftOutput_2;
    conn_tRedshiftOutput_2 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_2,dbUser_tRedshiftOutput_2,dbPwd_tRedshiftOutput_2);
	
	resourceMap.put("conn_tRedshiftOutput_2", conn_tRedshiftOutput_2);
    conn_tRedshiftOutput_2.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_2 = 10000;
        int commitCounter_tRedshiftOutput_2 = 0;
int count_tRedshiftOutput_2=0;
	
			int rowCounttRedshiftOutput_2 = 0;
			class BufferLine_tRedshiftOutput_2 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_2 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_2 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_2 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_2 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_2 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_2 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_2 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_2 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_2 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_2 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_2 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_2 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_2> exInsertColValueListtRedshiftOutput_2 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_2 exInsertColValuetRedshiftOutput_2 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_2 = new StringBuilder();
			for(int i_tRedshiftOutput_2=0;i_tRedshiftOutput_2 < 100;i_tRedshiftOutput_2++){
				 extendInsertValueStmt_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_2!=100-1) extendInsertValueStmt_tRedshiftOutput_2.append(",");
			}

			String insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_2.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);

 



/**
 * [tRedshiftOutput_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_2 = false;
				int countertRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_2 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
									pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_2.setTimestamp(countertRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
								}
							}else{

								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_2++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.project);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.context);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.origin);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setString(countertRedshiftOutput_2,stat_message.message);
							

							}

						
						countertRedshiftOutput_2++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_2.setNull(countertRedshiftOutput_2,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_2.setLong(countertRedshiftOutput_2,stat_message.duration);
							

							}

						
						countertRedshiftOutput_2++;
						
				exInsertColValuetRedshiftOutput_2 = new BufferLine_tRedshiftOutput_2();
                    	exInsertColValuetRedshiftOutput_2
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_2.add(exInsertColValuetRedshiftOutput_2);
				rowCounttRedshiftOutput_2++;

                nb_line_tRedshiftOutput_2++;

				if(rowCounttRedshiftOutput_2 == 100){
	                insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	                exInsertColValueListtRedshiftOutput_2.clear();
	                rowCounttRedshiftOutput_2 = 0;
					countertRedshiftOutput_2=1;
				}
                commitCounter_tRedshiftOutput_2++;

                if(commitEvery_tRedshiftOutput_2<=commitCounter_tRedshiftOutput_2) {
                                   conn_tRedshiftOutput_2.commit();
                                   commitCounter_tRedshiftOutput_2=0;
                }

 


	tos_count_tRedshiftOutput_2++;

/**
 * [tRedshiftOutput_2 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	





	    if(rowCounttRedshiftOutput_2!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_2 = new StringBuilder();
	        for(int i_tRedshiftOutput_2=0 ; i_tRedshiftOutput_2 < rowCounttRedshiftOutput_2 ; i_tRedshiftOutput_2++){
				extendInsertValue_tRedshiftOutput_2.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_2 != rowCounttRedshiftOutput_2 - 1) extendInsertValue_tRedshiftOutput_2.append(",");
	        }

				insert_tRedshiftOutput_2 = "INSERT INTO \"" + tableName_tRedshiftOutput_2 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_2.toString();
        	pstmt_tRedshiftOutput_2 =  conn_tRedshiftOutput_2.prepareStatement(insert_tRedshiftOutput_2);
			rowCounttRedshiftOutput_2 = 0;
	        for(BufferLine_tRedshiftOutput_2 bufferLtRedshiftOutput_2 : exInsertColValueListtRedshiftOutput_2){
				int counttRedshiftOutput_2 = rowCounttRedshiftOutput_2 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_2.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_2 = bufferLtRedshiftOutput_2.moment.getTime();
						if (date_tRedshiftOutput_2 < year1_tRedshiftOutput_2 || date_tRedshiftOutput_2 >= year10000_tRedshiftOutput_2) {
							pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_2.setTimestamp(counttRedshiftOutput_2, new java.sql.Timestamp(date_tRedshiftOutput_2));
						}
					}else{

						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.father_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.father_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.root_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.root_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.system_pid==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.system_pid);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.project==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.project);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_repository_id==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.job_version==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.job_version);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.context==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.context);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.origin==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.origin);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message_type==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message_type);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.message==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setString(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.message);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    
					if(bufferLtRedshiftOutput_2.duration==null){
						pstmt_tRedshiftOutput_2.setNull(counttRedshiftOutput_2,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_2.setLong(counttRedshiftOutput_2,bufferLtRedshiftOutput_2.duration);
					

					}

				
	                    counttRedshiftOutput_2++;
	                    

	            rowCounttRedshiftOutput_2++;
	        }
	        insertedCount_tRedshiftOutput_2 = insertedCount_tRedshiftOutput_2 + pstmt_tRedshiftOutput_2.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_2 != null) {
                            pstmt_tRedshiftOutput_2.close();
                        }

		if (commitCounter_tRedshiftOutput_2 > 0) {
			
			conn_tRedshiftOutput_2.commit();
			
		}
		
    	conn_tRedshiftOutput_2 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_2", true);
    	
	nb_line_deleted_tRedshiftOutput_2=nb_line_deleted_tRedshiftOutput_2+ deletedCount_tRedshiftOutput_2;
	nb_line_update_tRedshiftOutput_2=nb_line_update_tRedshiftOutput_2 + updatedCount_tRedshiftOutput_2;
	nb_line_inserted_tRedshiftOutput_2=nb_line_inserted_tRedshiftOutput_2 + insertedCount_tRedshiftOutput_2;
	nb_line_rejected_tRedshiftOutput_2=nb_line_rejected_tRedshiftOutput_2 + rejectedCount_tRedshiftOutput_2;
	
        globalMap.put("tRedshiftOutput_2_NB_LINE",nb_line_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_2);
        globalMap.put("tRedshiftOutput_2_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_2", true);
end_Hash.put("tRedshiftOutput_2", System.currentTimeMillis());




/**
 * [tRedshiftOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_2";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_2")==null){
			if(resourceMap.get("conn_tRedshiftOutput_2")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_2 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_2");
					
					
            		
					ctn_tRedshiftOutput_2.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_2) {
					String errorMessage_tRedshiftOutput_2 = "failed to close the connection in tRedshiftOutput_2 :" + sqlEx_tRedshiftOutput_2.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_2);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final StageFeed_Credits StageFeed_CreditsClass = new StageFeed_Credits();

        int exitCode = StageFeed_CreditsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = StageFeed_Credits.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/stagefeed_credits_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("clearStagingTable", "id_Boolean");
				
             try{
                 context.clearStagingTable=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("clearStagingTable"));
             }catch(NumberFormatException e){
                 context.clearStagingTable=null;
              }
				    context.setContextType("bulkLoadMaxErrors", "id_Long");
				
             try{
                 context.bulkLoadMaxErrors=routines.system.ParserUtils.parseTo_Long (context.getProperty("bulkLoadMaxErrors"));
             }catch(NumberFormatException e){
                 context.bulkLoadMaxErrors=null;
              }
				    context.setContextType("bulkLoadPath", "id_String");
				
                context.bulkLoadPath=(String) context.getProperty("bulkLoadPath");
				    context.setContextType("bulkLoadTempPath", "id_String");
				
                context.bulkLoadTempPath=(String) context.getProperty("bulkLoadTempPath");
				    context.setContextType("s3_accesskey", "id_String");
				
                context.s3_accesskey=(String) context.getProperty("s3_accesskey");
				    context.setContextType("s3_bucket", "id_String");
				
                context.s3_bucket=(String) context.getProperty("s3_bucket");
				    context.setContextType("s3_secretkey", "id_String");
				
                context.s3_secretkey=(String) context.getProperty("s3_secretkey");
				    context.setContextType("bulkLoad", "id_Boolean");
				
             try{
                 context.bulkLoad=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("bulkLoad"));
             }catch(NumberFormatException e){
                 context.bulkLoad=null;
              }
				    context.setContextType("feedArchive", "id_Directory");
				
                context.feedArchive=(String) context.getProperty("feedArchive");
				    context.setContextType("feedError", "id_Directory");
				
                context.feedError=(String) context.getProperty("feedError");
				    context.setContextType("feedInput", "id_Directory");
				
                context.feedInput=(String) context.getProperty("feedInput");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
				    context.setContextType("Redshift_Staging_AdditionalParams", "id_String");
				
                context.Redshift_Staging_AdditionalParams=(String) context.getProperty("Redshift_Staging_AdditionalParams");
				    context.setContextType("Redshift_Staging_Database", "id_String");
				
                context.Redshift_Staging_Database=(String) context.getProperty("Redshift_Staging_Database");
				    context.setContextType("Redshift_Staging_Login", "id_String");
				
                context.Redshift_Staging_Login=(String) context.getProperty("Redshift_Staging_Login");
				    context.setContextType("Redshift_Staging_Password", "id_Password");
				
            		String pwd_Redshift_Staging_Password_value = context.getProperty("Redshift_Staging_Password");
            		context.Redshift_Staging_Password = null;
            		if(pwd_Redshift_Staging_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Staging_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Staging_Password = pwd_Redshift_Staging_Password_value;
            			} else if (!pwd_Redshift_Staging_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Staging_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Staging_Password_value);
            					context.put("Redshift_Staging_Password",context.Redshift_Staging_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Staging_Port", "id_String");
				
                context.Redshift_Staging_Port=(String) context.getProperty("Redshift_Staging_Port");
				    context.setContextType("Redshift_Staging_Schema", "id_String");
				
                context.Redshift_Staging_Schema=(String) context.getProperty("Redshift_Staging_Schema");
				    context.setContextType("Redshift_Staging_Server", "id_String");
				
                context.Redshift_Staging_Server=(String) context.getProperty("Redshift_Staging_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("clearStagingTable")) {
                context.clearStagingTable = (Boolean) parentContextMap.get("clearStagingTable");
            }if (parentContextMap.containsKey("bulkLoadMaxErrors")) {
                context.bulkLoadMaxErrors = (Long) parentContextMap.get("bulkLoadMaxErrors");
            }if (parentContextMap.containsKey("bulkLoadPath")) {
                context.bulkLoadPath = (String) parentContextMap.get("bulkLoadPath");
            }if (parentContextMap.containsKey("bulkLoadTempPath")) {
                context.bulkLoadTempPath = (String) parentContextMap.get("bulkLoadTempPath");
            }if (parentContextMap.containsKey("s3_accesskey")) {
                context.s3_accesskey = (String) parentContextMap.get("s3_accesskey");
            }if (parentContextMap.containsKey("s3_bucket")) {
                context.s3_bucket = (String) parentContextMap.get("s3_bucket");
            }if (parentContextMap.containsKey("s3_secretkey")) {
                context.s3_secretkey = (String) parentContextMap.get("s3_secretkey");
            }if (parentContextMap.containsKey("bulkLoad")) {
                context.bulkLoad = (Boolean) parentContextMap.get("bulkLoad");
            }if (parentContextMap.containsKey("feedArchive")) {
                context.feedArchive = (String) parentContextMap.get("feedArchive");
            }if (parentContextMap.containsKey("feedError")) {
                context.feedError = (String) parentContextMap.get("feedError");
            }if (parentContextMap.containsKey("feedInput")) {
                context.feedInput = (String) parentContextMap.get("feedInput");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }if (parentContextMap.containsKey("Redshift_Staging_AdditionalParams")) {
                context.Redshift_Staging_AdditionalParams = (String) parentContextMap.get("Redshift_Staging_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Staging_Database")) {
                context.Redshift_Staging_Database = (String) parentContextMap.get("Redshift_Staging_Database");
            }if (parentContextMap.containsKey("Redshift_Staging_Login")) {
                context.Redshift_Staging_Login = (String) parentContextMap.get("Redshift_Staging_Login");
            }if (parentContextMap.containsKey("Redshift_Staging_Password")) {
                context.Redshift_Staging_Password = (java.lang.String) parentContextMap.get("Redshift_Staging_Password");
            }if (parentContextMap.containsKey("Redshift_Staging_Port")) {
                context.Redshift_Staging_Port = (String) parentContextMap.get("Redshift_Staging_Port");
            }if (parentContextMap.containsKey("Redshift_Staging_Schema")) {
                context.Redshift_Staging_Schema = (String) parentContextMap.get("Redshift_Staging_Schema");
            }if (parentContextMap.containsKey("Redshift_Staging_Server")) {
                context.Redshift_Staging_Server = (String) parentContextMap.get("Redshift_Staging_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Monitoring_Password");
			parametersToEncrypt.add("Redshift_Staging_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : StageFeed_Credits");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tRedshiftConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tRedshiftConnection_1", globalMap.get("conn_tRedshiftConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     438233 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:41 PM CDT
 ************************************************************************************************/