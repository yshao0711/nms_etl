// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package zipcar_marketingdw.processallstagingtables_0_1;

import routines.Logging;
import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.FeedFile;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: ProcessAllStagingTables Purpose: Processes the Staging Tables<br>
 * Description: Processes all Staging tables and transfers the data to the historical/fact tables. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class ProcessAllStagingTables implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(clearStagingTable != null){
				
					this.setProperty("clearStagingTable", clearStagingTable.toString());
				
			}
			
			if(RunDate != null){
				
					String pattern_RunDate = "yyyy-MM-dd HH:mm:ss";
					String value_RunDate = "";
					String[] parts_RunDate = value_RunDate.split(";");
					if(parts_RunDate.length > 1){
						pattern_RunDate = parts_RunDate[0];
						this.setProperty("RunDate", pattern_RunDate + ";" + FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}else{
						this.setProperty("RunDate", FormatterUtils.format_Date(RunDate, pattern_RunDate));
					}
				
			}
			
			if(Redshift_Marketing_AdditionalParams != null){
				
					this.setProperty("Redshift_Marketing_AdditionalParams", Redshift_Marketing_AdditionalParams.toString());
				
			}
			
			if(Redshift_Marketing_Database != null){
				
					this.setProperty("Redshift_Marketing_Database", Redshift_Marketing_Database.toString());
				
			}
			
			if(Redshift_Marketing_Login != null){
				
					this.setProperty("Redshift_Marketing_Login", Redshift_Marketing_Login.toString());
				
			}
			
			if(Redshift_Marketing_Password != null){
				
					this.setProperty("Redshift_Marketing_Password", Redshift_Marketing_Password.toString());
				
			}
			
			if(Redshift_Marketing_Port != null){
				
					this.setProperty("Redshift_Marketing_Port", Redshift_Marketing_Port.toString());
				
			}
			
			if(Redshift_Marketing_Schema != null){
				
					this.setProperty("Redshift_Marketing_Schema", Redshift_Marketing_Schema.toString());
				
			}
			
			if(Redshift_Marketing_Server != null){
				
					this.setProperty("Redshift_Marketing_Server", Redshift_Marketing_Server.toString());
				
			}
			
			if(Redshift_Monitoring_AdditionalParams != null){
				
					this.setProperty("Redshift_Monitoring_AdditionalParams", Redshift_Monitoring_AdditionalParams.toString());
				
			}
			
			if(Redshift_Monitoring_Database != null){
				
					this.setProperty("Redshift_Monitoring_Database", Redshift_Monitoring_Database.toString());
				
			}
			
			if(Redshift_Monitoring_Login != null){
				
					this.setProperty("Redshift_Monitoring_Login", Redshift_Monitoring_Login.toString());
				
			}
			
			if(Redshift_Monitoring_Password != null){
				
					this.setProperty("Redshift_Monitoring_Password", Redshift_Monitoring_Password.toString());
				
			}
			
			if(Redshift_Monitoring_Port != null){
				
					this.setProperty("Redshift_Monitoring_Port", Redshift_Monitoring_Port.toString());
				
			}
			
			if(Redshift_Monitoring_Schema != null){
				
					this.setProperty("Redshift_Monitoring_Schema", Redshift_Monitoring_Schema.toString());
				
			}
			
			if(Redshift_Monitoring_Server != null){
				
					this.setProperty("Redshift_Monitoring_Server", Redshift_Monitoring_Server.toString());
				
			}
			
			if(Redshift_Staging_AdditionalParams != null){
				
					this.setProperty("Redshift_Staging_AdditionalParams", Redshift_Staging_AdditionalParams.toString());
				
			}
			
			if(Redshift_Staging_Database != null){
				
					this.setProperty("Redshift_Staging_Database", Redshift_Staging_Database.toString());
				
			}
			
			if(Redshift_Staging_Login != null){
				
					this.setProperty("Redshift_Staging_Login", Redshift_Staging_Login.toString());
				
			}
			
			if(Redshift_Staging_Password != null){
				
					this.setProperty("Redshift_Staging_Password", Redshift_Staging_Password.toString());
				
			}
			
			if(Redshift_Staging_Port != null){
				
					this.setProperty("Redshift_Staging_Port", Redshift_Staging_Port.toString());
				
			}
			
			if(Redshift_Staging_Schema != null){
				
					this.setProperty("Redshift_Staging_Schema", Redshift_Staging_Schema.toString());
				
			}
			
			if(Redshift_Staging_Server != null){
				
					this.setProperty("Redshift_Staging_Server", Redshift_Staging_Server.toString());
				
			}
			
		}

public Boolean clearStagingTable;
public Boolean getClearStagingTable(){
	return this.clearStagingTable;
}
public java.util.Date RunDate;
public java.util.Date getRunDate(){
	return this.RunDate;
}
public String Redshift_Marketing_AdditionalParams;
public String getRedshift_Marketing_AdditionalParams(){
	return this.Redshift_Marketing_AdditionalParams;
}
public String Redshift_Marketing_Database;
public String getRedshift_Marketing_Database(){
	return this.Redshift_Marketing_Database;
}
public String Redshift_Marketing_Login;
public String getRedshift_Marketing_Login(){
	return this.Redshift_Marketing_Login;
}
public java.lang.String Redshift_Marketing_Password;
public java.lang.String getRedshift_Marketing_Password(){
	return this.Redshift_Marketing_Password;
}
public String Redshift_Marketing_Port;
public String getRedshift_Marketing_Port(){
	return this.Redshift_Marketing_Port;
}
public String Redshift_Marketing_Schema;
public String getRedshift_Marketing_Schema(){
	return this.Redshift_Marketing_Schema;
}
public String Redshift_Marketing_Server;
public String getRedshift_Marketing_Server(){
	return this.Redshift_Marketing_Server;
}
public String Redshift_Monitoring_AdditionalParams;
public String getRedshift_Monitoring_AdditionalParams(){
	return this.Redshift_Monitoring_AdditionalParams;
}
public String Redshift_Monitoring_Database;
public String getRedshift_Monitoring_Database(){
	return this.Redshift_Monitoring_Database;
}
public String Redshift_Monitoring_Login;
public String getRedshift_Monitoring_Login(){
	return this.Redshift_Monitoring_Login;
}
public java.lang.String Redshift_Monitoring_Password;
public java.lang.String getRedshift_Monitoring_Password(){
	return this.Redshift_Monitoring_Password;
}
public String Redshift_Monitoring_Port;
public String getRedshift_Monitoring_Port(){
	return this.Redshift_Monitoring_Port;
}
public String Redshift_Monitoring_Schema;
public String getRedshift_Monitoring_Schema(){
	return this.Redshift_Monitoring_Schema;
}
public String Redshift_Monitoring_Server;
public String getRedshift_Monitoring_Server(){
	return this.Redshift_Monitoring_Server;
}
public String Redshift_Staging_AdditionalParams;
public String getRedshift_Staging_AdditionalParams(){
	return this.Redshift_Staging_AdditionalParams;
}
public String Redshift_Staging_Database;
public String getRedshift_Staging_Database(){
	return this.Redshift_Staging_Database;
}
public String Redshift_Staging_Login;
public String getRedshift_Staging_Login(){
	return this.Redshift_Staging_Login;
}
public java.lang.String Redshift_Staging_Password;
public java.lang.String getRedshift_Staging_Password(){
	return this.Redshift_Staging_Password;
}
public String Redshift_Staging_Port;
public String getRedshift_Staging_Port(){
	return this.Redshift_Staging_Port;
}
public String Redshift_Staging_Schema;
public String getRedshift_Staging_Schema(){
	return this.Redshift_Staging_Schema;
}
public String Redshift_Staging_Server;
public String getRedshift_Staging_Server(){
	return this.Redshift_Staging_Server;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ProcessAllStagingTables";
	private final String projectName = "ZIPCAR_MARKETINGDW";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_SSVpsNNNEeaEQIH4pMYC_Q", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ProcessAllStagingTables.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ProcessAllStagingTables.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
				} catch (TalendException e) {
					// do nothing
				
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRedshiftOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_41_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_37_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_38_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_39_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_40_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_42_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_43_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_44_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_45_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_46_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_47_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRunJob_47_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_41_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_36_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_37_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_38_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_39_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_40_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_42_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_43_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_44_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_45_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_46_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_47_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class log_messageStruct implements routines.system.IPersistableRow<log_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessAllStagingTables) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		log_messageStruct log_message = new log_messageStruct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("log_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
    	class BytesLimit65535_tLogCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		log_message.type = lcm.getType();
		log_message.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		log_message.priority = lcm.getPriority();
		log_message.message = lcm.getMessage();
		log_message.code = lcm.getCode();
		
		log_message.moment = java.util.Calendar.getInstance().getTime();
	
    	log_message.pid = pid;
		log_message.root_pid = rootPid;
		log_message.father_pid = fatherPid;
	
    	log_message.project = projectName;
    	log_message.job = jobName;
    	log_message.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//log_message
			//log_message


			
				if(execStat){
					runStat.updateStatOnConnection("log_message"+iterateId,1, 1);
				} 
			

		

    Logging.logMessage(log_message.moment, jobName, log_message.priority, log_message.origin, log_message.message);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */



	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("log_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		
    	class BytesLimit65535_tPostjob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostjob_1().limitLog4jByte();

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tWarn_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		
    	class BytesLimit65535_tWarn_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tWarn_1().limitLog4jByte();

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Processing Staging Tables Completed","", "");
	tLogCatcher_1.addMessage("tWarn", "tWarn_1", 3, "Processing Staging Tables Completed", 42);
	tLogCatcher_1Process(globalMap);
globalMap.put("tWarn_1_WARN_MESSAGES", "Processing Staging Tables Completed"); 
globalMap.put("tWarn_1_WARN_PRIORITY", 3);
globalMap.put("tWarn_1_WARN_CODE", 42);


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		
    	class BytesLimit65535_tPrejob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPrejob_1().limitLog4jByte();

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


Logging.initializeLogging(jobName);

// Provide Friendly Names for all the components. Mostly, the tWarn Components
Logging.componentName(jobName, "tWarn_1", "Log_Process_Staging_Completed");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		
    	class BytesLimit65535_tRunJob_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_1().limitLog4jByte();


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_1.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_1.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_1.put("RunDate", context.RunDate);
			paraList_tRunJob_1.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_1.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_1.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
	
		zipcar_marketingdw.processstaging_rateplans_0_1.ProcessStaging_RatePlans childJob_tRunJob_1 = new zipcar_marketingdw.processstaging_rateplans_0_1.ProcessStaging_RatePlans();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
			
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		
    	class BytesLimit65535_tRunJob_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_2().limitLog4jByte();


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_2.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_2.put("RunDate", context.RunDate);
			paraList_tRunJob_2.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_2.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		zipcar_marketingdw.processstaging_member_0_1.ProcessStaging_Member childJob_tRunJob_2 = new zipcar_marketingdw.processstaging_member_0_1.ProcessStaging_Member();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_2.getErrorCode());
			
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tRunJob_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_10", false);
		start_Hash.put("tRunJob_10", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_10";

	
		int tos_count_tRunJob_10 = 0;
		
    	class BytesLimit65535_tRunJob_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_10().limitLog4jByte();


 



/**
 * [tRunJob_10 begin ] stop
 */
	
	/**
	 * [tRunJob_10 main ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	
	java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_10.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_10.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_10.add("--father_node=tRunJob_10");
	      			
	        			paraList_tRunJob_10.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_10.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null){
		paraList_tRunJob_10.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_10.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_10.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_10.put("RunDate", context.RunDate);
			paraList_tRunJob_10.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_10.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_10.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_10 = context.propertyNames();
		while (propertyNames_tRunJob_10.hasMoreElements()) {
			String key_tRunJob_10 = (String) propertyNames_tRunJob_10.nextElement();
			Object value_tRunJob_10 = (Object) context.get(key_tRunJob_10);
			if(value_tRunJob_10!=null) {  
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + value_tRunJob_10);
			} else {
				paraList_tRunJob_10.add("--context_param " + key_tRunJob_10 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_10 = null;

	
	
		zipcar_marketingdw.processstaging_accounts_0_1.ProcessStaging_Accounts childJob_tRunJob_10 = new zipcar_marketingdw.processstaging_accounts_0_1.ProcessStaging_Accounts();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_10 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_10) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_10 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_10 : talendDataSources_tRunJob_10
			        .entrySet()) {
	            dataSources_tRunJob_10.put(talendDataSourceEntry_tRunJob_10.getKey(),
	                    talendDataSourceEntry_tRunJob_10.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_10.setDataSources(dataSources_tRunJob_10);
	    }
		  
			childJob_tRunJob_10.parentContextMap = parentContextMap_tRunJob_10;
		  
		
		String[][] childReturn_tRunJob_10 = childJob_tRunJob_10.runJob((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_10.getErrorCode());
			
	            
	    	if(childJob_tRunJob_10.getErrorCode() == null){
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getStatus() != null && ("failure").equals(childJob_tRunJob_10.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", childJob_tRunJob_10.getErrorCode());
		    }
		    if (childJob_tRunJob_10.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_10.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_10.getErrorCode() != null || ("failure").equals(childJob_tRunJob_10.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_10.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_10++;

/**
 * [tRunJob_10 main ] stop
 */
	
	/**
	 * [tRunJob_10 end ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 

ok_Hash.put("tRunJob_10", true);
end_Hash.put("tRunJob_10", System.currentTimeMillis());




/**
 * [tRunJob_10 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRunJob_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_10 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_10";

	

 



/**
 * [tRunJob_10 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_6", false);
		start_Hash.put("tRunJob_6", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_6";

	
		int tos_count_tRunJob_6 = 0;
		
    	class BytesLimit65535_tRunJob_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_6().limitLog4jByte();


 



/**
 * [tRunJob_6 begin ] stop
 */
	
	/**
	 * [tRunJob_6 main ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	
	java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_6.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_6.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_6.add("--father_node=tRunJob_6");
	      			
	        			paraList_tRunJob_6.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_6.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null){
		paraList_tRunJob_6.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_6.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_6.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_6.put("RunDate", context.RunDate);
			paraList_tRunJob_6.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_6.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_6.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_6 = context.propertyNames();
		while (propertyNames_tRunJob_6.hasMoreElements()) {
			String key_tRunJob_6 = (String) propertyNames_tRunJob_6.nextElement();
			Object value_tRunJob_6 = (Object) context.get(key_tRunJob_6);
			if(value_tRunJob_6!=null) {  
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + value_tRunJob_6);
			} else {
				paraList_tRunJob_6.add("--context_param " + key_tRunJob_6 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_6 = null;

	
	
		zipcar_marketingdw.processstaging_addresses_0_1.ProcessStaging_Addresses childJob_tRunJob_6 = new zipcar_marketingdw.processstaging_addresses_0_1.ProcessStaging_Addresses();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_6 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_6) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_6 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_6 : talendDataSources_tRunJob_6
			        .entrySet()) {
	            dataSources_tRunJob_6.put(talendDataSourceEntry_tRunJob_6.getKey(),
	                    talendDataSourceEntry_tRunJob_6.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_6.setDataSources(dataSources_tRunJob_6);
	    }
		  
			childJob_tRunJob_6.parentContextMap = parentContextMap_tRunJob_6;
		  
		
		String[][] childReturn_tRunJob_6 = childJob_tRunJob_6.runJob((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_6.getErrorCode());
			
	            
	    	if(childJob_tRunJob_6.getErrorCode() == null){
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getStatus() != null && ("failure").equals(childJob_tRunJob_6.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", childJob_tRunJob_6.getErrorCode());
		    }
		    if (childJob_tRunJob_6.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_6.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_6.getErrorCode() != null || ("failure").equals(childJob_tRunJob_6.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_6.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_6++;

/**
 * [tRunJob_6 main ] stop
 */
	
	/**
	 * [tRunJob_6 end ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 

ok_Hash.put("tRunJob_6", true);
end_Hash.put("tRunJob_6", System.currentTimeMillis());




/**
 * [tRunJob_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_6 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_6";

	

 



/**
 * [tRunJob_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_3", false);
		start_Hash.put("tRunJob_3", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_3";

	
		int tos_count_tRunJob_3 = 0;
		
    	class BytesLimit65535_tRunJob_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_3().limitLog4jByte();


 



/**
 * [tRunJob_3 begin ] stop
 */
	
	/**
	 * [tRunJob_3 main ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	
	java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_3.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_3.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_3.add("--father_node=tRunJob_3");
	      			
	        			paraList_tRunJob_3.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_3.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null){
		paraList_tRunJob_3.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_3.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_3.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_3.put("RunDate", context.RunDate);
			paraList_tRunJob_3.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_3.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_3.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
		while (propertyNames_tRunJob_3.hasMoreElements()) {
			String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
			Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);
			if(value_tRunJob_3!=null) {  
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
			} else {
				paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_3 = null;

	
	
		zipcar_marketingdw.processstaging_accountrateplanmap_0_1.ProcessStaging_AccountRatePlanMap childJob_tRunJob_3 = new zipcar_marketingdw.processstaging_accountrateplanmap_0_1.ProcessStaging_AccountRatePlanMap();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_3) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
			        .entrySet()) {
	            dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
	                    talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
	    }
		  
			childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;
		  
		
		String[][] childReturn_tRunJob_3 = childJob_tRunJob_3.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_3.getErrorCode());
			
	            
	    	if(childJob_tRunJob_3.getErrorCode() == null){
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
		    }
		    if (childJob_tRunJob_3.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_3.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_3++;

/**
 * [tRunJob_3 main ] stop
 */
	
	/**
	 * [tRunJob_3 end ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 

ok_Hash.put("tRunJob_3", true);
end_Hash.put("tRunJob_3", System.currentTimeMillis());




/**
 * [tRunJob_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_3 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_3";

	

 



/**
 * [tRunJob_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_4", false);
		start_Hash.put("tRunJob_4", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_4";

	
		int tos_count_tRunJob_4 = 0;
		
    	class BytesLimit65535_tRunJob_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_4().limitLog4jByte();


 



/**
 * [tRunJob_4 begin ] stop
 */
	
	/**
	 * [tRunJob_4 main ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	
	java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_4.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_4.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_4.add("--father_node=tRunJob_4");
	      			
	        			paraList_tRunJob_4.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_4.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null){
		paraList_tRunJob_4.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_4.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_4.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_4.put("RunDate", context.RunDate);
			paraList_tRunJob_4.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_4.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_4.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_4 = context.propertyNames();
		while (propertyNames_tRunJob_4.hasMoreElements()) {
			String key_tRunJob_4 = (String) propertyNames_tRunJob_4.nextElement();
			Object value_tRunJob_4 = (Object) context.get(key_tRunJob_4);
			if(value_tRunJob_4!=null) {  
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + value_tRunJob_4);
			} else {
				paraList_tRunJob_4.add("--context_param " + key_tRunJob_4 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_4 = null;

	
	
		zipcar_marketingdw.processstaging_accountmembermap_0_1.ProcessStaging_AccountMemberMap childJob_tRunJob_4 = new zipcar_marketingdw.processstaging_accountmembermap_0_1.ProcessStaging_AccountMemberMap();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_4) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
			        .entrySet()) {
	            dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
	                    talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
	    }
		  
			childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;
		  
		
		String[][] childReturn_tRunJob_4 = childJob_tRunJob_4.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_4.getErrorCode());
			
	            
	    	if(childJob_tRunJob_4.getErrorCode() == null){
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
		    }
		    if (childJob_tRunJob_4.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_4.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_4++;

/**
 * [tRunJob_4 main ] stop
 */
	
	/**
	 * [tRunJob_4 end ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 

ok_Hash.put("tRunJob_4", true);
end_Hash.put("tRunJob_4", System.currentTimeMillis());




/**
 * [tRunJob_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_4 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_4";

	

 



/**
 * [tRunJob_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}
	


public static class stat_messageStruct implements routines.system.IPersistableRow<stat_messageStruct> {
    final static byte[] commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[0];
    static byte[] commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables.length) {
				if(length < 1024 && commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables.length == 0) {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[1024];
				} else {
   					commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables, 0, length);
			strReturn = new String(commonByteArray_ZIPCAR_MARKETINGDW_ProcessAllStagingTables, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ZIPCAR_MARKETINGDW_ProcessAllStagingTables) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(stat_messageStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		stat_messageStruct stat_message = new stat_messageStruct();




	
	/**
	 * [tRedshiftOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRedshiftOutput_1", false);
		start_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRedshiftOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("stat_message" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tRedshiftOutput_1 = 0;
		
    	class BytesLimit65535_tRedshiftOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRedshiftOutput_1().limitLog4jByte();





String dbschema_tRedshiftOutput_1 = null;
	dbschema_tRedshiftOutput_1 = context.Redshift_Monitoring_Schema;
	
String tableName_tRedshiftOutput_1 = "job_stats";
String schemaForSearch_tRedshiftOutput_1 = null;
String tableForSearch_tRedshiftOutput_1 = tableName_tRedshiftOutput_1;
    if(dbschema_tRedshiftOutput_1 != null && dbschema_tRedshiftOutput_1.trim().length() > 0) {
    	tableName_tRedshiftOutput_1 = dbschema_tRedshiftOutput_1 + "\".\"" + tableName_tRedshiftOutput_1;
    }

int nb_line_tRedshiftOutput_1 = 0;
int nb_line_update_tRedshiftOutput_1 = 0;
int nb_line_inserted_tRedshiftOutput_1 = 0;
int nb_line_deleted_tRedshiftOutput_1 = 0;
int nb_line_rejected_tRedshiftOutput_1 = 0;

int deletedCount_tRedshiftOutput_1=0;
int updatedCount_tRedshiftOutput_1=0;
int insertedCount_tRedshiftOutput_1=0;
int rejectedCount_tRedshiftOutput_1=0;

java.util.Calendar calendar_tRedshiftOutput_1 = java.util.Calendar.getInstance();
calendar_tRedshiftOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
calendar_tRedshiftOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tRedshiftOutput_1 = calendar_tRedshiftOutput_1.getTime().getTime();
long date_tRedshiftOutput_1;

boolean whetherReject_tRedshiftOutput_1 = false;


java.sql.Connection conn_tRedshiftOutput_1 = null;

    java.lang.Class.forName("com.amazon.redshift.jdbc41.Driver");
    
		String url_tRedshiftOutput_1 = "jdbc:redshift://" + context.Redshift_Monitoring_Server + ":" + context.Redshift_Monitoring_Port + "/" + context.Redshift_Monitoring_Database + "?" + context.Redshift_Monitoring_AdditionalParams;
	
    
    String dbUser_tRedshiftOutput_1 = context.Redshift_Monitoring_Login;

	final String decryptedPassword_tRedshiftOutput_1 = context.Redshift_Monitoring_Password; 

    String dbPwd_tRedshiftOutput_1 = decryptedPassword_tRedshiftOutput_1;
    conn_tRedshiftOutput_1 = java.sql.DriverManager.getConnection(url_tRedshiftOutput_1,dbUser_tRedshiftOutput_1,dbPwd_tRedshiftOutput_1);
	
	resourceMap.put("conn_tRedshiftOutput_1", conn_tRedshiftOutput_1);
    conn_tRedshiftOutput_1.setAutoCommit(false);
	
        int commitEvery_tRedshiftOutput_1 = 10000;
        int commitCounter_tRedshiftOutput_1 = 0;
int count_tRedshiftOutput_1=0;
	
			int rowCounttRedshiftOutput_1 = 0;
			class BufferLine_tRedshiftOutput_1 {				
						java.util.Date moment;
						
	            		public BufferLine_tRedshiftOutput_1 c0(java.util.Date moment){
							this.moment = moment;
							return this;
						}				
						String pid;
						
	            		public BufferLine_tRedshiftOutput_1 c1(String pid){
							this.pid = pid;
							return this;
						}				
						String father_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c2(String father_pid){
							this.father_pid = father_pid;
							return this;
						}				
						String root_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c3(String root_pid){
							this.root_pid = root_pid;
							return this;
						}				
						Long system_pid;
						
	            		public BufferLine_tRedshiftOutput_1 c4(Long system_pid){
							this.system_pid = system_pid;
							return this;
						}				
						String project;
						
	            		public BufferLine_tRedshiftOutput_1 c5(String project){
							this.project = project;
							return this;
						}				
						String job;
						
	            		public BufferLine_tRedshiftOutput_1 c6(String job){
							this.job = job;
							return this;
						}				
						String job_repository_id;
						
	            		public BufferLine_tRedshiftOutput_1 c7(String job_repository_id){
							this.job_repository_id = job_repository_id;
							return this;
						}				
						String job_version;
						
	            		public BufferLine_tRedshiftOutput_1 c8(String job_version){
							this.job_version = job_version;
							return this;
						}				
						String context;
						
	            		public BufferLine_tRedshiftOutput_1 c9(String context){
							this.context = context;
							return this;
						}				
						String origin;
						
	            		public BufferLine_tRedshiftOutput_1 c10(String origin){
							this.origin = origin;
							return this;
						}				
						String message_type;
						
	            		public BufferLine_tRedshiftOutput_1 c11(String message_type){
							this.message_type = message_type;
							return this;
						}				
						String message;
						
	            		public BufferLine_tRedshiftOutput_1 c12(String message){
							this.message = message;
							return this;
						}				
						Long duration;
						
	            		public BufferLine_tRedshiftOutput_1 c13(Long duration){
							this.duration = duration;
							return this;
						}		
			}

			java.util.List<BufferLine_tRedshiftOutput_1> exInsertColValueListtRedshiftOutput_1 = new java.util.ArrayList();
			BufferLine_tRedshiftOutput_1 exInsertColValuetRedshiftOutput_1 = null;


			StringBuilder extendInsertValueStmt_tRedshiftOutput_1 = new StringBuilder();
			for(int i_tRedshiftOutput_1=0;i_tRedshiftOutput_1 < 100;i_tRedshiftOutput_1++){
				 extendInsertValueStmt_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				 if (i_tRedshiftOutput_1!=100-1) extendInsertValueStmt_tRedshiftOutput_1.append(",");
			}

			String insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES " + extendInsertValueStmt_tRedshiftOutput_1.toString();
			java.sql.PreparedStatement pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);

 



/**
 * [tRedshiftOutput_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
    	class BytesLimit65535_tStatCatcher_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tStatCatcher_1().limitLog4jByte();

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		stat_message.pid = pid;
		stat_message.root_pid = rootPid;
		stat_message.father_pid = fatherPid;	
    	stat_message.project = projectName;
    	stat_message.job = jobName;
    	stat_message.context = contextStr;
		stat_message.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		stat_message.message = scm.getMessage();
		stat_message.duration = scm.getDuration();
		stat_message.moment = scm.getMoment();
		stat_message.message_type = scm.getMessageType();
		stat_message.job_version = scm.getJobVersion();
		stat_message.job_repository_id = scm.getJobId();
		stat_message.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	

			//stat_message
			//stat_message


			
				if(execStat){
					runStat.updateStatOnConnection("stat_message"+iterateId,1, 1);
				} 
			

		



        whetherReject_tRedshiftOutput_1 = false;
				int countertRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;

						
							if(stat_message.moment!=null){
								// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
								date_tRedshiftOutput_1 = stat_message.moment.getTime();
								if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
									pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1, "0000-00-00 00:00:00");
								} else {
									pstmt_tRedshiftOutput_1.setTimestamp(countertRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
								}
							}else{

								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.DATE);

							}
							
						countertRedshiftOutput_1++;
						

						
							if(stat_message.pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.father_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.father_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.root_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.root_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.system_pid==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.system_pid);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.project==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.project);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_repository_id==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_repository_id);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.job_version==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.job_version);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.context==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.context);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.origin==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.origin);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message_type==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message_type);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.message==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.VARCHAR);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setString(countertRedshiftOutput_1,stat_message.message);
							

							}

						
						countertRedshiftOutput_1++;
						

						
							if(stat_message.duration==null){
								pstmt_tRedshiftOutput_1.setNull(countertRedshiftOutput_1,java.sql.Types.INTEGER);
								
							}else{
							
							pstmt_tRedshiftOutput_1.setLong(countertRedshiftOutput_1,stat_message.duration);
							

							}

						
						countertRedshiftOutput_1++;
						
				exInsertColValuetRedshiftOutput_1 = new BufferLine_tRedshiftOutput_1();
                    	exInsertColValuetRedshiftOutput_1
                    	
                        .c0(stat_message.moment)
                        .c1(stat_message.pid)
                        .c2(stat_message.father_pid)
                        .c3(stat_message.root_pid)
                        .c4(stat_message.system_pid)
                        .c5(stat_message.project)
                        .c6(stat_message.job)
                        .c7(stat_message.job_repository_id)
                        .c8(stat_message.job_version)
                        .c9(stat_message.context)
                        .c10(stat_message.origin)
                        .c11(stat_message.message_type)
                        .c12(stat_message.message)
                        .c13(stat_message.duration)
				;

				exInsertColValueListtRedshiftOutput_1.add(exInsertColValuetRedshiftOutput_1);
				rowCounttRedshiftOutput_1++;

                nb_line_tRedshiftOutput_1++;

				if(rowCounttRedshiftOutput_1 == 100){
	                insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	                exInsertColValueListtRedshiftOutput_1.clear();
	                rowCounttRedshiftOutput_1 = 0;
					countertRedshiftOutput_1=1;
				}
                commitCounter_tRedshiftOutput_1++;

                if(commitEvery_tRedshiftOutput_1<=commitCounter_tRedshiftOutput_1) {
                                   conn_tRedshiftOutput_1.commit();
                                   commitCounter_tRedshiftOutput_1=0;
                }

 


	tos_count_tRedshiftOutput_1++;

/**
 * [tRedshiftOutput_1 main ] stop
 */



	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	





	    if(rowCounttRedshiftOutput_1!=0){

	        StringBuilder extendInsertValue_tRedshiftOutput_1 = new StringBuilder();
	        for(int i_tRedshiftOutput_1=0 ; i_tRedshiftOutput_1 < rowCounttRedshiftOutput_1 ; i_tRedshiftOutput_1++){
				extendInsertValue_tRedshiftOutput_1.append("(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
     			if (i_tRedshiftOutput_1 != rowCounttRedshiftOutput_1 - 1) extendInsertValue_tRedshiftOutput_1.append(",");
	        }

				insert_tRedshiftOutput_1 = "INSERT INTO \"" + tableName_tRedshiftOutput_1 + "\" (\"moment\",\"pid\",\"father_pid\",\"root_pid\",\"system_pid\",\"project\",\"job\",\"job_repository_id\",\"job_version\",\"context\",\"origin\",\"message_type\",\"message\",\"duration\") VALUES "+extendInsertValue_tRedshiftOutput_1.toString();
        	pstmt_tRedshiftOutput_1 =  conn_tRedshiftOutput_1.prepareStatement(insert_tRedshiftOutput_1);
			rowCounttRedshiftOutput_1 = 0;
	        for(BufferLine_tRedshiftOutput_1 bufferLtRedshiftOutput_1 : exInsertColValueListtRedshiftOutput_1){
				int counttRedshiftOutput_1 = rowCounttRedshiftOutput_1 *
					(14
					)
				+ 1;
					if(bufferLtRedshiftOutput_1.moment!=null){
						// timestamp < min java date value (year 1) || timestamp > max mysql value (year 10000) => set 0000-00-00 as date in MySQL
						date_tRedshiftOutput_1 = bufferLtRedshiftOutput_1.moment.getTime();
						if (date_tRedshiftOutput_1 < year1_tRedshiftOutput_1 || date_tRedshiftOutput_1 >= year10000_tRedshiftOutput_1) {
							pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1, "0000-00-00 00:00:00");
						} else {
							pstmt_tRedshiftOutput_1.setTimestamp(counttRedshiftOutput_1, new java.sql.Timestamp(date_tRedshiftOutput_1));
						}
					}else{

						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.DATE);

					}
					
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.father_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.father_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.root_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.root_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.system_pid==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.system_pid);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.project==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.project);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_repository_id==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_repository_id);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.job_version==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.job_version);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.context==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.context);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.origin==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.origin);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message_type==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message_type);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.message==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.VARCHAR);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setString(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.message);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    
					if(bufferLtRedshiftOutput_1.duration==null){
						pstmt_tRedshiftOutput_1.setNull(counttRedshiftOutput_1,java.sql.Types.INTEGER);
					

					}else{

					
					pstmt_tRedshiftOutput_1.setLong(counttRedshiftOutput_1,bufferLtRedshiftOutput_1.duration);
					

					}

				
	                    counttRedshiftOutput_1++;
	                    

	            rowCounttRedshiftOutput_1++;
	        }
	        insertedCount_tRedshiftOutput_1 = insertedCount_tRedshiftOutput_1 + pstmt_tRedshiftOutput_1.executeUpdate();
	    }
	
                        if(pstmt_tRedshiftOutput_1 != null) {
                            pstmt_tRedshiftOutput_1.close();
                        }

		if (commitCounter_tRedshiftOutput_1 > 0) {
			
			conn_tRedshiftOutput_1.commit();
			
		}
		
    	conn_tRedshiftOutput_1 .close();
		
    	resourceMap.put("finish_tRedshiftOutput_1", true);
    	
	nb_line_deleted_tRedshiftOutput_1=nb_line_deleted_tRedshiftOutput_1+ deletedCount_tRedshiftOutput_1;
	nb_line_update_tRedshiftOutput_1=nb_line_update_tRedshiftOutput_1 + updatedCount_tRedshiftOutput_1;
	nb_line_inserted_tRedshiftOutput_1=nb_line_inserted_tRedshiftOutput_1 + insertedCount_tRedshiftOutput_1;
	nb_line_rejected_tRedshiftOutput_1=nb_line_rejected_tRedshiftOutput_1 + rejectedCount_tRedshiftOutput_1;
	
        globalMap.put("tRedshiftOutput_1_NB_LINE",nb_line_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_UPDATED",nb_line_update_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_INSERTED",nb_line_inserted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_DELETED",nb_line_deleted_tRedshiftOutput_1);
        globalMap.put("tRedshiftOutput_1_NB_LINE_REJECTED", nb_line_rejected_tRedshiftOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("stat_message"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tRedshiftOutput_1", true);
end_Hash.put("tRedshiftOutput_1", System.currentTimeMillis());




/**
 * [tRedshiftOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tRedshiftOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRedshiftOutput_1";

	



	
		if(resourceMap.get("finish_tRedshiftOutput_1")==null){
			if(resourceMap.get("conn_tRedshiftOutput_1")!=null){
				try {
					
					
					java.sql.Connection ctn_tRedshiftOutput_1 = (java.sql.Connection)resourceMap.get("conn_tRedshiftOutput_1");
					
					
            		
					ctn_tRedshiftOutput_1.close();
					
				} catch (java.sql.SQLException sqlEx_tRedshiftOutput_1) {
					String errorMessage_tRedshiftOutput_1 = "failed to close the connection in tRedshiftOutput_1 :" + sqlEx_tRedshiftOutput_1.getMessage();
					
					System.err.println(errorMessage_tRedshiftOutput_1);
				}
			}
		}
	

 



/**
 * [tRedshiftOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_7", false);
		start_Hash.put("tRunJob_7", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_7";

	
		int tos_count_tRunJob_7 = 0;
		
    	class BytesLimit65535_tRunJob_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_7().limitLog4jByte();


 



/**
 * [tRunJob_7 begin ] stop
 */
	
	/**
	 * [tRunJob_7 main ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	
	java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_7.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_7.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_7.add("--father_node=tRunJob_7");
	      			
	        			paraList_tRunJob_7.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_7.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null){
		paraList_tRunJob_7.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_7.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_7.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_7.put("RunDate", context.RunDate);
			paraList_tRunJob_7.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_7.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_7.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_7 = context.propertyNames();
		while (propertyNames_tRunJob_7.hasMoreElements()) {
			String key_tRunJob_7 = (String) propertyNames_tRunJob_7.nextElement();
			Object value_tRunJob_7 = (Object) context.get(key_tRunJob_7);
			if(value_tRunJob_7!=null) {  
				paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "=" + value_tRunJob_7);
			} else {
				paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_7 = null;

	
	
		zipcar_marketingdw.processstaging_locations_0_1.ProcessStaging_Locations childJob_tRunJob_7 = new zipcar_marketingdw.processstaging_locations_0_1.ProcessStaging_Locations();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_7) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
			        .entrySet()) {
	            dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
	                    talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
	    }
		  
			childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;
		  
		
		String[][] childReturn_tRunJob_7 = childJob_tRunJob_7.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_7.getErrorCode());
			
	            
	    	if(childJob_tRunJob_7.getErrorCode() == null){
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
		    }
		    if (childJob_tRunJob_7.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_7.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_7++;

/**
 * [tRunJob_7 main ] stop
 */
	
	/**
	 * [tRunJob_7 end ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 

ok_Hash.put("tRunJob_7", true);
end_Hash.put("tRunJob_7", System.currentTimeMillis());




/**
 * [tRunJob_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_7 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_7";

	

 



/**
 * [tRunJob_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_8", false);
		start_Hash.put("tRunJob_8", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_8";

	
		int tos_count_tRunJob_8 = 0;
		
    	class BytesLimit65535_tRunJob_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_8().limitLog4jByte();


 



/**
 * [tRunJob_8 begin ] stop
 */
	
	/**
	 * [tRunJob_8 main ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	
	java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_8.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_8.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_8.add("--father_node=tRunJob_8");
	      			
	        			paraList_tRunJob_8.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_8.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null){
		paraList_tRunJob_8.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_8.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_8.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_8.put("RunDate", context.RunDate);
			paraList_tRunJob_8.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_8.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_8.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_8 = context.propertyNames();
		while (propertyNames_tRunJob_8.hasMoreElements()) {
			String key_tRunJob_8 = (String) propertyNames_tRunJob_8.nextElement();
			Object value_tRunJob_8 = (Object) context.get(key_tRunJob_8);
			if(value_tRunJob_8!=null) {  
				paraList_tRunJob_8.add("--context_param " + key_tRunJob_8 + "=" + value_tRunJob_8);
			} else {
				paraList_tRunJob_8.add("--context_param " + key_tRunJob_8 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_8 = null;

	
	
		zipcar_marketingdw.processstaging_accountadmins_0_1.ProcessStaging_AccountAdmins childJob_tRunJob_8 = new zipcar_marketingdw.processstaging_accountadmins_0_1.ProcessStaging_AccountAdmins();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_8 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_8) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_8 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_8 : talendDataSources_tRunJob_8
			        .entrySet()) {
	            dataSources_tRunJob_8.put(talendDataSourceEntry_tRunJob_8.getKey(),
	                    talendDataSourceEntry_tRunJob_8.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_8.setDataSources(dataSources_tRunJob_8);
	    }
		  
			childJob_tRunJob_8.parentContextMap = parentContextMap_tRunJob_8;
		  
		
		String[][] childReturn_tRunJob_8 = childJob_tRunJob_8.runJob((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_8.getErrorCode());
			
	            
	    	if(childJob_tRunJob_8.getErrorCode() == null){
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getStatus() != null && ("failure").equals(childJob_tRunJob_8.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", childJob_tRunJob_8.getErrorCode());
		    }
		    if (childJob_tRunJob_8.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_8.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_8.getErrorCode() != null || ("failure").equals(childJob_tRunJob_8.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_8.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_8++;

/**
 * [tRunJob_8 main ] stop
 */
	
	/**
	 * [tRunJob_8 end ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 

ok_Hash.put("tRunJob_8", true);
end_Hash.put("tRunJob_8", System.currentTimeMillis());




/**
 * [tRunJob_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_8 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_8";

	

 



/**
 * [tRunJob_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_9", false);
		start_Hash.put("tRunJob_9", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_9";

	
		int tos_count_tRunJob_9 = 0;
		
    	class BytesLimit65535_tRunJob_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_9().limitLog4jByte();


 



/**
 * [tRunJob_9 begin ] stop
 */
	
	/**
	 * [tRunJob_9 main ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	
	java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_9.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_9.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_9.add("--father_node=tRunJob_9");
	      			
	        			paraList_tRunJob_9.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_9.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null){
		paraList_tRunJob_9.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_9.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_9.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_9.put("RunDate", context.RunDate);
			paraList_tRunJob_9.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_9.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_9.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_9 = context.propertyNames();
		while (propertyNames_tRunJob_9.hasMoreElements()) {
			String key_tRunJob_9 = (String) propertyNames_tRunJob_9.nextElement();
			Object value_tRunJob_9 = (Object) context.get(key_tRunJob_9);
			if(value_tRunJob_9!=null) {  
				paraList_tRunJob_9.add("--context_param " + key_tRunJob_9 + "=" + value_tRunJob_9);
			} else {
				paraList_tRunJob_9.add("--context_param " + key_tRunJob_9 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_9 = null;

	
	
		zipcar_marketingdw.processstaging_applicationsfinal_0_1.ProcessStaging_ApplicationsFinal childJob_tRunJob_9 = new zipcar_marketingdw.processstaging_applicationsfinal_0_1.ProcessStaging_ApplicationsFinal();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_9 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_9) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_9 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_9 : talendDataSources_tRunJob_9
			        .entrySet()) {
	            dataSources_tRunJob_9.put(talendDataSourceEntry_tRunJob_9.getKey(),
	                    talendDataSourceEntry_tRunJob_9.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_9.setDataSources(dataSources_tRunJob_9);
	    }
		  
			childJob_tRunJob_9.parentContextMap = parentContextMap_tRunJob_9;
		  
		
		String[][] childReturn_tRunJob_9 = childJob_tRunJob_9.runJob((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_9.getErrorCode());
			
	            
	    	if(childJob_tRunJob_9.getErrorCode() == null){
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getStatus() != null && ("failure").equals(childJob_tRunJob_9.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", childJob_tRunJob_9.getErrorCode());
		    }
		    if (childJob_tRunJob_9.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_9.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_9.getErrorCode() != null || ("failure").equals(childJob_tRunJob_9.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_9.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_9++;

/**
 * [tRunJob_9 main ] stop
 */
	
	/**
	 * [tRunJob_9 end ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 

ok_Hash.put("tRunJob_9", true);
end_Hash.put("tRunJob_9", System.currentTimeMillis());




/**
 * [tRunJob_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_9 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_9";

	

 



/**
 * [tRunJob_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_11", false);
		start_Hash.put("tRunJob_11", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_11";

	
		int tos_count_tRunJob_11 = 0;
		
    	class BytesLimit65535_tRunJob_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_11().limitLog4jByte();


 



/**
 * [tRunJob_11 begin ] stop
 */
	
	/**
	 * [tRunJob_11 main ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	
	java.util.List<String> paraList_tRunJob_11 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_11.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_11.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_11.add("--father_node=tRunJob_11");
	      			
	        			paraList_tRunJob_11.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_11.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_11.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_11 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_11 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_11".equals(tRunJobName_tRunJob_11) && childResumePath_tRunJob_11 != null){
		paraList_tRunJob_11.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_11.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_11");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_11 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_11.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_11.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_11.put("RunDate", context.RunDate);
			paraList_tRunJob_11.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_11.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_11.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_11 = context.propertyNames();
		while (propertyNames_tRunJob_11.hasMoreElements()) {
			String key_tRunJob_11 = (String) propertyNames_tRunJob_11.nextElement();
			Object value_tRunJob_11 = (Object) context.get(key_tRunJob_11);
			if(value_tRunJob_11!=null) {  
				paraList_tRunJob_11.add("--context_param " + key_tRunJob_11 + "=" + value_tRunJob_11);
			} else {
				paraList_tRunJob_11.add("--context_param " + key_tRunJob_11 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_11 = null;

	
	
		zipcar_marketingdw.processstaging_accountaffiliates_0_1.ProcessStaging_AccountAffiliates childJob_tRunJob_11 = new zipcar_marketingdw.processstaging_accountaffiliates_0_1.ProcessStaging_AccountAffiliates();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_11 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_11) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_11 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_11 : talendDataSources_tRunJob_11
			        .entrySet()) {
	            dataSources_tRunJob_11.put(talendDataSourceEntry_tRunJob_11.getKey(),
	                    talendDataSourceEntry_tRunJob_11.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_11.setDataSources(dataSources_tRunJob_11);
	    }
		  
			childJob_tRunJob_11.parentContextMap = parentContextMap_tRunJob_11;
		  
		
		String[][] childReturn_tRunJob_11 = childJob_tRunJob_11.runJob((String[]) paraList_tRunJob_11.toArray(new String[paraList_tRunJob_11.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_11.getErrorCode());
			
	            
	    	if(childJob_tRunJob_11.getErrorCode() == null){
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getStatus() != null && ("failure").equals(childJob_tRunJob_11.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_11_CHILD_RETURN_CODE", childJob_tRunJob_11.getErrorCode());
		    }
		    if (childJob_tRunJob_11.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_11_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_11.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_11.getErrorCode() != null || ("failure").equals(childJob_tRunJob_11.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_11.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_11++;

/**
 * [tRunJob_11 main ] stop
 */
	
	/**
	 * [tRunJob_11 end ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 

ok_Hash.put("tRunJob_11", true);
end_Hash.put("tRunJob_11", System.currentTimeMillis());




/**
 * [tRunJob_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_11 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_11";

	

 



/**
 * [tRunJob_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_11_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_12", false);
		start_Hash.put("tRunJob_12", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_12";

	
		int tos_count_tRunJob_12 = 0;
		
    	class BytesLimit65535_tRunJob_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_12().limitLog4jByte();


 



/**
 * [tRunJob_12 begin ] stop
 */
	
	/**
	 * [tRunJob_12 main ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	
	java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_12.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_12.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_12.add("--father_node=tRunJob_12");
	      			
	        			paraList_tRunJob_12.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_12.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null){
		paraList_tRunJob_12.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_12.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_12.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_12.put("RunDate", context.RunDate);
			paraList_tRunJob_12.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_12.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_12.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_12 = context.propertyNames();
		while (propertyNames_tRunJob_12.hasMoreElements()) {
			String key_tRunJob_12 = (String) propertyNames_tRunJob_12.nextElement();
			Object value_tRunJob_12 = (Object) context.get(key_tRunJob_12);
			if(value_tRunJob_12!=null) {  
				paraList_tRunJob_12.add("--context_param " + key_tRunJob_12 + "=" + value_tRunJob_12);
			} else {
				paraList_tRunJob_12.add("--context_param " + key_tRunJob_12 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_12 = null;

	
	
		zipcar_marketingdw.processstaging_credits_0_1.ProcessStaging_Credits childJob_tRunJob_12 = new zipcar_marketingdw.processstaging_credits_0_1.ProcessStaging_Credits();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_12 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_12) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_12 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_12 : talendDataSources_tRunJob_12
			        .entrySet()) {
	            dataSources_tRunJob_12.put(talendDataSourceEntry_tRunJob_12.getKey(),
	                    talendDataSourceEntry_tRunJob_12.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_12.setDataSources(dataSources_tRunJob_12);
	    }
		  
			childJob_tRunJob_12.parentContextMap = parentContextMap_tRunJob_12;
		  
		
		String[][] childReturn_tRunJob_12 = childJob_tRunJob_12.runJob((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_12.getErrorCode());
			
	            
	    	if(childJob_tRunJob_12.getErrorCode() == null){
				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getStatus() != null && ("failure").equals(childJob_tRunJob_12.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", childJob_tRunJob_12.getErrorCode());
		    }
		    if (childJob_tRunJob_12.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_12.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_12.getErrorCode() != null || ("failure").equals(childJob_tRunJob_12.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_12.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_12++;

/**
 * [tRunJob_12 main ] stop
 */
	
	/**
	 * [tRunJob_12 end ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 

ok_Hash.put("tRunJob_12", true);
end_Hash.put("tRunJob_12", System.currentTimeMillis());




/**
 * [tRunJob_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_12 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_12";

	

 



/**
 * [tRunJob_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_13", false);
		start_Hash.put("tRunJob_13", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_13";

	
		int tos_count_tRunJob_13 = 0;
		
    	class BytesLimit65535_tRunJob_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_13().limitLog4jByte();


 



/**
 * [tRunJob_13 begin ] stop
 */
	
	/**
	 * [tRunJob_13 main ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	
	java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_13.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_13.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_13.add("--father_node=tRunJob_13");
	      			
	        			paraList_tRunJob_13.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_13.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null){
		paraList_tRunJob_13.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_13.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_13.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_13.put("RunDate", context.RunDate);
			paraList_tRunJob_13.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_13.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_13.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_13 = context.propertyNames();
		while (propertyNames_tRunJob_13.hasMoreElements()) {
			String key_tRunJob_13 = (String) propertyNames_tRunJob_13.nextElement();
			Object value_tRunJob_13 = (Object) context.get(key_tRunJob_13);
			if(value_tRunJob_13!=null) {  
				paraList_tRunJob_13.add("--context_param " + key_tRunJob_13 + "=" + value_tRunJob_13);
			} else {
				paraList_tRunJob_13.add("--context_param " + key_tRunJob_13 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_13 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewmailingdata_0_1.ProcessStaging_StrongviewMailingData childJob_tRunJob_13 = new zipcar_marketingdw.processstaging_strongviewmailingdata_0_1.ProcessStaging_StrongviewMailingData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_13 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_13) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_13 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_13 : talendDataSources_tRunJob_13
			        .entrySet()) {
	            dataSources_tRunJob_13.put(talendDataSourceEntry_tRunJob_13.getKey(),
	                    talendDataSourceEntry_tRunJob_13.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_13.setDataSources(dataSources_tRunJob_13);
	    }
		  
			childJob_tRunJob_13.parentContextMap = parentContextMap_tRunJob_13;
		  
		
		String[][] childReturn_tRunJob_13 = childJob_tRunJob_13.runJob((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_13.getErrorCode());
			
	            
	    	if(childJob_tRunJob_13.getErrorCode() == null){
				globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getStatus() != null && ("failure").equals(childJob_tRunJob_13.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_13_CHILD_RETURN_CODE", childJob_tRunJob_13.getErrorCode());
		    }
		    if (childJob_tRunJob_13.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_13.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_13.getErrorCode() != null || ("failure").equals(childJob_tRunJob_13.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_13.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_13++;

/**
 * [tRunJob_13 main ] stop
 */
	
	/**
	 * [tRunJob_13 end ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 

ok_Hash.put("tRunJob_13", true);
end_Hash.put("tRunJob_13", System.currentTimeMillis());




/**
 * [tRunJob_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_13 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_13";

	

 



/**
 * [tRunJob_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_14", false);
		start_Hash.put("tRunJob_14", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_14";

	
		int tos_count_tRunJob_14 = 0;
		
    	class BytesLimit65535_tRunJob_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_14().limitLog4jByte();


 



/**
 * [tRunJob_14 begin ] stop
 */
	
	/**
	 * [tRunJob_14 main ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	
	java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_14.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_14.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_14.add("--father_node=tRunJob_14");
	      			
	        			paraList_tRunJob_14.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_14.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null){
		paraList_tRunJob_14.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_14.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_14.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_14.put("RunDate", context.RunDate);
			paraList_tRunJob_14.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_14.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_14.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_14 = context.propertyNames();
		while (propertyNames_tRunJob_14.hasMoreElements()) {
			String key_tRunJob_14 = (String) propertyNames_tRunJob_14.nextElement();
			Object value_tRunJob_14 = (Object) context.get(key_tRunJob_14);
			if(value_tRunJob_14!=null) {  
				paraList_tRunJob_14.add("--context_param " + key_tRunJob_14 + "=" + value_tRunJob_14);
			} else {
				paraList_tRunJob_14.add("--context_param " + key_tRunJob_14 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_14 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewtrackdata_0_1.ProcessStaging_StrongviewTrackData childJob_tRunJob_14 = new zipcar_marketingdw.processstaging_strongviewtrackdata_0_1.ProcessStaging_StrongviewTrackData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_14 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_14) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_14 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_14 : talendDataSources_tRunJob_14
			        .entrySet()) {
	            dataSources_tRunJob_14.put(talendDataSourceEntry_tRunJob_14.getKey(),
	                    talendDataSourceEntry_tRunJob_14.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_14.setDataSources(dataSources_tRunJob_14);
	    }
		  
			childJob_tRunJob_14.parentContextMap = parentContextMap_tRunJob_14;
		  
		
		String[][] childReturn_tRunJob_14 = childJob_tRunJob_14.runJob((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_14.getErrorCode());
			
	            
	    	if(childJob_tRunJob_14.getErrorCode() == null){
				globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getStatus() != null && ("failure").equals(childJob_tRunJob_14.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_14_CHILD_RETURN_CODE", childJob_tRunJob_14.getErrorCode());
		    }
		    if (childJob_tRunJob_14.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_14.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_14.getErrorCode() != null || ("failure").equals(childJob_tRunJob_14.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_14.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_14++;

/**
 * [tRunJob_14 main ] stop
 */
	
	/**
	 * [tRunJob_14 end ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 

ok_Hash.put("tRunJob_14", true);
end_Hash.put("tRunJob_14", System.currentTimeMillis());




/**
 * [tRunJob_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_14 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_14";

	

 



/**
 * [tRunJob_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_16", false);
		start_Hash.put("tRunJob_16", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_16";

	
		int tos_count_tRunJob_16 = 0;
		
    	class BytesLimit65535_tRunJob_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_16().limitLog4jByte();


 



/**
 * [tRunJob_16 begin ] stop
 */
	
	/**
	 * [tRunJob_16 main ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	
	java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_16.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_16.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_16.add("--father_node=tRunJob_16");
	      			
	        			paraList_tRunJob_16.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_16.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_16.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_16 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_16 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_16".equals(tRunJobName_tRunJob_16) && childResumePath_tRunJob_16 != null){
		paraList_tRunJob_16.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_16");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_16.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_16.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_16.put("RunDate", context.RunDate);
			paraList_tRunJob_16.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_16.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_16.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_16 = context.propertyNames();
		while (propertyNames_tRunJob_16.hasMoreElements()) {
			String key_tRunJob_16 = (String) propertyNames_tRunJob_16.nextElement();
			Object value_tRunJob_16 = (Object) context.get(key_tRunJob_16);
			if(value_tRunJob_16!=null) {  
				paraList_tRunJob_16.add("--context_param " + key_tRunJob_16 + "=" + value_tRunJob_16);
			} else {
				paraList_tRunJob_16.add("--context_param " + key_tRunJob_16 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_16 = null;

	
	
		zipcar_marketingdw.processstaging_zipfleets_0_1.ProcessStaging_Zipfleets childJob_tRunJob_16 = new zipcar_marketingdw.processstaging_zipfleets_0_1.ProcessStaging_Zipfleets();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_16 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_16) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_16 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_16 : talendDataSources_tRunJob_16
			        .entrySet()) {
	            dataSources_tRunJob_16.put(talendDataSourceEntry_tRunJob_16.getKey(),
	                    talendDataSourceEntry_tRunJob_16.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_16.setDataSources(dataSources_tRunJob_16);
	    }
		  
			childJob_tRunJob_16.parentContextMap = parentContextMap_tRunJob_16;
		  
		
		String[][] childReturn_tRunJob_16 = childJob_tRunJob_16.runJob((String[]) paraList_tRunJob_16.toArray(new String[paraList_tRunJob_16.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_16.getErrorCode());
			
	            
	    	if(childJob_tRunJob_16.getErrorCode() == null){
				globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getStatus() != null && ("failure").equals(childJob_tRunJob_16.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_16_CHILD_RETURN_CODE", childJob_tRunJob_16.getErrorCode());
		    }
		    if (childJob_tRunJob_16.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_16.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_16.getErrorCode() != null || ("failure").equals(childJob_tRunJob_16.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_16.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_16++;

/**
 * [tRunJob_16 main ] stop
 */
	
	/**
	 * [tRunJob_16 end ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 

ok_Hash.put("tRunJob_16", true);
end_Hash.put("tRunJob_16", System.currentTimeMillis());




/**
 * [tRunJob_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_16 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_16";

	

 



/**
 * [tRunJob_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_17", false);
		start_Hash.put("tRunJob_17", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_17";

	
		int tos_count_tRunJob_17 = 0;
		
    	class BytesLimit65535_tRunJob_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_17().limitLog4jByte();


 



/**
 * [tRunJob_17 begin ] stop
 */
	
	/**
	 * [tRunJob_17 main ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	
	java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_17.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_17.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_17.add("--father_node=tRunJob_17");
	      			
	        			paraList_tRunJob_17.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_17.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null){
		paraList_tRunJob_17.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_17.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_17.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_17.put("RunDate", context.RunDate);
			paraList_tRunJob_17.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_17.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_17.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_17 = context.propertyNames();
		while (propertyNames_tRunJob_17.hasMoreElements()) {
			String key_tRunJob_17 = (String) propertyNames_tRunJob_17.nextElement();
			Object value_tRunJob_17 = (Object) context.get(key_tRunJob_17);
			if(value_tRunJob_17!=null) {  
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + value_tRunJob_17);
			} else {
				paraList_tRunJob_17.add("--context_param " + key_tRunJob_17 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_17 = null;

	
	
		zipcar_marketingdw.processstaging_supersededreservations_0_1.ProcessStaging_SupersededReservations childJob_tRunJob_17 = new zipcar_marketingdw.processstaging_supersededreservations_0_1.ProcessStaging_SupersededReservations();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_17 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_17) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_17 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_17 : talendDataSources_tRunJob_17
			        .entrySet()) {
	            dataSources_tRunJob_17.put(talendDataSourceEntry_tRunJob_17.getKey(),
	                    talendDataSourceEntry_tRunJob_17.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_17.setDataSources(dataSources_tRunJob_17);
	    }
		  
			childJob_tRunJob_17.parentContextMap = parentContextMap_tRunJob_17;
		  
		
		String[][] childReturn_tRunJob_17 = childJob_tRunJob_17.runJob((String[]) paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_17.getErrorCode());
			
	            
	    	if(childJob_tRunJob_17.getErrorCode() == null){
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getStatus() != null && ("failure").equals(childJob_tRunJob_17.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", childJob_tRunJob_17.getErrorCode());
		    }
		    if (childJob_tRunJob_17.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_17.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_17.getErrorCode() != null || ("failure").equals(childJob_tRunJob_17.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_17.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_17++;

/**
 * [tRunJob_17 main ] stop
 */
	
	/**
	 * [tRunJob_17 end ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 

ok_Hash.put("tRunJob_17", true);
end_Hash.put("tRunJob_17", System.currentTimeMillis());




/**
 * [tRunJob_17 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tRunJob_41Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_17 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_17";

	

 



/**
 * [tRunJob_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_41Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_41_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_41 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_41", false);
		start_Hash.put("tRunJob_41", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_41";

	
		int tos_count_tRunJob_41 = 0;
		
    	class BytesLimit65535_tRunJob_41{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_41().limitLog4jByte();


 



/**
 * [tRunJob_41 begin ] stop
 */
	
	/**
	 * [tRunJob_41 main ] start
	 */

	

	
	
	currentComponent="tRunJob_41";

	
	java.util.List<String> paraList_tRunJob_41 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_41.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_41.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_41.add("--father_node=tRunJob_41");
	      			
	        			paraList_tRunJob_41.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_41.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_41.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_41 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_41 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_41".equals(tRunJobName_tRunJob_41) && childResumePath_tRunJob_41 != null){
		paraList_tRunJob_41.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_41.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_41");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_41 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_41.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_41.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_41.put("RunDate", context.RunDate);
			paraList_tRunJob_41.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_41.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_41.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_41 = context.propertyNames();
		while (propertyNames_tRunJob_41.hasMoreElements()) {
			String key_tRunJob_41 = (String) propertyNames_tRunJob_41.nextElement();
			Object value_tRunJob_41 = (Object) context.get(key_tRunJob_41);
			if(value_tRunJob_41!=null) {  
				paraList_tRunJob_41.add("--context_param " + key_tRunJob_41 + "=" + value_tRunJob_41);
			} else {
				paraList_tRunJob_41.add("--context_param " + key_tRunJob_41 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_41 = null;

	
	
		zipcar_marketingdw.processstaging_reservations_np_0_1.ProcessStaging_Reservations_NP childJob_tRunJob_41 = new zipcar_marketingdw.processstaging_reservations_np_0_1.ProcessStaging_Reservations_NP();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_41 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_41) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_41 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_41 : talendDataSources_tRunJob_41
			        .entrySet()) {
	            dataSources_tRunJob_41.put(talendDataSourceEntry_tRunJob_41.getKey(),
	                    talendDataSourceEntry_tRunJob_41.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_41.setDataSources(dataSources_tRunJob_41);
	    }
		  
			childJob_tRunJob_41.parentContextMap = parentContextMap_tRunJob_41;
		  
		
		String[][] childReturn_tRunJob_41 = childJob_tRunJob_41.runJob((String[]) paraList_tRunJob_41.toArray(new String[paraList_tRunJob_41.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_41.getErrorCode());
			
	            
	    	if(childJob_tRunJob_41.getErrorCode() == null){
				globalMap.put("tRunJob_41_CHILD_RETURN_CODE", childJob_tRunJob_41.getStatus() != null && ("failure").equals(childJob_tRunJob_41.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_41_CHILD_RETURN_CODE", childJob_tRunJob_41.getErrorCode());
		    }
		    if (childJob_tRunJob_41.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_41_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_41.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_41.getErrorCode() != null || ("failure").equals(childJob_tRunJob_41.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_41.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_41++;

/**
 * [tRunJob_41 main ] stop
 */
	
	/**
	 * [tRunJob_41 end ] start
	 */

	

	
	
	currentComponent="tRunJob_41";

	

 

ok_Hash.put("tRunJob_41", true);
end_Hash.put("tRunJob_41", System.currentTimeMillis());




/**
 * [tRunJob_41 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_41:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRunJob_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_41 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_41";

	

 



/**
 * [tRunJob_41 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_41_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_5", false);
		start_Hash.put("tRunJob_5", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_5";

	
		int tos_count_tRunJob_5 = 0;
		
    	class BytesLimit65535_tRunJob_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_5().limitLog4jByte();


 



/**
 * [tRunJob_5 begin ] stop
 */
	
	/**
	 * [tRunJob_5 main ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	
	java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_5.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_5.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_5.add("--father_node=tRunJob_5");
	      			
	        			paraList_tRunJob_5.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_5.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null){
		paraList_tRunJob_5.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_5.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_5.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_5.put("RunDate", context.RunDate);
			paraList_tRunJob_5.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_5.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_5.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_5 = context.propertyNames();
		while (propertyNames_tRunJob_5.hasMoreElements()) {
			String key_tRunJob_5 = (String) propertyNames_tRunJob_5.nextElement();
			Object value_tRunJob_5 = (Object) context.get(key_tRunJob_5);
			if(value_tRunJob_5!=null) {  
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + value_tRunJob_5);
			} else {
				paraList_tRunJob_5.add("--context_param " + key_tRunJob_5 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_5 = null;

	
	
		zipcar_marketingdw.processstaging_reservations_0_1.ProcessStaging_Reservations childJob_tRunJob_5 = new zipcar_marketingdw.processstaging_reservations_0_1.ProcessStaging_Reservations();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_5 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_5) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_5 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_5 : talendDataSources_tRunJob_5
			        .entrySet()) {
	            dataSources_tRunJob_5.put(talendDataSourceEntry_tRunJob_5.getKey(),
	                    talendDataSourceEntry_tRunJob_5.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_5.setDataSources(dataSources_tRunJob_5);
	    }
		  
			childJob_tRunJob_5.parentContextMap = parentContextMap_tRunJob_5;
		  
		
		String[][] childReturn_tRunJob_5 = childJob_tRunJob_5.runJob((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_5.getErrorCode());
			
	            
	    	if(childJob_tRunJob_5.getErrorCode() == null){
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getStatus() != null && ("failure").equals(childJob_tRunJob_5.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", childJob_tRunJob_5.getErrorCode());
		    }
		    if (childJob_tRunJob_5.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_5.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_5.getErrorCode() != null || ("failure").equals(childJob_tRunJob_5.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_5.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_5++;

/**
 * [tRunJob_5 main ] stop
 */
	
	/**
	 * [tRunJob_5 end ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 

ok_Hash.put("tRunJob_5", true);
end_Hash.put("tRunJob_5", System.currentTimeMillis());




/**
 * [tRunJob_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_5 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_5";

	

 



/**
 * [tRunJob_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_18", false);
		start_Hash.put("tRunJob_18", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_18";

	
		int tos_count_tRunJob_18 = 0;
		
    	class BytesLimit65535_tRunJob_18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_18().limitLog4jByte();


 



/**
 * [tRunJob_18 begin ] stop
 */
	
	/**
	 * [tRunJob_18 main ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	
	java.util.List<String> paraList_tRunJob_18 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_18.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_18.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_18.add("--father_node=tRunJob_18");
	      			
	        			paraList_tRunJob_18.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_18.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_18.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_18 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_18 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_18".equals(tRunJobName_tRunJob_18) && childResumePath_tRunJob_18 != null){
		paraList_tRunJob_18.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_18.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_18");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_18 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_18.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_18.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_18.put("RunDate", context.RunDate);
			paraList_tRunJob_18.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_18.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_18.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_18 = context.propertyNames();
		while (propertyNames_tRunJob_18.hasMoreElements()) {
			String key_tRunJob_18 = (String) propertyNames_tRunJob_18.nextElement();
			Object value_tRunJob_18 = (Object) context.get(key_tRunJob_18);
			if(value_tRunJob_18!=null) {  
				paraList_tRunJob_18.add("--context_param " + key_tRunJob_18 + "=" + value_tRunJob_18);
			} else {
				paraList_tRunJob_18.add("--context_param " + key_tRunJob_18 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_18 = null;

	
	
		zipcar_marketingdw.processstaging_affiliates_0_1.ProcessStaging_Affiliates childJob_tRunJob_18 = new zipcar_marketingdw.processstaging_affiliates_0_1.ProcessStaging_Affiliates();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_18 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_18) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_18 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_18 : talendDataSources_tRunJob_18
			        .entrySet()) {
	            dataSources_tRunJob_18.put(talendDataSourceEntry_tRunJob_18.getKey(),
	                    talendDataSourceEntry_tRunJob_18.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_18.setDataSources(dataSources_tRunJob_18);
	    }
		  
			childJob_tRunJob_18.parentContextMap = parentContextMap_tRunJob_18;
		  
		
		String[][] childReturn_tRunJob_18 = childJob_tRunJob_18.runJob((String[]) paraList_tRunJob_18.toArray(new String[paraList_tRunJob_18.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_18.getErrorCode());
			
	            
	    	if(childJob_tRunJob_18.getErrorCode() == null){
				globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getStatus() != null && ("failure").equals(childJob_tRunJob_18.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_18_CHILD_RETURN_CODE", childJob_tRunJob_18.getErrorCode());
		    }
		    if (childJob_tRunJob_18.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_18_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_18.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_18.getErrorCode() != null || ("failure").equals(childJob_tRunJob_18.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_18.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_18++;

/**
 * [tRunJob_18 main ] stop
 */
	
	/**
	 * [tRunJob_18 end ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 

ok_Hash.put("tRunJob_18", true);
end_Hash.put("tRunJob_18", System.currentTimeMillis());




/**
 * [tRunJob_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_18 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_18";

	

 



/**
 * [tRunJob_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_18_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_19", false);
		start_Hash.put("tRunJob_19", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_19";

	
		int tos_count_tRunJob_19 = 0;
		
    	class BytesLimit65535_tRunJob_19{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_19().limitLog4jByte();


 



/**
 * [tRunJob_19 begin ] stop
 */
	
	/**
	 * [tRunJob_19 main ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	
	java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_19.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_19.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_19.add("--father_node=tRunJob_19");
	      			
	        			paraList_tRunJob_19.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_19.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_19.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_19 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_19 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_19".equals(tRunJobName_tRunJob_19) && childResumePath_tRunJob_19 != null){
		paraList_tRunJob_19.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_19.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_19");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_19 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_19.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_19.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_19.put("RunDate", context.RunDate);
			paraList_tRunJob_19.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_19.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_19.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_19 = context.propertyNames();
		while (propertyNames_tRunJob_19.hasMoreElements()) {
			String key_tRunJob_19 = (String) propertyNames_tRunJob_19.nextElement();
			Object value_tRunJob_19 = (Object) context.get(key_tRunJob_19);
			if(value_tRunJob_19!=null) {  
				paraList_tRunJob_19.add("--context_param " + key_tRunJob_19 + "=" + value_tRunJob_19);
			} else {
				paraList_tRunJob_19.add("--context_param " + key_tRunJob_19 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_19 = null;

	
	
		zipcar_marketingdw.processstaging_membeattritionreasons_0_1.ProcessStaging_MembeAttritionReasons childJob_tRunJob_19 = new zipcar_marketingdw.processstaging_membeattritionreasons_0_1.ProcessStaging_MembeAttritionReasons();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_19 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_19) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_19 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_19 : talendDataSources_tRunJob_19
			        .entrySet()) {
	            dataSources_tRunJob_19.put(talendDataSourceEntry_tRunJob_19.getKey(),
	                    talendDataSourceEntry_tRunJob_19.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_19.setDataSources(dataSources_tRunJob_19);
	    }
		  
			childJob_tRunJob_19.parentContextMap = parentContextMap_tRunJob_19;
		  
		
		String[][] childReturn_tRunJob_19 = childJob_tRunJob_19.runJob((String[]) paraList_tRunJob_19.toArray(new String[paraList_tRunJob_19.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_19.getErrorCode());
			
	            
	    	if(childJob_tRunJob_19.getErrorCode() == null){
				globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getStatus() != null && ("failure").equals(childJob_tRunJob_19.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_19_CHILD_RETURN_CODE", childJob_tRunJob_19.getErrorCode());
		    }
		    if (childJob_tRunJob_19.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_19_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_19.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_19.getErrorCode() != null || ("failure").equals(childJob_tRunJob_19.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_19.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_19++;

/**
 * [tRunJob_19 main ] stop
 */
	
	/**
	 * [tRunJob_19 end ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 

ok_Hash.put("tRunJob_19", true);
end_Hash.put("tRunJob_19", System.currentTimeMillis());




/**
 * [tRunJob_19 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_19 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_19";

	

 



/**
 * [tRunJob_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_20", false);
		start_Hash.put("tRunJob_20", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_20";

	
		int tos_count_tRunJob_20 = 0;
		
    	class BytesLimit65535_tRunJob_20{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_20().limitLog4jByte();


 



/**
 * [tRunJob_20 begin ] stop
 */
	
	/**
	 * [tRunJob_20 main ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	
	java.util.List<String> paraList_tRunJob_20 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_20.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_20.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_20.add("--father_node=tRunJob_20");
	      			
	        			paraList_tRunJob_20.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_20.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_20.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_20 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_20 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_20".equals(tRunJobName_tRunJob_20) && childResumePath_tRunJob_20 != null){
		paraList_tRunJob_20.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_20.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_20");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_20 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_20.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_20.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_20.put("RunDate", context.RunDate);
			paraList_tRunJob_20.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_20.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_20.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_20 = context.propertyNames();
		while (propertyNames_tRunJob_20.hasMoreElements()) {
			String key_tRunJob_20 = (String) propertyNames_tRunJob_20.nextElement();
			Object value_tRunJob_20 = (Object) context.get(key_tRunJob_20);
			if(value_tRunJob_20!=null) {  
				paraList_tRunJob_20.add("--context_param " + key_tRunJob_20 + "=" + value_tRunJob_20);
			} else {
				paraList_tRunJob_20.add("--context_param " + key_tRunJob_20 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_20 = null;

	
	
		zipcar_marketingdw.processstaging_memberjoininfo_0_1.ProcessStaging_MemberJoinInfo childJob_tRunJob_20 = new zipcar_marketingdw.processstaging_memberjoininfo_0_1.ProcessStaging_MemberJoinInfo();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_20 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_20) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_20 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_20 : talendDataSources_tRunJob_20
			        .entrySet()) {
	            dataSources_tRunJob_20.put(talendDataSourceEntry_tRunJob_20.getKey(),
	                    talendDataSourceEntry_tRunJob_20.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_20.setDataSources(dataSources_tRunJob_20);
	    }
		  
			childJob_tRunJob_20.parentContextMap = parentContextMap_tRunJob_20;
		  
		
		String[][] childReturn_tRunJob_20 = childJob_tRunJob_20.runJob((String[]) paraList_tRunJob_20.toArray(new String[paraList_tRunJob_20.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_20.getErrorCode());
			
	            
	    	if(childJob_tRunJob_20.getErrorCode() == null){
				globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getStatus() != null && ("failure").equals(childJob_tRunJob_20.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_20_CHILD_RETURN_CODE", childJob_tRunJob_20.getErrorCode());
		    }
		    if (childJob_tRunJob_20.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_20_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_20.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_20.getErrorCode() != null || ("failure").equals(childJob_tRunJob_20.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_20.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_20++;

/**
 * [tRunJob_20 main ] stop
 */
	
	/**
	 * [tRunJob_20 end ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 

ok_Hash.put("tRunJob_20", true);
end_Hash.put("tRunJob_20", System.currentTimeMillis());




/**
 * [tRunJob_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_20 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_20";

	

 



/**
 * [tRunJob_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_21", false);
		start_Hash.put("tRunJob_21", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_21";

	
		int tos_count_tRunJob_21 = 0;
		
    	class BytesLimit65535_tRunJob_21{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_21().limitLog4jByte();


 



/**
 * [tRunJob_21 begin ] stop
 */
	
	/**
	 * [tRunJob_21 main ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	
	java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_21.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_21.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_21.add("--father_node=tRunJob_21");
	      			
	        			paraList_tRunJob_21.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_21.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_21.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_21 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_21 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_21".equals(tRunJobName_tRunJob_21) && childResumePath_tRunJob_21 != null){
		paraList_tRunJob_21.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_21");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_21 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_21.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_21.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_21.put("RunDate", context.RunDate);
			paraList_tRunJob_21.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_21.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_21.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_21 = context.propertyNames();
		while (propertyNames_tRunJob_21.hasMoreElements()) {
			String key_tRunJob_21 = (String) propertyNames_tRunJob_21.nextElement();
			Object value_tRunJob_21 = (Object) context.get(key_tRunJob_21);
			if(value_tRunJob_21!=null) {  
				paraList_tRunJob_21.add("--context_param " + key_tRunJob_21 + "=" + value_tRunJob_21);
			} else {
				paraList_tRunJob_21.add("--context_param " + key_tRunJob_21 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_21 = null;

	
	
		zipcar_marketingdw.processstaging_memberlastapplicationinfo_0_1.ProcessStaging_MemberLastApplicationInfo childJob_tRunJob_21 = new zipcar_marketingdw.processstaging_memberlastapplicationinfo_0_1.ProcessStaging_MemberLastApplicationInfo();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_21 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_21) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_21 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_21 : talendDataSources_tRunJob_21
			        .entrySet()) {
	            dataSources_tRunJob_21.put(talendDataSourceEntry_tRunJob_21.getKey(),
	                    talendDataSourceEntry_tRunJob_21.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_21.setDataSources(dataSources_tRunJob_21);
	    }
		  
			childJob_tRunJob_21.parentContextMap = parentContextMap_tRunJob_21;
		  
		
		String[][] childReturn_tRunJob_21 = childJob_tRunJob_21.runJob((String[]) paraList_tRunJob_21.toArray(new String[paraList_tRunJob_21.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_21.getErrorCode());
			
	            
	    	if(childJob_tRunJob_21.getErrorCode() == null){
				globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getStatus() != null && ("failure").equals(childJob_tRunJob_21.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_21_CHILD_RETURN_CODE", childJob_tRunJob_21.getErrorCode());
		    }
		    if (childJob_tRunJob_21.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_21.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_21.getErrorCode() != null || ("failure").equals(childJob_tRunJob_21.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_21.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_21++;

/**
 * [tRunJob_21 main ] stop
 */
	
	/**
	 * [tRunJob_21 end ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 

ok_Hash.put("tRunJob_21", true);
end_Hash.put("tRunJob_21", System.currentTimeMillis());




/**
 * [tRunJob_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_21 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_21";

	

 



/**
 * [tRunJob_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_22", false);
		start_Hash.put("tRunJob_22", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_22";

	
		int tos_count_tRunJob_22 = 0;
		
    	class BytesLimit65535_tRunJob_22{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_22().limitLog4jByte();


 



/**
 * [tRunJob_22 begin ] stop
 */
	
	/**
	 * [tRunJob_22 main ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	
	java.util.List<String> paraList_tRunJob_22 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_22.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_22.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_22.add("--father_node=tRunJob_22");
	      			
	        			paraList_tRunJob_22.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_22.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_22.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_22 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_22 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_22".equals(tRunJobName_tRunJob_22) && childResumePath_tRunJob_22 != null){
		paraList_tRunJob_22.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_22.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_22");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_22 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_22.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_22.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_22.put("RunDate", context.RunDate);
			paraList_tRunJob_22.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_22.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_22.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_22 = context.propertyNames();
		while (propertyNames_tRunJob_22.hasMoreElements()) {
			String key_tRunJob_22 = (String) propertyNames_tRunJob_22.nextElement();
			Object value_tRunJob_22 = (Object) context.get(key_tRunJob_22);
			if(value_tRunJob_22!=null) {  
				paraList_tRunJob_22.add("--context_param " + key_tRunJob_22 + "=" + value_tRunJob_22);
			} else {
				paraList_tRunJob_22.add("--context_param " + key_tRunJob_22 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_22 = null;

	
	
		zipcar_marketingdw.processstaging_memberlastregistrationsess_0_1.ProcessStaging_MemberLastRegistrationSess childJob_tRunJob_22 = new zipcar_marketingdw.processstaging_memberlastregistrationsess_0_1.ProcessStaging_MemberLastRegistrationSess();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_22 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_22) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_22 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_22 : talendDataSources_tRunJob_22
			        .entrySet()) {
	            dataSources_tRunJob_22.put(talendDataSourceEntry_tRunJob_22.getKey(),
	                    talendDataSourceEntry_tRunJob_22.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_22.setDataSources(dataSources_tRunJob_22);
	    }
		  
			childJob_tRunJob_22.parentContextMap = parentContextMap_tRunJob_22;
		  
		
		String[][] childReturn_tRunJob_22 = childJob_tRunJob_22.runJob((String[]) paraList_tRunJob_22.toArray(new String[paraList_tRunJob_22.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_22.getErrorCode());
			
	            
	    	if(childJob_tRunJob_22.getErrorCode() == null){
				globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getStatus() != null && ("failure").equals(childJob_tRunJob_22.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_22_CHILD_RETURN_CODE", childJob_tRunJob_22.getErrorCode());
		    }
		    if (childJob_tRunJob_22.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_22_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_22.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_22.getErrorCode() != null || ("failure").equals(childJob_tRunJob_22.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_22.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_22++;

/**
 * [tRunJob_22 main ] stop
 */
	
	/**
	 * [tRunJob_22 end ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 

ok_Hash.put("tRunJob_22", true);
end_Hash.put("tRunJob_22", System.currentTimeMillis());




/**
 * [tRunJob_22 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_22 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_22";

	

 



/**
 * [tRunJob_22 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_22_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_23", false);
		start_Hash.put("tRunJob_23", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_23";

	
		int tos_count_tRunJob_23 = 0;
		
    	class BytesLimit65535_tRunJob_23{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_23().limitLog4jByte();


 



/**
 * [tRunJob_23 begin ] stop
 */
	
	/**
	 * [tRunJob_23 main ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	
	java.util.List<String> paraList_tRunJob_23 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_23.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_23.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_23.add("--father_node=tRunJob_23");
	      			
	        			paraList_tRunJob_23.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_23.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_23.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_23 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_23 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_23".equals(tRunJobName_tRunJob_23) && childResumePath_tRunJob_23 != null){
		paraList_tRunJob_23.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_23.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_23");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_23 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_23.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_23.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_23.put("RunDate", context.RunDate);
			paraList_tRunJob_23.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_23.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_23.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_23 = context.propertyNames();
		while (propertyNames_tRunJob_23.hasMoreElements()) {
			String key_tRunJob_23 = (String) propertyNames_tRunJob_23.nextElement();
			Object value_tRunJob_23 = (Object) context.get(key_tRunJob_23);
			if(value_tRunJob_23!=null) {  
				paraList_tRunJob_23.add("--context_param " + key_tRunJob_23 + "=" + value_tRunJob_23);
			} else {
				paraList_tRunJob_23.add("--context_param " + key_tRunJob_23 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_23 = null;

	
	
		zipcar_marketingdw.processstaging_memberleftinfo_0_1.ProcessStaging_MemberLeftInfo childJob_tRunJob_23 = new zipcar_marketingdw.processstaging_memberleftinfo_0_1.ProcessStaging_MemberLeftInfo();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_23 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_23) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_23 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_23 : talendDataSources_tRunJob_23
			        .entrySet()) {
	            dataSources_tRunJob_23.put(talendDataSourceEntry_tRunJob_23.getKey(),
	                    talendDataSourceEntry_tRunJob_23.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_23.setDataSources(dataSources_tRunJob_23);
	    }
		  
			childJob_tRunJob_23.parentContextMap = parentContextMap_tRunJob_23;
		  
		
		String[][] childReturn_tRunJob_23 = childJob_tRunJob_23.runJob((String[]) paraList_tRunJob_23.toArray(new String[paraList_tRunJob_23.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_23.getErrorCode());
			
	            
	    	if(childJob_tRunJob_23.getErrorCode() == null){
				globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getStatus() != null && ("failure").equals(childJob_tRunJob_23.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_23_CHILD_RETURN_CODE", childJob_tRunJob_23.getErrorCode());
		    }
		    if (childJob_tRunJob_23.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_23_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_23.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_23.getErrorCode() != null || ("failure").equals(childJob_tRunJob_23.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_23.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_23++;

/**
 * [tRunJob_23 main ] stop
 */
	
	/**
	 * [tRunJob_23 end ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 

ok_Hash.put("tRunJob_23", true);
end_Hash.put("tRunJob_23", System.currentTimeMillis());




/**
 * [tRunJob_23 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_23 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_23";

	

 



/**
 * [tRunJob_23 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_23_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_24", false);
		start_Hash.put("tRunJob_24", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_24";

	
		int tos_count_tRunJob_24 = 0;
		
    	class BytesLimit65535_tRunJob_24{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_24().limitLog4jByte();


 



/**
 * [tRunJob_24 begin ] stop
 */
	
	/**
	 * [tRunJob_24 main ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	
	java.util.List<String> paraList_tRunJob_24 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_24.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_24.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_24.add("--father_node=tRunJob_24");
	      			
	        			paraList_tRunJob_24.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_24.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_24.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_24 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_24 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_24".equals(tRunJobName_tRunJob_24) && childResumePath_tRunJob_24 != null){
		paraList_tRunJob_24.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_24.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_24");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_24 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_24.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_24.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_24.put("RunDate", context.RunDate);
			paraList_tRunJob_24.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_24.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_24.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_24 = context.propertyNames();
		while (propertyNames_tRunJob_24.hasMoreElements()) {
			String key_tRunJob_24 = (String) propertyNames_tRunJob_24.nextElement();
			Object value_tRunJob_24 = (Object) context.get(key_tRunJob_24);
			if(value_tRunJob_24!=null) {  
				paraList_tRunJob_24.add("--context_param " + key_tRunJob_24 + "=" + value_tRunJob_24);
			} else {
				paraList_tRunJob_24.add("--context_param " + key_tRunJob_24 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_24 = null;

	
	
		zipcar_marketingdw.processstaging_memberrejoinhistory_0_1.ProcessStaging_MemberRejoinHistory childJob_tRunJob_24 = new zipcar_marketingdw.processstaging_memberrejoinhistory_0_1.ProcessStaging_MemberRejoinHistory();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_24 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_24) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_24 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_24 : talendDataSources_tRunJob_24
			        .entrySet()) {
	            dataSources_tRunJob_24.put(talendDataSourceEntry_tRunJob_24.getKey(),
	                    talendDataSourceEntry_tRunJob_24.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_24.setDataSources(dataSources_tRunJob_24);
	    }
		  
			childJob_tRunJob_24.parentContextMap = parentContextMap_tRunJob_24;
		  
		
		String[][] childReturn_tRunJob_24 = childJob_tRunJob_24.runJob((String[]) paraList_tRunJob_24.toArray(new String[paraList_tRunJob_24.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_24.getErrorCode());
			
	            
	    	if(childJob_tRunJob_24.getErrorCode() == null){
				globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getStatus() != null && ("failure").equals(childJob_tRunJob_24.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_24_CHILD_RETURN_CODE", childJob_tRunJob_24.getErrorCode());
		    }
		    if (childJob_tRunJob_24.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_24_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_24.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_24.getErrorCode() != null || ("failure").equals(childJob_tRunJob_24.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_24.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_24++;

/**
 * [tRunJob_24 main ] stop
 */
	
	/**
	 * [tRunJob_24 end ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 

ok_Hash.put("tRunJob_24", true);
end_Hash.put("tRunJob_24", System.currentTimeMillis());




/**
 * [tRunJob_24 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_24 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_24";

	

 



/**
 * [tRunJob_24 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_24_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_25", false);
		start_Hash.put("tRunJob_25", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_25";

	
		int tos_count_tRunJob_25 = 0;
		
    	class BytesLimit65535_tRunJob_25{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_25().limitLog4jByte();


 



/**
 * [tRunJob_25 begin ] stop
 */
	
	/**
	 * [tRunJob_25 main ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	
	java.util.List<String> paraList_tRunJob_25 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_25.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_25.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_25.add("--father_node=tRunJob_25");
	      			
	        			paraList_tRunJob_25.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_25.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_25.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_25 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_25 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_25".equals(tRunJobName_tRunJob_25) && childResumePath_tRunJob_25 != null){
		paraList_tRunJob_25.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_25.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_25");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_25 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_25.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_25.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_25.put("RunDate", context.RunDate);
			paraList_tRunJob_25.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_25.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_25.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_25 = context.propertyNames();
		while (propertyNames_tRunJob_25.hasMoreElements()) {
			String key_tRunJob_25 = (String) propertyNames_tRunJob_25.nextElement();
			Object value_tRunJob_25 = (Object) context.get(key_tRunJob_25);
			if(value_tRunJob_25!=null) {  
				paraList_tRunJob_25.add("--context_param " + key_tRunJob_25 + "=" + value_tRunJob_25);
			} else {
				paraList_tRunJob_25.add("--context_param " + key_tRunJob_25 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_25 = null;

	
	
		zipcar_marketingdw.processstaging_registrationsessions_0_1.ProcessStaging_RegistrationSessions childJob_tRunJob_25 = new zipcar_marketingdw.processstaging_registrationsessions_0_1.ProcessStaging_RegistrationSessions();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_25 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_25) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_25 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_25 : talendDataSources_tRunJob_25
			        .entrySet()) {
	            dataSources_tRunJob_25.put(talendDataSourceEntry_tRunJob_25.getKey(),
	                    talendDataSourceEntry_tRunJob_25.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_25.setDataSources(dataSources_tRunJob_25);
	    }
		  
			childJob_tRunJob_25.parentContextMap = parentContextMap_tRunJob_25;
		  
		
		String[][] childReturn_tRunJob_25 = childJob_tRunJob_25.runJob((String[]) paraList_tRunJob_25.toArray(new String[paraList_tRunJob_25.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_25.getErrorCode());
			
	            
	    	if(childJob_tRunJob_25.getErrorCode() == null){
				globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getStatus() != null && ("failure").equals(childJob_tRunJob_25.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_25_CHILD_RETURN_CODE", childJob_tRunJob_25.getErrorCode());
		    }
		    if (childJob_tRunJob_25.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_25_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_25.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_25.getErrorCode() != null || ("failure").equals(childJob_tRunJob_25.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_25.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_25++;

/**
 * [tRunJob_25 main ] stop
 */
	
	/**
	 * [tRunJob_25 end ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 

ok_Hash.put("tRunJob_25", true);
end_Hash.put("tRunJob_25", System.currentTimeMillis());




/**
 * [tRunJob_25 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_25 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_25";

	

 



/**
 * [tRunJob_25 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_25_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_26", false);
		start_Hash.put("tRunJob_26", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_26";

	
		int tos_count_tRunJob_26 = 0;
		
    	class BytesLimit65535_tRunJob_26{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_26().limitLog4jByte();


 



/**
 * [tRunJob_26 begin ] stop
 */
	
	/**
	 * [tRunJob_26 main ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	
	java.util.List<String> paraList_tRunJob_26 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_26.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_26.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_26.add("--father_node=tRunJob_26");
	      			
	        			paraList_tRunJob_26.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_26.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_26.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_26 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_26 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_26".equals(tRunJobName_tRunJob_26) && childResumePath_tRunJob_26 != null){
		paraList_tRunJob_26.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_26.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_26");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_26 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_26.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_26.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_26.put("RunDate", context.RunDate);
			paraList_tRunJob_26.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_26.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_26.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_26 = context.propertyNames();
		while (propertyNames_tRunJob_26.hasMoreElements()) {
			String key_tRunJob_26 = (String) propertyNames_tRunJob_26.nextElement();
			Object value_tRunJob_26 = (Object) context.get(key_tRunJob_26);
			if(value_tRunJob_26!=null) {  
				paraList_tRunJob_26.add("--context_param " + key_tRunJob_26 + "=" + value_tRunJob_26);
			} else {
				paraList_tRunJob_26.add("--context_param " + key_tRunJob_26 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_26 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewaggdata_0_1.ProcessStaging_StrongviewAggData childJob_tRunJob_26 = new zipcar_marketingdw.processstaging_strongviewaggdata_0_1.ProcessStaging_StrongviewAggData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_26 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_26) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_26 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_26 : talendDataSources_tRunJob_26
			        .entrySet()) {
	            dataSources_tRunJob_26.put(talendDataSourceEntry_tRunJob_26.getKey(),
	                    talendDataSourceEntry_tRunJob_26.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_26.setDataSources(dataSources_tRunJob_26);
	    }
		  
			childJob_tRunJob_26.parentContextMap = parentContextMap_tRunJob_26;
		  
		
		String[][] childReturn_tRunJob_26 = childJob_tRunJob_26.runJob((String[]) paraList_tRunJob_26.toArray(new String[paraList_tRunJob_26.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_26.getErrorCode());
			
	            
	    	if(childJob_tRunJob_26.getErrorCode() == null){
				globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getStatus() != null && ("failure").equals(childJob_tRunJob_26.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_26_CHILD_RETURN_CODE", childJob_tRunJob_26.getErrorCode());
		    }
		    if (childJob_tRunJob_26.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_26_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_26.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_26.getErrorCode() != null || ("failure").equals(childJob_tRunJob_26.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_26.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_26++;

/**
 * [tRunJob_26 main ] stop
 */
	
	/**
	 * [tRunJob_26 end ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 

ok_Hash.put("tRunJob_26", true);
end_Hash.put("tRunJob_26", System.currentTimeMillis());




/**
 * [tRunJob_26 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_26 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_26";

	

 



/**
 * [tRunJob_26 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_26_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_27", false);
		start_Hash.put("tRunJob_27", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_27";

	
		int tos_count_tRunJob_27 = 0;
		
    	class BytesLimit65535_tRunJob_27{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_27().limitLog4jByte();


 



/**
 * [tRunJob_27 begin ] stop
 */
	
	/**
	 * [tRunJob_27 main ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	
	java.util.List<String> paraList_tRunJob_27 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_27.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_27.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_27.add("--father_node=tRunJob_27");
	      			
	        			paraList_tRunJob_27.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_27.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_27.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_27 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_27 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_27".equals(tRunJobName_tRunJob_27) && childResumePath_tRunJob_27 != null){
		paraList_tRunJob_27.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_27.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_27");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_27 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_27.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_27.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_27.put("RunDate", context.RunDate);
			paraList_tRunJob_27.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_27.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_27.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_27 = context.propertyNames();
		while (propertyNames_tRunJob_27.hasMoreElements()) {
			String key_tRunJob_27 = (String) propertyNames_tRunJob_27.nextElement();
			Object value_tRunJob_27 = (Object) context.get(key_tRunJob_27);
			if(value_tRunJob_27!=null) {  
				paraList_tRunJob_27.add("--context_param " + key_tRunJob_27 + "=" + value_tRunJob_27);
			} else {
				paraList_tRunJob_27.add("--context_param " + key_tRunJob_27 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_27 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewconvdata_0_1.ProcessStaging_StrongviewConvData childJob_tRunJob_27 = new zipcar_marketingdw.processstaging_strongviewconvdata_0_1.ProcessStaging_StrongviewConvData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_27 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_27) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_27 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_27 : talendDataSources_tRunJob_27
			        .entrySet()) {
	            dataSources_tRunJob_27.put(talendDataSourceEntry_tRunJob_27.getKey(),
	                    talendDataSourceEntry_tRunJob_27.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_27.setDataSources(dataSources_tRunJob_27);
	    }
		  
			childJob_tRunJob_27.parentContextMap = parentContextMap_tRunJob_27;
		  
		
		String[][] childReturn_tRunJob_27 = childJob_tRunJob_27.runJob((String[]) paraList_tRunJob_27.toArray(new String[paraList_tRunJob_27.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_27.getErrorCode());
			
	            
	    	if(childJob_tRunJob_27.getErrorCode() == null){
				globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getStatus() != null && ("failure").equals(childJob_tRunJob_27.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_27_CHILD_RETURN_CODE", childJob_tRunJob_27.getErrorCode());
		    }
		    if (childJob_tRunJob_27.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_27_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_27.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_27.getErrorCode() != null || ("failure").equals(childJob_tRunJob_27.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_27.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_27++;

/**
 * [tRunJob_27 main ] stop
 */
	
	/**
	 * [tRunJob_27 end ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 

ok_Hash.put("tRunJob_27", true);
end_Hash.put("tRunJob_27", System.currentTimeMillis());




/**
 * [tRunJob_27 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_27 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_27";

	

 



/**
 * [tRunJob_27 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_27_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_28", false);
		start_Hash.put("tRunJob_28", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_28";

	
		int tos_count_tRunJob_28 = 0;
		
    	class BytesLimit65535_tRunJob_28{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_28().limitLog4jByte();


 



/**
 * [tRunJob_28 begin ] stop
 */
	
	/**
	 * [tRunJob_28 main ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	
	java.util.List<String> paraList_tRunJob_28 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_28.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_28.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_28.add("--father_node=tRunJob_28");
	      			
	        			paraList_tRunJob_28.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_28.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_28.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_28 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_28 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_28".equals(tRunJobName_tRunJob_28) && childResumePath_tRunJob_28 != null){
		paraList_tRunJob_28.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_28.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_28");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_28 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_28.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_28.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_28.put("RunDate", context.RunDate);
			paraList_tRunJob_28.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_28.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_28.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_28 = context.propertyNames();
		while (propertyNames_tRunJob_28.hasMoreElements()) {
			String key_tRunJob_28 = (String) propertyNames_tRunJob_28.nextElement();
			Object value_tRunJob_28 = (Object) context.get(key_tRunJob_28);
			if(value_tRunJob_28!=null) {  
				paraList_tRunJob_28.add("--context_param " + key_tRunJob_28 + "=" + value_tRunJob_28);
			} else {
				paraList_tRunJob_28.add("--context_param " + key_tRunJob_28 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_28 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewdevicedata_0_1.ProcessStaging_StrongviewDeviceData childJob_tRunJob_28 = new zipcar_marketingdw.processstaging_strongviewdevicedata_0_1.ProcessStaging_StrongviewDeviceData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_28 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_28) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_28 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_28 : talendDataSources_tRunJob_28
			        .entrySet()) {
	            dataSources_tRunJob_28.put(talendDataSourceEntry_tRunJob_28.getKey(),
	                    talendDataSourceEntry_tRunJob_28.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_28.setDataSources(dataSources_tRunJob_28);
	    }
		  
			childJob_tRunJob_28.parentContextMap = parentContextMap_tRunJob_28;
		  
		
		String[][] childReturn_tRunJob_28 = childJob_tRunJob_28.runJob((String[]) paraList_tRunJob_28.toArray(new String[paraList_tRunJob_28.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_28.getErrorCode());
			
	            
	    	if(childJob_tRunJob_28.getErrorCode() == null){
				globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getStatus() != null && ("failure").equals(childJob_tRunJob_28.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_28_CHILD_RETURN_CODE", childJob_tRunJob_28.getErrorCode());
		    }
		    if (childJob_tRunJob_28.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_28_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_28.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_28.getErrorCode() != null || ("failure").equals(childJob_tRunJob_28.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_28.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_28++;

/**
 * [tRunJob_28 main ] stop
 */
	
	/**
	 * [tRunJob_28 end ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 

ok_Hash.put("tRunJob_28", true);
end_Hash.put("tRunJob_28", System.currentTimeMillis());




/**
 * [tRunJob_28 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_28 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_28";

	

 



/**
 * [tRunJob_28 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_29", false);
		start_Hash.put("tRunJob_29", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_29";

	
		int tos_count_tRunJob_29 = 0;
		
    	class BytesLimit65535_tRunJob_29{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_29().limitLog4jByte();


 



/**
 * [tRunJob_29 begin ] stop
 */
	
	/**
	 * [tRunJob_29 main ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	
	java.util.List<String> paraList_tRunJob_29 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_29.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_29.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_29.add("--father_node=tRunJob_29");
	      			
	        			paraList_tRunJob_29.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_29.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_29.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_29 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_29 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_29".equals(tRunJobName_tRunJob_29) && childResumePath_tRunJob_29 != null){
		paraList_tRunJob_29.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_29.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_29");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_29 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_29.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_29.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_29.put("RunDate", context.RunDate);
			paraList_tRunJob_29.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_29.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_29.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_29 = context.propertyNames();
		while (propertyNames_tRunJob_29.hasMoreElements()) {
			String key_tRunJob_29 = (String) propertyNames_tRunJob_29.nextElement();
			Object value_tRunJob_29 = (Object) context.get(key_tRunJob_29);
			if(value_tRunJob_29!=null) {  
				paraList_tRunJob_29.add("--context_param " + key_tRunJob_29 + "=" + value_tRunJob_29);
			} else {
				paraList_tRunJob_29.add("--context_param " + key_tRunJob_29 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_29 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewdownloadfiles_0_1.ProcessStaging_StrongviewDownloadFiles childJob_tRunJob_29 = new zipcar_marketingdw.processstaging_strongviewdownloadfiles_0_1.ProcessStaging_StrongviewDownloadFiles();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_29 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_29) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_29 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_29 : talendDataSources_tRunJob_29
			        .entrySet()) {
	            dataSources_tRunJob_29.put(talendDataSourceEntry_tRunJob_29.getKey(),
	                    talendDataSourceEntry_tRunJob_29.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_29.setDataSources(dataSources_tRunJob_29);
	    }
		  
			childJob_tRunJob_29.parentContextMap = parentContextMap_tRunJob_29;
		  
		
		String[][] childReturn_tRunJob_29 = childJob_tRunJob_29.runJob((String[]) paraList_tRunJob_29.toArray(new String[paraList_tRunJob_29.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_29.getErrorCode());
			
	            
	    	if(childJob_tRunJob_29.getErrorCode() == null){
				globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getStatus() != null && ("failure").equals(childJob_tRunJob_29.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_29_CHILD_RETURN_CODE", childJob_tRunJob_29.getErrorCode());
		    }
		    if (childJob_tRunJob_29.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_29_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_29.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_29.getErrorCode() != null || ("failure").equals(childJob_tRunJob_29.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_29.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_29++;

/**
 * [tRunJob_29 main ] stop
 */
	
	/**
	 * [tRunJob_29 end ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 

ok_Hash.put("tRunJob_29", true);
end_Hash.put("tRunJob_29", System.currentTimeMillis());




/**
 * [tRunJob_29 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_29 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_29";

	

 



/**
 * [tRunJob_29 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_29_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_30", false);
		start_Hash.put("tRunJob_30", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_30";

	
		int tos_count_tRunJob_30 = 0;
		
    	class BytesLimit65535_tRunJob_30{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_30().limitLog4jByte();


 



/**
 * [tRunJob_30 begin ] stop
 */
	
	/**
	 * [tRunJob_30 main ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	
	java.util.List<String> paraList_tRunJob_30 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_30.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_30.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_30.add("--father_node=tRunJob_30");
	      			
	        			paraList_tRunJob_30.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_30.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_30.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_30 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_30 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_30".equals(tRunJobName_tRunJob_30) && childResumePath_tRunJob_30 != null){
		paraList_tRunJob_30.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_30.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_30");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_30 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_30.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_30.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_30.put("RunDate", context.RunDate);
			paraList_tRunJob_30.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_30.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_30.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_30 = context.propertyNames();
		while (propertyNames_tRunJob_30.hasMoreElements()) {
			String key_tRunJob_30 = (String) propertyNames_tRunJob_30.nextElement();
			Object value_tRunJob_30 = (Object) context.get(key_tRunJob_30);
			if(value_tRunJob_30!=null) {  
				paraList_tRunJob_30.add("--context_param " + key_tRunJob_30 + "=" + value_tRunJob_30);
			} else {
				paraList_tRunJob_30.add("--context_param " + key_tRunJob_30 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_30 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewsuccessdata_0_1.ProcessStaging_StrongviewSuccessData childJob_tRunJob_30 = new zipcar_marketingdw.processstaging_strongviewsuccessdata_0_1.ProcessStaging_StrongviewSuccessData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_30 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_30) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_30 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_30 : talendDataSources_tRunJob_30
			        .entrySet()) {
	            dataSources_tRunJob_30.put(talendDataSourceEntry_tRunJob_30.getKey(),
	                    talendDataSourceEntry_tRunJob_30.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_30.setDataSources(dataSources_tRunJob_30);
	    }
		  
			childJob_tRunJob_30.parentContextMap = parentContextMap_tRunJob_30;
		  
		
		String[][] childReturn_tRunJob_30 = childJob_tRunJob_30.runJob((String[]) paraList_tRunJob_30.toArray(new String[paraList_tRunJob_30.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_30.getErrorCode());
			
	            
	    	if(childJob_tRunJob_30.getErrorCode() == null){
				globalMap.put("tRunJob_30_CHILD_RETURN_CODE", childJob_tRunJob_30.getStatus() != null && ("failure").equals(childJob_tRunJob_30.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_30_CHILD_RETURN_CODE", childJob_tRunJob_30.getErrorCode());
		    }
		    if (childJob_tRunJob_30.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_30_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_30.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_30.getErrorCode() != null || ("failure").equals(childJob_tRunJob_30.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_30.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_30++;

/**
 * [tRunJob_30 main ] stop
 */
	
	/**
	 * [tRunJob_30 end ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 

ok_Hash.put("tRunJob_30", true);
end_Hash.put("tRunJob_30", System.currentTimeMillis());




/**
 * [tRunJob_30 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_30 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_30";

	

 



/**
 * [tRunJob_30 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_30_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_31", false);
		start_Hash.put("tRunJob_31", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_31";

	
		int tos_count_tRunJob_31 = 0;
		
    	class BytesLimit65535_tRunJob_31{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_31().limitLog4jByte();


 



/**
 * [tRunJob_31 begin ] stop
 */
	
	/**
	 * [tRunJob_31 main ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	
	java.util.List<String> paraList_tRunJob_31 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_31.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_31.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_31.add("--father_node=tRunJob_31");
	      			
	        			paraList_tRunJob_31.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_31.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_31.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_31 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_31 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_31".equals(tRunJobName_tRunJob_31) && childResumePath_tRunJob_31 != null){
		paraList_tRunJob_31.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_31.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_31");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_31 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_31.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_31.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_31.put("RunDate", context.RunDate);
			paraList_tRunJob_31.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_31.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_31.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_31 = context.propertyNames();
		while (propertyNames_tRunJob_31.hasMoreElements()) {
			String key_tRunJob_31 = (String) propertyNames_tRunJob_31.nextElement();
			Object value_tRunJob_31 = (Object) context.get(key_tRunJob_31);
			if(value_tRunJob_31!=null) {  
				paraList_tRunJob_31.add("--context_param " + key_tRunJob_31 + "=" + value_tRunJob_31);
			} else {
				paraList_tRunJob_31.add("--context_param " + key_tRunJob_31 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_31 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewprogexportdata_0_1.ProcessStaging_StrongviewProgExportData childJob_tRunJob_31 = new zipcar_marketingdw.processstaging_strongviewprogexportdata_0_1.ProcessStaging_StrongviewProgExportData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_31 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_31) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_31 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_31 : talendDataSources_tRunJob_31
			        .entrySet()) {
	            dataSources_tRunJob_31.put(talendDataSourceEntry_tRunJob_31.getKey(),
	                    talendDataSourceEntry_tRunJob_31.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_31.setDataSources(dataSources_tRunJob_31);
	    }
		  
			childJob_tRunJob_31.parentContextMap = parentContextMap_tRunJob_31;
		  
		
		String[][] childReturn_tRunJob_31 = childJob_tRunJob_31.runJob((String[]) paraList_tRunJob_31.toArray(new String[paraList_tRunJob_31.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_31.getErrorCode());
			
	            
	    	if(childJob_tRunJob_31.getErrorCode() == null){
				globalMap.put("tRunJob_31_CHILD_RETURN_CODE", childJob_tRunJob_31.getStatus() != null && ("failure").equals(childJob_tRunJob_31.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_31_CHILD_RETURN_CODE", childJob_tRunJob_31.getErrorCode());
		    }
		    if (childJob_tRunJob_31.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_31_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_31.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_31.getErrorCode() != null || ("failure").equals(childJob_tRunJob_31.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_31.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_31++;

/**
 * [tRunJob_31 main ] stop
 */
	
	/**
	 * [tRunJob_31 end ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 

ok_Hash.put("tRunJob_31", true);
end_Hash.put("tRunJob_31", System.currentTimeMillis());




/**
 * [tRunJob_31 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_31 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_31";

	

 



/**
 * [tRunJob_31 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_31_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_32", false);
		start_Hash.put("tRunJob_32", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_32";

	
		int tos_count_tRunJob_32 = 0;
		
    	class BytesLimit65535_tRunJob_32{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_32().limitLog4jByte();


 



/**
 * [tRunJob_32 begin ] stop
 */
	
	/**
	 * [tRunJob_32 main ] start
	 */

	

	
	
	currentComponent="tRunJob_32";

	
	java.util.List<String> paraList_tRunJob_32 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_32.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_32.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_32.add("--father_node=tRunJob_32");
	      			
	        			paraList_tRunJob_32.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_32.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_32.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_32 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_32 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_32".equals(tRunJobName_tRunJob_32) && childResumePath_tRunJob_32 != null){
		paraList_tRunJob_32.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_32.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_32");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_32 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_32.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_32.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_32.put("RunDate", context.RunDate);
			paraList_tRunJob_32.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_32.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_32.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_32 = context.propertyNames();
		while (propertyNames_tRunJob_32.hasMoreElements()) {
			String key_tRunJob_32 = (String) propertyNames_tRunJob_32.nextElement();
			Object value_tRunJob_32 = (Object) context.get(key_tRunJob_32);
			if(value_tRunJob_32!=null) {  
				paraList_tRunJob_32.add("--context_param " + key_tRunJob_32 + "=" + value_tRunJob_32);
			} else {
				paraList_tRunJob_32.add("--context_param " + key_tRunJob_32 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_32 = null;

	
	
		zipcar_marketingdw.processstaging_strongviewprogramfiles_0_1.ProcessStaging_StrongviewProgramFiles childJob_tRunJob_32 = new zipcar_marketingdw.processstaging_strongviewprogramfiles_0_1.ProcessStaging_StrongviewProgramFiles();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_32 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_32) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_32 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_32 : talendDataSources_tRunJob_32
			        .entrySet()) {
	            dataSources_tRunJob_32.put(talendDataSourceEntry_tRunJob_32.getKey(),
	                    talendDataSourceEntry_tRunJob_32.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_32.setDataSources(dataSources_tRunJob_32);
	    }
		  
			childJob_tRunJob_32.parentContextMap = parentContextMap_tRunJob_32;
		  
		
		String[][] childReturn_tRunJob_32 = childJob_tRunJob_32.runJob((String[]) paraList_tRunJob_32.toArray(new String[paraList_tRunJob_32.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_32.getErrorCode());
			
	            
	    	if(childJob_tRunJob_32.getErrorCode() == null){
				globalMap.put("tRunJob_32_CHILD_RETURN_CODE", childJob_tRunJob_32.getStatus() != null && ("failure").equals(childJob_tRunJob_32.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_32_CHILD_RETURN_CODE", childJob_tRunJob_32.getErrorCode());
		    }
		    if (childJob_tRunJob_32.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_32_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_32.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_32.getErrorCode() != null || ("failure").equals(childJob_tRunJob_32.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_32.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_32++;

/**
 * [tRunJob_32 main ] stop
 */
	
	/**
	 * [tRunJob_32 end ] start
	 */

	

	
	
	currentComponent="tRunJob_32";

	

 

ok_Hash.put("tRunJob_32", true);
end_Hash.put("tRunJob_32", System.currentTimeMillis());




/**
 * [tRunJob_32 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_32 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_32";

	

 



/**
 * [tRunJob_32 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_32_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_33", false);
		start_Hash.put("tRunJob_33", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_33";

	
		int tos_count_tRunJob_33 = 0;
		
    	class BytesLimit65535_tRunJob_33{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_33().limitLog4jByte();


 



/**
 * [tRunJob_33 begin ] stop
 */
	
	/**
	 * [tRunJob_33 main ] start
	 */

	

	
	
	currentComponent="tRunJob_33";

	
	java.util.List<String> paraList_tRunJob_33 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_33.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_33.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_33.add("--father_node=tRunJob_33");
	      			
	        			paraList_tRunJob_33.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_33.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_33.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_33 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_33 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_33".equals(tRunJobName_tRunJob_33) && childResumePath_tRunJob_33 != null){
		paraList_tRunJob_33.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_33.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_33");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_33 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_33.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_33.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_33.put("RunDate", context.RunDate);
			paraList_tRunJob_33.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_33.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_33.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_33 = context.propertyNames();
		while (propertyNames_tRunJob_33.hasMoreElements()) {
			String key_tRunJob_33 = (String) propertyNames_tRunJob_33.nextElement();
			Object value_tRunJob_33 = (Object) context.get(key_tRunJob_33);
			if(value_tRunJob_33!=null) {  
				paraList_tRunJob_33.add("--context_param " + key_tRunJob_33 + "=" + value_tRunJob_33);
			} else {
				paraList_tRunJob_33.add("--context_param " + key_tRunJob_33 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_33 = null;

	
	
		zipcar_marketingdw.processstaging_waiverplans_0_1.ProcessStaging_WaiverPlans childJob_tRunJob_33 = new zipcar_marketingdw.processstaging_waiverplans_0_1.ProcessStaging_WaiverPlans();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_33 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_33) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_33 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_33 : talendDataSources_tRunJob_33
			        .entrySet()) {
	            dataSources_tRunJob_33.put(talendDataSourceEntry_tRunJob_33.getKey(),
	                    talendDataSourceEntry_tRunJob_33.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_33.setDataSources(dataSources_tRunJob_33);
	    }
		  
			childJob_tRunJob_33.parentContextMap = parentContextMap_tRunJob_33;
		  
		
		String[][] childReturn_tRunJob_33 = childJob_tRunJob_33.runJob((String[]) paraList_tRunJob_33.toArray(new String[paraList_tRunJob_33.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_33.getErrorCode());
			
	            
	    	if(childJob_tRunJob_33.getErrorCode() == null){
				globalMap.put("tRunJob_33_CHILD_RETURN_CODE", childJob_tRunJob_33.getStatus() != null && ("failure").equals(childJob_tRunJob_33.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_33_CHILD_RETURN_CODE", childJob_tRunJob_33.getErrorCode());
		    }
		    if (childJob_tRunJob_33.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_33_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_33.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_33.getErrorCode() != null || ("failure").equals(childJob_tRunJob_33.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_33.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_33++;

/**
 * [tRunJob_33 main ] stop
 */
	
	/**
	 * [tRunJob_33 end ] start
	 */

	

	
	
	currentComponent="tRunJob_33";

	

 

ok_Hash.put("tRunJob_33", true);
end_Hash.put("tRunJob_33", System.currentTimeMillis());




/**
 * [tRunJob_33 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_33 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_33";

	

 



/**
 * [tRunJob_33 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_33_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_34", false);
		start_Hash.put("tRunJob_34", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_34";

	
		int tos_count_tRunJob_34 = 0;
		
    	class BytesLimit65535_tRunJob_34{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_34().limitLog4jByte();


 



/**
 * [tRunJob_34 begin ] stop
 */
	
	/**
	 * [tRunJob_34 main ] start
	 */

	

	
	
	currentComponent="tRunJob_34";

	
	java.util.List<String> paraList_tRunJob_34 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_34.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_34.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_34.add("--father_node=tRunJob_34");
	      			
	        			paraList_tRunJob_34.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_34.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_34.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_34 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_34 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_34".equals(tRunJobName_tRunJob_34) && childResumePath_tRunJob_34 != null){
		paraList_tRunJob_34.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_34.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_34");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_34 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_34.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_34.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_34.put("RunDate", context.RunDate);
			paraList_tRunJob_34.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_34.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_34.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_34 = context.propertyNames();
		while (propertyNames_tRunJob_34.hasMoreElements()) {
			String key_tRunJob_34 = (String) propertyNames_tRunJob_34.nextElement();
			Object value_tRunJob_34 = (Object) context.get(key_tRunJob_34);
			if(value_tRunJob_34!=null) {  
				paraList_tRunJob_34.add("--context_param " + key_tRunJob_34 + "=" + value_tRunJob_34);
			} else {
				paraList_tRunJob_34.add("--context_param " + key_tRunJob_34 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_34 = null;

	
	
		zipcar_marketingdw.processstaging_waivers_0_1.ProcessStaging_Waivers childJob_tRunJob_34 = new zipcar_marketingdw.processstaging_waivers_0_1.ProcessStaging_Waivers();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_34 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_34) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_34 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_34 : talendDataSources_tRunJob_34
			        .entrySet()) {
	            dataSources_tRunJob_34.put(talendDataSourceEntry_tRunJob_34.getKey(),
	                    talendDataSourceEntry_tRunJob_34.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_34.setDataSources(dataSources_tRunJob_34);
	    }
		  
			childJob_tRunJob_34.parentContextMap = parentContextMap_tRunJob_34;
		  
		
		String[][] childReturn_tRunJob_34 = childJob_tRunJob_34.runJob((String[]) paraList_tRunJob_34.toArray(new String[paraList_tRunJob_34.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_34.getErrorCode());
			
	            
	    	if(childJob_tRunJob_34.getErrorCode() == null){
				globalMap.put("tRunJob_34_CHILD_RETURN_CODE", childJob_tRunJob_34.getStatus() != null && ("failure").equals(childJob_tRunJob_34.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_34_CHILD_RETURN_CODE", childJob_tRunJob_34.getErrorCode());
		    }
		    if (childJob_tRunJob_34.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_34_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_34.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_34.getErrorCode() != null || ("failure").equals(childJob_tRunJob_34.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_34.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_34++;

/**
 * [tRunJob_34 main ] stop
 */
	
	/**
	 * [tRunJob_34 end ] start
	 */

	

	
	
	currentComponent="tRunJob_34";

	

 

ok_Hash.put("tRunJob_34", true);
end_Hash.put("tRunJob_34", System.currentTimeMillis());




/**
 * [tRunJob_34 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_34 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_34";

	

 



/**
 * [tRunJob_34 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_34_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_35", false);
		start_Hash.put("tRunJob_35", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_35";

	
		int tos_count_tRunJob_35 = 0;
		
    	class BytesLimit65535_tRunJob_35{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_35().limitLog4jByte();


 



/**
 * [tRunJob_35 begin ] stop
 */
	
	/**
	 * [tRunJob_35 main ] start
	 */

	

	
	
	currentComponent="tRunJob_35";

	
	java.util.List<String> paraList_tRunJob_35 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_35.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_35.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_35.add("--father_node=tRunJob_35");
	      			
	        			paraList_tRunJob_35.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_35.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_35.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_35 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_35 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_35".equals(tRunJobName_tRunJob_35) && childResumePath_tRunJob_35 != null){
		paraList_tRunJob_35.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_35.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_35");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_35 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_35.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_35.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_35.put("RunDate", context.RunDate);
			paraList_tRunJob_35.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_35.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_35.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_35 = context.propertyNames();
		while (propertyNames_tRunJob_35.hasMoreElements()) {
			String key_tRunJob_35 = (String) propertyNames_tRunJob_35.nextElement();
			Object value_tRunJob_35 = (Object) context.get(key_tRunJob_35);
			if(value_tRunJob_35!=null) {  
				paraList_tRunJob_35.add("--context_param " + key_tRunJob_35 + "=" + value_tRunJob_35);
			} else {
				paraList_tRunJob_35.add("--context_param " + key_tRunJob_35 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_35 = null;

	
	
		zipcar_marketingdw.processstaging_membersext_0_1.ProcessStaging_MembersExt childJob_tRunJob_35 = new zipcar_marketingdw.processstaging_membersext_0_1.ProcessStaging_MembersExt();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_35 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_35) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_35 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_35 : talendDataSources_tRunJob_35
			        .entrySet()) {
	            dataSources_tRunJob_35.put(talendDataSourceEntry_tRunJob_35.getKey(),
	                    talendDataSourceEntry_tRunJob_35.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_35.setDataSources(dataSources_tRunJob_35);
	    }
		  
			childJob_tRunJob_35.parentContextMap = parentContextMap_tRunJob_35;
		  
		
		String[][] childReturn_tRunJob_35 = childJob_tRunJob_35.runJob((String[]) paraList_tRunJob_35.toArray(new String[paraList_tRunJob_35.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_35.getErrorCode());
			
	            
	    	if(childJob_tRunJob_35.getErrorCode() == null){
				globalMap.put("tRunJob_35_CHILD_RETURN_CODE", childJob_tRunJob_35.getStatus() != null && ("failure").equals(childJob_tRunJob_35.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_35_CHILD_RETURN_CODE", childJob_tRunJob_35.getErrorCode());
		    }
		    if (childJob_tRunJob_35.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_35_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_35.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_35.getErrorCode() != null || ("failure").equals(childJob_tRunJob_35.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_35.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_35++;

/**
 * [tRunJob_35 main ] stop
 */
	
	/**
	 * [tRunJob_35 end ] start
	 */

	

	
	
	currentComponent="tRunJob_35";

	

 

ok_Hash.put("tRunJob_35", true);
end_Hash.put("tRunJob_35", System.currentTimeMillis());




/**
 * [tRunJob_35 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_35 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_35";

	

 



/**
 * [tRunJob_35 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_35_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_36", false);
		start_Hash.put("tRunJob_36", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_36";

	
		int tos_count_tRunJob_36 = 0;
		
    	class BytesLimit65535_tRunJob_36{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_36().limitLog4jByte();


 



/**
 * [tRunJob_36 begin ] stop
 */
	
	/**
	 * [tRunJob_36 main ] start
	 */

	

	
	
	currentComponent="tRunJob_36";

	
	java.util.List<String> paraList_tRunJob_36 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_36.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_36.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_36.add("--father_node=tRunJob_36");
	      			
	        			paraList_tRunJob_36.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_36.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_36.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_36 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_36 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_36".equals(tRunJobName_tRunJob_36) && childResumePath_tRunJob_36 != null){
		paraList_tRunJob_36.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_36.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_36");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_36 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_36.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_36.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_36.put("RunDate", context.RunDate);
			paraList_tRunJob_36.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_36.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_36.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_36 = context.propertyNames();
		while (propertyNames_tRunJob_36.hasMoreElements()) {
			String key_tRunJob_36 = (String) propertyNames_tRunJob_36.nextElement();
			Object value_tRunJob_36 = (Object) context.get(key_tRunJob_36);
			if(value_tRunJob_36!=null) {  
				paraList_tRunJob_36.add("--context_param " + key_tRunJob_36 + "=" + value_tRunJob_36);
			} else {
				paraList_tRunJob_36.add("--context_param " + key_tRunJob_36 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_36 = null;

	
	
		zipcar_marketingdw.processstaging_corporateapplications_0_1.ProcessStaging_CorporateApplications childJob_tRunJob_36 = new zipcar_marketingdw.processstaging_corporateapplications_0_1.ProcessStaging_CorporateApplications();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_36 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_36) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_36 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_36 : talendDataSources_tRunJob_36
			        .entrySet()) {
	            dataSources_tRunJob_36.put(talendDataSourceEntry_tRunJob_36.getKey(),
	                    talendDataSourceEntry_tRunJob_36.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_36.setDataSources(dataSources_tRunJob_36);
	    }
		  
			childJob_tRunJob_36.parentContextMap = parentContextMap_tRunJob_36;
		  
		
		String[][] childReturn_tRunJob_36 = childJob_tRunJob_36.runJob((String[]) paraList_tRunJob_36.toArray(new String[paraList_tRunJob_36.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_36.getErrorCode());
			
	            
	    	if(childJob_tRunJob_36.getErrorCode() == null){
				globalMap.put("tRunJob_36_CHILD_RETURN_CODE", childJob_tRunJob_36.getStatus() != null && ("failure").equals(childJob_tRunJob_36.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_36_CHILD_RETURN_CODE", childJob_tRunJob_36.getErrorCode());
		    }
		    if (childJob_tRunJob_36.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_36_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_36.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_36.getErrorCode() != null || ("failure").equals(childJob_tRunJob_36.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_36.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_36++;

/**
 * [tRunJob_36 main ] stop
 */
	
	/**
	 * [tRunJob_36 end ] start
	 */

	

	
	
	currentComponent="tRunJob_36";

	

 

ok_Hash.put("tRunJob_36", true);
end_Hash.put("tRunJob_36", System.currentTimeMillis());




/**
 * [tRunJob_36 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_36 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_36";

	

 



/**
 * [tRunJob_36 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_36_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_37Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_37_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_37 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_37", false);
		start_Hash.put("tRunJob_37", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_37";

	
		int tos_count_tRunJob_37 = 0;
		
    	class BytesLimit65535_tRunJob_37{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_37().limitLog4jByte();


 



/**
 * [tRunJob_37 begin ] stop
 */
	
	/**
	 * [tRunJob_37 main ] start
	 */

	

	
	
	currentComponent="tRunJob_37";

	
	java.util.List<String> paraList_tRunJob_37 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_37.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_37.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_37.add("--father_node=tRunJob_37");
	      			
	        			paraList_tRunJob_37.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_37.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_37.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_37 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_37 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_37".equals(tRunJobName_tRunJob_37) && childResumePath_tRunJob_37 != null){
		paraList_tRunJob_37.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_37.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_37");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_37 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_37.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_37.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_37.put("RunDate", context.RunDate);
			paraList_tRunJob_37.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_37.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_37.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_37 = context.propertyNames();
		while (propertyNames_tRunJob_37.hasMoreElements()) {
			String key_tRunJob_37 = (String) propertyNames_tRunJob_37.nextElement();
			Object value_tRunJob_37 = (Object) context.get(key_tRunJob_37);
			if(value_tRunJob_37!=null) {  
				paraList_tRunJob_37.add("--context_param " + key_tRunJob_37 + "=" + value_tRunJob_37);
			} else {
				paraList_tRunJob_37.add("--context_param " + key_tRunJob_37 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_37 = null;

	
	
		zipcar_marketingdw.processstaging_exchangerates_0_1.ProcessStaging_ExchangeRates childJob_tRunJob_37 = new zipcar_marketingdw.processstaging_exchangerates_0_1.ProcessStaging_ExchangeRates();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_37 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_37) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_37 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_37 : talendDataSources_tRunJob_37
			        .entrySet()) {
	            dataSources_tRunJob_37.put(talendDataSourceEntry_tRunJob_37.getKey(),
	                    talendDataSourceEntry_tRunJob_37.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_37.setDataSources(dataSources_tRunJob_37);
	    }
		  
			childJob_tRunJob_37.parentContextMap = parentContextMap_tRunJob_37;
		  
		
		String[][] childReturn_tRunJob_37 = childJob_tRunJob_37.runJob((String[]) paraList_tRunJob_37.toArray(new String[paraList_tRunJob_37.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_37.getErrorCode());
			
	            
	    	if(childJob_tRunJob_37.getErrorCode() == null){
				globalMap.put("tRunJob_37_CHILD_RETURN_CODE", childJob_tRunJob_37.getStatus() != null && ("failure").equals(childJob_tRunJob_37.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_37_CHILD_RETURN_CODE", childJob_tRunJob_37.getErrorCode());
		    }
		    if (childJob_tRunJob_37.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_37_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_37.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_37.getErrorCode() != null || ("failure").equals(childJob_tRunJob_37.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_37.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_37++;

/**
 * [tRunJob_37 main ] stop
 */
	
	/**
	 * [tRunJob_37 end ] start
	 */

	

	
	
	currentComponent="tRunJob_37";

	

 

ok_Hash.put("tRunJob_37", true);
end_Hash.put("tRunJob_37", System.currentTimeMillis());




/**
 * [tRunJob_37 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_37 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_37";

	

 



/**
 * [tRunJob_37 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_37_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_38Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_38_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_38 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_38", false);
		start_Hash.put("tRunJob_38", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_38";

	
		int tos_count_tRunJob_38 = 0;
		
    	class BytesLimit65535_tRunJob_38{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_38().limitLog4jByte();


 



/**
 * [tRunJob_38 begin ] stop
 */
	
	/**
	 * [tRunJob_38 main ] start
	 */

	

	
	
	currentComponent="tRunJob_38";

	
	java.util.List<String> paraList_tRunJob_38 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_38.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_38.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_38.add("--father_node=tRunJob_38");
	      			
	        			paraList_tRunJob_38.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_38.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_38.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_38 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_38 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_38".equals(tRunJobName_tRunJob_38) && childResumePath_tRunJob_38 != null){
		paraList_tRunJob_38.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_38.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_38");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_38 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_38.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_38.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_38.put("RunDate", context.RunDate);
			paraList_tRunJob_38.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_38.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_38.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_38 = context.propertyNames();
		while (propertyNames_tRunJob_38.hasMoreElements()) {
			String key_tRunJob_38 = (String) propertyNames_tRunJob_38.nextElement();
			Object value_tRunJob_38 = (Object) context.get(key_tRunJob_38);
			if(value_tRunJob_38!=null) {  
				paraList_tRunJob_38.add("--context_param " + key_tRunJob_38 + "=" + value_tRunJob_38);
			} else {
				paraList_tRunJob_38.add("--context_param " + key_tRunJob_38 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_38 = null;

	
	
		zipcar_marketingdw.processstaging_registrationsessionhistories_0_1.ProcessStaging_RegistrationSessionHistories childJob_tRunJob_38 = new zipcar_marketingdw.processstaging_registrationsessionhistories_0_1.ProcessStaging_RegistrationSessionHistories();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_38 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_38) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_38 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_38 : talendDataSources_tRunJob_38
			        .entrySet()) {
	            dataSources_tRunJob_38.put(talendDataSourceEntry_tRunJob_38.getKey(),
	                    talendDataSourceEntry_tRunJob_38.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_38.setDataSources(dataSources_tRunJob_38);
	    }
		  
			childJob_tRunJob_38.parentContextMap = parentContextMap_tRunJob_38;
		  
		
		String[][] childReturn_tRunJob_38 = childJob_tRunJob_38.runJob((String[]) paraList_tRunJob_38.toArray(new String[paraList_tRunJob_38.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_38.getErrorCode());
			
	            
	    	if(childJob_tRunJob_38.getErrorCode() == null){
				globalMap.put("tRunJob_38_CHILD_RETURN_CODE", childJob_tRunJob_38.getStatus() != null && ("failure").equals(childJob_tRunJob_38.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_38_CHILD_RETURN_CODE", childJob_tRunJob_38.getErrorCode());
		    }
		    if (childJob_tRunJob_38.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_38_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_38.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_38.getErrorCode() != null || ("failure").equals(childJob_tRunJob_38.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_38.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_38++;

/**
 * [tRunJob_38 main ] stop
 */
	
	/**
	 * [tRunJob_38 end ] start
	 */

	

	
	
	currentComponent="tRunJob_38";

	

 

ok_Hash.put("tRunJob_38", true);
end_Hash.put("tRunJob_38", System.currentTimeMillis());




/**
 * [tRunJob_38 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_38 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_38";

	

 



/**
 * [tRunJob_38 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_38_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_39Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_39_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_39 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_39", false);
		start_Hash.put("tRunJob_39", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_39";

	
		int tos_count_tRunJob_39 = 0;
		
    	class BytesLimit65535_tRunJob_39{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_39().limitLog4jByte();


 



/**
 * [tRunJob_39 begin ] stop
 */
	
	/**
	 * [tRunJob_39 main ] start
	 */

	

	
	
	currentComponent="tRunJob_39";

	
	java.util.List<String> paraList_tRunJob_39 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_39.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_39.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_39.add("--father_node=tRunJob_39");
	      			
	        			paraList_tRunJob_39.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_39.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_39.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_39 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_39 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_39".equals(tRunJobName_tRunJob_39) && childResumePath_tRunJob_39 != null){
		paraList_tRunJob_39.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_39.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_39");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_39 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_39.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_39.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_39.put("RunDate", context.RunDate);
			paraList_tRunJob_39.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_39.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_39.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_39 = context.propertyNames();
		while (propertyNames_tRunJob_39.hasMoreElements()) {
			String key_tRunJob_39 = (String) propertyNames_tRunJob_39.nextElement();
			Object value_tRunJob_39 = (Object) context.get(key_tRunJob_39);
			if(value_tRunJob_39!=null) {  
				paraList_tRunJob_39.add("--context_param " + key_tRunJob_39 + "=" + value_tRunJob_39);
			} else {
				paraList_tRunJob_39.add("--context_param " + key_tRunJob_39 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_39 = null;

	
	
		zipcar_marketingdw.processstaging_wexfueldata_0_1.ProcessStaging_WexFuelData childJob_tRunJob_39 = new zipcar_marketingdw.processstaging_wexfueldata_0_1.ProcessStaging_WexFuelData();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_39 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_39) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_39 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_39 : talendDataSources_tRunJob_39
			        .entrySet()) {
	            dataSources_tRunJob_39.put(talendDataSourceEntry_tRunJob_39.getKey(),
	                    talendDataSourceEntry_tRunJob_39.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_39.setDataSources(dataSources_tRunJob_39);
	    }
		  
			childJob_tRunJob_39.parentContextMap = parentContextMap_tRunJob_39;
		  
		
		String[][] childReturn_tRunJob_39 = childJob_tRunJob_39.runJob((String[]) paraList_tRunJob_39.toArray(new String[paraList_tRunJob_39.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_39.getErrorCode());
			
	            
	    	if(childJob_tRunJob_39.getErrorCode() == null){
				globalMap.put("tRunJob_39_CHILD_RETURN_CODE", childJob_tRunJob_39.getStatus() != null && ("failure").equals(childJob_tRunJob_39.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_39_CHILD_RETURN_CODE", childJob_tRunJob_39.getErrorCode());
		    }
		    if (childJob_tRunJob_39.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_39_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_39.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_39.getErrorCode() != null || ("failure").equals(childJob_tRunJob_39.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_39.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_39++;

/**
 * [tRunJob_39 main ] stop
 */
	
	/**
	 * [tRunJob_39 end ] start
	 */

	

	
	
	currentComponent="tRunJob_39";

	

 

ok_Hash.put("tRunJob_39", true);
end_Hash.put("tRunJob_39", System.currentTimeMillis());




/**
 * [tRunJob_39 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_39 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_39";

	

 



/**
 * [tRunJob_39 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_39_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_40Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_40_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_40 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_40", false);
		start_Hash.put("tRunJob_40", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_40";

	
		int tos_count_tRunJob_40 = 0;
		
    	class BytesLimit65535_tRunJob_40{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_40().limitLog4jByte();


 



/**
 * [tRunJob_40 begin ] stop
 */
	
	/**
	 * [tRunJob_40 main ] start
	 */

	

	
	
	currentComponent="tRunJob_40";

	
	java.util.List<String> paraList_tRunJob_40 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_40.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_40.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_40.add("--father_node=tRunJob_40");
	      			
	        			paraList_tRunJob_40.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_40.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_40.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_40 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_40 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_40".equals(tRunJobName_tRunJob_40) && childResumePath_tRunJob_40 != null){
		paraList_tRunJob_40.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_40.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_40");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_40 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_40.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_40.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_40.put("RunDate", context.RunDate);
			paraList_tRunJob_40.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_40.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_40.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_40 = context.propertyNames();
		while (propertyNames_tRunJob_40.hasMoreElements()) {
			String key_tRunJob_40 = (String) propertyNames_tRunJob_40.nextElement();
			Object value_tRunJob_40 = (Object) context.get(key_tRunJob_40);
			if(value_tRunJob_40!=null) {  
				paraList_tRunJob_40.add("--context_param " + key_tRunJob_40 + "=" + value_tRunJob_40);
			} else {
				paraList_tRunJob_40.add("--context_param " + key_tRunJob_40 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_40 = null;

	
	
		zipcar_marketingdw.processstaging_zones_0_1.ProcessStaging_Zones childJob_tRunJob_40 = new zipcar_marketingdw.processstaging_zones_0_1.ProcessStaging_Zones();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_40 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_40) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_40 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_40 : talendDataSources_tRunJob_40
			        .entrySet()) {
	            dataSources_tRunJob_40.put(talendDataSourceEntry_tRunJob_40.getKey(),
	                    talendDataSourceEntry_tRunJob_40.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_40.setDataSources(dataSources_tRunJob_40);
	    }
		  
			childJob_tRunJob_40.parentContextMap = parentContextMap_tRunJob_40;
		  
		
		String[][] childReturn_tRunJob_40 = childJob_tRunJob_40.runJob((String[]) paraList_tRunJob_40.toArray(new String[paraList_tRunJob_40.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_40.getErrorCode());
			
	            
	    	if(childJob_tRunJob_40.getErrorCode() == null){
				globalMap.put("tRunJob_40_CHILD_RETURN_CODE", childJob_tRunJob_40.getStatus() != null && ("failure").equals(childJob_tRunJob_40.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_40_CHILD_RETURN_CODE", childJob_tRunJob_40.getErrorCode());
		    }
		    if (childJob_tRunJob_40.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_40_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_40.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_40.getErrorCode() != null || ("failure").equals(childJob_tRunJob_40.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_40.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_40++;

/**
 * [tRunJob_40 main ] stop
 */
	
	/**
	 * [tRunJob_40 end ] start
	 */

	

	
	
	currentComponent="tRunJob_40";

	

 

ok_Hash.put("tRunJob_40", true);
end_Hash.put("tRunJob_40", System.currentTimeMillis());




/**
 * [tRunJob_40 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_40 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_40";

	

 



/**
 * [tRunJob_40 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_40_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_42Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_42_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_42 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_42", false);
		start_Hash.put("tRunJob_42", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_42";

	
		int tos_count_tRunJob_42 = 0;
		
    	class BytesLimit65535_tRunJob_42{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_42().limitLog4jByte();


 



/**
 * [tRunJob_42 begin ] stop
 */
	
	/**
	 * [tRunJob_42 main ] start
	 */

	

	
	
	currentComponent="tRunJob_42";

	
	java.util.List<String> paraList_tRunJob_42 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_42.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_42.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_42.add("--father_node=tRunJob_42");
	      			
	        			paraList_tRunJob_42.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_42.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_42.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_42 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_42 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_42".equals(tRunJobName_tRunJob_42) && childResumePath_tRunJob_42 != null){
		paraList_tRunJob_42.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_42.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_42");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_42 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_42.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_42.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_42.put("RunDate", context.RunDate);
			paraList_tRunJob_42.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_42.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_42.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_42 = context.propertyNames();
		while (propertyNames_tRunJob_42.hasMoreElements()) {
			String key_tRunJob_42 = (String) propertyNames_tRunJob_42.nextElement();
			Object value_tRunJob_42 = (Object) context.get(key_tRunJob_42);
			if(value_tRunJob_42!=null) {  
				paraList_tRunJob_42.add("--context_param " + key_tRunJob_42 + "=" + value_tRunJob_42);
			} else {
				paraList_tRunJob_42.add("--context_param " + key_tRunJob_42 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_42 = null;

	
	
		zipcar_marketingdw.processstaging_vehicles_np_0_1.ProcessStaging_Vehicles_NP childJob_tRunJob_42 = new zipcar_marketingdw.processstaging_vehicles_np_0_1.ProcessStaging_Vehicles_NP();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_42 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_42) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_42 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_42 : talendDataSources_tRunJob_42
			        .entrySet()) {
	            dataSources_tRunJob_42.put(talendDataSourceEntry_tRunJob_42.getKey(),
	                    talendDataSourceEntry_tRunJob_42.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_42.setDataSources(dataSources_tRunJob_42);
	    }
		  
			childJob_tRunJob_42.parentContextMap = parentContextMap_tRunJob_42;
		  
		
		String[][] childReturn_tRunJob_42 = childJob_tRunJob_42.runJob((String[]) paraList_tRunJob_42.toArray(new String[paraList_tRunJob_42.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_42.getErrorCode());
			
	            
	    	if(childJob_tRunJob_42.getErrorCode() == null){
				globalMap.put("tRunJob_42_CHILD_RETURN_CODE", childJob_tRunJob_42.getStatus() != null && ("failure").equals(childJob_tRunJob_42.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_42_CHILD_RETURN_CODE", childJob_tRunJob_42.getErrorCode());
		    }
		    if (childJob_tRunJob_42.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_42_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_42.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_42.getErrorCode() != null || ("failure").equals(childJob_tRunJob_42.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_42.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_42++;

/**
 * [tRunJob_42 main ] stop
 */
	
	/**
	 * [tRunJob_42 end ] start
	 */

	

	
	
	currentComponent="tRunJob_42";

	

 

ok_Hash.put("tRunJob_42", true);
end_Hash.put("tRunJob_42", System.currentTimeMillis());




/**
 * [tRunJob_42 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRunJob_42:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tRunJob_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_42 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_42";

	

 



/**
 * [tRunJob_42 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_42_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_15", false);
		start_Hash.put("tRunJob_15", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_15";

	
		int tos_count_tRunJob_15 = 0;
		
    	class BytesLimit65535_tRunJob_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_15().limitLog4jByte();


 



/**
 * [tRunJob_15 begin ] stop
 */
	
	/**
	 * [tRunJob_15 main ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	
	java.util.List<String> paraList_tRunJob_15 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_15.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_15.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_15.add("--father_node=tRunJob_15");
	      			
	        			paraList_tRunJob_15.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_15.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_15.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_15 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_15 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_15".equals(tRunJobName_tRunJob_15) && childResumePath_tRunJob_15 != null){
		paraList_tRunJob_15.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_15.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_15");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_15 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_15.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_15.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_15.put("RunDate", context.RunDate);
			paraList_tRunJob_15.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_15.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_15.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_15 = context.propertyNames();
		while (propertyNames_tRunJob_15.hasMoreElements()) {
			String key_tRunJob_15 = (String) propertyNames_tRunJob_15.nextElement();
			Object value_tRunJob_15 = (Object) context.get(key_tRunJob_15);
			if(value_tRunJob_15!=null) {  
				paraList_tRunJob_15.add("--context_param " + key_tRunJob_15 + "=" + value_tRunJob_15);
			} else {
				paraList_tRunJob_15.add("--context_param " + key_tRunJob_15 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_15 = null;

	
	
		zipcar_marketingdw.processstaging_vehicles_0_1.ProcessStaging_Vehicles childJob_tRunJob_15 = new zipcar_marketingdw.processstaging_vehicles_0_1.ProcessStaging_Vehicles();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_15 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_15) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_15 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_15 : talendDataSources_tRunJob_15
			        .entrySet()) {
	            dataSources_tRunJob_15.put(talendDataSourceEntry_tRunJob_15.getKey(),
	                    talendDataSourceEntry_tRunJob_15.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_15.setDataSources(dataSources_tRunJob_15);
	    }
		  
			childJob_tRunJob_15.parentContextMap = parentContextMap_tRunJob_15;
		  
		
		String[][] childReturn_tRunJob_15 = childJob_tRunJob_15.runJob((String[]) paraList_tRunJob_15.toArray(new String[paraList_tRunJob_15.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_15.getErrorCode());
			
	            
	    	if(childJob_tRunJob_15.getErrorCode() == null){
				globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getStatus() != null && ("failure").equals(childJob_tRunJob_15.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_15_CHILD_RETURN_CODE", childJob_tRunJob_15.getErrorCode());
		    }
		    if (childJob_tRunJob_15.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_15_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_15.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_15.getErrorCode() != null || ("failure").equals(childJob_tRunJob_15.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_15.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_15++;

/**
 * [tRunJob_15 main ] stop
 */
	
	/**
	 * [tRunJob_15 end ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 

ok_Hash.put("tRunJob_15", true);
end_Hash.put("tRunJob_15", System.currentTimeMillis());




/**
 * [tRunJob_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_15 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_15";

	

 



/**
 * [tRunJob_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_15_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_43Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_43_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_43 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_43", false);
		start_Hash.put("tRunJob_43", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_43";

	
		int tos_count_tRunJob_43 = 0;
		
    	class BytesLimit65535_tRunJob_43{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_43().limitLog4jByte();


 



/**
 * [tRunJob_43 begin ] stop
 */
	
	/**
	 * [tRunJob_43 main ] start
	 */

	

	
	
	currentComponent="tRunJob_43";

	
	java.util.List<String> paraList_tRunJob_43 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_43.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_43.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_43.add("--father_node=tRunJob_43");
	      			
	        			paraList_tRunJob_43.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_43.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_43.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_43 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_43 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_43".equals(tRunJobName_tRunJob_43) && childResumePath_tRunJob_43 != null){
		paraList_tRunJob_43.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_43.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_43");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_43 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_43.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_43.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_43.put("RunDate", context.RunDate);
			paraList_tRunJob_43.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_43.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_43.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_43 = context.propertyNames();
		while (propertyNames_tRunJob_43.hasMoreElements()) {
			String key_tRunJob_43 = (String) propertyNames_tRunJob_43.nextElement();
			Object value_tRunJob_43 = (Object) context.get(key_tRunJob_43);
			if(value_tRunJob_43!=null) {  
				paraList_tRunJob_43.add("--context_param " + key_tRunJob_43 + "=" + value_tRunJob_43);
			} else {
				paraList_tRunJob_43.add("--context_param " + key_tRunJob_43 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_43 = null;

	
	
		zipcar_marketingdw.processstaging_couponclaims_0_1.ProcessStaging_CouponClaims childJob_tRunJob_43 = new zipcar_marketingdw.processstaging_couponclaims_0_1.ProcessStaging_CouponClaims();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_43 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_43) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_43 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_43 : talendDataSources_tRunJob_43
			        .entrySet()) {
	            dataSources_tRunJob_43.put(talendDataSourceEntry_tRunJob_43.getKey(),
	                    talendDataSourceEntry_tRunJob_43.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_43.setDataSources(dataSources_tRunJob_43);
	    }
		  
			childJob_tRunJob_43.parentContextMap = parentContextMap_tRunJob_43;
		  
		
		String[][] childReturn_tRunJob_43 = childJob_tRunJob_43.runJob((String[]) paraList_tRunJob_43.toArray(new String[paraList_tRunJob_43.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_43.getErrorCode());
			
	            
	    	if(childJob_tRunJob_43.getErrorCode() == null){
				globalMap.put("tRunJob_43_CHILD_RETURN_CODE", childJob_tRunJob_43.getStatus() != null && ("failure").equals(childJob_tRunJob_43.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_43_CHILD_RETURN_CODE", childJob_tRunJob_43.getErrorCode());
		    }
		    if (childJob_tRunJob_43.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_43_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_43.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_43.getErrorCode() != null || ("failure").equals(childJob_tRunJob_43.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_43.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_43++;

/**
 * [tRunJob_43 main ] stop
 */
	
	/**
	 * [tRunJob_43 end ] start
	 */

	

	
	
	currentComponent="tRunJob_43";

	

 

ok_Hash.put("tRunJob_43", true);
end_Hash.put("tRunJob_43", System.currentTimeMillis());




/**
 * [tRunJob_43 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_43 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_43";

	

 



/**
 * [tRunJob_43 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_43_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_44Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_44_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_44 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_44", false);
		start_Hash.put("tRunJob_44", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_44";

	
		int tos_count_tRunJob_44 = 0;
		
    	class BytesLimit65535_tRunJob_44{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_44().limitLog4jByte();


 



/**
 * [tRunJob_44 begin ] stop
 */
	
	/**
	 * [tRunJob_44 main ] start
	 */

	

	
	
	currentComponent="tRunJob_44";

	
	java.util.List<String> paraList_tRunJob_44 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_44.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_44.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_44.add("--father_node=tRunJob_44");
	      			
	        			paraList_tRunJob_44.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_44.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_44.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_44 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_44 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_44".equals(tRunJobName_tRunJob_44) && childResumePath_tRunJob_44 != null){
		paraList_tRunJob_44.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_44.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_44");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_44 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_44.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_44.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_44.put("RunDate", context.RunDate);
			paraList_tRunJob_44.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_44.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_44.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_44 = context.propertyNames();
		while (propertyNames_tRunJob_44.hasMoreElements()) {
			String key_tRunJob_44 = (String) propertyNames_tRunJob_44.nextElement();
			Object value_tRunJob_44 = (Object) context.get(key_tRunJob_44);
			if(value_tRunJob_44!=null) {  
				paraList_tRunJob_44.add("--context_param " + key_tRunJob_44 + "=" + value_tRunJob_44);
			} else {
				paraList_tRunJob_44.add("--context_param " + key_tRunJob_44 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_44 = null;

	
	
		zipcar_marketingdw.processstaging_coupons_0_1.ProcessStaging_Coupons childJob_tRunJob_44 = new zipcar_marketingdw.processstaging_coupons_0_1.ProcessStaging_Coupons();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_44 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_44) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_44 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_44 : talendDataSources_tRunJob_44
			        .entrySet()) {
	            dataSources_tRunJob_44.put(talendDataSourceEntry_tRunJob_44.getKey(),
	                    talendDataSourceEntry_tRunJob_44.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_44.setDataSources(dataSources_tRunJob_44);
	    }
		  
			childJob_tRunJob_44.parentContextMap = parentContextMap_tRunJob_44;
		  
		
		String[][] childReturn_tRunJob_44 = childJob_tRunJob_44.runJob((String[]) paraList_tRunJob_44.toArray(new String[paraList_tRunJob_44.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_44.getErrorCode());
			
	            
	    	if(childJob_tRunJob_44.getErrorCode() == null){
				globalMap.put("tRunJob_44_CHILD_RETURN_CODE", childJob_tRunJob_44.getStatus() != null && ("failure").equals(childJob_tRunJob_44.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_44_CHILD_RETURN_CODE", childJob_tRunJob_44.getErrorCode());
		    }
		    if (childJob_tRunJob_44.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_44_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_44.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_44.getErrorCode() != null || ("failure").equals(childJob_tRunJob_44.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_44.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_44++;

/**
 * [tRunJob_44 main ] stop
 */
	
	/**
	 * [tRunJob_44 end ] start
	 */

	

	
	
	currentComponent="tRunJob_44";

	

 

ok_Hash.put("tRunJob_44", true);
end_Hash.put("tRunJob_44", System.currentTimeMillis());




/**
 * [tRunJob_44 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_44 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_44";

	

 



/**
 * [tRunJob_44 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_44_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_45Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_45_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_45 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_45", false);
		start_Hash.put("tRunJob_45", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_45";

	
		int tos_count_tRunJob_45 = 0;
		
    	class BytesLimit65535_tRunJob_45{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_45().limitLog4jByte();


 



/**
 * [tRunJob_45 begin ] stop
 */
	
	/**
	 * [tRunJob_45 main ] start
	 */

	

	
	
	currentComponent="tRunJob_45";

	
	java.util.List<String> paraList_tRunJob_45 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_45.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_45.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_45.add("--father_node=tRunJob_45");
	      			
	        			paraList_tRunJob_45.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_45.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_45.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_45 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_45 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_45".equals(tRunJobName_tRunJob_45) && childResumePath_tRunJob_45 != null){
		paraList_tRunJob_45.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_45.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_45");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_45 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_45.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_45.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_45.put("RunDate", context.RunDate);
			paraList_tRunJob_45.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_45.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_45.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_45 = context.propertyNames();
		while (propertyNames_tRunJob_45.hasMoreElements()) {
			String key_tRunJob_45 = (String) propertyNames_tRunJob_45.nextElement();
			Object value_tRunJob_45 = (Object) context.get(key_tRunJob_45);
			if(value_tRunJob_45!=null) {  
				paraList_tRunJob_45.add("--context_param " + key_tRunJob_45 + "=" + value_tRunJob_45);
			} else {
				paraList_tRunJob_45.add("--context_param " + key_tRunJob_45 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_45 = null;

	
	
		zipcar_marketingdw.processstaging_transactions_0_1.ProcessStaging_Transactions childJob_tRunJob_45 = new zipcar_marketingdw.processstaging_transactions_0_1.ProcessStaging_Transactions();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_45 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_45) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_45 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_45 : talendDataSources_tRunJob_45
			        .entrySet()) {
	            dataSources_tRunJob_45.put(talendDataSourceEntry_tRunJob_45.getKey(),
	                    talendDataSourceEntry_tRunJob_45.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_45.setDataSources(dataSources_tRunJob_45);
	    }
		  
			childJob_tRunJob_45.parentContextMap = parentContextMap_tRunJob_45;
		  
		
		String[][] childReturn_tRunJob_45 = childJob_tRunJob_45.runJob((String[]) paraList_tRunJob_45.toArray(new String[paraList_tRunJob_45.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_45.getErrorCode());
			
	            
	    	if(childJob_tRunJob_45.getErrorCode() == null){
				globalMap.put("tRunJob_45_CHILD_RETURN_CODE", childJob_tRunJob_45.getStatus() != null && ("failure").equals(childJob_tRunJob_45.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_45_CHILD_RETURN_CODE", childJob_tRunJob_45.getErrorCode());
		    }
		    if (childJob_tRunJob_45.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_45_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_45.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_45.getErrorCode() != null || ("failure").equals(childJob_tRunJob_45.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_45.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_45++;

/**
 * [tRunJob_45 main ] stop
 */
	
	/**
	 * [tRunJob_45 end ] start
	 */

	

	
	
	currentComponent="tRunJob_45";

	

 

ok_Hash.put("tRunJob_45", true);
end_Hash.put("tRunJob_45", System.currentTimeMillis());




/**
 * [tRunJob_45 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_45 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_45";

	

 



/**
 * [tRunJob_45 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_45_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_46Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_46_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_46 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_46", false);
		start_Hash.put("tRunJob_46", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_46";

	
		int tos_count_tRunJob_46 = 0;
		
    	class BytesLimit65535_tRunJob_46{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_46().limitLog4jByte();


 



/**
 * [tRunJob_46 begin ] stop
 */
	
	/**
	 * [tRunJob_46 main ] start
	 */

	

	
	
	currentComponent="tRunJob_46";

	
	java.util.List<String> paraList_tRunJob_46 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_46.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_46.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_46.add("--father_node=tRunJob_46");
	      			
	        			paraList_tRunJob_46.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_46.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_46.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_46 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_46 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_46".equals(tRunJobName_tRunJob_46) && childResumePath_tRunJob_46 != null){
		paraList_tRunJob_46.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_46.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_46");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_46 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_46.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_46.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_46.put("RunDate", context.RunDate);
			paraList_tRunJob_46.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_46.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_46.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_46 = context.propertyNames();
		while (propertyNames_tRunJob_46.hasMoreElements()) {
			String key_tRunJob_46 = (String) propertyNames_tRunJob_46.nextElement();
			Object value_tRunJob_46 = (Object) context.get(key_tRunJob_46);
			if(value_tRunJob_46!=null) {  
				paraList_tRunJob_46.add("--context_param " + key_tRunJob_46 + "=" + value_tRunJob_46);
			} else {
				paraList_tRunJob_46.add("--context_param " + key_tRunJob_46 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_46 = null;

	
	
		zipcar_marketingdw.processstaging_locations_np_0_1.ProcessStaging_Locations_NP childJob_tRunJob_46 = new zipcar_marketingdw.processstaging_locations_np_0_1.ProcessStaging_Locations_NP();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_46 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_46) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_46 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_46 : talendDataSources_tRunJob_46
			        .entrySet()) {
	            dataSources_tRunJob_46.put(talendDataSourceEntry_tRunJob_46.getKey(),
	                    talendDataSourceEntry_tRunJob_46.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_46.setDataSources(dataSources_tRunJob_46);
	    }
		  
			childJob_tRunJob_46.parentContextMap = parentContextMap_tRunJob_46;
		  
		
		String[][] childReturn_tRunJob_46 = childJob_tRunJob_46.runJob((String[]) paraList_tRunJob_46.toArray(new String[paraList_tRunJob_46.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_46.getErrorCode());
			
	            
	    	if(childJob_tRunJob_46.getErrorCode() == null){
				globalMap.put("tRunJob_46_CHILD_RETURN_CODE", childJob_tRunJob_46.getStatus() != null && ("failure").equals(childJob_tRunJob_46.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_46_CHILD_RETURN_CODE", childJob_tRunJob_46.getErrorCode());
		    }
		    if (childJob_tRunJob_46.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_46_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_46.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_46.getErrorCode() != null || ("failure").equals(childJob_tRunJob_46.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_46.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_46++;

/**
 * [tRunJob_46 main ] stop
 */
	
	/**
	 * [tRunJob_46 end ] start
	 */

	

	
	
	currentComponent="tRunJob_46";

	

 

ok_Hash.put("tRunJob_46", true);
end_Hash.put("tRunJob_46", System.currentTimeMillis());




/**
 * [tRunJob_46 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_46 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_46";

	

 



/**
 * [tRunJob_46 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_46_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_47Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_47_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_47 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_47", false);
		start_Hash.put("tRunJob_47", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_47";

	
		int tos_count_tRunJob_47 = 0;
		
    	class BytesLimit65535_tRunJob_47{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tRunJob_47().limitLog4jByte();


 



/**
 * [tRunJob_47 begin ] stop
 */
	
	/**
	 * [tRunJob_47 main ] start
	 */

	

	
	
	currentComponent="tRunJob_47";

	
	java.util.List<String> paraList_tRunJob_47 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_47.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_47.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_47.add("--father_node=tRunJob_47");
	      			
	        			paraList_tRunJob_47.add("--context=external");
	      			
	//for feature:10589
	
		paraList_tRunJob_47.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_47.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_47 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_47 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_47".equals(tRunJobName_tRunJob_47) && childResumePath_tRunJob_47 != null){
		paraList_tRunJob_47.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_47.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_47");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_47 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_47.put("clearStagingTable", context.clearStagingTable);
			paraList_tRunJob_47.add("--context_type " + "clearStagingTable" + "=" + "id_Boolean");
		
			parentContextMap_tRunJob_47.put("RunDate", context.RunDate);
			paraList_tRunJob_47.add("--context_type " + "RunDate" + "=" + "id_Date");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_AdditionalParams", context.Redshift_Marketing_AdditionalParams);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Database", context.Redshift_Marketing_Database);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Login", context.Redshift_Marketing_Login);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Password", context.Redshift_Marketing_Password);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Port", context.Redshift_Marketing_Port);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Schema", context.Redshift_Marketing_Schema);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Marketing_Server", context.Redshift_Marketing_Server);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Marketing_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_AdditionalParams", context.Redshift_Monitoring_AdditionalParams);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Database", context.Redshift_Monitoring_Database);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Login", context.Redshift_Monitoring_Login);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Password", context.Redshift_Monitoring_Password);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Port", context.Redshift_Monitoring_Port);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Schema", context.Redshift_Monitoring_Schema);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Monitoring_Server", context.Redshift_Monitoring_Server);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Monitoring_Server" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_AdditionalParams", context.Redshift_Staging_AdditionalParams);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_AdditionalParams" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Database", context.Redshift_Staging_Database);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Database" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Login", context.Redshift_Staging_Login);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Login" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Password", context.Redshift_Staging_Password);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Port", context.Redshift_Staging_Port);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Port" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Schema", context.Redshift_Staging_Schema);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Schema" + "=" + "id_String");
		
			parentContextMap_tRunJob_47.put("Redshift_Staging_Server", context.Redshift_Staging_Server);
			paraList_tRunJob_47.add("--context_type " + "Redshift_Staging_Server" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_47 = context.propertyNames();
		while (propertyNames_tRunJob_47.hasMoreElements()) {
			String key_tRunJob_47 = (String) propertyNames_tRunJob_47.nextElement();
			Object value_tRunJob_47 = (Object) context.get(key_tRunJob_47);
			if(value_tRunJob_47!=null) {  
				paraList_tRunJob_47.add("--context_param " + key_tRunJob_47 + "=" + value_tRunJob_47);
			} else {
				paraList_tRunJob_47.add("--context_param " + key_tRunJob_47 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_47 = null;

	
	
		zipcar_marketingdw.processstaging_communities_np_0_1.ProcessStaging_Communities_NP childJob_tRunJob_47 = new zipcar_marketingdw.processstaging_communities_np_0_1.ProcessStaging_Communities_NP();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_47 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_47) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_47 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_47 : talendDataSources_tRunJob_47
			        .entrySet()) {
	            dataSources_tRunJob_47.put(talendDataSourceEntry_tRunJob_47.getKey(),
	                    talendDataSourceEntry_tRunJob_47.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_47.setDataSources(dataSources_tRunJob_47);
	    }
		  
			childJob_tRunJob_47.parentContextMap = parentContextMap_tRunJob_47;
		  
		
		String[][] childReturn_tRunJob_47 = childJob_tRunJob_47.runJob((String[]) paraList_tRunJob_47.toArray(new String[paraList_tRunJob_47.size()]));
		
	  	
				((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_47.getErrorCode());
			
	            
	    	if(childJob_tRunJob_47.getErrorCode() == null){
				globalMap.put("tRunJob_47_CHILD_RETURN_CODE", childJob_tRunJob_47.getStatus() != null && ("failure").equals(childJob_tRunJob_47.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_47_CHILD_RETURN_CODE", childJob_tRunJob_47.getErrorCode());
		    }
		    if (childJob_tRunJob_47.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_47_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_47.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_47.getErrorCode() != null || ("failure").equals(childJob_tRunJob_47.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_47.getExceptionStackTrace());
				}
			
	  	
 


	tos_count_tRunJob_47++;

/**
 * [tRunJob_47 main ] stop
 */
	
	/**
	 * [tRunJob_47 end ] start
	 */

	

	
	
	currentComponent="tRunJob_47";

	

 

ok_Hash.put("tRunJob_47", true);
end_Hash.put("tRunJob_47", System.currentTimeMillis());




/**
 * [tRunJob_47 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_47 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_47";

	

 



/**
 * [tRunJob_47 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_47_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "external";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final ProcessAllStagingTables ProcessAllStagingTablesClass = new ProcessAllStagingTables();

        int exitCode = ProcessAllStagingTablesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ProcessAllStagingTables.class.getClassLoader().getResourceAsStream("zipcar_marketingdw/processallstagingtables_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("clearStagingTable", "id_Boolean");
				
             try{
                 context.clearStagingTable=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("clearStagingTable"));
             }catch(NumberFormatException e){
                 context.clearStagingTable=null;
              }
				    context.setContextType("RunDate", "id_Date");
				
            try{
                String context_RunDate_value = context.getProperty("RunDate");
                if (context_RunDate_value == null){
                    context_RunDate_value = "";
                }
                int context_RunDate_pos = context_RunDate_value.indexOf(";");
                String context_RunDate_pattern =  "yyyy-MM-dd HH:mm:ss";
                if(context_RunDate_pos > -1){
                    context_RunDate_pattern = context_RunDate_value.substring(0, context_RunDate_pos);
                    context_RunDate_value = context_RunDate_value.substring(context_RunDate_pos + 1);
                }

                context.RunDate=(java.util.Date)(new java.text.SimpleDateFormat(context_RunDate_pattern).parse(context_RunDate_value));

            }catch(ParseException e)
            {
                context.RunDate=null;
            }
				    context.setContextType("Redshift_Marketing_AdditionalParams", "id_String");
				
                context.Redshift_Marketing_AdditionalParams=(String) context.getProperty("Redshift_Marketing_AdditionalParams");
				    context.setContextType("Redshift_Marketing_Database", "id_String");
				
                context.Redshift_Marketing_Database=(String) context.getProperty("Redshift_Marketing_Database");
				    context.setContextType("Redshift_Marketing_Login", "id_String");
				
                context.Redshift_Marketing_Login=(String) context.getProperty("Redshift_Marketing_Login");
				    context.setContextType("Redshift_Marketing_Password", "id_Password");
				
            		String pwd_Redshift_Marketing_Password_value = context.getProperty("Redshift_Marketing_Password");
            		context.Redshift_Marketing_Password = null;
            		if(pwd_Redshift_Marketing_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Marketing_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Marketing_Password = pwd_Redshift_Marketing_Password_value;
            			} else if (!pwd_Redshift_Marketing_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Marketing_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Marketing_Password_value);
            					context.put("Redshift_Marketing_Password",context.Redshift_Marketing_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Marketing_Port", "id_String");
				
                context.Redshift_Marketing_Port=(String) context.getProperty("Redshift_Marketing_Port");
				    context.setContextType("Redshift_Marketing_Schema", "id_String");
				
                context.Redshift_Marketing_Schema=(String) context.getProperty("Redshift_Marketing_Schema");
				    context.setContextType("Redshift_Marketing_Server", "id_String");
				
                context.Redshift_Marketing_Server=(String) context.getProperty("Redshift_Marketing_Server");
				    context.setContextType("Redshift_Monitoring_AdditionalParams", "id_String");
				
                context.Redshift_Monitoring_AdditionalParams=(String) context.getProperty("Redshift_Monitoring_AdditionalParams");
				    context.setContextType("Redshift_Monitoring_Database", "id_String");
				
                context.Redshift_Monitoring_Database=(String) context.getProperty("Redshift_Monitoring_Database");
				    context.setContextType("Redshift_Monitoring_Login", "id_String");
				
                context.Redshift_Monitoring_Login=(String) context.getProperty("Redshift_Monitoring_Login");
				    context.setContextType("Redshift_Monitoring_Password", "id_Password");
				
            		String pwd_Redshift_Monitoring_Password_value = context.getProperty("Redshift_Monitoring_Password");
            		context.Redshift_Monitoring_Password = null;
            		if(pwd_Redshift_Monitoring_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Monitoring_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Monitoring_Password = pwd_Redshift_Monitoring_Password_value;
            			} else if (!pwd_Redshift_Monitoring_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Monitoring_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Monitoring_Password_value);
            					context.put("Redshift_Monitoring_Password",context.Redshift_Monitoring_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Monitoring_Port", "id_String");
				
                context.Redshift_Monitoring_Port=(String) context.getProperty("Redshift_Monitoring_Port");
				    context.setContextType("Redshift_Monitoring_Schema", "id_String");
				
                context.Redshift_Monitoring_Schema=(String) context.getProperty("Redshift_Monitoring_Schema");
				    context.setContextType("Redshift_Monitoring_Server", "id_String");
				
                context.Redshift_Monitoring_Server=(String) context.getProperty("Redshift_Monitoring_Server");
				    context.setContextType("Redshift_Staging_AdditionalParams", "id_String");
				
                context.Redshift_Staging_AdditionalParams=(String) context.getProperty("Redshift_Staging_AdditionalParams");
				    context.setContextType("Redshift_Staging_Database", "id_String");
				
                context.Redshift_Staging_Database=(String) context.getProperty("Redshift_Staging_Database");
				    context.setContextType("Redshift_Staging_Login", "id_String");
				
                context.Redshift_Staging_Login=(String) context.getProperty("Redshift_Staging_Login");
				    context.setContextType("Redshift_Staging_Password", "id_Password");
				
            		String pwd_Redshift_Staging_Password_value = context.getProperty("Redshift_Staging_Password");
            		context.Redshift_Staging_Password = null;
            		if(pwd_Redshift_Staging_Password_value!=null) {
            			if(context_param.containsKey("Redshift_Staging_Password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.Redshift_Staging_Password = pwd_Redshift_Staging_Password_value;
            			} else if (!pwd_Redshift_Staging_Password_value.isEmpty()) {
            				try {
            					context.Redshift_Staging_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Redshift_Staging_Password_value);
            					context.put("Redshift_Staging_Password",context.Redshift_Staging_Password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("Redshift_Staging_Port", "id_String");
				
                context.Redshift_Staging_Port=(String) context.getProperty("Redshift_Staging_Port");
				    context.setContextType("Redshift_Staging_Schema", "id_String");
				
                context.Redshift_Staging_Schema=(String) context.getProperty("Redshift_Staging_Schema");
				    context.setContextType("Redshift_Staging_Server", "id_String");
				
                context.Redshift_Staging_Server=(String) context.getProperty("Redshift_Staging_Server");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("clearStagingTable")) {
                context.clearStagingTable = (Boolean) parentContextMap.get("clearStagingTable");
            }if (parentContextMap.containsKey("RunDate")) {
                context.RunDate = (java.util.Date) parentContextMap.get("RunDate");
            }if (parentContextMap.containsKey("Redshift_Marketing_AdditionalParams")) {
                context.Redshift_Marketing_AdditionalParams = (String) parentContextMap.get("Redshift_Marketing_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Marketing_Database")) {
                context.Redshift_Marketing_Database = (String) parentContextMap.get("Redshift_Marketing_Database");
            }if (parentContextMap.containsKey("Redshift_Marketing_Login")) {
                context.Redshift_Marketing_Login = (String) parentContextMap.get("Redshift_Marketing_Login");
            }if (parentContextMap.containsKey("Redshift_Marketing_Password")) {
                context.Redshift_Marketing_Password = (java.lang.String) parentContextMap.get("Redshift_Marketing_Password");
            }if (parentContextMap.containsKey("Redshift_Marketing_Port")) {
                context.Redshift_Marketing_Port = (String) parentContextMap.get("Redshift_Marketing_Port");
            }if (parentContextMap.containsKey("Redshift_Marketing_Schema")) {
                context.Redshift_Marketing_Schema = (String) parentContextMap.get("Redshift_Marketing_Schema");
            }if (parentContextMap.containsKey("Redshift_Marketing_Server")) {
                context.Redshift_Marketing_Server = (String) parentContextMap.get("Redshift_Marketing_Server");
            }if (parentContextMap.containsKey("Redshift_Monitoring_AdditionalParams")) {
                context.Redshift_Monitoring_AdditionalParams = (String) parentContextMap.get("Redshift_Monitoring_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Database")) {
                context.Redshift_Monitoring_Database = (String) parentContextMap.get("Redshift_Monitoring_Database");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Login")) {
                context.Redshift_Monitoring_Login = (String) parentContextMap.get("Redshift_Monitoring_Login");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Password")) {
                context.Redshift_Monitoring_Password = (java.lang.String) parentContextMap.get("Redshift_Monitoring_Password");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Port")) {
                context.Redshift_Monitoring_Port = (String) parentContextMap.get("Redshift_Monitoring_Port");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Schema")) {
                context.Redshift_Monitoring_Schema = (String) parentContextMap.get("Redshift_Monitoring_Schema");
            }if (parentContextMap.containsKey("Redshift_Monitoring_Server")) {
                context.Redshift_Monitoring_Server = (String) parentContextMap.get("Redshift_Monitoring_Server");
            }if (parentContextMap.containsKey("Redshift_Staging_AdditionalParams")) {
                context.Redshift_Staging_AdditionalParams = (String) parentContextMap.get("Redshift_Staging_AdditionalParams");
            }if (parentContextMap.containsKey("Redshift_Staging_Database")) {
                context.Redshift_Staging_Database = (String) parentContextMap.get("Redshift_Staging_Database");
            }if (parentContextMap.containsKey("Redshift_Staging_Login")) {
                context.Redshift_Staging_Login = (String) parentContextMap.get("Redshift_Staging_Login");
            }if (parentContextMap.containsKey("Redshift_Staging_Password")) {
                context.Redshift_Staging_Password = (java.lang.String) parentContextMap.get("Redshift_Staging_Password");
            }if (parentContextMap.containsKey("Redshift_Staging_Port")) {
                context.Redshift_Staging_Port = (String) parentContextMap.get("Redshift_Staging_Port");
            }if (parentContextMap.containsKey("Redshift_Staging_Schema")) {
                context.Redshift_Staging_Schema = (String) parentContextMap.get("Redshift_Staging_Schema");
            }if (parentContextMap.containsKey("Redshift_Staging_Server")) {
                context.Redshift_Staging_Server = (String) parentContextMap.get("Redshift_Staging_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Redshift_Marketing_Password");
			parametersToEncrypt.add("Redshift_Monitoring_Password");
			parametersToEncrypt.add("Redshift_Staging_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}


        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

e_tRunJob_1.printStackTrace();

}catch (java.lang.Error e_tRunJob_1) {
globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

e_tRunJob_2.printStackTrace();

}catch (java.lang.Error e_tRunJob_2) {
globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_3) {
globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);

e_tRunJob_3.printStackTrace();

}catch (java.lang.Error e_tRunJob_3) {
globalMap.put("tRunJob_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_4) {
globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);

e_tRunJob_4.printStackTrace();

}catch (java.lang.Error e_tRunJob_4) {
globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_7Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_7) {
globalMap.put("tRunJob_7_SUBPROCESS_STATE", -1);

e_tRunJob_7.printStackTrace();

}catch (java.lang.Error e_tRunJob_7) {
globalMap.put("tRunJob_7_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_7;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_8Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_8) {
globalMap.put("tRunJob_8_SUBPROCESS_STATE", -1);

e_tRunJob_8.printStackTrace();

}catch (java.lang.Error e_tRunJob_8) {
globalMap.put("tRunJob_8_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_8;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_9Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_9) {
globalMap.put("tRunJob_9_SUBPROCESS_STATE", -1);

e_tRunJob_9.printStackTrace();

}catch (java.lang.Error e_tRunJob_9) {
globalMap.put("tRunJob_9_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_9;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_11Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_11) {
globalMap.put("tRunJob_11_SUBPROCESS_STATE", -1);

e_tRunJob_11.printStackTrace();

}catch (java.lang.Error e_tRunJob_11) {
globalMap.put("tRunJob_11_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_11;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_12Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_12) {
globalMap.put("tRunJob_12_SUBPROCESS_STATE", -1);

e_tRunJob_12.printStackTrace();

}catch (java.lang.Error e_tRunJob_12) {
globalMap.put("tRunJob_12_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_12;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_13Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_13) {
globalMap.put("tRunJob_13_SUBPROCESS_STATE", -1);

e_tRunJob_13.printStackTrace();

}catch (java.lang.Error e_tRunJob_13) {
globalMap.put("tRunJob_13_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_13;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_14Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_14) {
globalMap.put("tRunJob_14_SUBPROCESS_STATE", -1);

e_tRunJob_14.printStackTrace();

}catch (java.lang.Error e_tRunJob_14) {
globalMap.put("tRunJob_14_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_14;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_16Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_16) {
globalMap.put("tRunJob_16_SUBPROCESS_STATE", -1);

e_tRunJob_16.printStackTrace();

}catch (java.lang.Error e_tRunJob_16) {
globalMap.put("tRunJob_16_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_16;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_17Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_17) {
globalMap.put("tRunJob_17_SUBPROCESS_STATE", -1);

e_tRunJob_17.printStackTrace();

}catch (java.lang.Error e_tRunJob_17) {
globalMap.put("tRunJob_17_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_17;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_18Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_18) {
globalMap.put("tRunJob_18_SUBPROCESS_STATE", -1);

e_tRunJob_18.printStackTrace();

}catch (java.lang.Error e_tRunJob_18) {
globalMap.put("tRunJob_18_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_18;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_19Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_19) {
globalMap.put("tRunJob_19_SUBPROCESS_STATE", -1);

e_tRunJob_19.printStackTrace();

}catch (java.lang.Error e_tRunJob_19) {
globalMap.put("tRunJob_19_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_19;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_20Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_20) {
globalMap.put("tRunJob_20_SUBPROCESS_STATE", -1);

e_tRunJob_20.printStackTrace();

}catch (java.lang.Error e_tRunJob_20) {
globalMap.put("tRunJob_20_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_20;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_21Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_21) {
globalMap.put("tRunJob_21_SUBPROCESS_STATE", -1);

e_tRunJob_21.printStackTrace();

}catch (java.lang.Error e_tRunJob_21) {
globalMap.put("tRunJob_21_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_21;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_22Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_22) {
globalMap.put("tRunJob_22_SUBPROCESS_STATE", -1);

e_tRunJob_22.printStackTrace();

}catch (java.lang.Error e_tRunJob_22) {
globalMap.put("tRunJob_22_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_22;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_23Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_23) {
globalMap.put("tRunJob_23_SUBPROCESS_STATE", -1);

e_tRunJob_23.printStackTrace();

}catch (java.lang.Error e_tRunJob_23) {
globalMap.put("tRunJob_23_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_23;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_24Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_24) {
globalMap.put("tRunJob_24_SUBPROCESS_STATE", -1);

e_tRunJob_24.printStackTrace();

}catch (java.lang.Error e_tRunJob_24) {
globalMap.put("tRunJob_24_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_24;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_25Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_25) {
globalMap.put("tRunJob_25_SUBPROCESS_STATE", -1);

e_tRunJob_25.printStackTrace();

}catch (java.lang.Error e_tRunJob_25) {
globalMap.put("tRunJob_25_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_25;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_26Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_26) {
globalMap.put("tRunJob_26_SUBPROCESS_STATE", -1);

e_tRunJob_26.printStackTrace();

}catch (java.lang.Error e_tRunJob_26) {
globalMap.put("tRunJob_26_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_26;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_27Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_27) {
globalMap.put("tRunJob_27_SUBPROCESS_STATE", -1);

e_tRunJob_27.printStackTrace();

}catch (java.lang.Error e_tRunJob_27) {
globalMap.put("tRunJob_27_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_27;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_28Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_28) {
globalMap.put("tRunJob_28_SUBPROCESS_STATE", -1);

e_tRunJob_28.printStackTrace();

}catch (java.lang.Error e_tRunJob_28) {
globalMap.put("tRunJob_28_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_28;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_29Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_29) {
globalMap.put("tRunJob_29_SUBPROCESS_STATE", -1);

e_tRunJob_29.printStackTrace();

}catch (java.lang.Error e_tRunJob_29) {
globalMap.put("tRunJob_29_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_29;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_30Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_30) {
globalMap.put("tRunJob_30_SUBPROCESS_STATE", -1);

e_tRunJob_30.printStackTrace();

}catch (java.lang.Error e_tRunJob_30) {
globalMap.put("tRunJob_30_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_30;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_31Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_31) {
globalMap.put("tRunJob_31_SUBPROCESS_STATE", -1);

e_tRunJob_31.printStackTrace();

}catch (java.lang.Error e_tRunJob_31) {
globalMap.put("tRunJob_31_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_31;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_32Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_32) {
globalMap.put("tRunJob_32_SUBPROCESS_STATE", -1);

e_tRunJob_32.printStackTrace();

}catch (java.lang.Error e_tRunJob_32) {
globalMap.put("tRunJob_32_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_32;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_33Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_33) {
globalMap.put("tRunJob_33_SUBPROCESS_STATE", -1);

e_tRunJob_33.printStackTrace();

}catch (java.lang.Error e_tRunJob_33) {
globalMap.put("tRunJob_33_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_33;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_34Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_34) {
globalMap.put("tRunJob_34_SUBPROCESS_STATE", -1);

e_tRunJob_34.printStackTrace();

}catch (java.lang.Error e_tRunJob_34) {
globalMap.put("tRunJob_34_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_34;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_35Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_35) {
globalMap.put("tRunJob_35_SUBPROCESS_STATE", -1);

e_tRunJob_35.printStackTrace();

}catch (java.lang.Error e_tRunJob_35) {
globalMap.put("tRunJob_35_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_35;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_36Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_36) {
globalMap.put("tRunJob_36_SUBPROCESS_STATE", -1);

e_tRunJob_36.printStackTrace();

}catch (java.lang.Error e_tRunJob_36) {
globalMap.put("tRunJob_36_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_36;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_37Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_37) {
globalMap.put("tRunJob_37_SUBPROCESS_STATE", -1);

e_tRunJob_37.printStackTrace();

}catch (java.lang.Error e_tRunJob_37) {
globalMap.put("tRunJob_37_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_37;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_38Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_38) {
globalMap.put("tRunJob_38_SUBPROCESS_STATE", -1);

e_tRunJob_38.printStackTrace();

}catch (java.lang.Error e_tRunJob_38) {
globalMap.put("tRunJob_38_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_38;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_39Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_39) {
globalMap.put("tRunJob_39_SUBPROCESS_STATE", -1);

e_tRunJob_39.printStackTrace();

}catch (java.lang.Error e_tRunJob_39) {
globalMap.put("tRunJob_39_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_39;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_40Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_40) {
globalMap.put("tRunJob_40_SUBPROCESS_STATE", -1);

e_tRunJob_40.printStackTrace();

}catch (java.lang.Error e_tRunJob_40) {
globalMap.put("tRunJob_40_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_40;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_42Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_42) {
globalMap.put("tRunJob_42_SUBPROCESS_STATE", -1);

e_tRunJob_42.printStackTrace();

}catch (java.lang.Error e_tRunJob_42) {
globalMap.put("tRunJob_42_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_42;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_43Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_43) {
globalMap.put("tRunJob_43_SUBPROCESS_STATE", -1);

e_tRunJob_43.printStackTrace();

}catch (java.lang.Error e_tRunJob_43) {
globalMap.put("tRunJob_43_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_43;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_44Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_44) {
globalMap.put("tRunJob_44_SUBPROCESS_STATE", -1);

e_tRunJob_44.printStackTrace();

}catch (java.lang.Error e_tRunJob_44) {
globalMap.put("tRunJob_44_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_44;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_45Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_45) {
globalMap.put("tRunJob_45_SUBPROCESS_STATE", -1);

e_tRunJob_45.printStackTrace();

}catch (java.lang.Error e_tRunJob_45) {
globalMap.put("tRunJob_45_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_45;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_46Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_46) {
globalMap.put("tRunJob_46_SUBPROCESS_STATE", -1);

e_tRunJob_46.printStackTrace();

}catch (java.lang.Error e_tRunJob_46) {
globalMap.put("tRunJob_46_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_46;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tRunJob_47Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tRunJob_47) {
globalMap.put("tRunJob_47_SUBPROCESS_STATE", -1);

e_tRunJob_47.printStackTrace();

}catch (java.lang.Error e_tRunJob_47) {
globalMap.put("tRunJob_47_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tRunJob_47;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ProcessAllStagingTables");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     706692 characters generated by Talend Open Studio for Data Integration 
 *     on the October 16, 2018 5:21:53 PM CDT
 ************************************************************************************************/