package org.talend.designer.codegen.translators.file.input;

import org.talend.core.model.process.INode;
import org.talend.core.model.process.ElementParameterParser;
import org.talend.core.model.metadata.IMetadataTable;
import org.talend.core.model.metadata.IMetadataColumn;
import org.talend.core.model.process.IConnection;
import org.talend.core.model.process.IConnectionCategory;
import org.talend.designer.codegen.config.CodeGeneratorArgument;
import org.talend.core.model.metadata.types.JavaTypesManager;
import org.talend.core.model.metadata.types.JavaType;
import java.util.List;
import java.util.Map;
import java.io.ByteArrayInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;

public class TFileInputCSVFilterBeginJava
{
  protected static String nl;
  public static synchronized TFileInputCSVFilterBeginJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TFileInputCSVFilterBeginJava result = new TFileInputCSVFilterBeginJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "String lookupValue";
  protected final String TEXT_2 = " = ";
  protected final String TEXT_3 = ";" + NL + "String lookupColumn";
  protected final String TEXT_4 = " = ";
  protected final String TEXT_5 = ";" + NL + "int headerRowNumber";
  protected final String TEXT_6 = " = ";
  protected final String TEXT_7 = ";" + NL + "" + NL + "com.csvreader.CsvReader csvReader";
  protected final String TEXT_8 = " = null;" + NL + "java.io.ByteArrayOutputStream out";
  protected final String TEXT_9 = " = new java.io.ByteArrayOutputStream();" + NL + "java.io.BufferedReader reader";
  protected final String TEXT_10 = " = new java.io.BufferedReader(new java.io.FileReader(";
  protected final String TEXT_11 = "));" + NL + "  " + NL + "if(headerRowNumber";
  protected final String TEXT_12 = " > 0) { " + NL + "  int rowNumber";
  protected final String TEXT_13 = " = 0;" + NL + "  String line";
  protected final String TEXT_14 = " = null;" + NL + "  while ((line";
  protected final String TEXT_15 = " = reader";
  protected final String TEXT_16 = ".readLine()) != null) {" + NL + "    if(rowNumber";
  protected final String TEXT_17 = " >= headerRowNumber";
  protected final String TEXT_18 = ") {" + NL + "      out";
  protected final String TEXT_19 = ".write((line";
  protected final String TEXT_20 = " + \"\\n\").getBytes());" + NL + "    }" + NL + "    rowNumber";
  protected final String TEXT_21 = "++;" + NL + "  }" + NL + "  java.io.InputStream is";
  protected final String TEXT_22 = " = new java.io.ByteArrayInputStream(out";
  protected final String TEXT_23 = ".toByteArray());" + NL + "  csvReader";
  protected final String TEXT_24 = " = new com.csvreader.CsvReader(new java.io.InputStreamReader(is";
  protected final String TEXT_25 = "));" + NL + "} else {" + NL + "  csvReader";
  protected final String TEXT_26 = " = new com.csvreader.CsvReader(";
  protected final String TEXT_27 = ");" + NL + "}" + NL + "" + NL + "csvReader";
  protected final String TEXT_28 = ".setDelimiter(";
  protected final String TEXT_29 = ".charAt(0));" + NL + "csvReader";
  protected final String TEXT_30 = ".readHeaders();" + NL + "" + NL + "char textQualifier";
  protected final String TEXT_31 = " = csvReader";
  protected final String TEXT_32 = ".getTextQualifier();" + NL + "String[] headers";
  protected final String TEXT_33 = " = csvReader";
  protected final String TEXT_34 = ".getHeaders();" + NL + "StringBuffer sb";
  protected final String TEXT_35 = " = new StringBuffer();" + NL + "for(int i";
  protected final String TEXT_36 = " = 0; i";
  protected final String TEXT_37 = " < headers";
  protected final String TEXT_38 = ".length; i";
  protected final String TEXT_39 = "++ ) {" + NL + "  String header";
  protected final String TEXT_40 = " = headers";
  protected final String TEXT_41 = "[i";
  protected final String TEXT_42 = "];" + NL + "  sb";
  protected final String TEXT_43 = ".append(textQualifier";
  protected final String TEXT_44 = " + header";
  protected final String TEXT_45 = " + textQualifier";
  protected final String TEXT_46 = ");" + NL + "  if( i";
  protected final String TEXT_47 = " != headers";
  protected final String TEXT_48 = ".length - 1 ) {" + NL + "    sb";
  protected final String TEXT_49 = ".append(";
  protected final String TEXT_50 = ");" + NL + "  }" + NL + "}" + NL + "  " + NL + "int nb_line_";
  protected final String TEXT_51 = " = 0;" + NL + "int nb_line_ok_";
  protected final String TEXT_52 = " = 0;" + NL + "int nb_line_reject_";
  protected final String TEXT_53 = " = 0;" + NL + "" + NL + "boolean isRecordAvailable";
  protected final String TEXT_54 = " = true;" + NL + "while (isRecordAvailable";
  protected final String TEXT_55 = ") { //Begin of Main Loop" + NL + NL;
  protected final String TEXT_56 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
     
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    
    String delimiter = ElementParameterParser.getValue(node, "__DELIMITER__");
	String inputFile = ElementParameterParser.getValue(node, "__INPUT_FILE__");
	String lookupValue = ElementParameterParser.getValue(node, "__LOOKUP_VALUE__");
	String lookupColumn = ElementParameterParser.getValue(node, "__LOOKUP_COLUMN__");
	Object headerRowNumber = ElementParameterParser.getObjectValue(node, "__HEADER_ROW_NUMBER__");

    stringBuffer.append(TEXT_1);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_2);
    stringBuffer.append(lookupValue );
    stringBuffer.append(TEXT_3);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_4);
    stringBuffer.append(lookupColumn );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_6);
    stringBuffer.append(headerRowNumber );
    stringBuffer.append(TEXT_7);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_8);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_9);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_10);
    stringBuffer.append(inputFile );
    stringBuffer.append(TEXT_11);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_12);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_13);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_14);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_15);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_17);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_18);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_19);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_20);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_22);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_23);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_24);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_26);
    stringBuffer.append(inputFile );
    stringBuffer.append(TEXT_27);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_28);
    stringBuffer.append(delimiter );
    stringBuffer.append(TEXT_29);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_30);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_32);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_33);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_34);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_37);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_40);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_41);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_42);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_45);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_46);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_47);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_48);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_49);
    stringBuffer.append(delimiter );
    stringBuffer.append(TEXT_50);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_51);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_52);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_53);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_55);
    stringBuffer.append(TEXT_56);
    return stringBuffer.toString();
  }
}
